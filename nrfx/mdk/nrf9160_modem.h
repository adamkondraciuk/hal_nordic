/*
 * Copyright (c) 2010 - 2020, Nordic Semiconductor ASA
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form, except as embedded into a Nordic
 * Semiconductor ASA integrated circuit in a product or a software update for
 * such product, must reproduce the above copyright notice, this list of
 * conditions and the following disclaimer in the documentation and/or other
 * materials provided with the distribution.
 * 
 * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 * 
 * 4. This software, with or without modification, must only be used with a
 * Nordic Semiconductor ASA integrated circuit.
 * 
 * 5. Any software provided in binary form under this license must not be reverse
 * engineered, decompiled, modified and/or disassembled.
 * 
 * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @file     nrf9160_modem.h
 * @brief    CMSIS HeaderFile
 * @version  1
 * @date     25. May 2020
 * @note     Generated by SVDConv V3.3.35 on Monday, 25.05.2020 13:33:17
 *           from File 'nrf9160_modem.svd',
 *           last modified on Monday, 25.05.2020 11:33:02
 */



/** @addtogroup Nordic Semiconductor
  * @{
  */


/** @addtogroup nrf9160_modem
  * @{
  */


#ifndef NRF9160_MODEM_H
#define NRF9160_MODEM_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =======================================  nrf9160_modem Specific Interrupt Numbers  ======================================== */
  MWU_IRQn                  =   1,              /*!< 1  MWU                                                                    */
  MCPLL_IRQn                =  16,              /*!< 16 MCPLL                                                                  */
  RCOSC32K_IRQn             =  18,              /*!< 18 RCOSC32K                                                               */
  CLOCK_POWER_IRQn          =  21,              /*!< 21 CLOCK_POWER                                                            */
  UARTE_IRQn                =  35,              /*!< 35 UARTE                                                                  */
  TIMER10_IRQn              =  36,              /*!< 36 TIMER10                                                                */
  TIMER11_IRQn              =  37,              /*!< 37 TIMER11                                                                */
  RTC_IRQn                  =  38,              /*!< 38 RTC                                                                    */
  LWDT_IRQn                 =  39,              /*!< 39 LWDT                                                                   */
  SWDT_IRQn                 =  40,              /*!< 40 SWDT                                                                   */
  RNG_IRQn                  =  41,              /*!< 41 RNG                                                                    */
  SIMIF_IRQn                =  42,              /*!< 42 SIMIF                                                                  */
  M2M0_IRQn                 =  46,              /*!< 46 M2M0                                                                   */
  M2M1_IRQn                 =  47,              /*!< 47 M2M1                                                                   */
  GPIOTE0_IRQn              =  48,              /*!< 48 GPIOTE0                                                                */
  GPIOTE1_IRQn              =  49,              /*!< 49 GPIOTE1                                                                */
  GPIOTE2_IRQn              =  55,              /*!< 55 GPIOTE2                                                                */
  TEMP_IRQn                 =  57,              /*!< 57 TEMP                                                                   */
  LFCLKCALIBMEAS_IRQn       =  59,              /*!< 59 LFCLKCALIBMEAS                                                         */
  TWIM_IRQn                 =  60,              /*!< 60 TWIM                                                                   */
  AESL2_IRQn                =  66,              /*!< 66 AESL2                                                                  */
  SNOW_IRQn                 =  67,              /*!< 67 SNOW                                                                   */
  ZUC_IRQn                  =  68,              /*!< 68 ZUC                                                                    */
  SHA_IRQn                  =  80,              /*!< 80 SHA                                                                    */
  TLSAES_IRQn               =  81,              /*!< 81 TLSAES                                                                 */
  DESCIPHER_IRQn            =  82,              /*!< 82 DESCIPHER                                                              */
  IPC0_IRQn                 =  83,              /*!< 83 IPC0                                                                   */
  IPC1_IRQn                 =  84,              /*!< 84 IPC1                                                                   */
  IPC2_IRQn                 =  85,              /*!< 85 IPC2                                                                   */
  TIMER00_IRQn              =  86,              /*!< 86 TIMER00                                                                */
  TIMER01_IRQn              =  87,              /*!< 87 TIMER01                                                                */
  KMU_IRQn                  =  96               /*!< 96 KMU                                                                    */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM4_REV                 0x0001U       /*!< CM4 Core Revision                                                         */
#define __DSP_PRESENT                  1        /*!< DSP present or not                                                        */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  1        /*!< FPU present                                                               */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm4.h"                           /*!< ARM Cortex-M4 processor and core peripherals                              */
#include "system_nrf9160_modem.h"               /*!< nrf9160_modem System                                                      */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief FICR_INFO [INFO] (Device info)
  */
typedef struct {
  __IM  uint32_t  CONFIGID;                     /*!< (@ 0x00000000) Configuration identifier                                   */
  __IM  uint32_t  DEVICEID[2];                  /*!< (@ 0x00000004) Description collection: Device identifier                  */
  __IM  uint32_t  PART;                         /*!< (@ 0x0000000C) Part code                                                  */
  __IM  uint32_t  VARIANT;                      /*!< (@ 0x00000010) Part Variant, Hardware version and Production
                                                                    configuration                                              */
  __IM  uint32_t  PACKAGE;                      /*!< (@ 0x00000014) Package option                                             */
  __IM  uint32_t  RAM;                          /*!< (@ 0x00000018) RAM variant                                                */
  __IM  uint32_t  FLASH;                        /*!< (@ 0x0000001C) Flash variant                                              */
  __IM  uint32_t  CODEPAGESIZE;                 /*!< (@ 0x00000020) Code memory page size                                      */
  __IM  uint32_t  CODESIZE;                     /*!< (@ 0x00000024) Code memory size                                           */
  __IM  uint32_t  DEVICETYPE;                   /*!< (@ 0x00000028) Device type                                                */
} FICR_INFO_Type;                               /*!< Size = 44 (0x2c)                                                          */


/**
  * @brief AMLI_RAMPRI [RAMPRI] (RAM configurable priority configuration structure)
  */
typedef struct {
  __IOM uint32_t  CPU;                          /*!< (@ 0x00000000) AHB bus master priority register for CPU                   */
  __IOM uint32_t  EXTRAM[1];                    /*!< (@ 0x00000004) Description collection: AHB bus master priority
                                                                    register for external RAM slave port (EXTRAMs)             */
} AMLI_RAMPRI_Type;                             /*!< Size = 8 (0x8)                                                            */


/**
  * @brief DCNF_EXTPERI0 [EXTPERI0] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  PROTECT[2];                   /*!< (@ 0x00000000) Description collection: Control access for Master
                                                                    connected to AMLI master port EXTPERI[n]                   */
} DCNF_EXTPERI0_Type;                           /*!< Size = 8 (0x8)                                                            */


/**
  * @brief DCNF_EXTRAM [EXTRAM] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  PROTECT[2];                   /*!< (@ 0x00000000) Description collection: Control access from Master
                                                                    connected to AMLI master port EXTRAM[n]                    */
} DCNF_EXTRAM_Type;                             /*!< Size = 8 (0x8)                                                            */


/**
  * @brief DCNF_EXTCODE [EXTCODE] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  PROTECT;                      /*!< (@ 0x00000000) Description cluster: Control access from Master
                                                                    connected to AMLI master port EXTCODE[n]                   */
} DCNF_EXTCODE_Type;                            /*!< Size = 4 (0x4)                                                            */


/**
  * @brief TRACEANDDEBUG_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  TRACECLK;                     /*!< (@ 0x00000000) Pin number configuration for TraceClk signal               */
  __IOM uint32_t  TRACEDATA0;                   /*!< (@ 0x00000004) Pin number configuration for TraceData0 signal             */
  __IOM uint32_t  TRACEDATA1;                   /*!< (@ 0x00000008) Pin number configuration for TraceData1 signal             */
  __IOM uint32_t  TRACEDATA2;                   /*!< (@ 0x0000000C) Pin number configuration for TraceData2 signal             */
  __IOM uint32_t  TRACEDATA3;                   /*!< (@ 0x00000010) Pin number configuration for TraceData3 signal             */
} TRACEANDDEBUG_PSEL_Type;                      /*!< Size = 20 (0x14)                                                          */


/**
  * @brief MWU_EVENTS_REGION [EVENTS_REGION] (Peripheral events.)
  */
typedef struct {
  __IOM uint32_t  WA;                           /*!< (@ 0x00000000) Description cluster: Write access to region n
                                                                    detected                                                   */
  __IOM uint32_t  RA;                           /*!< (@ 0x00000004) Description cluster: Read access to region n
                                                                    detected                                                   */
} MWU_EVENTS_REGION_Type;                       /*!< Size = 8 (0x8)                                                            */


/**
  * @brief MWU_REGION [REGION] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  START;                        /*!< (@ 0x00000000) Description cluster: Start address for region
                                                                    n                                                          */
  __IOM uint32_t  END;                          /*!< (@ 0x00000004) Description cluster: End address of region n               */
  __IM  uint32_t  RESERVED[2];
} MWU_REGION_Type;                              /*!< Size = 16 (0x10)                                                          */


/**
  * @brief MCPLL_CONTROL [CONTROL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  INT;                          /*!< (@ 0x00000000) Integer part of the control word.                          */
  __IOM uint32_t  FRAC;                         /*!< (@ 0x00000004) Fractional part of the control word.                       */
} MCPLL_CONTROL_Type;                           /*!< Size = 8 (0x8)                                                            */


/**
  * @brief MCPLL_OVERRIDE [OVERRIDE] (Override mechanism)
  */
typedef struct {
  __IOM uint32_t  MCPLL;                        /*!< (@ 0x00000000) Override for MCPLL power switch                            */
  __IOM uint32_t  MCPLLBUF;                     /*!< (@ 0x00000004) Override for MCPLLBUF power switch                         */
  __IOM uint32_t  PWRUP;                        /*!< (@ 0x00000008) Override for power up                                      */
} MCPLL_OVERRIDE_Type;                          /*!< Size = 12 (0xc)                                                           */


/**
  * @brief POWER_DSP [DSP] (Control register for DSP)
  */
typedef struct {
  __IOM uint32_t  RESET;                        /*!< (@ 0x00000000) Reset DSP subsystem                                        */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  FORCEON;                      /*!< (@ 0x00000008) Force on power and clock in DSP subsystem                  */
  __IOM uint32_t  HALT;                         /*!< (@ 0x0000000C) Halt DSP subsystem                                         */
} POWER_DSP_Type;                               /*!< Size = 16 (0x10)                                                          */


/**
  * @brief POWER_LYNX [LYNX] (Control register for Lynx RF subsystem)
  */
typedef struct {
  __IOM uint32_t  RESET;                        /*!< (@ 0x00000000) Reset Lynx RF subsystem                                    */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  FORCEON;                      /*!< (@ 0x00000008) Force on Lynx RF subsystem                                 */
} POWER_LYNX_Type;                              /*!< Size = 12 (0xc)                                                           */


/**
  * @brief UARTE_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  RTS;                          /*!< (@ 0x00000000) Pin select for RTS signal                                  */
  __IOM uint32_t  TXD;                          /*!< (@ 0x00000004) Pin select for TXD signal                                  */
  __IOM uint32_t  CTS;                          /*!< (@ 0x00000008) Pin select for CTS signal                                  */
  __IOM uint32_t  RXD;                          /*!< (@ 0x0000000C) Pin select for RXD signal                                  */
} UARTE_PSEL_Type;                              /*!< Size = 16 (0x10)                                                          */


/**
  * @brief UARTE_RXD [RXD] (RXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;                          /*!< (@ 0x00000000) Data pointer                                               */
  __IOM uint32_t  MAXCNT;                       /*!< (@ 0x00000004) Maximum number of bytes in receive buffer                  */
  __IM  uint32_t  AMOUNT;                       /*!< (@ 0x00000008) Number of bytes transferred in the last transaction        */
} UARTE_RXD_Type;                               /*!< Size = 12 (0xc)                                                           */


/**
  * @brief UARTE_TXD [TXD] (TXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;                          /*!< (@ 0x00000000) Data pointer                                               */
  __IOM uint32_t  MAXCNT;                       /*!< (@ 0x00000004) Maximum number of bytes in transmit buffer                 */
  __IM  uint32_t  AMOUNT;                       /*!< (@ 0x00000008) Number of bytes transferred in the last transaction        */
} UARTE_TXD_Type;                               /*!< Size = 12 (0xc)                                                           */


/**
  * @brief M2M_IN [IN] (Memory to memory input channel)
  */
typedef struct {
  __IOM uint32_t  PTR;                          /*!< (@ 0x00000000) Data pointer                                               */
  __IOM uint32_t  MAXCNT;                       /*!< (@ 0x00000004) Maximum number of bytes in input and output buffer         */
  __IM  uint32_t  AMOUNT;                       /*!< (@ 0x00000008) Number of bytes transferred in the last transaction        */
  __IOM uint32_t  LIST;                         /*!< (@ 0x0000000C) EasyDMA list type                                          */
} M2M_IN_Type;                                  /*!< Size = 16 (0x10)                                                          */


/**
  * @brief M2M_OUT [OUT] (Memory to memory output channel)
  */
typedef struct {
  __IOM uint32_t  PTR;                          /*!< (@ 0x00000000) Data pointer                                               */
  __IM  uint32_t  AMOUNT;                       /*!< (@ 0x00000004) Number of bytes transferred in the last transaction        */
  __IOM uint32_t  LIST;                         /*!< (@ 0x00000008) EasyDMA list type                                          */
} M2M_OUT_Type;                                 /*!< Size = 12 (0xc)                                                           */


/**
  * @brief GPIO_PIN [PIN] (Pin n direct access)
  */
typedef struct {
  __IOM uint32_t  OUT;                          /*!< (@ 0x00000000) Description cluster: Pin n direct access output
                                                                    register                                                   */
  __IM  uint32_t  IN;                           /*!< (@ 0x00000004) Description cluster: Pin n direct access input
                                                                    register                                                   */
} GPIO_PIN_Type;                                /*!< Size = 8 (0x8)                                                            */


/**
  * @brief TWIM_PSEL [PSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  SCL;                          /*!< (@ 0x00000000) Pin select for SCL signal                                  */
  __IOM uint32_t  SDA;                          /*!< (@ 0x00000004) Pin select for SDA signal                                  */
} TWIM_PSEL_Type;                               /*!< Size = 8 (0x8)                                                            */


/**
  * @brief TWIM_RXD [RXD] (RXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;                          /*!< (@ 0x00000000) Data pointer                                               */
  __IOM uint32_t  MAXCNT;                       /*!< (@ 0x00000004) Maximum number of bytes in receive buffer                  */
  __IM  uint32_t  AMOUNT;                       /*!< (@ 0x00000008) Number of bytes transferred in the last transaction        */
  __IOM uint32_t  LIST;                         /*!< (@ 0x0000000C) EasyDMA list type                                          */
} TWIM_RXD_Type;                                /*!< Size = 16 (0x10)                                                          */


/**
  * @brief TWIM_TXD [TXD] (TXD EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;                          /*!< (@ 0x00000000) Data pointer                                               */
  __IOM uint32_t  MAXCNT;                       /*!< (@ 0x00000004) Maximum number of bytes in transmit buffer                 */
  __IM  uint32_t  AMOUNT;                       /*!< (@ 0x00000008) Number of bytes transferred in the last transaction        */
  __IOM uint32_t  LIST;                         /*!< (@ 0x0000000C) EasyDMA list type                                          */
} TWIM_TXD_Type;                                /*!< Size = 16 (0x10)                                                          */


/**
  * @brief CTRLAPPERI_MAILBOX [MAILBOX] (Unspecified)
  */
typedef struct {
  __IM  uint32_t  RXDATA;                       /*!< (@ 0x00000000) Data sent from the debugger to the CPU                     */
  __IM  uint32_t  RXSTATUS;                     /*!< (@ 0x00000004) Status to indicate if data sent from the debugger
                                                                    to the CPU has been read                                   */
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  TXDATA;                       /*!< (@ 0x00000080) Data sent from the CPU to the debugger                     */
  __IM  uint32_t  TXSTATUS;                     /*!< (@ 0x00000084) Status to indicate if data sent from the CPU
                                                                    to the debugger status has been read                       */
} CTRLAPPERI_MAILBOX_Type;                      /*!< Size = 136 (0x88)                                                         */


/**
  * @brief CTRLAPPERI_ERASEPROTECT [ERASEPROTECT] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  LOCK;                         /*!< (@ 0x00000000) Lock ERASEALL mechanism                                    */
  __IOM uint32_t  DISABLE;                      /*!< (@ 0x00000004) Unlock ERASEPROTECT and perform ERASEALL                   */
} CTRLAPPERI_ERASEPROTECT_Type;                 /*!< Size = 8 (0x8)                                                            */


/**
  * @brief ACL_ACL [ACL] (Unspecified)
  */
typedef struct {
  __OM  uint32_t  ADDR;                         /*!< (@ 0x00000000) Description cluster: Configure the word-aligned
                                                                    start address of region n to protect                       */
  __OM  uint32_t  SIZE;                         /*!< (@ 0x00000004) Description cluster: Size of region to protect
                                                                    counting from address ACL[n].ADDR. Write
                                                                    '0' as no effect.                                          */
  __OM  uint32_t  PERM;                         /*!< (@ 0x00000008) Description cluster: Access permissions for region
                                                                    n as defined by start address ACL[n].ADDR
                                                                    and size ACL[n].SIZE                                       */
  __IM  uint32_t  RESERVED;
} ACL_ACL_Type;                                 /*!< Size = 16 (0x10)                                                          */


/**
  * @brief VMC_RAM [RAM] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000000) Description cluster: RAMn power control register           */
  __OM  uint32_t  POWERSET;                     /*!< (@ 0x00000004) Description cluster: RAMn power control set register       */
  __OM  uint32_t  POWERCLR;                     /*!< (@ 0x00000008) Description cluster: RAMn power control clear
                                                                    register                                                   */
  __IM  uint32_t  RESERVED;
} VMC_RAM_Type;                                 /*!< Size = 16 (0x10)                                                          */


/**
  * @brief VMC_RAMB [RAMB] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000000) Description cluster: RAM Bn power control register         */
  __OM  uint32_t  POWERSET;                     /*!< (@ 0x00000004) Description cluster: RAM Bn power control set
                                                                    register                                                   */
  __OM  uint32_t  POWERCLR;                     /*!< (@ 0x00000008) Description cluster: RAM Bn power control clear
                                                                    register                                                   */
  __IM  uint32_t  RESERVED;
} VMC_RAMB_Type;                                /*!< Size = 16 (0x10)                                                          */


/**
  * @brief VMC_RAMC [RAMC] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000000) Description cluster: RAM Cn power control register         */
  __OM  uint32_t  POWERSET;                     /*!< (@ 0x00000004) Description cluster: RAM Cn power control set
                                                                    register                                                   */
  __OM  uint32_t  POWERCLR;                     /*!< (@ 0x00000008) Description cluster: RAM Cn power control clear
                                                                    register                                                   */
  __IM  uint32_t  RESERVED;
} VMC_RAMC_Type;                                /*!< Size = 16 (0x10)                                                          */


/**
  * @brief VMC_RAMD [RAMD] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000000) Description cluster: RAM Dn power control register         */
  __OM  uint32_t  POWERSET;                     /*!< (@ 0x00000004) Description cluster: RAM Dn power control set
                                                                    register                                                   */
  __OM  uint32_t  POWERCLR;                     /*!< (@ 0x00000008) Description cluster: RAM Dn power control clear
                                                                    register                                                   */
  __IM  uint32_t  RESERVED;
} VMC_RAMD_Type;                                /*!< Size = 16 (0x10)                                                          */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          FICR_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Factory Information Configuration Registers (FICR_NS)
  */

typedef struct {                                /*!< (@ 0x00FF0000) FICR_NS Structure                                          */
  __IM  uint32_t  RESERVED[64];
  __IM  uint32_t  TESTSTATUS;                   /*!< (@ 0x00000100) Code memory test status. Will be set during production
                                                                    test.                                                      */
  __IM  uint32_t  CPTEST0;                      /*!< (@ 0x00000104) Result from Circuit Probe test                             */
  __IM  uint32_t  CPTEST00;                     /*!< (@ 0x00000108) Result from Circuit Probe test                             */
  __IM  uint32_t  RESERVED1;
  __IM  uint32_t  CPTEST1;                      /*!< (@ 0x00000110) Result from Circuit Probe test                             */
  __IM  uint32_t  CPTEST2;                      /*!< (@ 0x00000114) Result from Circuit Probe test                             */
  __IM  uint32_t  CPTEST3;                      /*!< (@ 0x00000118) Result from Circuit Probe test                             */
  __IM  uint32_t  CPTEST4;                      /*!< (@ 0x0000011C) Result from Circuit Probe test                             */
  __IM  uint32_t  CPTEST5;                      /*!< (@ 0x00000120) Result from Circuit Probe test, flash repair
                                                                    information                                                */
  __IM  uint32_t  CPTEST6;                      /*!< (@ 0x00000124) Result from Circuit Probe test, flash repair
                                                                    information                                                */
  __IM  uint32_t  CPTEST7;                      /*!< (@ 0x00000128) Result from Circuit Probe test, flash repair
                                                                    information                                                */
  __IM  uint32_t  CPTEST8;                      /*!< (@ 0x0000012C) Result from Circuit Probe test, flash repair
                                                                    information                                                */
  __IM  uint32_t  RESERVED2[52];
  __IOM FICR_INFO_Type INFO;                    /*!< (@ 0x00000200) Device info                                                */
  __IM  uint32_t  RESERVED3[7];
  __IM  uint32_t  CHIPCONF02;                   /*!< (@ 0x00000248) Miscellaneous modem HW configuration. Will be
                                                                    set during production test.                                */
  __IM  uint32_t  CHIPCONF03;                   /*!< (@ 0x0000024C) Miscellaneous modem HW configuration.                      */
  __IOM uint32_t  CHIPCONF04;                   /*!< (@ 0x00000250) MODEM M4 VMC SRAMTRIM values                               */
  __IOM uint32_t  CHIPCONF05;                   /*!< (@ 0x00000254) MODEM M4 VMC RamSSNonRetTSel timing control values
                                                                    for TSMC RAMs                                              */
  __IOM uint32_t  CHIPCONF06;                   /*!< (@ 0x00000258) MODEM DSP SRAMTRIM values                                  */
  __IOM uint32_t  CHIPCONF07;                   /*!< (@ 0x0000025C) MODEM RF VMC SRAMTRIM values                               */
  __IM  uint32_t  RESERVED4[8];
  __IM  uint32_t  FLASHPWRUP0;                  /*!< (@ 0x00000280) Power-up pattern for flash                                 */
  __IM  uint32_t  FLASHPWRUP1;                  /*!< (@ 0x00000284) Power-up pattern for flash                                 */
  __IM  uint32_t  RESERVED5[350];
  __IM  uint32_t  PRODTEST[3];                  /*!< (@ 0x00000800) Description collection: Production test control
                                                                    n                                                          */
} NRF_FICR_Type;                                /*!< Size = 2060 (0x80c)                                                       */



/* =========================================================================================================================== */
/* ================                                          UICR_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief User Information Configuration Registers (UICR_NS)
  */

typedef struct {                                /*!< (@ 0x00FF8000) UICR_NS Structure                                          */
  __IM  uint32_t  APPROTECT;                    /*!< (@ 0x00000000) Access Port protection                                     */
  __IM  uint32_t  ERASEPROTECT;                 /*!< (@ 0x00000004) Flash erase protection                                     */
  __IM  uint32_t  ACLREGION0ADDR;               /*!< (@ 0x00000008) ACL region0 address. Value will get inverted
                                                                    in the readout process before writing the
                                                                    value to ACL.                                              */
  __IM  uint32_t  ACLREGION0SIZE;               /*!< (@ 0x0000000C) ACL region0 size. Value will get inverted in
                                                                    the readout process before writing the value
                                                                    to ACL.                                                    */
  __IM  uint32_t  ACLREGION0PERM;               /*!< (@ 0x00000010) ACL region0 permissions. Value will get inverted
                                                                    in the readout process before writing the
                                                                    value to ACL.                                              */
  __IM  uint32_t  ACLREGION1ADDR;               /*!< (@ 0x00000014) ACL region1 address. Value will get inverted
                                                                    in the readout process before writing the
                                                                    value to ACL.                                              */
  __IM  uint32_t  ACLREGION1SIZE;               /*!< (@ 0x00000018) ACL region1 size. Value will get inverted in
                                                                    the readout process before writing the value
                                                                    to ACL.                                                    */
  __IM  uint32_t  ACLREGION1PERM;               /*!< (@ 0x0000001C) ACL region1 permissions. Value will get inverted
                                                                    in the readout process before writing the
                                                                    value to ACL.                                              */
  __IM  uint32_t  RESERVED[56];
  __IOM uint32_t  MDMNVMCPOFGUARD;              /*!< (@ 0x00000100) Enable blocking NVM WRITE and aborting NVM ERASE
                                                                    for LTE-Modem NVM in POFWARN condition.                    */
  __IOM uint32_t  PKEYREVOKED;                  /*!< (@ 0x00000104) Private key revoked status.                                */
  __IOM uint32_t  UARTBLOCK;                    /*!< (@ 0x00000108) Modem UART RXD TXD blocking.                               */
  __IM  uint32_t  RESERVED1[189];
  __IM  uint32_t  KEYSLOT1DEST;                 /*!< (@ 0x00000400) KEYSLOT1 destination address                               */
  __IM  uint32_t  KEYSLOT1CONFIG;               /*!< (@ 0x00000404) KEYSLOT1 configuration                                     */
  __IM  uint32_t  RESERVED2[254];
  __IM  uint32_t  KEYSLOT1KEYVALUE0;            /*!< (@ 0x00000800) KEYSLOT1 key bits [31:0]                                   */
  __IM  uint32_t  KEYSLOT1KEYVALUE1;            /*!< (@ 0x00000804) KEYSLOT1 key bits [63:32]                                  */
  __IM  uint32_t  KEYSLOT1KEYVALUE2;            /*!< (@ 0x00000808) KEYSLOT1 key bits [95:64]                                  */
  __IM  uint32_t  KEYSLOT1KEYVALUE3;            /*!< (@ 0x0000080C) KEYSLOT1 key bits [127:96]                                 */
} NRF_UICR_Type;                                /*!< Size = 2064 (0x810)                                                       */



/* =========================================================================================================================== */
/* ================                                     TRACEDELAYREG_NS                                      ================ */
/* =========================================================================================================================== */


/**
  * @brief Trace delay register (TRACEDELAYREG_NS)
  */

typedef struct {                                /*!< (@ 0xD0000000) TRACEDELAYREG_NS Structure                                 */
  __IM  uint32_t  RESERVED[321];
  __IOM uint32_t  DELAY_REG_CONFIG;             /*!< (@ 0x00000504) Configuration register for DELAY_REG delay                 */
  __IM  uint32_t  RESERVED1[62];
  __OM  uint32_t  DELAY_REG;                    /*!< (@ 0x00000600) Dummy register with adjustable write delay. Occupies
                                                                    0x100 address range i.e. 256bytes                          */
} NRF_TRACEDELAYREG_Type;                       /*!< Size = 1540 (0x604)                                                       */



/* =========================================================================================================================== */
/* ================                                          AMLI_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief AHB Multi-Layer Interface (AMLI_NS)
  */

typedef struct {                                /*!< (@ 0x40000000) AMLI_NS Structure                                          */
  __IM  uint32_t  RESERVED[896];
  __IOM AMLI_RAMPRI_Type RAMPRI;                /*!< (@ 0x00000E00) RAM configurable priority configuration structure          */
} NRF_AMLI_Type;                                /*!< Size = 3592 (0xe08)                                                       */



/* =========================================================================================================================== */
/* ================                                          DCNF_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Domain Configuration Management (DCNF_NS)
  */

typedef struct {                                /*!< (@ 0x40000000) DCNF_NS Structure                                          */
  __IM  uint32_t  RESERVED[264];
  __IM  uint32_t  CPUID;                        /*!< (@ 0x00000420) CPU number in the system                                   */
  __IM  uint32_t  RESERVED1[7];
  __IOM DCNF_EXTPERI0_Type EXTPERI0;            /*!< (@ 0x00000440) Unspecified                                                */
  __IM  uint32_t  RESERVED2[6];
  __IOM DCNF_EXTRAM_Type EXTRAM;                /*!< (@ 0x00000460) Unspecified                                                */
  __IM  uint32_t  RESERVED3[6];
  __IOM DCNF_EXTCODE_Type EXTCODE[2];           /*!< (@ 0x00000480) Unspecified                                                */
  __IOM uint32_t  CSTNUMPRETICKS;               /*!< (@ 0x00000488) ClockStatusTracker pretick count setting                   */
  __IOM uint32_t  CSTNUMPOSTTICKS;              /*!< (@ 0x0000048C) ClockStatusTracker posttick count setting                  */
} NRF_DCNF_Type;                                /*!< Size = 1168 (0x490)                                                       */



/* =========================================================================================================================== */
/* ================                                     TRACEANDDEBUG_NS                                      ================ */
/* =========================================================================================================================== */


/**
  * @brief Trace And Debug (TRACEANDDEBUG_NS)
  */

typedef struct {                                /*!< (@ 0xE0080000) TRACEANDDEBUG_NS Structure                                 */
  __OM  uint32_t  STARTCLOCKS;                  /*!< (@ 0x00000000) Start all Trace and Debug clocks.                          */
  __OM  uint32_t  STOPCLOCKS;                   /*!< (@ 0x00000004) Stop all Trace and Debug clocks.                           */
  __IM  uint32_t  RESERVED[318];
  __IOM uint32_t  ENABLEDEBUG;                  /*!< (@ 0x00000500) Master enable for PSEL.TraceData[3:0] and PSEL.TraceClk
                                                                    signals                                                    */
  __IOM TRACEANDDEBUG_PSEL_Type PSEL;           /*!< (@ 0x00000504) Unspecified                                                */
  __IOM uint32_t  TRACEPORTSPEED;               /*!< (@ 0x00000518) Trace port speed selection                                 */
  __IOM uint32_t  SWOSEL;                       /*!< (@ 0x0000051C) Connect the SWO to the TPIU TRACEDATA[0]                   */
} NRF_TRACEANDDEBUG_Type;                       /*!< Size = 1312 (0x520)                                                       */



/* =========================================================================================================================== */
/* ================                                          MWU_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Memory Watch Unit (MWU_NS)
  */

typedef struct {                                /*!< (@ 0x40001000) MWU_NS Structure                                           */
  __IM  uint32_t  RESERVED[64];
  __IOM MWU_EVENTS_REGION_Type EVENTS_REGION[4];/*!< (@ 0x00000100) Peripheral events.                                         */
  __IM  uint32_t  RESERVED1[120];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED2[5];
  __IOM uint32_t  NMIEN;                        /*!< (@ 0x00000320) Enable or disable interrupt                                */
  __IOM uint32_t  NMIENSET;                     /*!< (@ 0x00000324) Enable interrupt                                           */
  __IOM uint32_t  NMIENCLR;                     /*!< (@ 0x00000328) Disable interrupt                                          */
  __IM  uint32_t  RESERVED3[121];
  __IOM uint32_t  REGIONEN;                     /*!< (@ 0x00000510) Enable/disable regions watch                               */
  __IOM uint32_t  REGIONENSET;                  /*!< (@ 0x00000514) Enable regions watch                                       */
  __IOM uint32_t  REGIONENCLR;                  /*!< (@ 0x00000518) Disable regions watch                                      */
  __IM  uint32_t  RESERVED4[57];
  __IOM MWU_REGION_Type REGION[4];              /*!< (@ 0x00000600) Unspecified                                                */
} NRF_MWU_Type;                                 /*!< Size = 1600 (0x640)                                                       */



/* =========================================================================================================================== */
/* ================                                         MCPLL_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Modem Clock PLL (MCPLL_NS)
  */

typedef struct {                                /*!< (@ 0x40010000) MCPLL_NS Structure                                         */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start MCPLL                                                */
  __OM  uint32_t  TASKS_UPDATE;                 /*!< (@ 0x00000004) Update CONTROL.FRAC and CONTROL.INT values                 */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000008) Stop MCPLL                                                 */
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_LOCKERROR;             /*!< (@ 0x00000100) Error event, MCPLL no longer in lock                       */
  __IM  uint32_t  RESERVED1[127];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED2[60];
  __IM  uint32_t  INLOCK;                       /*!< (@ 0x00000400) MCPLL locked or not                                        */
  __IM  uint32_t  RESERVED3[64];
  __IOM MCPLL_CONTROL_Type CONTROL;             /*!< (@ 0x00000504) Unspecified                                                */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  MA;                           /*!< (@ 0x00000510) Post division ratio for OUTA                               */
  __IOM uint32_t  MB;                           /*!< (@ 0x00000514) Post division ratio for OUTB                               */
  __IOM uint32_t  MC;                           /*!< (@ 0x00000518) Post division ratio for OUTC                               */
  __IOM uint32_t  MD;                           /*!< (@ 0x0000051C) Post division ratio for OUTD                               */
  __IOM uint32_t  FORCEINLOCK;                  /*!< (@ 0x00000520) Force MCPLL in lock                                        */
  __IOM uint32_t  RESET;                        /*!< (@ 0x00000524) Reset MCPLL                                                */
  __IOM uint32_t  SPARE;                        /*!< (@ 0x00000528) Spare signals                                              */
  __IM  uint32_t  RESERVED5;
  __IOM MCPLL_OVERRIDE_Type OVERRIDE;           /*!< (@ 0x00000530) Override mechanism                                         */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  OUTA_DRV;                     /*!< (@ 0x00000540) Drive strength for OUTA                                    */
  __IOM uint32_t  OUTB_DRV;                     /*!< (@ 0x00000544) Drive strength for OUTB                                    */
  __IOM uint32_t  OUTC_DRV;                     /*!< (@ 0x00000548) Drive strength for OUTC                                    */
  __IOM uint32_t  OUTD_DRV;                     /*!< (@ 0x0000054C) Drive strength for OUTD                                    */
  __IOM uint32_t  INTMODE;                      /*!< (@ 0x00000550) Integer mode                                               */
  __IM  uint32_t  RESERVED7[43];
  __IOM uint32_t  TEST;                         /*!< (@ 0x00000600) ATE test bus control                                       */
  __IOM uint32_t  ATB_ENABLE;                   /*!< (@ 0x00000604) Analog switch control for connecting ATB to GPIOs.
                                                                    Note that when the analog switch is enabled,
                                                                    digital driver of the GPIO must be in hiZ.
                                                                    Note also that the analog switch can be
                                                                    enabled also from elsewhere for testing
                                                                    other analog IPs.                                          */
} NRF_MCPLL_Type;                               /*!< Size = 1544 (0x608)                                                       */



/* =========================================================================================================================== */
/* ================                                         BBPLL_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Base Band  PLL (BBPLL_NS)
  */

typedef struct {                                /*!< (@ 0x40011000) BBPLL_NS Structure                                         */
  __IM  uint32_t  RESERVED[320];
  __IOM uint32_t  FREQ;                         /*!< (@ 0x00000500) Frequency selection                                        */
} NRF_BBPLL_Type;                               /*!< Size = 1284 (0x504)                                                       */



/* =========================================================================================================================== */
/* ================                                        RCOSC32K_NS                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief 32.768 kHz RC oscillator (RCOSC32K_NS)
  */

typedef struct {                                /*!< (@ 0x40012000) RCOSC32K_NS Structure                                      */
  __OM  uint32_t  TASKS_CAL;                    /*!< (@ 0x00000000) Start calibration of LFRC or LFULP oscillator              */
  __OM  uint32_t  TASKS_CTSTART;                /*!< (@ 0x00000004) Start calibration timer                                    */
  __OM  uint32_t  TASKS_CTSTOP;                 /*!< (@ 0x00000008) Stop calibration timer                                     */
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_CTTO;                  /*!< (@ 0x00000100) Calibration timer timeout                                  */
  __IOM uint32_t  EVENTS_DONE;                  /*!< (@ 0x00000104) Calibration of LFCLK RC oscillator complete event          */
  __IOM uint32_t  EVENTS_CTSTARTED;             /*!< (@ 0x00000108) Calibration timer started                                  */
  __IOM uint32_t  EVENTS_CTSTOPPED;             /*!< (@ 0x0000010C) Calibration timer stopped                                  */
  __IM  uint32_t  RESERVED1[124];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED2[69];
  __IM  uint32_t  RCOSC32KIFINE;                /*!< (@ 0x00000420) Fine calibration read value for 32.768 kHz RC
                                                                    oscillator                                                 */
  __IM  uint32_t  RCOSC32KICOARSE;              /*!< (@ 0x00000424) Coarse calibration read value for 32.768 kHz
                                                                    RC oscillator                                              */
  __IM  uint32_t  RESERVED3[67];
  __IOM uint32_t  RCOSC32KICALTEST;             /*!< (@ 0x00000534) 32.768 kHz RC oscillator calibration debug register
                                                                    NOTE: This register should not be written
                                                                    to while the RCOSC source is running.                      */
  __IOM uint32_t  CTIV;                         /*!< (@ 0x00000538) Calibration timer interval NOTE: This register
                                                                    should not be written to while the RCOSC
                                                                    source is running.                                         */
  __IOM uint32_t  RCOSC32KICALLENGTH;           /*!< (@ 0x0000053C) 32kHz RC oscillator calibration length This value
                                                                    is read from FICR                                          */
  __IOM uint32_t  RCOSC32KICOARSEIN;            /*!< (@ 0x00000540) RCOSC coarse calibration input This value is
                                                                    read from FICR                                             */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  RCOSC32KICIRC;                /*!< (@ 0x0000054C) Rotating current source for for 32.768 kHz RC
                                                                    oscillator                                                 */
  __IM  uint32_t  RESERVED5[13];
  __IOM uint32_t  ATECLOCK;                     /*!< (@ 0x00000584) Analog test bus control for clock modules                  */
  __IM  uint32_t  RESERVED6[11];
  __IOM uint32_t  LFRCMODE;                     /*!< (@ 0x000005B4) LFRC mode configuration                                    */
  __IOM uint32_t  LFULP32KICOARSEIN;            /*!< (@ 0x000005B8) LFULP coarse calibration input This value is
                                                                    read from FICR                                             */
  __IOM uint32_t  LFULP32KICALLENGTH;           /*!< (@ 0x000005BC) 32kHz LFULP RC oscillator calibration length
                                                                    This value is read from FICR                               */
  __IM  uint32_t  RESERVED7[399];
  __IOM uint32_t  DISBALERCOSC32KIPOWERUPCONTROL;/*!< (@ 0x00000BFC) Backdoor for disabling Rcosc32KiPowerUpControl
                                                                    module in Rcosc32KiGenerator.                              */
} NRF_RCOSC32K_Type;                            /*!< Size = 3072 (0xc00)                                                       */



/* =========================================================================================================================== */
/* ================                                         CLOCK_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Clock Management (CLOCK_NS)
  */

typedef struct {                                /*!< (@ 0x40015000) CLOCK_NS Structure                                         */
  __OM  uint32_t  TASKS_HFCLKSTART;             /*!< (@ 0x00000000) Start HFCLK crystal oscillator                             */
  __OM  uint32_t  TASKS_HFCLKSTOP;              /*!< (@ 0x00000004) Stop HFCLK crystal oscillator                              */
  __OM  uint32_t  TASKS_LFCLKSTART;             /*!< (@ 0x00000008) Start LFCLK source                                         */
  __OM  uint32_t  TASKS_LFCLKSTOP;              /*!< (@ 0x0000000C) Stop LFCLK source                                          */
  __OM  uint32_t  TASKS_CAL;                    /*!< (@ 0x00000010) Start RCOSC32k calibration                                 */
  __IM  uint32_t  RESERVED[59];
  __IOM uint32_t  EVENTS_HFCLKSTARTED;          /*!< (@ 0x00000100) HFCLK oscillator started                                   */
  __IOM uint32_t  EVENTS_LFCLKSTARTED;          /*!< (@ 0x00000104) LFCLK started                                              */
  __IM  uint32_t  RESERVED1[126];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED2[62];
  __IM  uint32_t  HFCLKRUN;                     /*!< (@ 0x00000408) Status indicating that HFCLKSTART task has been
                                                                    triggered                                                  */
  __IM  uint32_t  HFCLKSTAT;                    /*!< (@ 0x0000040C) Which HFCLK source is running                              */
  __IM  uint32_t  RESERVED3;
  __IM  uint32_t  LFCLKRUN;                     /*!< (@ 0x00000414) Status indicating that LFCLKSTART task has been
                                                                    triggered                                                  */
  __IM  uint32_t  LFCLKSTAT;                    /*!< (@ 0x00000418) Which LFCLK source is running                              */
  __IM  uint32_t  LFCLKSRCCOPY;                 /*!< (@ 0x0000041C) Copy of LFCLKSRC register, set when LFCLKSTART
                                                                    task was triggered LFULP is not treat as
                                                                    a separate clock source on Alta MLM1, where
                                                                    default clock source (0) is LFRC.                          */
  __IM  uint32_t  RESERVED4[61];
  __IOM uint32_t  HFCLKSRC;                     /*!< (@ 0x00000514) Clock source for the HFCLK oscillator, and configuration
                                                                    of XTAL oscillator. This register shall
                                                                    only be written while no oscillation is
                                                                    present on XC1. Failing to do so may cause
                                                                    unexpected behaviour.                                      */
  __IOM uint32_t  LFCLKSRC;                     /*!< (@ 0x00000518) Clock source for the LFCLK. LFCLKSTART task starts
                                                                    starts a clock source selected with this
                                                                    register. LFULP is not treat as a separate
                                                                    clock source on Alta MLM1, where default
                                                                    clock source (0) is LFRC.                                  */
} NRF_CLOCK_Type;                               /*!< Size = 1308 (0x51c)                                                       */



/* =========================================================================================================================== */
/* ================                                         POWER_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Control (POWER_NS)
  */

typedef struct {                                /*!< (@ 0x40015000) POWER_NS Structure                                         */
  __IM  uint32_t  RESERVED[24];
  __OM  uint32_t  TASKS_RFFELDOREQSTART;        /*!< (@ 0x00000060) Start requesting RF Front-End 1V8 LDO (RFFELDO)            */
  __OM  uint32_t  TASKS_RFFELDOREQSTOP;         /*!< (@ 0x00000064) Stop requesting RF Front-End 1V8 LDO (RFFELDO)             */
  __OM  uint32_t  TASKS_IOIFLDOREQSTART;        /*!< (@ 0x00000068) Start requesting IO interface 1V8 LDO (RFFELDO)            */
  __OM  uint32_t  TASKS_IOIFLDOREQSTOP;         /*!< (@ 0x0000006C) Stop requesting IO interface 1V8 LDO (RFFELDO)             */
  __OM  uint32_t  TASKS_PWMREQSTART;            /*!< (@ 0x00000070) Request forcing PWM mode in external DCDC voltage
                                                                    regulator                                                  */
  __OM  uint32_t  TASKS_PWMREQSTOP;             /*!< (@ 0x00000074) Stop requesting forcing PWM mode in external
                                                                    DCDC voltage regulator                                     */
  __OM  uint32_t  TASKS_CONSTLAT;               /*!< (@ 0x00000078) Enable constant latency mode. When going to sleep:
                                                                    CPU is clock gated, but regulators, oscillators
                                                                    and clock tree is kept on.                                 */
  __OM  uint32_t  TASKS_LOWPWR;                 /*!< (@ 0x0000007C) Enable low power mode (variable latency) When
                                                                    going to sleep: Oscillators are switched
                                                                    off (if nothing else is requesting clocks).
                                                                    Regulators are switched off (if nothing
                                                                    else is requesting power).                                 */
  __IM  uint32_t  RESERVED1[34];
  __IOM uint32_t  EVENTS_POFWARN;               /*!< (@ 0x00000108) Power failure warning                                      */
  __IOM uint32_t  EVENTS_RFFELDOSTARTED;        /*!< (@ 0x0000010C) RF Front-End 1V8 LDO (RFFELDO) has become ready            */
  __IOM uint32_t  EVENTS_IOIFLDOSTARED;         /*!< (@ 0x00000110) IO interface 1V8 LDO (IOIFLDO) has become ready            */
  __IOM uint32_t  EVENTS_SLEEPENTER;            /*!< (@ 0x00000114) CPU entered WFI/WFE sleep                                  */
  __IOM uint32_t  EVENTS_SLEEPEXIT;             /*!< (@ 0x00000118) CPU exited WFI/WFE sleep                                   */
  __IM  uint32_t  RESERVED2[121];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED3[61];
  __IOM uint32_t  RESETREAS;                    /*!< (@ 0x00000400) Reset reason                                               */
  __IM  uint32_t  RESERVED4[15];
  __IM  uint32_t  DSPPOWERSTATUS;               /*!< (@ 0x00000440) Slave power status: DSP power domain power state.          */
  __IM  uint32_t  M0POWERSTATUS;                /*!< (@ 0x00000444) Slave power status: RF M0 power domain power
                                                                    state.                                                     */
  __IM  uint32_t  RESERVED5[50];
  __IOM uint32_t  SLEEPCNF;                     /*!< (@ 0x00000510) Sleep configuration                                        */
  __IM  uint32_t  RESERVED6[2];
  __IOM uint32_t  GPREGRET[2];                  /*!< (@ 0x0000051C) Description collection: General purpose retention
                                                                    register                                                   */
  __IM  uint32_t  RESERVED7[59];
  __IOM POWER_DSP_Type DSP;                     /*!< (@ 0x00000610) Control register for DSP                                   */
  __IOM POWER_LYNX_Type LYNX;                   /*!< (@ 0x00000620) Control register for Lynx RF subsystem                     */
} NRF_POWER_Type;                               /*!< Size = 1580 (0x62c)                                                       */



/* =========================================================================================================================== */
/* ================                                      MODEMPERIPH_NS                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief Modem peripheral registers (MODEMPERIPH_NS)
  */

typedef struct {                                /*!< (@ 0x40021000) MODEMPERIPH_NS Structure                                   */
  __IM  uint32_t  UNUSED;                       /*!< (@ 0x00000000) Unused.                                                    */
} NRF_MODEMPERIPH_Type;                         /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         UARTE_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief UART with EasyDMA (UARTE_NS)
  */

typedef struct {                                /*!< (@ 0x40023000) UARTE_NS Structure                                         */
  __OM  uint32_t  TASKS_STARTRX;                /*!< (@ 0x00000000) Start UART receiver                                        */
  __OM  uint32_t  TASKS_STOPRX;                 /*!< (@ 0x00000004) Stop UART receiver                                         */
  __OM  uint32_t  TASKS_STARTTX;                /*!< (@ 0x00000008) Start UART transmitter                                     */
  __OM  uint32_t  TASKS_STOPTX;                 /*!< (@ 0x0000000C) Stop UART transmitter                                      */
  __IM  uint32_t  RESERVED[3];
  __OM  uint32_t  TASKS_SUSPEND;                /*!< (@ 0x0000001C) Suspend UART transaction                                   */
  __OM  uint32_t  TASKS_RESUME;                 /*!< (@ 0x00000020) Resume UART transaction                                    */
  __IM  uint32_t  RESERVED1[2];
  __OM  uint32_t  TASKS_FLUSHRX;                /*!< (@ 0x0000002C) Flush RX FIFO into RX buffer                               */
  __IM  uint32_t  RESERVED2[52];
  __IOM uint32_t  EVENTS_CTS;                   /*!< (@ 0x00000100) CTS is activated (set low). Clear To Send.                 */
  __IOM uint32_t  EVENTS_NCTS;                  /*!< (@ 0x00000104) CTS is deactivated (set high). Not Clear To Send.          */
  __IOM uint32_t  EVENTS_RXDRDY;                /*!< (@ 0x00000108) Data received in RXD (but potentially not yet
                                                                    transferred to Data RAM)                                   */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  EVENTS_ENDRX;                 /*!< (@ 0x00000110) Receive buffer is filled up                                */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  EVENTS_TXDRDY;                /*!< (@ 0x0000011C) Data sent from TXD                                         */
  __IOM uint32_t  EVENTS_ENDTX;                 /*!< (@ 0x00000120) Last TX byte transmitted                                   */
  __IOM uint32_t  EVENTS_ERROR;                 /*!< (@ 0x00000124) Error detected                                             */
  __IM  uint32_t  RESERVED5[7];
  __IOM uint32_t  EVENTS_RXTO;                  /*!< (@ 0x00000144) Receiver timeout                                           */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  EVENTS_RXSTARTED;             /*!< (@ 0x0000014C) UART receiver has started                                  */
  __IOM uint32_t  EVENTS_TXSTARTED;             /*!< (@ 0x00000150) UART transmitter has started                               */
  __IOM uint32_t  EVENTS_RTS;                   /*!< (@ 0x00000154) RX FIFO has only room for four more bytes before
                                                                    it overflows                                               */
  __IOM uint32_t  EVENTS_TXSTOPPED;             /*!< (@ 0x00000158) Transmitter stopped                                        */
  __IM  uint32_t  RESERVED7[41];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED8[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED9[93];
  __IOM uint32_t  ERRORSRC;                     /*!< (@ 0x00000480) Error source                                               */
  __IM  uint32_t  RESERVED10[31];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable UART                                                */
  __IM  uint32_t  RESERVED11;
  __IOM UARTE_PSEL_Type PSEL;                   /*!< (@ 0x00000508) Unspecified                                                */
  __IM  uint32_t  RESERVED12[3];
  __IOM uint32_t  BAUDRATE;                     /*!< (@ 0x00000524) Baud rate                                                  */
  __IM  uint32_t  RESERVED13[3];
  __IOM UARTE_RXD_Type RXD;                     /*!< (@ 0x00000534) RXD EasyDMA channel                                        */
  __IM  uint32_t  RESERVED14;
  __IOM UARTE_TXD_Type TXD;                     /*!< (@ 0x00000544) TXD EasyDMA channel                                        */
  __IM  uint32_t  RESERVED15[7];
  __IOM uint32_t  CONFIG;                       /*!< (@ 0x0000056C) Configuration of parity and hardware flow control          */
  __IM  uint32_t  RESERVED16[675];
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000FFC) Peripheral power control                                   */
} NRF_UARTE_Type;                               /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                         TIMER1_NS                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Modem Timer/Counter 0 (TIMER1_NS)
  */

typedef struct {                                /*!< (@ 0x40024000) TIMER1_NS Structure                                        */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start Timer                                                */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop Timer                                                 */
  __OM  uint32_t  TASKS_CLEAR;                  /*!< (@ 0x00000008) Clear time                                                 */
  __OM  uint32_t  TASKS_SHUTDOWN;               /*!< (@ 0x0000000C) Shut down timer                                            */
  __OM  uint32_t  TASKS_STANDBY;                /*!< (@ 0x00000010) Timer from shutdown to stopped state                       */
  __IM  uint32_t  RESERVED[11];
  __OM  uint32_t  TASKS_CAPTURE[8];             /*!< (@ 0x00000040) Description collection: Capture Timer value to
                                                                    CC[n] register                                             */
  __IM  uint32_t  RESERVED1[40];
  __IOM uint32_t  EVENTS_COMPARE[8];            /*!< (@ 0x00000100) Description collection: Compare event on CC[n]
                                                                    match.                                                     */
  __IM  uint32_t  RESERVED2[56];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED3[63];
  __IOM uint32_t  INTEN0;                       /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET0;                    /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR0;                    /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND0;                     /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IOM uint32_t  INTEN1;                       /*!< (@ 0x00000310) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET1;                    /*!< (@ 0x00000314) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR1;                    /*!< (@ 0x00000318) Disable interrupt                                          */
  __IM  uint32_t  INTPEND1;                     /*!< (@ 0x0000031C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED4[121];
  __IOM uint32_t  RUNNING;                      /*!< (@ 0x00000504) Status of running timer                                    */
  __IM  uint32_t  RESERVED5[14];
  __IOM uint32_t  CCLO0;                        /*!< (@ 0x00000540) Capture/Compare register 0 - Low Word                      */
  __IOM uint32_t  CCHI0;                        /*!< (@ 0x00000544) Capture/Compare register 0 - High Word                     */
  __IOM uint32_t  CCLO1;                        /*!< (@ 0x00000548) Capture/Compare register 1 - Low Word                      */
  __IOM uint32_t  CCHI1;                        /*!< (@ 0x0000054C) Capture/Compare register 1 - High Word                     */
  __IOM uint32_t  CCLO2;                        /*!< (@ 0x00000550) Capture/Compare register 2 - Low Word                      */
  __IOM uint32_t  CCHI2;                        /*!< (@ 0x00000554) Capture/Compare register 2 - High Word                     */
  __IOM uint32_t  CCLO3;                        /*!< (@ 0x00000558) Capture/Compare register 3 - Low Word                      */
  __IOM uint32_t  CCHI3;                        /*!< (@ 0x0000055C) Capture/Compare register 3 - High Word                     */
  __IOM uint32_t  CCLO4;                        /*!< (@ 0x00000560) Capture/Compare register 4 - Low Word                      */
  __IOM uint32_t  CCHI4;                        /*!< (@ 0x00000564) Capture/Compare register 4 - High Word                     */
  __IOM uint32_t  CCLO5;                        /*!< (@ 0x00000568) Capture/Compare register 5 - Low Word                      */
  __IOM uint32_t  CCHI5;                        /*!< (@ 0x0000056C) Capture/Compare register 5 - High Word                     */
  __IOM uint32_t  CCLO6;                        /*!< (@ 0x00000570) Capture/Compare register 6 - Low Word                      */
  __IOM uint32_t  CCHI6;                        /*!< (@ 0x00000574) Capture/Compare register 6 - High Word                     */
  __IOM uint32_t  CCLO7;                        /*!< (@ 0x00000578) Capture/Compare register 7 - Low Word                      */
  __IOM uint32_t  CCHI7;                        /*!< (@ 0x0000057C) Capture/Compare register 7 - High Word                     */
  __IOM uint32_t  COUNTLO;                      /*!< (@ 0x00000580) Internal Counter Value - Low Word                          */
  __IOM uint32_t  COUNTHI;                      /*!< (@ 0x00000584) Internal Counter Value - High Word                         */
  __IM  uint32_t  RESERVED6[669];
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000FFC) Peripheral power control                                   */
} NRF_MODEMTIMER_Type;                          /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          RTC_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Real time counter (RTC_NS)
  */

typedef struct {                                /*!< (@ 0x40026000) RTC_NS Structure                                           */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start RTC COUNTER                                          */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop RTC COUNTER                                           */
  __OM  uint32_t  TASKS_CLEAR;                  /*!< (@ 0x00000008) Clear RTC COUNTER                                          */
  __OM  uint32_t  TASKS_TRIGOVRFLW;             /*!< (@ 0x0000000C) Set COUNTER to 0xFFFFF0                                    */
  __IM  uint32_t  RESERVED[28];
  __IOM uint32_t  SUBSCRIBE_START;              /*!< (@ 0x00000080) Subscribe configuration for TASKS_START                    */
  __IOM uint32_t  SUBSCRIBE_STOP;               /*!< (@ 0x00000084) Subscribe configuration for TASKS_STOP                     */
  __IOM uint32_t  SUBSCRIBE_CLEAR;              /*!< (@ 0x00000088) Subscribe configuration for TASKS_CLEAR                    */
  __IOM uint32_t  SUBSCRIBE_TRIGOVRFLW;         /*!< (@ 0x0000008C) Subscribe configuration for TASKS_TRIGOVRFLW               */
  __IM  uint32_t  RESERVED1[28];
  __IOM uint32_t  EVENTS_TICK;                  /*!< (@ 0x00000100) Event on COUNTER increment                                 */
  __IOM uint32_t  EVENTS_OVRFLW;                /*!< (@ 0x00000104) Event on COUNTER overflow                                  */
  __IM  uint32_t  RESERVED2[14];
  __IOM uint32_t  EVENTS_COMPARE[4];            /*!< (@ 0x00000140) Description collection: Compare event on CC[n]
                                                                    match                                                      */
  __IM  uint32_t  RESERVED3[12];
  __IOM uint32_t  PUBLISH_TICK;                 /*!< (@ 0x00000180) Publish configuration for EVENTS_TICK                      */
  __IOM uint32_t  PUBLISH_OVRFLW;               /*!< (@ 0x00000184) Publish configuration for EVENTS_OVRFLW                    */
  __IM  uint32_t  RESERVED4[14];
  __IOM uint32_t  PUBLISH_COMPARE[4];           /*!< (@ 0x000001C0) Description collection: Publish configuration
                                                                    for EVENTS_COMPARE                                         */
  __IM  uint32_t  RESERVED5[76];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED6[13];
  __IOM uint32_t  EVTEN;                        /*!< (@ 0x00000340) Enable or disable event routing                            */
  __IOM uint32_t  EVTENSET;                     /*!< (@ 0x00000344) Enable event routing                                       */
  __IOM uint32_t  EVTENCLR;                     /*!< (@ 0x00000348) Disable event routing                                      */
  __IM  uint32_t  RESERVED7[45];
  __IM  uint32_t  STATUS;                       /*!< (@ 0x00000400) RTC status                                                 */
  __IM  uint32_t  RESERVED8[64];
  __IM  uint32_t  COUNTER;                      /*!< (@ 0x00000504) Current COUNTER value                                      */
  __IOM uint32_t  PRESCALER;                    /*!< (@ 0x00000508) 12 bit prescaler for COUNTER frequency (32768/(PRESCALER+1)).Mu
                                                                    t be written when RTC is stopped                           */
  __IM  uint32_t  RESERVED9[13];
  __IOM uint32_t  CC[4];                        /*!< (@ 0x00000540) Description collection: Compare register n                 */
  __IM  uint32_t  RESERVED10[683];
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000FFC) Peripheral power control                                   */
} NRF_RTC_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          LWDT_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Timer 0 (LWDT_NS)
  */

typedef struct {                                /*!< (@ 0x40027000) LWDT_NS Structure                                          */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start the watchdog                                         */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop the watchdog timer. Only available in timer
                                                                    mode.                                                      */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_TIMEOUT;               /*!< (@ 0x00000100) Watchdog timeout                                           */
  __IM  uint32_t  RESERVED1[128];
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED2[61];
  __IM  uint32_t  RUNSTATUS;                    /*!< (@ 0x00000400) Run status                                                 */
  __IM  uint32_t  REQSTATUS;                    /*!< (@ 0x00000404) Request status                                             */
  __IOM uint32_t  RCNT;                         /*!< (@ 0x00000408) Reload count                                               */
  __IM  uint32_t  RESERVED3[62];
  __IOM uint32_t  CRV;                          /*!< (@ 0x00000504) Counter reload value                                       */
  __IOM uint32_t  RREN;                         /*!< (@ 0x00000508) Enable register for reload request registers               */
  __IOM uint32_t  CONFIG;                       /*!< (@ 0x0000050C) Configuration register                                     */
  __IM  uint32_t  RESERVED4[60];
  __OM  uint32_t  RR[8];                        /*!< (@ 0x00000600) Description collection: Reload request n                   */
  __IM  uint32_t  RESERVED5[631];
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000FFC) Peripheral power control                                   */
} NRF_WDT_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                          RNG_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Random Number Generator (RNG_NS)
  */

typedef struct {                                /*!< (@ 0x40029000) RNG_NS Structure                                           */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Task starting the random number generator                  */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Task stopping the random number generator                  */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_VALRDY;                /*!< (@ 0x00000100) Event being generated for every new random number
                                                                    written to the VALUE register                              */
  __IM  uint32_t  RESERVED1[63];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED2[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED3[126];
  __IOM uint32_t  CONFIG;                       /*!< (@ 0x00000504) Configuration register                                     */
  __IM  uint32_t  VALUE;                        /*!< (@ 0x00000508) Output random number                                       */
  __IM  uint32_t  RESERVED4[700];
  __IOM uint32_t  POWER;                        /*!< (@ 0x00000FFC) Peripheral power control                                   */
} NRF_RNG_Type;                                 /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                         SIMIF_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief SIM card interface (SIMIF_NS)
  */

typedef struct {                                /*!< (@ 0x4002A000) SIMIF_NS Structure                                         */
  __OM  uint32_t  TASKS_DMASTARTRX;             /*!< (@ 0x00000000) start DMA transfer from SIM card to memory                 */
  __OM  uint32_t  TASKS_DMASTOPRX;              /*!< (@ 0x00000004) stop DMA transfer from SIM card to memory                  */
  __OM  uint32_t  TASKS_DMASTARTTX;             /*!< (@ 0x00000008) start DMA transfer from memory to SIM card                 */
  __OM  uint32_t  TASKS_DMASTOPTX;              /*!< (@ 0x0000000C) start DMA transfer from memory to SIM card                 */
  __OM  uint32_t  TASKS_RSTSET;                 /*!< (@ 0x00000010) Set SIM card reset signal                                  */
  __OM  uint32_t  TASKS_RSTCLEAR;               /*!< (@ 0x00000014) Clear SIM card reset signal                                */
  __OM  uint32_t  TASKS_RESET;                  /*!< (@ 0x00000018) Reset everything                                           */
  __OM  uint32_t  TASKS_UARTRX;                 /*!< (@ 0x0000001C) Start Uart for Rx access                                   */
  __OM  uint32_t  TASKS_UARTTX;                 /*!< (@ 0x00000020) Start Uart for Tx access                                   */
  __OM  uint32_t  TASKS_STARTWRITEFROMREG;      /*!< (@ 0x00000024) Write test data from Ahb test reg to Ahb Rx bus            */
  __OM  uint32_t  TASKS_STARTREADTOREG;         /*!< (@ 0x00000028) Read data from Ahb Tx bus to Ahb test reg                  */
  __OM  uint32_t  TASKS_PROTOCOLT0SET;          /*!< (@ 0x0000002C) Start using protocol T0                                    */
  __OM  uint32_t  TASKS_PROTOCOLT1SET;          /*!< (@ 0x00000030) Start using protocol T1                                    */
  __OM  uint32_t  TASKS_PROTOCOLNONSET;         /*!< (@ 0x00000034) Start using protocol none                                  */
  __OM  uint32_t  TASKS_TIMECOUNTCLEAR;         /*!< (@ 0x00000038) Stop and clear time out counter                            */
  __IM  uint32_t  RESERVED[49];
  __IOM uint32_t  EVENTS_DMA_RX_STARTED;        /*!< (@ 0x00000100) DMA Rx operation started                                   */
  __IOM uint32_t  EVENTS_DMA_RX_DONE;           /*!< (@ 0x00000104) DMA Tx operation finished                                  */
  __IOM uint32_t  EVENTS_DMA_TX_STARTED;        /*!< (@ 0x00000108) DMA Tx operation started                                   */
  __IOM uint32_t  EVENTS_DMA_TX_DONE;           /*!< (@ 0x0000010C) DMA Tx operation finished                                  */
  __IOM uint32_t  EVENTS_INVALID_CONVENTION;    /*!< (@ 0x00000110) ATR.TS convention not recognized                           */
  __IOM uint32_t  EVENTS_PARITY_ERROR;          /*!< (@ 0x00000114) Rx byte parity error                                       */
  __IOM uint32_t  EVENTS_ATR_TIMEOUT;           /*!< (@ 0x00000118) No ATR between 400 and 40000 sim clock cycles              */
  __IOM uint32_t  EVENTS_CW_TIMEOUT;            /*!< (@ 0x0000011C) T=1 character wait timeout                                 */
  __IOM uint32_t  EVENTS_BW_TIMEOUT;            /*!< (@ 0x00000120) Block Wait timeout                                         */
  __IOM uint32_t  EVENTS_SW1SW2;                /*!< (@ 0x00000124) SW1 and SW2 bytes received                                 */
  __IOM uint32_t  EVENTS_RESET;                 /*!< (@ 0x00000128) Everything reset                                           */
  __IOM uint32_t  EVENTS_INS;                   /*!< (@ 0x0000012C) T=0 procedure byte INS received                            */
  __IOM uint32_t  EVENTS_NINS;                  /*!< (@ 0x00000130) T=0 procedure byte !INS received                           */
  __IOM uint32_t  EVENTS_ERROR;                 /*!< (@ 0x00000134) Error response                                             */
  __IOM uint32_t  EVENTS_READY_TX;              /*!< (@ 0x00000138) Byte sent after START_WRITE_FROM_REG                       */
  __IOM uint32_t  EVENTS_RX_DATA_READY;         /*!< (@ 0x0000013C) Byte received after START_READ_TO_REG                      */
  __IOM uint32_t  EVENTS_T1_RX_OVERRUN;         /*!< (@ 0x00000140) Unexpected bytes received after DMA RX[0...N],
                                                                    SW1SW2 in T=1                                              */
  __IOM uint32_t  EVENTS_T1_TX_ABORTED;         /*!< (@ 0x00000144) T=1 card responded with S(ABORT request)                   */
  __IOM uint32_t  EVENTS_T1_NON_I_BLOCK;        /*!< (@ 0x00000148) T=1 unrecognized (S or R) block (with correct
                                                                    LRC) stored in RX_DATA                                     */
  __IOM uint32_t  EVENTS_T1_LEN_ERROR;          /*!< (@ 0x0000014C) T=1 LEN = 255                                              */
  __IOM uint32_t  EVENTS_EDC_ERROR;             /*!< (@ 0x00000150) T=1 EDC error                                              */
  __IOM uint32_t  EVENTS_NAD_ERROR;             /*!< (@ 0x00000154) T=1 NAD error                                              */
  __IOM uint32_t  EVENTS_EVENTS_ERROR_COUNT_MAX;/*!< (@ 0x00000158) number of unsuccessful rx or tx operations equals
                                                                    max value                                                  */
  __IOM uint32_t  EVENTS_EVENTS_T1_RX_MORE;     /*!< (@ 0x0000015C) More bit high in PCB of Rx T=1 I block                     */
  __IOM uint32_t  EVENTS_EVENTS_T1_RX_FRAME_END;/*!< (@ 0x00000160) Len byte + 1 bytes of T1 Rx data received                  */
  __IM  uint32_t  RESERVED1[39];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED2[66];
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED3[60];
  __IOM uint32_t  SW1SW2;                       /*!< (@ 0x00000400) Sw1 and Sw2 bytes received from Sim card in T=1
                                                                    mode                                                       */
  __IOM uint32_t  CONVENTION;                   /*!< (@ 0x00000404) Data convention used in traffic between controller
                                                                    and SIM card                                               */
  __IOM uint32_t  LRCOUT;                       /*!< (@ 0x00000408) Latest generated LRC value                                 */
  __IM  uint32_t  RXDATA;                       /*!< (@ 0x0000040C) NonDMA received data                                       */
  __IOM uint32_t  T0SWXCOUNT;                   /*!< (@ 0x00000410) Number of SWx bytes received after T=0 Rx DMA
                                                                    finished                                                   */
  __IM  uint32_t  RESERVED4[59];
  __IOM uint32_t  CLKRATE;                      /*!< (@ 0x00000500) Divider value for setting the clock rate to the
                                                                    SIM card.                                                  */
  __IOM uint32_t  BAUDRATE;                     /*!< (@ 0x00000504) Divider value for setting the baud rate to the
                                                                    SIM card.                                                  */
  __IOM uint32_t  CHARACTERGUARDTIME;           /*!< (@ 0x00000508) Character Guard time                                       */
  __IOM uint32_t  CHARACTERWAITTIME;            /*!< (@ 0x0000050C) Character Wait time                                        */
  __IOM uint32_t  BLOCKWAITTIME;                /*!< (@ 0x00000510) Block Wait time                                            */
  __IOM uint32_t  PROTOCOL;                     /*!< (@ 0x00000514) Protocol selection                                         */
  __IOM uint32_t  LOWIMPEDANCE;                 /*!< (@ 0x00000518) Low impedance driver use                                   */
  __IOM uint32_t  T1PCBCONTROL;                 /*!< (@ 0x0000051C) T=1 Tx PCB bits 5:6                                        */
  __IOM uint32_t  CLOCKCONTROL;                 /*!< (@ 0x00000520) Clock Control                                              */
  __IOM uint32_t  VOLTAGE;                      /*!< (@ 0x00000524) Sim card operating voltage                                 */
  __IOM uint32_t  LRCENABLE;                    /*!< (@ 0x00000528) LRC Calculation enable                                     */
  __OM  uint32_t  TXDATA;                       /*!< (@ 0x0000052C) NonDMA data to be sent to the SIM card                     */
  __IOM uint32_t  UARTCONFIG;                   /*!< (@ 0x00000530) Uart configuration                                         */
  __IOM uint32_t  WRITEMAXATT;                  /*!< (@ 0x00000534) Number of write attempts before error interrupt            */
  __IOM uint32_t  READMAXATT;                   /*!< (@ 0x00000538) Number of read attempts before error interrupt             */
  __IOM uint32_t  AHBTESTWRITE;                 /*!< (@ 0x0000053C) Test data to write through AHB RX bus                      */
  __IM  uint32_t  AHBTESTREAD;                  /*!< (@ 0x00000540) Test data to read through AHB TX bus                       */
  __IOM uint32_t  RXPROLOGUEDATA;               /*!< (@ 0x00000544) Four first Rx data bytes from card                         */
  __IM  uint32_t  RESERVED5[11];
  __IOM uint32_t  UARTENABLE;                   /*!< (@ 0x00000574) UART Enable                                                */
  __OM  uint32_t  UARTRXENABLE;                 /*!< (@ 0x00000578) UART Rx Enable                                             */
  __OM  uint32_t  UARTTXENABLE;                 /*!< (@ 0x0000057C) UART Tx Enable                                             */
  __IM  uint32_t  RESERVED6[32];
  __IOM uint32_t  DMARXADDR;                    /*!< (@ 0x00000600) DMA access buffer RAM start address                        */
  __IOM uint32_t  DMARXBUFFERSIZE;              /*!< (@ 0x00000604) Byte count to receive in Dma Rx operation                  */
  __IM  uint32_t  DMARXBYTECOUNT;               /*!< (@ 0x00000608) Byte count received in latest Dma Rx operation             */
  __IOM uint32_t  DMARXENABLE;                  /*!< (@ 0x0000060C) Enable for rx dma                                          */
  __IM  uint32_t  DMARXSELECTLIST;              /*!< (@ 0x00000610) Rx select address from list                                */
  __IM  uint32_t  RESERVED7[59];
  __IOM uint32_t  DMATXADDR;                    /*!< (@ 0x00000700) Start address for DMA access in buffer RAM                 */
  __IOM uint32_t  DMATXBUFFERSIZE;              /*!< (@ 0x00000704) Byte count to transmit in Dma Rx operation                 */
  __IM  uint32_t  DMATXBYTECOUNT;               /*!< (@ 0x00000708) Byte count transmitted in latest Dma Tx operation          */
  __IOM uint32_t  DMATXENABLE;                  /*!< (@ 0x0000070C) Enable for rx dma                                          */
  __IM  uint32_t  DMATXSELECTLIST;              /*!< (@ 0x00000710) Tx select address from list                                */
} NRF_SIMIF_Type;                               /*!< Size = 1812 (0x714)                                                       */



/* =========================================================================================================================== */
/* ================                                       RAMBISTHUB_NS                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief RAM BIST Hub (RAMBISTHUB_NS)
  */

typedef struct {                                /*!< (@ 0x4002B000) RAMBISTHUB_NS Structure                                    */
  __IOM uint32_t  RUN;                          /*!< (@ 0x00000000) RUN BIST                                                   */
  __IM  uint32_t  RESERVED[63];
  __IOM uint32_t  SLEEP;                        /*!< (@ 0x00000100) BIST SLEEP EVENT                                           */
  __IOM uint32_t  FINISHED;                     /*!< (@ 0x00000104) BIST FINISHED EVENT                                        */
  __IM  uint32_t  RESERVED1[254];
  __IOM uint32_t  HUBENABLE;                    /*!< (@ 0x00000500) RAM BIST Hub enable                                        */
  __IOM uint32_t  SELECTBIST;                   /*!< (@ 0x00000504) Select bits for the individual BISTs to run                */
  __IOM uint32_t  BISTSTATUS;                   /*!< (@ 0x00000508) BIST status                                                */
  __IOM uint32_t  TESTTYPE;                     /*!< (@ 0x0000050C) RAM BIST test type                                         */
  __OM  uint32_t  FORCEONRETENTION;             /*!< (@ 0x00000510) Power request override to force RAM retention
                                                                    on                                                         */
} NRF_RAMBISTHUB_Type;                          /*!< Size = 1300 (0x514)                                                       */



/* =========================================================================================================================== */
/* ================                                          M2M0_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Memory to Memory DMA 0 (M2M0_NS)
  */

typedef struct {                                /*!< (@ 0x4002E000) M2M0_NS Structure                                          */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start DMA transfer                                         */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop DMA transfer                                          */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_END;                   /*!< (@ 0x00000100) DMA transfer complete                                      */
  __IOM uint32_t  EVENTS_STARTED;               /*!< (@ 0x00000104) DMA transfer started                                       */
  __IM  uint32_t  RESERVED1[126];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED2[128];
  __IOM M2M_IN_Type IN;                         /*!< (@ 0x00000510) Memory to memory input channel                             */
  __IOM M2M_OUT_Type OUT;                       /*!< (@ 0x00000520) Memory to memory output channel                            */
} NRF_M2M_Type;                                 /*!< Size = 1324 (0x52c)                                                       */



/* =========================================================================================================================== */
/* ================                                        GPIOTE0_NS                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Tasks and Events 0 (GPIOTE0_NS)
  */

typedef struct {                                /*!< (@ 0x40030000) GPIOTE0_NS Structure                                       */
  __OM  uint32_t  TASKS_OUT[1];                 /*!< (@ 0x00000000) Description collection: Task for writing to pin
                                                                    specified in CONFIG[n].PSEL. Action on pin
                                                                    is configured in CONFIG[n].POLARITY.                       */
  __IM  uint32_t  RESERVED[11];
  __OM  uint32_t  TASKS_SET[1];                 /*!< (@ 0x00000030) Description collection: Task for writing to pin
                                                                    specified in CONFIG[n].PSEL. Action on pin
                                                                    is to set it high.                                         */
  __IM  uint32_t  RESERVED1[11];
  __OM  uint32_t  TASKS_CLR[1];                 /*!< (@ 0x00000060) Description collection: Task for writing to pin
                                                                    specified in CONFIG[n].PSEL. Action on pin
                                                                    is to set it low.                                          */
  __IM  uint32_t  RESERVED2[7];
  __IOM uint32_t  SUBSCRIBE_OUT;                /*!< (@ 0x00000080) Subscribe configuration for TASKS_OUT                      */
  __IOM uint32_t  SUBSCRIBE_SET;                /*!< (@ 0x00000084) Subscribe configuration for TASKS_SET                      */
  __IOM uint32_t  SUBSCRIBE_CLR;                /*!< (@ 0x00000088) Subscribe configuration for TASKS_CLR                      */
  __IM  uint32_t  RESERVED3[29];
  __IOM uint32_t  EVENTS_IN[1];                 /*!< (@ 0x00000100) Description collection: Event generated from
                                                                    pin specified in CONFIG[n].PSEL                            */
  __IM  uint32_t  RESERVED4[30];
  __IOM uint32_t  EVENTS_PORT;                  /*!< (@ 0x0000017C) Event generated from multiple input GPIO pins
                                                                    with SENSE mechanism enabled                               */
  __IOM uint32_t  PUBLISH_IN;                   /*!< (@ 0x00000180) Publish configuration for EVENTS_IN                        */
  __IM  uint32_t  RESERVED5[30];
  __IOM uint32_t  PUBLISH_PORT;                 /*!< (@ 0x000001FC) Publish configuration for EVENTS_IN                        */
  __IM  uint32_t  RESERVED6[64];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED7[129];
  __IOM uint32_t  CONFIG[1];                    /*!< (@ 0x00000510) Description collection: Configuration for OUT[n],
                                                                    SET[n] and CLR[n] tasks and IN[n] event                    */
  __IM  uint32_t  RESERVED8[59];
  __IOM uint32_t  DEBOUNCE[1];                  /*!< (@ 0x00000600) Description collection: Debounce mode for GPIOTE
                                                                    channel n                                                  */
} NRF_GPIOTE_Type;                              /*!< Size = 1540 (0x604)                                                       */



/* =========================================================================================================================== */
/* ================                                       SECCONTROL_NS                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief Secure Control (SECCONTROL_NS)
  */

typedef struct {                                /*!< (@ 0x40032000) SECCONTROL_NS Structure                                    */
  __IM  uint32_t  RESERVED[256];
  __OM  uint32_t  OTPTOPADDR;                   /*!< (@ 0x00000400) Top address of the OTP area. Address must be
                                                                    divisible by four                                          */
  __OM  uint32_t  SECUREEXIT;                   /*!< (@ 0x00000404) Writing to this register will enable secure exit.          */
  __IOM uint32_t  SNOOPENABLE;                  /*!< (@ 0x00000408) Enable SecureEntry snooping.                               */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  AESDMAPROMOTION;              /*!< (@ 0x00000410) AES DMA promoted as a secure device.                       */
  __IOM uint32_t  SHADMAPROMOTION;              /*!< (@ 0x00000414) SHA DMA promoted as a secure device.                       */
  __IOM uint32_t  SECUREWATCHDOGPAUSE;          /*!< (@ 0x00000418) Secure watchdog pause control.                             */
  __IOM uint32_t  KMUENA;                       /*!< (@ 0x0000041C) SICR erase protection.                                     */
  __IOM uint32_t  RAMWAITSTATE;                 /*!< (@ 0x00000420) Modem M4 RAM wait state configuration.                     */
} NRF_SECURECONTROL_Type;                       /*!< Size = 1060 (0x424)                                                       */



/* =========================================================================================================================== */
/* ================                                      TIMEMARKMUX_NS                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief Timemark multiplexer for LTE System Timer (TIMEMARKMUX_NS)
  */

typedef struct {                                /*!< (@ 0x40033000) TIMEMARKMUX_NS Structure                                   */
  __IM  uint32_t  RESERVED[320];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable Timemark Mux                                        */
  __IOM uint32_t  TIMEMARK_INPUT_SELECT;        /*!< (@ 0x00000504) Timemark input select register                             */
} NRF_TIMEMARKMUX_Type;                         /*!< Size = 1288 (0x508)                                                       */



/* =========================================================================================================================== */
/* ================                                           P0_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Port (P0_NS)
  */

typedef struct {                                /*!< (@ 0x40034000) P0_NS Structure                                            */
  __IM  uint32_t  RESERVED[321];
  __IOM uint32_t  OUT;                          /*!< (@ 0x00000504) Write GPIO port                                            */
  __IOM uint32_t  OUTSET;                       /*!< (@ 0x00000508) Set individual bits in GPIO port                           */
  __IOM uint32_t  OUTCLR;                       /*!< (@ 0x0000050C) Clear individual bits in GPIO port                         */
  __IM  uint32_t  IN;                           /*!< (@ 0x00000510) Read GPIO port                                             */
  __IOM uint32_t  DIR;                          /*!< (@ 0x00000514) Direction of GPIO pins                                     */
  __IOM uint32_t  DIRSET;                       /*!< (@ 0x00000518) DIR set register                                           */
  __IOM uint32_t  DIRCLR;                       /*!< (@ 0x0000051C) DIR clear register                                         */
  __IOM uint32_t  LATCH;                        /*!< (@ 0x00000520) Latch register indicating what GPIO pins that
                                                                    have met the criteria set in the PIN_CNF[n].SENSE
                                                                    registers                                                  */
  __IOM uint32_t  DETECTMODE;                   /*!< (@ 0x00000524) Select between default DETECT signal behaviour
                                                                    and LDETECT mode                                           */
  __IM  uint32_t  RESERVED1[54];
  __IOM GPIO_PIN_Type PIN[10];                  /*!< (@ 0x00000600) Pin n direct access                                        */
  __IM  uint32_t  RESERVED2[44];
  __IOM uint32_t  PIN_CNF[10];                  /*!< (@ 0x00000700) Description collection: Configuration of GPIO
                                                                    pins                                                       */
} NRF_GPIO_Type;                                /*!< Size = 1832 (0x728)                                                       */



/* =========================================================================================================================== */
/* ================                                     TIMEREVENTSYNC_NS                                     ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer event synchronizer (TIMEREVENTSYNC_NS)
  */

typedef struct {                                /*!< (@ 0x40035000) TIMEREVENTSYNC_NS Structure                                */
  __IOM uint32_t  CLOCKENABLE;                  /*!< (@ 0x00000000) Enable synchronizer clock.                                 */
} NRF_TIMEREVENTSYNC_Type;                      /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                          TEMP_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Temperature Sensor (TEMP_NS)
  */

typedef struct {                                /*!< (@ 0x40039000) TEMP_NS Structure                                          */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start temperature measurement                              */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop temperature measurement                               */
  __IM  uint32_t  RESERVED[62];
  __IOM uint32_t  EVENTS_DATARDY;               /*!< (@ 0x00000100) Temperature measurement complete, data ready               */
  __IM  uint32_t  RESERVED1[127];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED2[125];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable temperature sensor bias current                     */
  __IM  uint32_t  RESERVED3;
  __IM  int32_t   TEMP;                         /*!< (@ 0x00000508) Temperature in degC (0.25deg steps)                        */
  __IM  uint32_t  RESERVED4;
  __IM  uint32_t  DATA;                         /*!< (@ 0x00000510) Data after dec and calib                                   */
  __IOM uint32_t  CALIB;                        /*!< (@ 0x00000514) Calibration value. Reset value is taken from
                                                                    FICR-&gt;CHIPCONF01 bit 31:22                              */
  __IM  uint32_t  RESERVED5[2];
  __IOM uint32_t  A1;                           /*!< (@ 0x00000520) Slope of 1st piece wise linear function                    */
  __IOM uint32_t  A2;                           /*!< (@ 0x00000524) Slope of 2nd piece wise linear function                    */
  __IOM uint32_t  A3;                           /*!< (@ 0x00000528) Slope of 3rd piece wise linear function                    */
  __IOM uint32_t  A4;                           /*!< (@ 0x0000052C) Slope of 4th piece wise linear function                    */
  __IOM uint32_t  A5;                           /*!< (@ 0x00000530) Slope of 5th piece wise linear function                    */
  __IOM uint32_t  A6;                           /*!< (@ 0x00000534) Slope of 6th piece wise linear function                    */
  __IM  uint32_t  RESERVED6[2];
  __IOM uint32_t  B1;                           /*!< (@ 0x00000540) y-intercept of 1st piece wise linear function              */
  __IOM uint32_t  B2;                           /*!< (@ 0x00000544) y-intercept of 2nd piece wise linear function              */
  __IOM uint32_t  B3;                           /*!< (@ 0x00000548) y-intercept of 3rd piece wise linear function              */
  __IOM uint32_t  B4;                           /*!< (@ 0x0000054C) y-intercept of 4th piece wise linear function              */
  __IOM uint32_t  B5;                           /*!< (@ 0x00000550) y-intercept of 5th piece wise linear function              */
  __IOM uint32_t  B6;                           /*!< (@ 0x00000554) y-intercept of 6th piece wise linear function              */
  __IM  uint32_t  RESERVED7[2];
  __IOM uint32_t  T1;                           /*!< (@ 0x00000560) End point of 1st piece wise linear function                */
  __IOM uint32_t  T2;                           /*!< (@ 0x00000564) End point of 2nd piece wise linear function                */
  __IOM uint32_t  T3;                           /*!< (@ 0x00000568) End point of 3rd piece wise linear function                */
  __IOM uint32_t  T4;                           /*!< (@ 0x0000056C) End point of 4th piece wise linear function                */
  __IOM uint32_t  T5;                           /*!< (@ 0x00000570) End point of 5th piece wise linear function                */
} NRF_TEMP_Type;                                /*!< Size = 1396 (0x574)                                                       */



/* =========================================================================================================================== */
/* ================                                     LFCLKCALIBMEAS_NS                                     ================ */
/* =========================================================================================================================== */


/**
  * @brief LfClk Calibration Measurement (LFCLKCALIBMEAS_NS)
  */

typedef struct {                                /*!< (@ 0x4003B000) LFCLKCALIBMEAS_NS Structure                                */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start Measuring                                            */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Switch LfClkCalibMeas to STOPPED state. Brings
                                                                    LfClkCalibMeas from SHUTDOWN state to a
                                                                    configurable state before a measurement
                                                                    is launched.                                               */
  __OM  uint32_t  TASKS_SHUTDOWN;               /*!< (@ 0x00000008) Shut down LfClkCalibMeas                                   */
  __IM  uint32_t  RESERVED[61];
  __IOM uint32_t  EVENTS_COMPLETE;              /*!< (@ 0x00000100) Measurement completed.                                     */
  __IM  uint32_t  RESERVED1[127];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED2[60];
  __IM  uint32_t  RUNTIME;                      /*!< (@ 0x00000400) Runtime status of the measurement.                         */
  __IM  uint32_t  LCMEAS0;                      /*!< (@ 0x00000404) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS1;                      /*!< (@ 0x00000408) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS2;                      /*!< (@ 0x0000040C) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS3;                      /*!< (@ 0x00000410) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS4;                      /*!< (@ 0x00000414) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS5;                      /*!< (@ 0x00000418) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS6;                      /*!< (@ 0x0000041C) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS7;                      /*!< (@ 0x00000420) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS8;                      /*!< (@ 0x00000424) Results of the measurement.                                */
  __IM  uint32_t  LCMEAS9;                      /*!< (@ 0x00000428) Results of the measurement.                                */
  __IM  uint32_t  STATE;                        /*!< (@ 0x0000042C) Current running state of the IP.                           */
  __IM  uint32_t  RESERVED3[52];
  __IOM uint32_t  MEASLEN;                      /*!< (@ 0x00000500) Length of the measurement.                                 */
} NRF_LFCLKCALIBMEAS_Type;                      /*!< Size = 1284 (0x504)                                                       */



/* =========================================================================================================================== */
/* ================                                          TWIM_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C compatible Two-Wire Master Interface with EasyDMA (TWIM_NS)
  */

typedef struct {                                /*!< (@ 0x4003C000) TWIM_NS Structure                                          */
  __OM  uint32_t  TASKS_STARTRX;                /*!< (@ 0x00000000) Start TWI receive sequence                                 */
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  TASKS_STARTTX;                /*!< (@ 0x00000008) Start TWI transmit sequence                                */
  __IM  uint32_t  RESERVED1[2];
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000014) Stop TWI transaction. Must be issued while the
                                                                    TWI master is not suspended.                               */
  __IM  uint32_t  RESERVED2;
  __OM  uint32_t  TASKS_SUSPEND;                /*!< (@ 0x0000001C) Suspend TWI transaction                                    */
  __OM  uint32_t  TASKS_RESUME;                 /*!< (@ 0x00000020) Resume TWI transaction                                     */
  __IM  uint32_t  RESERVED3[56];
  __IOM uint32_t  EVENTS_STOPPED;               /*!< (@ 0x00000104) TWI stopped                                                */
  __IM  uint32_t  RESERVED4[2];
  __IOM uint32_t  EVENTS_ENDRX;                 /*!< (@ 0x00000110) End of RXD buffer access by EasyDMA                        */
  __IM  uint32_t  RESERVED5[3];
  __IOM uint32_t  EVENTS_ENDTX;                 /*!< (@ 0x00000120) END of TXD buffer access by EasyDMA                        */
  __IOM uint32_t  EVENTS_ERROR;                 /*!< (@ 0x00000124) TWI error                                                  */
  __IM  uint32_t  RESERVED6[4];
  __IOM uint32_t  EVENTS_BB;                    /*!< (@ 0x00000138) TWI byte boundary, generated before each byte
                                                                    that is sent or received                                   */
  __IM  uint32_t  RESERVED7[3];
  __IOM uint32_t  EVENTS_SUSPENDED;             /*!< (@ 0x00000148) Last byte has been sent out after the SUSPEND
                                                                    task has been issued, TWI traffic is now
                                                                    suspended.                                                 */
  __IOM uint32_t  EVENTS_RXSTARTED;             /*!< (@ 0x0000014C) Receive sequence started                                   */
  __IOM uint32_t  EVENTS_TXSTARTED;             /*!< (@ 0x00000150) Transmit sequence started                                  */
  __IM  uint32_t  RESERVED8[2];
  __IOM uint32_t  EVENTS_LASTRX;                /*!< (@ 0x0000015C) Byte boundary, starting to receive the last byte           */
  __IOM uint32_t  EVENTS_LASTTX;                /*!< (@ 0x00000160) Byte boundary, starting to transmit the last
                                                                    byte                                                       */
  __IM  uint32_t  RESERVED9[39];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED10[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED11[110];
  __IOM uint32_t  ERRORSRC;                     /*!< (@ 0x000004C4) Error source                                               */
  __IM  uint32_t  RESERVED12[14];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable TWIM                                                */
  __IM  uint32_t  RESERVED13;
  __IOM TWIM_PSEL_Type PSEL;                    /*!< (@ 0x00000508) Unspecified                                                */
  __IM  uint32_t  RESERVED14[5];
  __IOM uint32_t  FREQUENCY;                    /*!< (@ 0x00000524) TWI frequency. Accuracy depends on the HFCLK
                                                                    source selected.                                           */
  __IM  uint32_t  RESERVED15[3];
  __IOM TWIM_RXD_Type RXD;                      /*!< (@ 0x00000534) RXD EasyDMA channel                                        */
  __IOM TWIM_TXD_Type TXD;                      /*!< (@ 0x00000544) TXD EasyDMA channel                                        */
  __IM  uint32_t  RESERVED16[13];
  __IOM uint32_t  ADDRESS;                      /*!< (@ 0x00000588) Address used in the TWI transfer                           */
} NRF_TWIM_Type;                                /*!< Size = 1420 (0x58c)                                                       */



/* =========================================================================================================================== */
/* ================                                      CTRL_AP_PERI_S                                       ================ */
/* =========================================================================================================================== */


/**
  * @brief Control access port (CTRL_AP_PERI_S)
  */

typedef struct {                                /*!< (@ 0x4003D000) CTRL_AP_PERI_S Structure                                   */
  __IM  uint32_t  RESERVED[256];
  __IOM CTRLAPPERI_MAILBOX_Type MAILBOX;        /*!< (@ 0x00000400) Unspecified                                                */
  __IM  uint32_t  RESERVED1[30];
  __IOM CTRLAPPERI_ERASEPROTECT_Type ERASEPROTECT;/*!< (@ 0x00000500) Unspecified                                              */
} NRF_CTRLAPPERI_Type;                          /*!< Size = 1288 (0x508)                                                       */



/* =========================================================================================================================== */
/* ================                                        L2CIPHER_NS                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief L2 Cipher Registers (L2CIPHER_NS)
  */

typedef struct {                                /*!< (@ 0x40040000) L2CIPHER_NS Structure                                      */
  __IM  uint32_t  UNUSED;                       /*!< (@ 0x00000000) Unused.                                                    */
} NRF_L2CIPHER_Type;                            /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         AESL2_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief AES-128 HW accelerator for LTE L2 security and MAC (AESL2_NS)
  */

typedef struct {                                /*!< (@ 0x40042000) AESL2_NS Structure                                         */
  __OM  uint32_t  TASKS_START_GATHER;           /*!< (@ 0x00000000) Start input DMA                                            */
  __OM  uint32_t  TASKS_STOP_GATHER;            /*!< (@ 0x00000004) Stop input DMA                                             */
  __OM  uint32_t  TASKS_START_SCATTER;          /*!< (@ 0x00000008) Start output DMA                                           */
  __OM  uint32_t  TASKS_STOP_SCATTER;           /*!< (@ 0x0000000C) Stop output DMA                                            */
  __OM  uint32_t  TASKS_INITIALIZE_AES;         /*!< (@ 0x00000010) New keys (and IV) ready to be used, reset keybytes,
                                                                    ivbytes                                                    */
  __OM  uint32_t  TASKS_START_OPERATION;        /*!< (@ 0x00000014) Start cipher / MAC calculation depending on MODE           */
  __OM  uint32_t  TASKS_FINALIZE_MAC;           /*!< (@ 0x00000018) Finalize MAC calculation                                   */
  __OM  uint32_t  TASKS_RESET;                  /*!< (@ 0x0000001C) Stop all transfers and crypto operations (initialize)      */
  __IM  uint32_t  RESERVED[56];
  __IOM uint32_t  EVENTS_GATHER_STARTED;        /*!< (@ 0x00000100) Input DMA started                                          */
  __IOM uint32_t  EVENTS_GATHER_DONE;           /*!< (@ 0x00000104) Input DMA done                                             */
  __IOM uint32_t  EVENTS_SCATTER_STARTED;       /*!< (@ 0x00000108) Output DMA started                                         */
  __IOM uint32_t  EVENTS_SCATTER_DONE;          /*!< (@ 0x0000010C) Output DMA done                                            */
  __IOM uint32_t  EVENTS_IV_READY;              /*!< (@ 0x00000110) IV received (ivbytes == 16)                                */
  __IOM uint32_t  EVENTS_AES_INITIALIZED;       /*!< (@ 0x00000114) New keys and IV taken into use                             */
  __IOM uint32_t  EVENTS_MESSAGE_READY;         /*!< (@ 0x00000118) LENGTH == 0                                                */
  __IOM uint32_t  EVENTS_MAC_READY;             /*!< (@ 0x0000011C) MAC calculated                                             */
  __IOM uint32_t  EVENTS_RESETTED;              /*!< (@ 0x00000120) Resetted (all transfers and crypto operations
                                                                    stopped)                                                   */
  __IM  uint32_t  RESERVED1[55];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED2[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED3[60];
  __IOM uint32_t  LENGTH;                       /*!< (@ 0x00000400) Keystream length in bits (Cipher), message length
                                                                    in bits (MAC)                                              */
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000404) Mode: 0 == Cipher, 1 == MAC                                */
  __IM  uint32_t  RESERVED4[126];
  __IM  uint32_t  MAC;                          /*!< (@ 0x00000600) EIA2 MAC                                                   */
  __IM  uint32_t  RESERVED5[127];
  __IOM uint32_t  INJOBPTR;                     /*!< (@ 0x00000800) Input job pointer                                          */
  __IM  uint32_t  RESERVED6[63];
  __IOM uint32_t  OUTJOBPTR;                    /*!< (@ 0x00000900) Output job pointer                                         */
} NRF_AESL2_Type;                               /*!< Size = 2308 (0x904)                                                       */



/* =========================================================================================================================== */
/* ================                                          SNOW_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Snow 3G Security IP (SNOW_NS)
  */

typedef struct {                                /*!< (@ 0x40043000) SNOW_NS Structure                                          */
  __OM  uint32_t  TASKS_STARTGATHER;            /*!< (@ 0x00000000) Start input DMA                                            */
  __OM  uint32_t  TASKS_STOPGATHER;             /*!< (@ 0x00000004) Stop input DMA                                             */
  __OM  uint32_t  TASKS_STARTSCATTER;           /*!< (@ 0x00000008) Start output DMA                                           */
  __OM  uint32_t  TASKS_STOPSCATTER;            /*!< (@ 0x0000000C) Stop output DMA                                            */
  __OM  uint32_t  TASKS_INITIALIZESNOW3G;       /*!< (@ 0x00000010) New keys (and IV) ready to be used, reset keybytes,
                                                                    ivbytes                                                    */
  __OM  uint32_t  TASKS_STARTOPERATION;         /*!< (@ 0x00000014) Start cipher / MAC calculation depending on MODE           */
  __OM  uint32_t  TASKS_FINALIZEMAC;            /*!< (@ 0x00000018) Finalize MAC calculation                                   */
  __OM  uint32_t  TASKS_RESET;                  /*!< (@ 0x0000001C) Stop all transfers and crypto operations (initialize)      */
  __IM  uint32_t  RESERVED[56];
  __IOM uint32_t  EVENTS_GATHERSTARTED;         /*!< (@ 0x00000100) Input DMA started                                          */
  __IOM uint32_t  EVENTS_GATHERDONE;            /*!< (@ 0x00000104) Input DMA done                                             */
  __IOM uint32_t  EVENTS_SCATTERSTARTED;        /*!< (@ 0x00000108) Output DMA started                                         */
  __IOM uint32_t  EVENTS_SCATTERDONE;           /*!< (@ 0x0000010C) Output DMA done                                            */
  __IOM uint32_t  EVENTS_IVREADY;               /*!< (@ 0x00000110) IV received (ivbytes == 16)                                */
  __IOM uint32_t  EVENTS_SNOW3GINITIALIZED;     /*!< (@ 0x00000114) New keys and IV taken into use                             */
  __IOM uint32_t  EVENTS_MESSAGEREADY;          /*!< (@ 0x00000118) LENGTH == 0                                                */
  __IOM uint32_t  EVENTS_MACREADY;              /*!< (@ 0x0000011C) MAC calculated                                             */
  __IOM uint32_t  EVENTS_RESETTED;              /*!< (@ 0x00000120) Resetted (all transfers and crypto operations
                                                                    stopped)                                                   */
  __IM  uint32_t  RESERVED1[55];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED2[66];
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED3[60];
  __IOM uint32_t  LENGTH;                       /*!< (@ 0x00000400) Keystream length in bits (Cipher), message length
                                                                    in bits (MAC)                                              */
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000404) Mode select                                                */
  __IM  uint32_t  RESERVED4[126];
  __IM  uint32_t  MAC;                          /*!< (@ 0x00000600) Message Authentication Code.                               */
  __IM  uint32_t  RESERVED5[127];
  __IOM uint32_t  INJOBPTR;                     /*!< (@ 0x00000800) Input job pointer                                          */
  __IM  uint32_t  RESERVED6[63];
  __IOM uint32_t  OUTJOBPTR;                    /*!< (@ 0x00000900) Output job pointer                                         */
} NRF_SNOW_Type;                                /*!< Size = 2308 (0x904)                                                       */



/* =========================================================================================================================== */
/* ================                                          ZUC_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief ZUC LTE L2 security IP (ZUC_NS)
  */

typedef struct {                                /*!< (@ 0x40044000) ZUC_NS Structure                                           */
  __OM  uint32_t  TASKS_STARTGATHER;            /*!< (@ 0x00000000) Start input DMA                                            */
  __OM  uint32_t  TASKS_STOPGATHER;             /*!< (@ 0x00000004) Stop input DMA                                             */
  __OM  uint32_t  TASKS_STARTSCATTER;           /*!< (@ 0x00000008) Start output DMA                                           */
  __OM  uint32_t  TASKS_STOPSCATTER;            /*!< (@ 0x0000000C) Stop output DMA                                            */
  __OM  uint32_t  TASKS_INITIALIZEZUC;          /*!< (@ 0x00000010) New keys (and IV) ready to be used, reset keybytes,
                                                                    ivbytes                                                    */
  __OM  uint32_t  TASKS_STARTOPERATION;         /*!< (@ 0x00000014) Start cipher / MAC calculation depending on MODE           */
  __OM  uint32_t  TASKS_FINALIZEMAC;            /*!< (@ 0x00000018) Finalize MAC calculation                                   */
  __OM  uint32_t  TASKS_RESET;                  /*!< (@ 0x0000001C) Stop all transfers and crypto operations (initialize)      */
  __IM  uint32_t  RESERVED[56];
  __IOM uint32_t  EVENTS_GATHERSTARTED;         /*!< (@ 0x00000100) Input DMA started                                          */
  __IOM uint32_t  EVENTS_GATHERDONE;            /*!< (@ 0x00000104) Input DMA done                                             */
  __IOM uint32_t  EVENTS_SCATTERSTARTED;        /*!< (@ 0x00000108) Output DMA started                                         */
  __IOM uint32_t  EVENTS_SCATTERDONE;           /*!< (@ 0x0000010C) Output DMA done                                            */
  __IOM uint32_t  EVENTS_IVREADY;               /*!< (@ 0x00000110) IV received (ivbytes == 16)                                */
  __IOM uint32_t  EVENTS_ZUCINITIALIZED;        /*!< (@ 0x00000114) New keys and IV taken into use                             */
  __IOM uint32_t  EVENTS_MESSAGEREADY;          /*!< (@ 0x00000118) LENGTH == 0                                                */
  __IOM uint32_t  EVENTS_MACREADY;              /*!< (@ 0x0000011C) MAC calculated                                             */
  __IOM uint32_t  EVENTS_RESETTED;              /*!< (@ 0x00000120) Resetted (all transfers and crypto operations
                                                                    stopped)                                                   */
  __IM  uint32_t  RESERVED1[55];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED2[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED3[60];
  __IOM uint32_t  LENGTH;                       /*!< (@ 0x00000400) Keystream length in bits (Cipher), message length
                                                                    in bits (MAC)                                              */
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000404) Mode select                                                */
  __IM  uint32_t  RESERVED4[126];
  __IM  uint32_t  MAC;                          /*!< (@ 0x00000600) Message Authentication Code.                               */
  __IM  uint32_t  RESERVED5[127];
  __IOM uint32_t  INDCP_MEMORY_ADDR;            /*!< (@ 0x00000800) Pointer to input DMA scatter and gather job list
                                                                    (Write) / current output job address (Read)                */
  __IM  uint32_t  RESERVED6[63];
  __IOM uint32_t  OUTDCP_MEMORY_ADDR;           /*!< (@ 0x00000900) Pointer to output DMA scatter and gather job
                                                                    list (Write) / current output job address
                                                                    (Read)                                                     */
} NRF_ZUC_Type;                                 /*!< Size = 2308 (0x904)                                                       */



/* =========================================================================================================================== */
/* ================                                          SHA_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief SHA-1/SHA-256 (SHA_NS)
  */

typedef struct {                                /*!< (@ 0x40050000) SHA_NS Structure                                           */
  __OM  uint32_t  TASKS_START_GATHER;           /*!< (@ 0x00000000) Start input DMA.                                           */
  __OM  uint32_t  TASKS_STOP_GATHER;            /*!< (@ 0x00000004) Stop input DMA.                                            */
  __OM  uint32_t  TASKS_START_OPERATION;        /*!< (@ 0x00000008) Start SHA-x operation depending on mode (start
                                                                    accepting data).                                           */
  __OM  uint32_t  TASKS_FINALIZE;               /*!< (@ 0x0000000C) Finalize SHA calculation.                                  */
  __OM  uint32_t  TASKS_RESET;                  /*!< (@ 0x00000010) Stop all transfers and crypto operations (initialize).     */
  __IM  uint32_t  RESERVED[59];
  __IOM uint32_t  EVENTS_GATHER_STARTED;        /*!< (@ 0x00000100) Input DMA started.                                         */
  __IOM uint32_t  EVENTS_GATHER_DONE;           /*!< (@ 0x00000104) Input DMA done.                                            */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  EVENTS_SHA_READY;             /*!< (@ 0x0000010C) SHA calculated.                                            */
  __IOM uint32_t  EVENTS_MESSAGE_READY;         /*!< (@ 0x00000110) LENGTH == 0.                                               */
  __IOM uint32_t  EVENTS_RESETTED;              /*!< (@ 0x00000114) Resetted (all transfers and crypto operations
                                                                    stopped).                                                  */
  __IM  uint32_t  RESERVED2[58];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED3[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED4[61];
  __IOM uint32_t  LENGTH;                       /*!< (@ 0x00000400) Message length in bits.                                    */
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000404) Configuration.                                             */
  __IM  uint32_t  RESERVED5[126];
  __IM  uint32_t  H7;                           /*!< (@ 0x00000600) Final result H7 (SHA-256), H4 (SHA-1). Updated
                                                                    after every 512bit block calculated.                       */
  __IM  uint32_t  H6;                           /*!< (@ 0x00000604) Final result H6 (SHA-256), H3 (SHA-1). Updated
                                                                    after every 512bit block calculated.                       */
  __IM  uint32_t  H5;                           /*!< (@ 0x00000608) Final result H5 (SHA-256), H2 (SHA-1). Updated
                                                                    after every 512bit block calculated.                       */
  __IM  uint32_t  H4;                           /*!< (@ 0x0000060C) Final result H4 (SHA-256), H1 (SHA-1). Updated
                                                                    after every 512bit block calculated.                       */
  __IM  uint32_t  H3;                           /*!< (@ 0x00000610) Final result H3 (SHA-256), H0 (SHA-1). Updated
                                                                    after every 512bit block calculated.                       */
  __IM  uint32_t  H2;                           /*!< (@ 0x00000614) Final result H2 (SHA-256). Updated after every
                                                                    512bit block calculated.                                   */
  __IM  uint32_t  H1;                           /*!< (@ 0x00000618) Final result H1 (SHA-256). Updated after every
                                                                    512bit block calculated.                                   */
  __IM  uint32_t  H0;                           /*!< (@ 0x0000061C) Final result H0 (SHA-256). Updated after every
                                                                    512bit block calculated..                                  */
  __IM  uint32_t  RESERVED6[4];
  __IM  uint32_t  H7_R;                         /*!< (@ 0x00000630) Final result H7_R (SHA-256), H4_R (SHA-1) in
                                                                    reversed byte order. Updated after every
                                                                    512bit block calculated.                                   */
  __IM  uint32_t  H6_R;                         /*!< (@ 0x00000634) Final result H6_R (SHA-256), H3_R (SHA-1) in
                                                                    reversed byte order. Updated after every
                                                                    512bit block calculated.                                   */
  __IM  uint32_t  H5_R;                         /*!< (@ 0x00000638) Final result H5_R (SHA-256), H2_R (SHA-1) in
                                                                    reversed byte order. Updated after every
                                                                    512bit block calculated.                                   */
  __IM  uint32_t  H4_R;                         /*!< (@ 0x0000063C) Final result H4_R (SHA-256), H1_R (SHA-1) in
                                                                    reversed byte order. Updated after every
                                                                    512bit block calculated.                                   */
  __IM  uint32_t  H3_R;                         /*!< (@ 0x00000640) Final result H3_R (SHA-256), H0_R (SHA-1) in
                                                                    reversed byte order. Updated after every
                                                                    512bit block calculated.                                   */
  __IM  uint32_t  H2_R;                         /*!< (@ 0x00000644) Final result H2_R (SHA-256) in reversed byte
                                                                    order. Updated after every 512bit block
                                                                    calculated.                                                */
  __IM  uint32_t  H1_R;                         /*!< (@ 0x00000648) Final result H1_R (SHA-256) in reversed byte
                                                                    order. Updated after every 512bit block
                                                                    calculated.                                                */
  __IM  uint32_t  H0_R;                         /*!< (@ 0x0000064C) Final result H0_R (SHA-256) in reversed byte
                                                                    order. Updated after every 512bit block
                                                                    calculated..                                               */
  __IM  uint32_t  RESERVED7[64];
  __IM  uint32_t  INBYTECOUNT;                  /*!< (@ 0x00000750) Bytes transferred in current job.                          */
  __IM  uint32_t  RESERVED8[43];
  __OM  uint32_t  INJOBPTR;                     /*!< (@ 0x00000800) Input job pointer.                                         */
} NRF_SHA_Type;                                 /*!< Size = 2052 (0x804)                                                       */



/* =========================================================================================================================== */
/* ================                                         TLSAES_NS                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief AES cipher with ECB, CBC, CBC-MAC and CTR (TLSAES_NS)
  */

typedef struct {                                /*!< (@ 0x40051000) TLSAES_NS Structure                                        */
  __OM  uint32_t  TASKS_START_GATHER;           /*!< (@ 0x00000000) Start input DMA                                            */
  __OM  uint32_t  TASKS_STOP_GATHER;            /*!< (@ 0x00000004) Stop input DMA                                             */
  __OM  uint32_t  TASKS_START_SCATTER;          /*!< (@ 0x00000008) Start output DMA                                           */
  __OM  uint32_t  TASKS_STOP_SCATTER;           /*!< (@ 0x0000000C) Stop output DMA                                            */
  __OM  uint32_t  TASKS_INITIALIZE_AES;         /*!< (@ 0x00000010) New keys (and IV) ready to be used, reset keybytes,
                                                                    ivbytes                                                    */
  __OM  uint32_t  TASKS_FILL_AES_INPUT;         /*!< (@ 0x00000014) Transfer 8 bytes of input from DMA to AES core             */
  __OM  uint32_t  TASKS_AES_ENCRYPT;            /*!< (@ 0x00000018) Encrypt                                                    */
  __OM  uint32_t  TASKS_AES_DECRYPT;            /*!< (@ 0x0000001C) Decrypt                                                    */
  __OM  uint32_t  TASKS_DRAIN_AES_OUTPUT;       /*!< (@ 0x00000020) Transfer 8 bytes of output from AES core to DMA            */
  __OM  uint32_t  TASKS_RESET;                  /*!< (@ 0x00000024) Stop all transfers and crypto operations (software
                                                                    reset)                                                     */
  __IM  uint32_t  RESERVED[54];
  __IOM uint32_t  EVENTS_GATHER_STARTED;        /*!< (@ 0x00000100) Input DMA started                                          */
  __IOM uint32_t  EVENTS_GATHER_DONE;           /*!< (@ 0x00000104) Input DMA done                                             */
  __IOM uint32_t  EVENTS_SCATTER_STARTED;       /*!< (@ 0x00000108) Output DMA started                                         */
  __IOM uint32_t  EVENTS_SCATTER_DONE;          /*!< (@ 0x0000010C) Output DMA done                                            */
  __IOM uint32_t  EVENTS_KEY_READY;             /*!< (@ 0x00000110) Key received (keybytes == 16)                              */
  __IOM uint32_t  EVENTS_IV_READY;              /*!< (@ 0x00000114) IV received (ivbytes == 16)                                */
  __IOM uint32_t  EVENTS_AES_INITIALIZED;       /*!< (@ 0x00000118) New keys (and IV) taken into use                           */
  __IOM uint32_t  EVENTS_AES_INPUT_FULL;        /*!< (@ 0x0000011C) 8 bytes of input stored to AES core                        */
  __IOM uint32_t  EVENTS_AES_DONE;              /*!< (@ 0x00000120) Encrypt/decrypt action ready                               */
  __IOM uint32_t  EVENTS_AES_OUTPUT_EMPTY;      /*!< (@ 0x00000124) 8 bytes of output read from AES core                       */
  __IOM uint32_t  EVENTS_MAC_READY;             /*!< (@ 0x00000128) CBC-MAC calculated                                         */
  __IOM uint32_t  EVENTS_RESETTED;              /*!< (@ 0x0000012C) Resetted (all transfers and crypto operations
                                                                    stopped)                                                   */
  __IM  uint32_t  RESERVED1[52];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED2[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED3[60];
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000400) Operation mode                                             */
  __IOM uint32_t  CTRBITS;                      /*!< (@ 0x00000404) Amount of counter bits used in the CTR mode                */
  __IOM uint32_t  KEYMODE;                      /*!< (@ 0x00000408) Selects which key is utilized in ciphering operations      */
  __IOM uint32_t  LENGTH;                       /*!< (@ 0x0000040C) Length of the CBC-MAC data to be authenticated             */
  __IM  uint32_t  RESERVED4[60];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable/disable block                                       */
  __IM  uint32_t  RESERVED5[191];
  __IOM uint32_t  INJOBPTR;                     /*!< (@ 0x00000800) Pointer to the memory address containing the
                                                                    input job list                                             */
  __IM  uint32_t  RESERVED6[63];
  __IOM uint32_t  OUTJOBPTR;                    /*!< (@ 0x00000900) Pointer to the memory address containing the
                                                                    output job list                                            */
} NRF_AES_Type;                                 /*!< Size = 2308 (0x904)                                                       */



/* =========================================================================================================================== */
/* ================                                       DESCIPHER_NS                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief DES HW Accelerator (DESCIPHER_NS)
  */

typedef struct {                                /*!< (@ 0x40052000) DESCIPHER_NS Structure                                     */
  __OM  uint32_t  TASKS_START_GATHER;           /*!< (@ 0x00000000) Start input DMA                                            */
  __OM  uint32_t  TASKS_STOP_GATHER;            /*!< (@ 0x00000004) Stop input DMA                                             */
  __OM  uint32_t  TASKS_START_SCATTER;          /*!< (@ 0x00000008) Start output DMA                                           */
  __OM  uint32_t  TASKS_STOP_SCATTER;           /*!< (@ 0x0000000C) Stop output DMA                                            */
  __OM  uint32_t  TASKS_INITIALIZE_DES;         /*!< (@ 0x00000010) New keys (and IV) ready to be used, reset keybytes,
                                                                    ivbytes                                                    */
  __OM  uint32_t  TASKS_FILL_DES_INPUT;         /*!< (@ 0x00000014) Transfer 8 bytes of input from DMA to DES core             */
  __OM  uint32_t  TASKS_DES_ENCRYPT_1;          /*!< (@ 0x00000018) Starts DES encryption with keyset 1 ( input -&gt;
                                                                    output)                                                    */
  __OM  uint32_t  TASKS_DES_DECRYPT_1;          /*!< (@ 0x0000001C) Starts DES decryption with keyset 1 ( input -&gt;
                                                                    output)                                                    */
  __OM  uint32_t  TASKS_DES_ENCRYPT_2;          /*!< (@ 0x00000020) Starts DES encryption with keyset 2 (output -&gt;
                                                                    output)                                                    */
  __OM  uint32_t  TASKS_DES_DECRYPT_2;          /*!< (@ 0x00000024) Starts DES decryption with keyset 2 (output -&gt;
                                                                    output)                                                    */
  __OM  uint32_t  TASKS_DES_ENCRYPT_3;          /*!< (@ 0x00000028) Starts DES encryption with keyset 3 (output -&gt;
                                                                    output)                                                    */
  __OM  uint32_t  TASKS_DES_DECRYPT_3;          /*!< (@ 0x0000002C) Starts DES decryption with keyset 3 (output -&gt;
                                                                    output)                                                    */
  __OM  uint32_t  TASKS_DRAIN_DES_OUTPUT;       /*!< (@ 0x00000030) Transfer 8 bytes of output from DES core to DMA            */
  __OM  uint32_t  TASKS_RESET;                  /*!< (@ 0x00000034) Stop all transfers and crypto operations (software
                                                                    reset)                                                     */
  __IM  uint32_t  RESERVED[50];
  __IOM uint32_t  EVENTS_GATHER_STARTED;        /*!< (@ 0x00000100) Input DMA started                                          */
  __IOM uint32_t  EVENTS_GATHER_DONE;           /*!< (@ 0x00000104) Input DMA done                                             */
  __IOM uint32_t  EVENTS_SCATTER_STARTED;       /*!< (@ 0x00000108) Output DMA started                                         */
  __IOM uint32_t  EVENTS_SCATTER_DONE;          /*!< (@ 0x0000010C) Output DMA done                                            */
  __IOM uint32_t  EVENTS_KEY_1_READY;           /*!< (@ 0x00000110) Key #1 received (keybytes == 8)                            */
  __IOM uint32_t  EVENTS_KEY_3_READY;           /*!< (@ 0x00000114) Keys #1, #2 and #3 received (keybytes == 24)               */
  __IOM uint32_t  EVENTS_IV_READY;              /*!< (@ 0x00000118) IV received (ivbytes == 8)                                 */
  __IOM uint32_t  EVENTS_DES_INITIALIZED;       /*!< (@ 0x0000011C) New keys (and IV) taken into use                           */
  __IOM uint32_t  EVENTS_DES_INPUT_FULL;        /*!< (@ 0x00000120) 8 bytes of input stored to DES core                        */
  __IOM uint32_t  EVENTS_DES_DONE_1;            /*!< (@ 0x00000124) Action with key 1 ready                                    */
  __IOM uint32_t  EVENTS_DES_DONE_2;            /*!< (@ 0x00000128) Action with key 2 ready                                    */
  __IOM uint32_t  EVENTS_DES_DONE_3;            /*!< (@ 0x0000012C) Action with key 3 ready                                    */
  __IOM uint32_t  EVENTS_DES_OUTPUT_EMPTY;      /*!< (@ 0x00000130) 8 bytes of output read from DES core                       */
  __IOM uint32_t  EVENTS_RESETTED;              /*!< (@ 0x00000134) Resetted (all transfers and crypto operations
                                                                    stopped)                                                   */
  __IM  uint32_t  RESERVED1[50];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED2[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED3[61];
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000404) Mode: 0 == ECB, 1 == CBC                                   */
  __IM  uint32_t  RESERVED4[254];
  __IOM uint32_t  INJOBPTR;                     /*!< (@ 0x00000800) Input DMA job pointer register                             */
  __IM  uint32_t  RESERVED5[63];
  __IOM uint32_t  OUTJOBPTR;                    /*!< (@ 0x00000900) Output DMA job pointer register                            */
} NRF_DES_Type;                                 /*!< Size = 2308 (0x904)                                                       */



/* =========================================================================================================================== */
/* ================                                          IPC_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter Processor Communication (IPC_NS)
  */

typedef struct {                                /*!< (@ 0x40053000) IPC_NS Structure                                           */
  __OM  uint32_t  TASKS_SEND[8];                /*!< (@ 0x00000000) Description collection: Trigger events on channel
                                                                    enabled in SEND_CNF[n].                                    */
  __IM  uint32_t  RESERVED[56];
  __IOM uint32_t  EVENTS_RECEIVE[8];            /*!< (@ 0x00000100) Description collection: Event received on one
                                                                    or more of the enabled channels in RECEIVE_CNF[n].         */
  __IM  uint32_t  RESERVED1[120];
  __IOM uint32_t  INTEN0;                       /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET0;                    /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR0;                    /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND0;                     /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IOM uint32_t  INTEN1;                       /*!< (@ 0x00000310) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET1;                    /*!< (@ 0x00000314) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR1;                    /*!< (@ 0x00000318) Disable interrupt                                          */
  __IM  uint32_t  INTPEND1;                     /*!< (@ 0x0000031C) Pending interrupts                                         */
  __IOM uint32_t  INTEN2;                       /*!< (@ 0x00000320) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET2;                    /*!< (@ 0x00000324) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR2;                    /*!< (@ 0x00000328) Disable interrupt                                          */
  __IM  uint32_t  INTPEND2;                     /*!< (@ 0x0000032C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED2[120];
  __IOM uint32_t  SEND_CNF[8];                  /*!< (@ 0x00000510) Description collection: Send event configuration
                                                                    for TASKS_SEND[n].                                         */
  __IM  uint32_t  RESERVED3[24];
  __IOM uint32_t  RECEIVE_CNF[8];               /*!< (@ 0x00000590) Description collection: Receive event configuration
                                                                    for EVENTS_RECEIVE[n].                                     */
  __IM  uint32_t  RESERVED4[24];
  __IOM uint32_t  GPMEM[2];                     /*!< (@ 0x00000610) Description collection: General purpose memory.            */
} NRF_IPC_Type;                                 /*!< Size = 1560 (0x618)                                                       */



/* =========================================================================================================================== */
/* ================                                          ACL_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Access control lists (ACL_NS)
  */

typedef struct {                                /*!< (@ 0x40060000) ACL_NS Structure                                           */
  __IM  uint32_t  RESERVED[512];
  __IOM ACL_ACL_Type ACL[8];                    /*!< (@ 0x00000800) Unspecified                                                */
} NRF_ACL_Type;                                 /*!< Size = 2176 (0x880)                                                       */



/* =========================================================================================================================== */
/* ================                                          KMU_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Key Management Unit (KMU_NS)
  */

typedef struct {                                /*!< (@ 0x40060000) KMU_NS Structure                                           */
  __OM  uint32_t  TASKS_PUSH_KEYSLOT;           /*!< (@ 0x00000000) Push a key slot over secure APB.                           */
  __IM  uint32_t  RESERVED[63];
  __IOM uint32_t  EVENTS_KEYSLOT_PUSHED;        /*!< (@ 0x00000100) Key successfully pushed over secure APB.                   */
  __IOM uint32_t  EVENTS_KEYSLOT_REVOKED;       /*!< (@ 0x00000104) Key has been revoked and cannot be tasked for
                                                                    selection.                                                 */
  __IOM uint32_t  EVENTS_KEYSLOT_ERROR;         /*!< (@ 0x00000108) No key slot selected or no destination address
                                                                    defined or error during push mechanism.                    */
  __IM  uint32_t  RESERVED1[125];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  INTPEND;                      /*!< (@ 0x0000030C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED2[63];
  __IM  uint32_t  STATUS;                       /*!< (@ 0x0000040C) Status bits for KMU operation.                             */
  __IM  uint32_t  RESERVED3[60];
  __IOM uint32_t  SELECTKEYSLOT;                /*!< (@ 0x00000500) Select key slot ID to be read over AHB or pushed
                                                                    over secure APB when TASKS_PUSH_KEYSLOT
                                                                    is started.                                                */
} NRF_KMU_Type;                                 /*!< Size = 1284 (0x504)                                                       */



/* =========================================================================================================================== */
/* ================                                          NVMC_NS                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Non Volatile Memory Controller (NVMC_NS)
  */

typedef struct {                                /*!< (@ 0x40060000) NVMC_NS Structure                                          */
  __IM  uint32_t  RESERVED[256];
  __IM  uint32_t  READY;                        /*!< (@ 0x00000400) Ready flag                                                 */
  __IM  uint32_t  READYNEXT;                    /*!< (@ 0x00000404) Ready flag                                                 */
  __IM  uint32_t  RESERVED1[63];
  __IOM uint32_t  CONFIG;                       /*!< (@ 0x00000504) Configuration register                                     */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  ERASEALL;                     /*!< (@ 0x0000050C) Register for erasing all non-volatile user memory          */
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  ERASEPAGEPARTIALCFG;          /*!< (@ 0x0000051C) Register for partial erase configuration                   */
  __IM  uint32_t  RESERVED4[4];
  __IOM uint32_t  WAITSTATENUM;                 /*!< (@ 0x00000530) Register to set the number of waitstate for flash
                                                                    access To update the WAITSTATENUM field,
                                                                    the ACCESSCODE must be correct.                            */
  __IM  uint32_t  RESERVED5[3];
  __IOM uint32_t  ICACHECNF;                    /*!< (@ 0x00000540) I-code cache configuration register.                       */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  IHIT;                         /*!< (@ 0x00000548) I-code cache hit counter.                                  */
  __IOM uint32_t  IMISS;                        /*!< (@ 0x0000054C) I-code cache miss counter.                                 */
  __IM  uint32_t  RESERVED7[13];
  __IOM uint32_t  CONFIGNS;                     /*!< (@ 0x00000584) Non SecureConfiguration register                           */
  __IOM uint32_t  WRITEUICRNS;                  /*!< (@ 0x00000588) Non Secure APPROTECT enable register                       */
  __IM  uint32_t  RESERVED8[29];
  __IOM uint32_t  TESTMODE;                     /*!< (@ 0x00000600) Register for entering test mode. Refer to the
                                                                    flash IP test documentation for more details.              */
  __IOM uint32_t  LVEN;                         /*!< (@ 0x00000604) Low voltage read mode                                      */
  __IM  uint32_t  RESERVED9[2];
  __OM  uint32_t  TESTMASSERASE;                /*!< (@ 0x00000610) Self-timed mass-erase operation                            */
  __OM  uint32_t  TESTERASEREFCELL;             /*!< (@ 0x00000614) Self-timed erase reference cell operation                  */
  __IM  uint32_t  TESTTC;                       /*!< (@ 0x00000618) Observe the TC output from the flash macro                 */
  __IM  uint32_t  RESERVED10;
  __IOM uint32_t  TESTDATA128[4];               /*!< (@ 0x00000620) Description collection: Direct flash test data
                                                                    word n                                                     */
  __IM  uint32_t  TESTDATA128INC[4];            /*!< (@ 0x00000630) Description collection: Direct flash test data
                                                                    word n. Post-increments TESTCONTROLADDR                    */
  __IM  uint32_t  TESTCMPINC;                   /*!< (@ 0x00000640) Reads and compares last flash row to TESTDATA128
                                                                    content. Post-increments TESTCONTROLADDR.                  */
  __IM  uint32_t  TESTNCMPINC;                  /*!< (@ 0x00000644) Reads and compares last flash row to complement
                                                                    of TESTDATA128 content. Post-increments
                                                                    TESTCONTROLADDR.                                           */
  __IOM uint32_t  TESTCONTROLLINES;             /*!< (@ 0x00000648) Direct flash test, control lines. Refer to the
                                                                    flash IP test documentation for more details.              */
  __IOM uint32_t  TESTCONTROLADDR;              /*!< (@ 0x0000064C) Direct flash test control, address lines                   */
  __IOM uint32_t  TESTCOUNTERRELOAD;            /*!< (@ 0x00000650) Counter reload value, used when counting from
                                                                    SE or YE rising edge to latching of data                   */
  __IM  uint32_t  TESTCOUNTERRUNNING;           /*!< (@ 0x00000654) Returns the state (counting or not) of the counter         */
  __IOM uint32_t  TESTCONFIG;                   /*!< (@ 0x00000658) Mode of operation of the counter                           */
  __IOM uint32_t  TESTTMVPPANAEN;               /*!< (@ 0x0000065C) Controls analog signals for flash measurements             */
  __IM  uint32_t  RESERVED11[40];
  __IOM uint32_t  FORCEONNVM;                   /*!< (@ 0x00000700) Force on all NVM supplies. See also the internal
                                                                    section in the NVMC chapter.                               */
  __IM  uint32_t  RESERVED12[9];
  __IOM uint32_t  FORCEOFFNVM;                  /*!< (@ 0x00000728) Force off NVM supply. See also the internal section
                                                                    in the NVMC chapter.                                       */
} NRF_NVMC_Type;                                /*!< Size = 1836 (0x72c)                                                       */



/* =========================================================================================================================== */
/* ================                                          VMC_NS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Volatile Memory controller (VMC_NS)
  */

typedef struct {                                /*!< (@ 0x40061000) VMC_NS Structure                                           */
  __IM  uint32_t  RESERVED[384];
  __IOM VMC_RAM_Type RAM[2];                    /*!< (@ 0x00000600) Unspecified                                                */
  __IM  uint32_t  RESERVED1[56];
  __IOM VMC_RAMB_Type RAMB[2];                  /*!< (@ 0x00000700) Unspecified                                                */
  __IM  uint32_t  RESERVED2[56];
  __IOM VMC_RAMC_Type RAMC[2];                  /*!< (@ 0x00000800) Unspecified                                                */
  __IM  uint32_t  RESERVED3[56];
  __IOM VMC_RAMD_Type RAMD[1];                  /*!< (@ 0x00000900) Unspecified                                                */
  __IM  uint32_t  RESERVED4[373];
  __IOM uint32_t  SRAMTRIM;                     /*!< (@ 0x00000EE4) Backdoor trim values for SRAM                              */
  __IOM uint32_t  RamSSNonRetTSel;              /*!< (@ 0x00000EE8) Timing control values for TSMC RAMs                        */
} NRF_VMC_Type;                                 /*!< Size = 3820 (0xeec)                                                       */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define NRF_FICR_NS_BASE            0x00FF0000UL
#define NRF_UICR_NS_BASE            0x00FF8000UL
#define NRF_TRACEDELAYREG_NS_BASE   0xD0000000UL
#define NRF_AMLI_NS_BASE            0x40000000UL
#define NRF_DCNF_NS_BASE            0x40000000UL
#define NRF_TRACEANDDEBUG_NS_BASE   0xE0080000UL
#define NRF_MWU_NS_BASE             0x40001000UL
#define NRF_MCPLL_NS_BASE           0x40010000UL
#define NRF_BBPLL_NS_BASE           0x40011000UL
#define NRF_RCOSC32K_NS_BASE        0x40012000UL
#define NRF_CLOCK_NS_BASE           0x40015000UL
#define NRF_POWER_NS_BASE           0x40015000UL
#define NRF_MODEMPERIPH_NS_BASE     0x40021000UL
#define NRF_UARTE_NS_BASE           0x40023000UL
#define NRF_TIMER1_NS_BASE          0x40024000UL
#define NRF_RTC_NS_BASE             0x40026000UL
#define NRF_LWDT_NS_BASE            0x40027000UL
#define NRF_SWDT_NS_BASE            0x40028000UL
#define NRF_RNG_NS_BASE             0x40029000UL
#define NRF_SIMIF_NS_BASE           0x4002A000UL
#define NRF_RAMBISTHUB_NS_BASE      0x4002B000UL
#define NRF_M2M0_NS_BASE            0x4002E000UL
#define NRF_M2M1_NS_BASE            0x4002F000UL
#define NRF_GPIOTE0_NS_BASE         0x40030000UL
#define NRF_GPIOTE1_NS_BASE         0x40031000UL
#define NRF_SECCONTROL_NS_BASE      0x40032000UL
#define NRF_TIMEMARKMUX_NS_BASE     0x40033000UL
#define NRF_P0_NS_BASE              0x40034000UL
#define NRF_TIMEREVENTSYNC_NS_BASE  0x40035000UL
#define NRF_GPIOTE2_NS_BASE         0x40037000UL
#define NRF_TEMP_NS_BASE            0x40039000UL
#define NRF_LFCLKCALIBMEAS_NS_BASE  0x4003B000UL
#define NRF_TWIM_NS_BASE            0x4003C000UL
#define NRF_CTRL_AP_PERI_S_BASE     0x4003D000UL
#define NRF_L2CIPHER_NS_BASE        0x40040000UL
#define NRF_AESL2_NS_BASE           0x40042000UL
#define NRF_SNOW_NS_BASE            0x40043000UL
#define NRF_ZUC_NS_BASE             0x40044000UL
#define NRF_SHA_NS_BASE             0x40050000UL
#define NRF_TLSAES_NS_BASE          0x40051000UL
#define NRF_DESCIPHER_NS_BASE       0x40052000UL
#define NRF_IPC_NS_BASE             0x40053000UL
#define NRF_TIMER0_NS_BASE          0x40056000UL
#define NRF_ACL_NS_BASE             0x40060000UL
#define NRF_KMU_NS_BASE             0x40060000UL
#define NRF_NVMC_NS_BASE            0x40060000UL
#define NRF_VMC_NS_BASE             0x40061000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define NRF_FICR_NS                 ((NRF_FICR_Type*)          NRF_FICR_NS_BASE)
#define NRF_UICR_NS                 ((NRF_UICR_Type*)          NRF_UICR_NS_BASE)
#define NRF_TRACEDELAYREG_NS        ((NRF_TRACEDELAYREG_Type*)  NRF_TRACEDELAYREG_NS_BASE)
#define NRF_AMLI_NS                 ((NRF_AMLI_Type*)          NRF_AMLI_NS_BASE)
#define NRF_DCNF_NS                 ((NRF_DCNF_Type*)          NRF_DCNF_NS_BASE)
#define NRF_TRACEANDDEBUG_NS        ((NRF_TRACEANDDEBUG_Type*)  NRF_TRACEANDDEBUG_NS_BASE)
#define NRF_MWU_NS                  ((NRF_MWU_Type*)           NRF_MWU_NS_BASE)
#define NRF_MCPLL_NS                ((NRF_MCPLL_Type*)         NRF_MCPLL_NS_BASE)
#define NRF_BBPLL_NS                ((NRF_BBPLL_Type*)         NRF_BBPLL_NS_BASE)
#define NRF_RCOSC32K_NS             ((NRF_RCOSC32K_Type*)      NRF_RCOSC32K_NS_BASE)
#define NRF_CLOCK_NS                ((NRF_CLOCK_Type*)         NRF_CLOCK_NS_BASE)
#define NRF_POWER_NS                ((NRF_POWER_Type*)         NRF_POWER_NS_BASE)
#define NRF_MODEMPERIPH_NS          ((NRF_MODEMPERIPH_Type*)   NRF_MODEMPERIPH_NS_BASE)
#define NRF_UARTE_NS                ((NRF_UARTE_Type*)         NRF_UARTE_NS_BASE)
#define NRF_TIMER1_NS               ((NRF_MODEMTIMER_Type*)    NRF_TIMER1_NS_BASE)
#define NRF_RTC_NS                  ((NRF_RTC_Type*)           NRF_RTC_NS_BASE)
#define NRF_LWDT_NS                 ((NRF_WDT_Type*)           NRF_LWDT_NS_BASE)
#define NRF_SWDT_NS                 ((NRF_WDT_Type*)           NRF_SWDT_NS_BASE)
#define NRF_RNG_NS                  ((NRF_RNG_Type*)           NRF_RNG_NS_BASE)
#define NRF_SIMIF_NS                ((NRF_SIMIF_Type*)         NRF_SIMIF_NS_BASE)
#define NRF_RAMBISTHUB_NS           ((NRF_RAMBISTHUB_Type*)    NRF_RAMBISTHUB_NS_BASE)
#define NRF_M2M0_NS                 ((NRF_M2M_Type*)           NRF_M2M0_NS_BASE)
#define NRF_M2M1_NS                 ((NRF_M2M_Type*)           NRF_M2M1_NS_BASE)
#define NRF_GPIOTE0_NS              ((NRF_GPIOTE_Type*)        NRF_GPIOTE0_NS_BASE)
#define NRF_GPIOTE1_NS              ((NRF_GPIOTE_Type*)        NRF_GPIOTE1_NS_BASE)
#define NRF_SECCONTROL_NS           ((NRF_SECURECONTROL_Type*)  NRF_SECCONTROL_NS_BASE)
#define NRF_TIMEMARKMUX_NS          ((NRF_TIMEMARKMUX_Type*)   NRF_TIMEMARKMUX_NS_BASE)
#define NRF_P0_NS                   ((NRF_GPIO_Type*)          NRF_P0_NS_BASE)
#define NRF_TIMEREVENTSYNC_NS       ((NRF_TIMEREVENTSYNC_Type*)  NRF_TIMEREVENTSYNC_NS_BASE)
#define NRF_GPIOTE2_NS              ((NRF_GPIOTE_Type*)        NRF_GPIOTE2_NS_BASE)
#define NRF_TEMP_NS                 ((NRF_TEMP_Type*)          NRF_TEMP_NS_BASE)
#define NRF_LFCLKCALIBMEAS_NS       ((NRF_LFCLKCALIBMEAS_Type*)  NRF_LFCLKCALIBMEAS_NS_BASE)
#define NRF_TWIM_NS                 ((NRF_TWIM_Type*)          NRF_TWIM_NS_BASE)
#define NRF_CTRL_AP_PERI_S          ((NRF_CTRLAPPERI_Type*)    NRF_CTRL_AP_PERI_S_BASE)
#define NRF_L2CIPHER_NS             ((NRF_L2CIPHER_Type*)      NRF_L2CIPHER_NS_BASE)
#define NRF_AESL2_NS                ((NRF_AESL2_Type*)         NRF_AESL2_NS_BASE)
#define NRF_SNOW_NS                 ((NRF_SNOW_Type*)          NRF_SNOW_NS_BASE)
#define NRF_ZUC_NS                  ((NRF_ZUC_Type*)           NRF_ZUC_NS_BASE)
#define NRF_SHA_NS                  ((NRF_SHA_Type*)           NRF_SHA_NS_BASE)
#define NRF_TLSAES_NS               ((NRF_AES_Type*)           NRF_TLSAES_NS_BASE)
#define NRF_DESCIPHER_NS            ((NRF_DES_Type*)           NRF_DESCIPHER_NS_BASE)
#define NRF_IPC_NS                  ((NRF_IPC_Type*)           NRF_IPC_NS_BASE)
#define NRF_TIMER0_NS               ((NRF_MODEMTIMER_Type*)    NRF_TIMER0_NS_BASE)
#define NRF_ACL_NS                  ((NRF_ACL_Type*)           NRF_ACL_NS_BASE)
#define NRF_KMU_NS                  ((NRF_KMU_Type*)           NRF_KMU_NS_BASE)
#define NRF_NVMC_NS                 ((NRF_NVMC_Type*)          NRF_NVMC_NS_BASE)
#define NRF_VMC_NS                  ((NRF_VMC_Type*)           NRF_VMC_NS_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


#ifdef __cplusplus
}
#endif

#endif /* NRF9160_MODEM_H */


/** @} */ /* End of group nrf9160_modem */

/** @} */ /* End of group Nordic Semiconductor */
