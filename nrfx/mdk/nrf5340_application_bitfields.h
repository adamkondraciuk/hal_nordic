/*

Copyright (c) 2010 - 2020, Nordic Semiconductor ASA

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form, except as embedded into a Nordic
   Semiconductor ASA integrated circuit in a product or a software update for
   such product, must reproduce the above copyright notice, this list of
   conditions and the following disclaimer in the documentation and/or other
   materials provided with the distribution.

3. Neither the name of Nordic Semiconductor ASA nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

4. This software, with or without modification, must only be used with a
   Nordic Semiconductor ASA integrated circuit.

5. Any software provided in binary form under this license must not be reverse
   engineered, decompiled, modified and/or disassembled.

THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef __NRF5340_APPLICATION_BITS_H
#define __NRF5340_APPLICATION_BITS_H

/*lint ++flb "Enter library region" */

/* Peripheral: AMLI */
/* Description: AHB Multi-Layer Interface 0 */

/* Register: AMLI_RAMPRI_CPU */
/* Description: AHB bus master priority register for CPU */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define AMLI_RAMPRI_CPU_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define AMLI_RAMPRI_CPU_RAM7_Msk (0xFUL << AMLI_RAMPRI_CPU_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define AMLI_RAMPRI_CPU_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_CPU_RAM7_Pri1 (1UL) /*!< Priority 1 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define AMLI_RAMPRI_CPU_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define AMLI_RAMPRI_CPU_RAM6_Msk (0xFUL << AMLI_RAMPRI_CPU_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define AMLI_RAMPRI_CPU_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_CPU_RAM6_Pri1 (1UL) /*!< Priority 1 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define AMLI_RAMPRI_CPU_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define AMLI_RAMPRI_CPU_RAM5_Msk (0xFUL << AMLI_RAMPRI_CPU_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define AMLI_RAMPRI_CPU_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_CPU_RAM5_Pri1 (1UL) /*!< Priority 1 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define AMLI_RAMPRI_CPU_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define AMLI_RAMPRI_CPU_RAM4_Msk (0xFUL << AMLI_RAMPRI_CPU_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define AMLI_RAMPRI_CPU_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_CPU_RAM4_Pri1 (1UL) /*!< Priority 1 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define AMLI_RAMPRI_CPU_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define AMLI_RAMPRI_CPU_RAM3_Msk (0xFUL << AMLI_RAMPRI_CPU_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define AMLI_RAMPRI_CPU_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_CPU_RAM3_Pri1 (1UL) /*!< Priority 1 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define AMLI_RAMPRI_CPU_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define AMLI_RAMPRI_CPU_RAM2_Msk (0xFUL << AMLI_RAMPRI_CPU_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define AMLI_RAMPRI_CPU_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_CPU_RAM2_Pri1 (1UL) /*!< Priority 1 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define AMLI_RAMPRI_CPU_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define AMLI_RAMPRI_CPU_RAM1_Msk (0xFUL << AMLI_RAMPRI_CPU_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define AMLI_RAMPRI_CPU_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_CPU_RAM1_Pri1 (1UL) /*!< Priority 1 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define AMLI_RAMPRI_CPU_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define AMLI_RAMPRI_CPU_RAM0_Msk (0xFUL << AMLI_RAMPRI_CPU_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define AMLI_RAMPRI_CPU_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_CPU_RAM0_Pri1 (1UL) /*!< Priority 1 */

/* Register: AMLI_RAMPRI_EXTRAM */
/* Description: Description collection: AHB bus master priority register for external RAM slave port (EXTRAMs) */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define AMLI_RAMPRI_EXTRAM_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define AMLI_RAMPRI_EXTRAM_RAM7_Msk (0xFUL << AMLI_RAMPRI_EXTRAM_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define AMLI_RAMPRI_EXTRAM_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_EXTRAM_RAM7_Pri1 (1UL) /*!< Priority 1 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define AMLI_RAMPRI_EXTRAM_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define AMLI_RAMPRI_EXTRAM_RAM6_Msk (0xFUL << AMLI_RAMPRI_EXTRAM_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define AMLI_RAMPRI_EXTRAM_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_EXTRAM_RAM6_Pri1 (1UL) /*!< Priority 1 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define AMLI_RAMPRI_EXTRAM_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define AMLI_RAMPRI_EXTRAM_RAM5_Msk (0xFUL << AMLI_RAMPRI_EXTRAM_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define AMLI_RAMPRI_EXTRAM_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_EXTRAM_RAM5_Pri1 (1UL) /*!< Priority 1 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define AMLI_RAMPRI_EXTRAM_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define AMLI_RAMPRI_EXTRAM_RAM4_Msk (0xFUL << AMLI_RAMPRI_EXTRAM_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define AMLI_RAMPRI_EXTRAM_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_EXTRAM_RAM4_Pri1 (1UL) /*!< Priority 1 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define AMLI_RAMPRI_EXTRAM_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define AMLI_RAMPRI_EXTRAM_RAM3_Msk (0xFUL << AMLI_RAMPRI_EXTRAM_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define AMLI_RAMPRI_EXTRAM_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_EXTRAM_RAM3_Pri1 (1UL) /*!< Priority 1 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define AMLI_RAMPRI_EXTRAM_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define AMLI_RAMPRI_EXTRAM_RAM2_Msk (0xFUL << AMLI_RAMPRI_EXTRAM_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define AMLI_RAMPRI_EXTRAM_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_EXTRAM_RAM2_Pri1 (1UL) /*!< Priority 1 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define AMLI_RAMPRI_EXTRAM_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define AMLI_RAMPRI_EXTRAM_RAM1_Msk (0xFUL << AMLI_RAMPRI_EXTRAM_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define AMLI_RAMPRI_EXTRAM_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_EXTRAM_RAM1_Pri1 (1UL) /*!< Priority 1 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define AMLI_RAMPRI_EXTRAM_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define AMLI_RAMPRI_EXTRAM_RAM0_Msk (0xFUL << AMLI_RAMPRI_EXTRAM_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define AMLI_RAMPRI_EXTRAM_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define AMLI_RAMPRI_EXTRAM_RAM0_Pri1 (1UL) /*!< Priority 1 */


/* Peripheral: CACHEDATA */
/* Description: CACHEDATA */

/* Register: CACHEDATA_SET_WAY_DATA0 */
/* Description: Description cluster: Cache data bits [31:0] of SET[n], WAY[o]. */

/* Bits 31..0 : Data */
#define CACHEDATA_SET_WAY_DATA0_Data_Pos (0UL) /*!< Position of Data field. */
#define CACHEDATA_SET_WAY_DATA0_Data_Msk (0xFFFFFFFFUL << CACHEDATA_SET_WAY_DATA0_Data_Pos) /*!< Bit mask of Data field. */

/* Register: CACHEDATA_SET_WAY_DATA1 */
/* Description: Description cluster: Cache data bits [63:32] of SET[n], WAY[o]. */

/* Bits 31..0 : Data */
#define CACHEDATA_SET_WAY_DATA1_Data_Pos (0UL) /*!< Position of Data field. */
#define CACHEDATA_SET_WAY_DATA1_Data_Msk (0xFFFFFFFFUL << CACHEDATA_SET_WAY_DATA1_Data_Pos) /*!< Bit mask of Data field. */

/* Register: CACHEDATA_SET_WAY_DATA2 */
/* Description: Description cluster: Cache data bits [95:64] of SET[n], WAY[o]. */

/* Bits 31..0 : Data */
#define CACHEDATA_SET_WAY_DATA2_Data_Pos (0UL) /*!< Position of Data field. */
#define CACHEDATA_SET_WAY_DATA2_Data_Msk (0xFFFFFFFFUL << CACHEDATA_SET_WAY_DATA2_Data_Pos) /*!< Bit mask of Data field. */

/* Register: CACHEDATA_SET_WAY_DATA3 */
/* Description: Description cluster: Cache data bits [127:96] of SET[n], WAY[o]. */

/* Bits 31..0 : Data */
#define CACHEDATA_SET_WAY_DATA3_Data_Pos (0UL) /*!< Position of Data field. */
#define CACHEDATA_SET_WAY_DATA3_Data_Msk (0xFFFFFFFFUL << CACHEDATA_SET_WAY_DATA3_Data_Pos) /*!< Bit mask of Data field. */


/* Peripheral: CACHEINFO */
/* Description: CACHEINFO */

/* Register: CACHEINFO_SET_WAY */
/* Description: Description collection: Cache information for SET[n], WAY[o]. */

/* Bit 31 : Most recently used way. */
#define CACHEINFO_SET_WAY_MRU_Pos (31UL) /*!< Position of MRU field. */
#define CACHEINFO_SET_WAY_MRU_Msk (0x1UL << CACHEINFO_SET_WAY_MRU_Pos) /*!< Bit mask of MRU field. */
#define CACHEINFO_SET_WAY_MRU_Way0 (0UL) /*!< Way0 was most recently used */
#define CACHEINFO_SET_WAY_MRU_Way1 (1UL) /*!< Way1 was most recently used */

/* Bit 30 : Valid bit. */
#define CACHEINFO_SET_WAY_V_Pos (30UL) /*!< Position of V field. */
#define CACHEINFO_SET_WAY_V_Msk (0x1UL << CACHEINFO_SET_WAY_V_Pos) /*!< Bit mask of V field. */
#define CACHEINFO_SET_WAY_V_Invalid (0UL) /*!< Invalid cache line */
#define CACHEINFO_SET_WAY_V_Valid (1UL) /*!< Valid cache line */

/* Bits 16..0 : Cache tag. */
#define CACHEINFO_SET_WAY_TAG_Pos (0UL) /*!< Position of TAG field. */
#define CACHEINFO_SET_WAY_TAG_Msk (0x1FFFFUL << CACHEINFO_SET_WAY_TAG_Pos) /*!< Bit mask of TAG field. */


/* Peripheral: CACHE */
/* Description: Cache */

/* Register: CACHE_PROFILING_IHIT */
/* Description: Description cluster: Instruction fetch cache hit counter for cache region n, where n=0 means Flash and n=1 means XIP. */

/* Bits 31..0 : Number of instruction cache hits */
#define CACHE_PROFILING_IHIT_HITS_Pos (0UL) /*!< Position of HITS field. */
#define CACHE_PROFILING_IHIT_HITS_Msk (0xFFFFFFFFUL << CACHE_PROFILING_IHIT_HITS_Pos) /*!< Bit mask of HITS field. */

/* Register: CACHE_PROFILING_IMISS */
/* Description: Description cluster: Instruction fetch cache miss counter for cache region n, where n=0 means Flash and n=1 means XIP. */

/* Bits 31..0 : Number of instruction cache misses */
#define CACHE_PROFILING_IMISS_MISSES_Pos (0UL) /*!< Position of MISSES field. */
#define CACHE_PROFILING_IMISS_MISSES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_IMISS_MISSES_Pos) /*!< Bit mask of MISSES field. */

/* Register: CACHE_PROFILING_DHIT */
/* Description: Description cluster: Data fetch cache hit counter for cache region n, where n=0 means Flash and n=1 means XIP. */

/* Bits 31..0 : Number of data cache hits */
#define CACHE_PROFILING_DHIT_HITS_Pos (0UL) /*!< Position of HITS field. */
#define CACHE_PROFILING_DHIT_HITS_Msk (0xFFFFFFFFUL << CACHE_PROFILING_DHIT_HITS_Pos) /*!< Bit mask of HITS field. */

/* Register: CACHE_PROFILING_DMISS */
/* Description: Description cluster: Data fetch cache miss counter for cache region n, where n=0 means Flash and n=1 means XIP. */

/* Bits 31..0 : Number of data cache misses */
#define CACHE_PROFILING_DMISS_MISSES_Pos (0UL) /*!< Position of MISSES field. */
#define CACHE_PROFILING_DMISS_MISSES_Msk (0xFFFFFFFFUL << CACHE_PROFILING_DMISS_MISSES_Pos) /*!< Bit mask of MISSES field. */

/* Register: CACHE_PROFILING_TAGLOOKUPCNT */
/* Description: Description cluster: Tag lookup count for cache region n, where n=0 means Flash and n=1 means XIP. */

/* Bits 31..0 : Number of tag lookups */
#define CACHE_PROFILING_TAGLOOKUPCNT_TAGLOOKUPCNT_Pos (0UL) /*!< Position of TAGLOOKUPCNT field. */
#define CACHE_PROFILING_TAGLOOKUPCNT_TAGLOOKUPCNT_Msk (0xFFFFFFFFUL << CACHE_PROFILING_TAGLOOKUPCNT_TAGLOOKUPCNT_Pos) /*!< Bit mask of TAGLOOKUPCNT field. */

/* Register: CACHE_ENABLE */
/* Description: Enable cache */

/* Bit 0 : Enable cache */
#define CACHE_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define CACHE_ENABLE_ENABLE_Msk (0x1UL << CACHE_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define CACHE_ENABLE_ENABLE_Disabled (0UL) /*!< Disable cache */
#define CACHE_ENABLE_ENABLE_Enabled (1UL) /*!< Enable cache */

/* Register: CACHE_INVALIDATE */
/* Description: Invalidate the cache */

/* Bit 0 : Invalidate the cache */
#define CACHE_INVALIDATE_INVALIDATE_Pos (0UL) /*!< Position of INVALIDATE field. */
#define CACHE_INVALIDATE_INVALIDATE_Msk (0x1UL << CACHE_INVALIDATE_INVALIDATE_Pos) /*!< Bit mask of INVALIDATE field. */
#define CACHE_INVALIDATE_INVALIDATE_Invalidate (1UL) /*!< Invalidate the cache */

/* Register: CACHE_ERASE */
/* Description: Erase the cache */

/* Bit 0 : Erase the cache */
#define CACHE_ERASE_ERASE_Pos (0UL) /*!< Position of ERASE field. */
#define CACHE_ERASE_ERASE_Msk (0x1UL << CACHE_ERASE_ERASE_Pos) /*!< Bit mask of ERASE field. */
#define CACHE_ERASE_ERASE_Erase (1UL) /*!< Erase cache */

/* Register: CACHE_PROFILINGENABLE */
/* Description: Enable the profiling counters */

/* Bit 0 : Enable the profiling counters */
#define CACHE_PROFILINGENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define CACHE_PROFILINGENABLE_ENABLE_Msk (0x1UL << CACHE_PROFILINGENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define CACHE_PROFILINGENABLE_ENABLE_Disable (0UL) /*!< Disable profiling */
#define CACHE_PROFILINGENABLE_ENABLE_Enable (1UL) /*!< Enable profiling */

/* Register: CACHE_PROFILINGCLEAR */
/* Description: Clear the profiling counters */

/* Bit 0 : Clearing the profiling counters */
#define CACHE_PROFILINGCLEAR_CLEAR_Pos (0UL) /*!< Position of CLEAR field. */
#define CACHE_PROFILINGCLEAR_CLEAR_Msk (0x1UL << CACHE_PROFILINGCLEAR_CLEAR_Pos) /*!< Bit mask of CLEAR field. */
#define CACHE_PROFILINGCLEAR_CLEAR_Clear (1UL) /*!< Clear the profiling counters */

/* Register: CACHE_MODE */
/* Description: Cache mode. Switching from Cache to RAM mode causes the RAM to be cleared. Switching from RAM to Cache mode causes the cache to be invalidated. */

/* Bit 0 : Cache mode */
#define CACHE_MODE_MODE_Pos (0UL) /*!< Position of MODE field. */
#define CACHE_MODE_MODE_Msk (0x1UL << CACHE_MODE_MODE_Pos) /*!< Bit mask of MODE field. */
#define CACHE_MODE_MODE_Cache (0UL) /*!< Cache mode */
#define CACHE_MODE_MODE_Ram (1UL) /*!< RAM mode */

/* Register: CACHE_DEBUGLOCK */
/* Description: Lock debug mode Ignored in RAM mode. */

/* Bit 0 : Lock debug mode */
#define CACHE_DEBUGLOCK_DEBUGLOCK_Pos (0UL) /*!< Position of DEBUGLOCK field. */
#define CACHE_DEBUGLOCK_DEBUGLOCK_Msk (0x1UL << CACHE_DEBUGLOCK_DEBUGLOCK_Pos) /*!< Bit mask of DEBUGLOCK field. */
#define CACHE_DEBUGLOCK_DEBUGLOCK_Unlocked (0UL) /*!< Debug mode unlocked */
#define CACHE_DEBUGLOCK_DEBUGLOCK_Locked (1UL) /*!< Debug mode locked */

/* Register: CACHE_ERASESTATUS */
/* Description: Cache erase status */

/* Bit 0 : Cache erase status */
#define CACHE_ERASESTATUS_ERASESTATUS_Pos (0UL) /*!< Position of ERASESTATUS field. */
#define CACHE_ERASESTATUS_ERASESTATUS_Msk (0x1UL << CACHE_ERASESTATUS_ERASESTATUS_Pos) /*!< Bit mask of ERASESTATUS field. */
#define CACHE_ERASESTATUS_ERASESTATUS_Idle (0UL) /*!< Erase is not complete or hasn't started */
#define CACHE_ERASESTATUS_ERASESTATUS_Finished (1UL) /*!< Cache erase is finished */

/* Register: CACHE_WRITELOCK */
/* Description: Lock cache updates. Prevents updating of cache content on cache misses, but will continue to lookup instruction/data fetches in content already present in the cache. Ignored in RAM mode. */

/* Bit 0 : Lock cache updates */
#define CACHE_WRITELOCK_WRITELOCK_Pos (0UL) /*!< Position of WRITELOCK field. */
#define CACHE_WRITELOCK_WRITELOCK_Msk (0x1UL << CACHE_WRITELOCK_WRITELOCK_Pos) /*!< Bit mask of WRITELOCK field. */
#define CACHE_WRITELOCK_WRITELOCK_Unlocked (0UL) /*!< Cache updates unlocked */
#define CACHE_WRITELOCK_WRITELOCK_Locked (1UL) /*!< Cache updates locked */

/* Register: CACHE_PREFETCHHINT */
/* Description: Enable the cache to utilize hint signals in the instruction prefect strategy.
        Each of the bits enables/disables the corresponding hint signal. Ignored in RAM mode. */

/* Bit 2 : Enable nonSequential hint signal in the instruction prefect strategy */
#define CACHE_PREFETCHHINT_NONSEQ_Pos (2UL) /*!< Position of NONSEQ field. */
#define CACHE_PREFETCHHINT_NONSEQ_Msk (0x1UL << CACHE_PREFETCHHINT_NONSEQ_Pos) /*!< Bit mask of NONSEQ field. */
#define CACHE_PREFETCHHINT_NONSEQ_Disable (0UL) /*!< Disabled */
#define CACHE_PREFETCHHINT_NONSEQ_Enable (1UL) /*!< Enabled */

/* Bit 1 : Enable backwardBranch hint signal in the instruction prefect strategy */
#define CACHE_PREFETCHHINT_BWBRANCH_Pos (1UL) /*!< Position of BWBRANCH field. */
#define CACHE_PREFETCHHINT_BWBRANCH_Msk (0x1UL << CACHE_PREFETCHHINT_BWBRANCH_Pos) /*!< Bit mask of BWBRANCH field. */
#define CACHE_PREFETCHHINT_BWBRANCH_Disable (0UL) /*!< Disabled */
#define CACHE_PREFETCHHINT_BWBRANCH_Enable (1UL) /*!< Enabled */

/* Bit 0 : Enable forwardBranch hint signal in the instruction prefect strategy */
#define CACHE_PREFETCHHINT_FWBRANCH_Pos (0UL) /*!< Position of FWBRANCH field. */
#define CACHE_PREFETCHHINT_FWBRANCH_Msk (0x1UL << CACHE_PREFETCHHINT_FWBRANCH_Pos) /*!< Bit mask of FWBRANCH field. */
#define CACHE_PREFETCHHINT_FWBRANCH_Disable (0UL) /*!< Disabled */
#define CACHE_PREFETCHHINT_FWBRANCH_Enable (1UL) /*!< Enabled */


/* Peripheral: CC_AES */
/* Description: CryptoCell AES */

/* Register: CC_AES_AES_KEY_0_0 */
/* Description: Bits 31:0 of AES_KEY_0 (used as the AES key in non-tunneling operations, and as the first tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 31:0 of AES_KEY_0. */
#define CC_AES_AES_KEY_0_0_AES_KEY_0_0_Pos (0UL) /*!< Position of AES_KEY_0_0 field. */
#define CC_AES_AES_KEY_0_0_AES_KEY_0_0_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_0_0_AES_KEY_0_0_Pos) /*!< Bit mask of AES_KEY_0_0 field. */

/* Register: CC_AES_AES_KEY_0_1 */
/* Description: Bits 63:32 of AES_KEY_0 (used as the AES key in non-tunneling operations, and as the first tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 63:32 of AES_KEY_0. */
#define CC_AES_AES_KEY_0_1_AES_KEY_0_1_Pos (0UL) /*!< Position of AES_KEY_0_1 field. */
#define CC_AES_AES_KEY_0_1_AES_KEY_0_1_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_0_1_AES_KEY_0_1_Pos) /*!< Bit mask of AES_KEY_0_1 field. */

/* Register: CC_AES_AES_KEY_0_2 */
/* Description: Bits 95:64 of AES_KEY_0 (used as the AES key in non-tunneling operations, and as the first tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 95:64 of AES_KEY_0. */
#define CC_AES_AES_KEY_0_2_AES_KEY_0_2_Pos (0UL) /*!< Position of AES_KEY_0_2 field. */
#define CC_AES_AES_KEY_0_2_AES_KEY_0_2_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_0_2_AES_KEY_0_2_Pos) /*!< Bit mask of AES_KEY_0_2 field. */

/* Register: CC_AES_AES_KEY_0_3 */
/* Description: Bits 127:96 of AES_KEY_0 (used as the AES key in non-tunneling operations, and as the first tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 127:96 of AES_KEY_0. */
#define CC_AES_AES_KEY_0_3_AES_KEY_0_3_Pos (0UL) /*!< Position of AES_KEY_0_3 field. */
#define CC_AES_AES_KEY_0_3_AES_KEY_0_3_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_0_3_AES_KEY_0_3_Pos) /*!< Bit mask of AES_KEY_0_3 field. */

/* Register: CC_AES_AES_KEY_0_4 */
/* Description: Bits 159:128 of AES_KEY_0 (used as the AES key in non-tunneling operations, and as the first tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 159:128 of AES_KEY_0 . */
#define CC_AES_AES_KEY_0_4_AES_KEY_0_4_Pos (0UL) /*!< Position of AES_KEY_0_4 field. */
#define CC_AES_AES_KEY_0_4_AES_KEY_0_4_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_0_4_AES_KEY_0_4_Pos) /*!< Bit mask of AES_KEY_0_4 field. */

/* Register: CC_AES_AES_KEY_0_5 */
/* Description: Bits 191:160 of AES_KEY_0 (used as the AES key in non-tunneling operations, and as the first tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 191:160 of AES_KEY_0. */
#define CC_AES_AES_KEY_0_5_AES_KEY_0_5_Pos (0UL) /*!< Position of AES_KEY_0_5 field. */
#define CC_AES_AES_KEY_0_5_AES_KEY_0_5_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_0_5_AES_KEY_0_5_Pos) /*!< Bit mask of AES_KEY_0_5 field. */

/* Register: CC_AES_AES_KEY_0_6 */
/* Description: Bits 223:192 of AES_KEY_0 (used as the AES key in non-tunneling operations, and as the first tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 223:192 of AES_KEY_0. */
#define CC_AES_AES_KEY_0_6_AES_KEY_0_6_Pos (0UL) /*!< Position of AES_KEY_0_6 field. */
#define CC_AES_AES_KEY_0_6_AES_KEY_0_6_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_0_6_AES_KEY_0_6_Pos) /*!< Bit mask of AES_KEY_0_6 field. */

/* Register: CC_AES_AES_KEY_0_7 */
/* Description: Bits 255:224 of AES_KEY_0 (used as the AES key in non-tunneling operations, and as the first tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 255:224 of AES_KEY_0. */
#define CC_AES_AES_KEY_0_7_AES_KEY_0_7_Pos (0UL) /*!< Position of AES_KEY_0_7 field. */
#define CC_AES_AES_KEY_0_7_AES_KEY_0_7_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_0_7_AES_KEY_0_7_Pos) /*!< Bit mask of AES_KEY_0_7 field. */

/* Register: CC_AES_AES_KEY_1_0 */
/* Description: Bits 31:0 of AES_KEY_1 (used as the second AES tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 31:0 of AES_KEY_1. */
#define CC_AES_AES_KEY_1_0_AES_KEY_1_0_Pos (0UL) /*!< Position of AES_KEY_1_0 field. */
#define CC_AES_AES_KEY_1_0_AES_KEY_1_0_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_1_0_AES_KEY_1_0_Pos) /*!< Bit mask of AES_KEY_1_0 field. */

/* Register: CC_AES_AES_KEY_1_1 */
/* Description: Bits 63:32 of AES_KEY_1 (used as the second AES tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 63:32 of AES_KEY_1. */
#define CC_AES_AES_KEY_1_1_AES_KEY_1_1_Pos (0UL) /*!< Position of AES_KEY_1_1 field. */
#define CC_AES_AES_KEY_1_1_AES_KEY_1_1_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_1_1_AES_KEY_1_1_Pos) /*!< Bit mask of AES_KEY_1_1 field. */

/* Register: CC_AES_AES_KEY_1_2 */
/* Description: Bits 95:64 of AES_KEY_1 (used as the second AES tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 95:64 of AES_KEY_1. */
#define CC_AES_AES_KEY_1_2_AES_KEY_1_2_Pos (0UL) /*!< Position of AES_KEY_1_2 field. */
#define CC_AES_AES_KEY_1_2_AES_KEY_1_2_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_1_2_AES_KEY_1_2_Pos) /*!< Bit mask of AES_KEY_1_2 field. */

/* Register: CC_AES_AES_KEY_1_3 */
/* Description: Bits 127:96 of AES_KEY_1 (used as the second AES tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 127:96 of AES_KEY_1. */
#define CC_AES_AES_KEY_1_3_AES_KEY_1_3_Pos (0UL) /*!< Position of AES_KEY_1_3 field. */
#define CC_AES_AES_KEY_1_3_AES_KEY_1_3_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_1_3_AES_KEY_1_3_Pos) /*!< Bit mask of AES_KEY_1_3 field. */

/* Register: CC_AES_AES_KEY_1_4 */
/* Description: Bits 159:128 of AES_KEY_1 (used as the second AES tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 159:128 of AES_KEY_1. */
#define CC_AES_AES_KEY_1_4_AES_KEY_1_4_Pos (0UL) /*!< Position of AES_KEY_1_4 field. */
#define CC_AES_AES_KEY_1_4_AES_KEY_1_4_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_1_4_AES_KEY_1_4_Pos) /*!< Bit mask of AES_KEY_1_4 field. */

/* Register: CC_AES_AES_KEY_1_5 */
/* Description: Bits 191:160 of AES_KEY_1 (used as the second AES tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 191:160 of AES_KEY_1. */
#define CC_AES_AES_KEY_1_5_AES_KEY_1_5_Pos (0UL) /*!< Position of AES_KEY_1_5 field. */
#define CC_AES_AES_KEY_1_5_AES_KEY_1_5_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_1_5_AES_KEY_1_5_Pos) /*!< Bit mask of AES_KEY_1_5 field. */

/* Register: CC_AES_AES_KEY_1_6 */
/* Description: Bits 223:192 of AES_KEY_1 (used as the second AES tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 223:192 of AES_KEY_1. */
#define CC_AES_AES_KEY_1_6_AES_KEY_1_6_Pos (0UL) /*!< Position of AES_KEY_1_6 field. */
#define CC_AES_AES_KEY_1_6_AES_KEY_1_6_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_1_6_AES_KEY_1_6_Pos) /*!< Bit mask of AES_KEY_1_6 field. */

/* Register: CC_AES_AES_KEY_1_7 */
/* Description: Bits 255:224 of AES_KEY_1 (used as the second AES tunnel stage key in tunneling operations). */

/* Bits 31..0 : Bits 255:224 of AES_KEY_1. */
#define CC_AES_AES_KEY_1_7_AES_KEY_1_7_Pos (0UL) /*!< Position of AES_KEY_1_7 field. */
#define CC_AES_AES_KEY_1_7_AES_KEY_1_7_Msk (0xFFFFFFFFUL << CC_AES_AES_KEY_1_7_AES_KEY_1_7_Pos) /*!< Bit mask of AES_KEY_1_7 field. */

/* Register: CC_AES_AES_IV_0_0 */
/* Description: Bits 31:0 of AES_IV0 register. AES_IV0 is used as the AES IV (initialization value) register in non-tunneling operations, and as the first tunnel stage iv register in tunneling operations. The IV register should be loaded according to the AES mode: in AES CBC/CBC-MAC the AES IV register should be loaded with the IV (initialization vector), in XTS-AES the AES IV register should be loaded with the 'T' value (unless the HW T calculation mode is active, in which the 'T' value is calculated by the HW). */

/* Bits 31..0 : Bits 31:0 of AES_IV0 register. For the description of AES_IV0, see the AES_IV_0_0 register description */
#define CC_AES_AES_IV_0_0_AES_IV_0_0_Pos (0UL) /*!< Position of AES_IV_0_0 field. */
#define CC_AES_AES_IV_0_0_AES_IV_0_0_Msk (0xFFFFFFFFUL << CC_AES_AES_IV_0_0_AES_IV_0_0_Pos) /*!< Bit mask of AES_IV_0_0 field. */

/* Register: CC_AES_AES_IV_0_1 */
/* Description: Bits 63:32 of AES_IV0 128b register. For the description of AES_IV0, see the AES_IV_0_0 register description */

/* Bits 31..0 : Bits 63:32 of AES_IV0 register. For the description of AES_IV0, see the AES_IV_0_0 register description */
#define CC_AES_AES_IV_0_1_AES_IV_0_1_Pos (0UL) /*!< Position of AES_IV_0_1 field. */
#define CC_AES_AES_IV_0_1_AES_IV_0_1_Msk (0xFFFFFFFFUL << CC_AES_AES_IV_0_1_AES_IV_0_1_Pos) /*!< Bit mask of AES_IV_0_1 field. */

/* Register: CC_AES_AES_IV_0_2 */
/* Description: Bits 95:64 of AES_IV0 128b register. For the description of AES_IV0, see the AES_IV_0_0 register description */

/* Bits 31..0 : Bits 95:64 of AES_IV0 register. For the description of AES_IV0, see the AES_IV_0_0 register description */
#define CC_AES_AES_IV_0_2_AES_IV_0_2_Pos (0UL) /*!< Position of AES_IV_0_2 field. */
#define CC_AES_AES_IV_0_2_AES_IV_0_2_Msk (0xFFFFFFFFUL << CC_AES_AES_IV_0_2_AES_IV_0_2_Pos) /*!< Bit mask of AES_IV_0_2 field. */

/* Register: CC_AES_AES_IV_0_3 */
/* Description: Bits 127:96 of AES_IV0 128b register. For the description of AES_IV0, see the AES_IV_0_0 register description */

/* Bits 31..0 : Bits 127:96 of AES_IV0 register. For the description of AES_IV0, see the AES_IV_0_0 register description */
#define CC_AES_AES_IV_0_3_AES_IV_0_3_Pos (0UL) /*!< Position of AES_IV_0_3 field. */
#define CC_AES_AES_IV_0_3_AES_IV_0_3_Msk (0xFFFFFFFFUL << CC_AES_AES_IV_0_3_AES_IV_0_3_Pos) /*!< Bit mask of AES_IV_0_3 field. */

/* Register: CC_AES_AES_IV_1_0 */
/* Description: Bits 31:0 of AES_IV1 128b register. AES_IV1 is used as the AES IV (initialization value) register as the second tunnel stage iv register in tunneling operations. The IV register should be loaded according to the AES mode: in AES CBC/CBC-MAC the AES IV register should be loaded with the IV (initialization vector), in XTS-AES the AES IV register should be loaded with the 'T' value (unless the HW T calculation mode is active, in which the 'T' value is calculated by the HW. */

/* Bits 31..0 : Bits 31:0 of AES_IV1 register. For the description of AES_IV1, see the AES_IV_1_0 register description */
#define CC_AES_AES_IV_1_0_AES_IV_1_0_Pos (0UL) /*!< Position of AES_IV_1_0 field. */
#define CC_AES_AES_IV_1_0_AES_IV_1_0_Msk (0xFFFFFFFFUL << CC_AES_AES_IV_1_0_AES_IV_1_0_Pos) /*!< Bit mask of AES_IV_1_0 field. */

/* Register: CC_AES_AES_IV_1_1 */
/* Description: Bits 63:32 of AES_IV1 128b register. For the description of AES_IV1, see the AES_IV_1_0 register description */

/* Bits 31..0 : Bits 63:32 of AES_IV1 register. For the description of AES_IV1, see the AES_IV_1_0 register description */
#define CC_AES_AES_IV_1_1_AES_IV_1_1_Pos (0UL) /*!< Position of AES_IV_1_1 field. */
#define CC_AES_AES_IV_1_1_AES_IV_1_1_Msk (0xFFFFFFFFUL << CC_AES_AES_IV_1_1_AES_IV_1_1_Pos) /*!< Bit mask of AES_IV_1_1 field. */

/* Register: CC_AES_AES_IV_1_2 */
/* Description: Bits 95:64 of AES_IV1 128b register. For the description of AES_IV1, see the AES_IV_1_0 register description */

/* Bits 31..0 : Bits 95:64 of AES_IV1 register. For the description of AES_IV1, see the AES_IV_1_0 register description */
#define CC_AES_AES_IV_1_2_AES_IV_1_2_Pos (0UL) /*!< Position of AES_IV_1_2 field. */
#define CC_AES_AES_IV_1_2_AES_IV_1_2_Msk (0xFFFFFFFFUL << CC_AES_AES_IV_1_2_AES_IV_1_2_Pos) /*!< Bit mask of AES_IV_1_2 field. */

/* Register: CC_AES_AES_IV_1_3 */
/* Description: Bits 127:96 of AES_IV1 128b register. For the description of AES_IV1, see the AES_IV_1_0 register description */

/* Bits 31..0 : Bits 127:96 of AES_IV1 register. For the description of AES_IV1, see the AES_IV_1_0 register description */
#define CC_AES_AES_IV_1_3_AES_IV_1_3_Pos (0UL) /*!< Position of AES_IV_1_3 field. */
#define CC_AES_AES_IV_1_3_AES_IV_1_3_Msk (0xFFFFFFFFUL << CC_AES_AES_IV_1_3_AES_IV_1_3_Pos) /*!< Bit mask of AES_IV_1_3 field. */

/* Register: CC_AES_AES_CTR_0_0 */
/* Description: Bits 31:0 of AES_CTR0 128b register. AES_CTR_0 is used as the AES CTR (counter) register in non-tunneling operations, and as the first tunnel stage CTR register in tunneling operations. The CTR register should be loaded according to the AES mode: in AES CTR/GCTR the AES CTR register should be loaded with the counter value, in XTS-AES the AES CTR register should be loaded with the 'i' value (in order to calculate the T value from it, if HW T calculation is supported). */

/* Bits 31..0 : Bits 31:0 of AES_CTR0 register. For the description of AES_CTR0, see the AES_CTR_0_0 register description */
#define CC_AES_AES_CTR_0_0_AES_CTR_0_0_Pos (0UL) /*!< Position of AES_CTR_0_0 field. */
#define CC_AES_AES_CTR_0_0_AES_CTR_0_0_Msk (0xFFFFFFFFUL << CC_AES_AES_CTR_0_0_AES_CTR_0_0_Pos) /*!< Bit mask of AES_CTR_0_0 field. */

/* Register: CC_AES_AES_CTR_0_1 */
/* Description: Bits 63:32 of AES_CTR0 128b register. For the description of AES_CTR0, see the AES_CTR_0_0 register description. */

/* Bits 31..0 : Bits 63:32 of AES_CTR0 register. For the description of AES_CTR0, see the AES_CTR_0_0 register description */
#define CC_AES_AES_CTR_0_1_AES_CTR_0_1_Pos (0UL) /*!< Position of AES_CTR_0_1 field. */
#define CC_AES_AES_CTR_0_1_AES_CTR_0_1_Msk (0xFFFFFFFFUL << CC_AES_AES_CTR_0_1_AES_CTR_0_1_Pos) /*!< Bit mask of AES_CTR_0_1 field. */

/* Register: CC_AES_AES_CTR_0_2 */
/* Description: Bits 95:64 of AES_CTR0 128b register. For the description of AES_CTR0, see the AES_CTR_0_0 register description. */

/* Bits 31..0 : Bits 95:64 of AES_CTR0 register. For the description of AES_CTR0, see the AES_CTR_0_0 register description */
#define CC_AES_AES_CTR_0_2_AES_CTR_0_2_Pos (0UL) /*!< Position of AES_CTR_0_2 field. */
#define CC_AES_AES_CTR_0_2_AES_CTR_0_2_Msk (0xFFFFFFFFUL << CC_AES_AES_CTR_0_2_AES_CTR_0_2_Pos) /*!< Bit mask of AES_CTR_0_2 field. */

/* Register: CC_AES_AES_CTR_0_3 */
/* Description: Bits 127:96 of AES_CTR0 128b register. For the description of AES_CTR0, see the AES_CTR_0_0 register description. */

/* Bits 31..0 : Bits 127:96 of AES_CTR0 register. For the description of AES_CTR0, see the AES_CTR_0_0 register description */
#define CC_AES_AES_CTR_0_3_AES_CTR_0_3_Pos (0UL) /*!< Position of AES_CTR_0_3 field. */
#define CC_AES_AES_CTR_0_3_AES_CTR_0_3_Msk (0xFFFFFFFFUL << CC_AES_AES_CTR_0_3_AES_CTR_0_3_Pos) /*!< Bit mask of AES_CTR_0_3 field. */

/* Register: CC_AES_AES_BUSY */
/* Description: This register is set when the AES core is active */

/* Bit 0 : This register is set when the AES core is active */
#define CC_AES_AES_BUSY_AES_BUSY_Pos (0UL) /*!< Position of AES_BUSY field. */
#define CC_AES_AES_BUSY_AES_BUSY_Msk (0x1UL << CC_AES_AES_BUSY_AES_BUSY_Pos) /*!< Bit mask of AES_BUSY field. */

/* Register: CC_AES_AES_SK */
/* Description: Writing to this address causes sampling of the HW key to the AES_KEY0 register */

/* Bit 0 : Writing to this address causes sampling of the HW key to the AES_KEY0 register */
#define CC_AES_AES_SK_AES_SK_Pos (0UL) /*!< Position of AES_SK field. */
#define CC_AES_AES_SK_AES_SK_Msk (0x1UL << CC_AES_AES_SK_AES_SK_Pos) /*!< Bit mask of AES_SK field. */

/* Register: CC_AES_AES_CMAC_INIT */
/* Description: Writing to this address triggers the AES engine generating of K1 and K2 for AES CMAC operations. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Writing to this address starts the generating of K1 and K2 for AES CMAC operations. */
#define CC_AES_AES_CMAC_INIT_AES_CMAC_INIT_Pos (0UL) /*!< Position of AES_CMAC_INIT field. */
#define CC_AES_AES_CMAC_INIT_AES_CMAC_INIT_Msk (0x1UL << CC_AES_AES_CMAC_INIT_AES_CMAC_INIT_Pos) /*!< Bit mask of AES_CMAC_INIT field. */

/* Register: CC_AES_AES_SK1 */
/* Description: Writing to this address causes sampling of the HW key to the AES_KEY1 register */

/* Bit 0 : Writing to this address causes sampling of the HW key to the AES_KEY1 register */
#define CC_AES_AES_SK1_AES_SK1_Pos (0UL) /*!< Position of AES_SK1 field. */
#define CC_AES_AES_SK1_AES_SK1_Msk (0x1UL << CC_AES_AES_SK1_AES_SK1_Pos) /*!< Bit mask of AES_SK1 field. */

/* Register: CC_AES_AES_REMAINING_BYTES */
/* Description: This register should be set with the amount of remaining bytes until the end of the current AES operation. The AES engine counts down from this value to determine the last / one before last blocks in AES CMAC, XTS AES and AES CCM. */

/* Bits 31..0 : This register should be set with the amount of remaining bytes until the end of the current AES operation. The AES engine counts down from this value to determine the last / one before last blocks in AES CMAC, XTS AES and AES CCM. */
#define CC_AES_AES_REMAINING_BYTES_AES_REMAINING_BYTES_Pos (0UL) /*!< Position of AES_REMAINING_BYTES field. */
#define CC_AES_AES_REMAINING_BYTES_AES_REMAINING_BYTES_Msk (0xFFFFFFFFUL << CC_AES_AES_REMAINING_BYTES_AES_REMAINING_BYTES_Pos) /*!< Bit mask of AES_REMAINING_BYTES field. */

/* Register: CC_AES_AES_CONTROL */
/* Description: This register holds the configuration of the AES engine. Note: This is a special register, affected by internal logic. test result of this register is NA. */

/* Bit 31 : Using direct access and not the DIN-DOUT interface */
#define CC_AES_AES_CONTROL_DIRECT_ACCESS_Pos (31UL) /*!< Position of DIRECT_ACCESS field. */
#define CC_AES_AES_CONTROL_DIRECT_ACCESS_Msk (0x1UL << CC_AES_AES_CONTROL_DIRECT_ACCESS_Pos) /*!< Bit mask of DIRECT_ACCESS field. */

/* Bit 29 : This field determines the value that is written to AES_KEY_0, when AES_SK is kicked. */
#define CC_AES_AES_CONTROL_AES_XOR_CRYPTOKEY_Pos (29UL) /*!< Position of AES_XOR_CRYPTOKEY field. */
#define CC_AES_AES_CONTROL_AES_XOR_CRYPTOKEY_Msk (0x1UL << CC_AES_AES_CONTROL_AES_XOR_CRYPTOKEY_Pos) /*!< Bit mask of AES_XOR_CRYPTOKEY field. */
#define CC_AES_AES_CONTROL_AES_XOR_CRYPTOKEY_Disable (0UL) /*!< The value that is written to AES_KEY_0 is the value of the HW cryptokey, as is. */
#define CC_AES_AES_CONTROL_AES_XOR_CRYPTOKEY_Enable (1UL) /*!< The value that is written to AES_KEY_0 is the value of the HW cryptokey XOR with the current value of AES_KEY_0. */

/* Bit 28 : This field determines for AES-TO-HASH-AND-DOUT tunneling operations, whether the AES outputs to the HASH the result of the first or the second tunneling stage. */
#define CC_AES_AES_CONTROL_AES_OUT_MID_TUN_TO_HASH_Pos (28UL) /*!< Position of AES_OUT_MID_TUN_TO_HASH field. */
#define CC_AES_AES_CONTROL_AES_OUT_MID_TUN_TO_HASH_Msk (0x1UL << CC_AES_AES_CONTROL_AES_OUT_MID_TUN_TO_HASH_Pos) /*!< Bit mask of AES_OUT_MID_TUN_TO_HASH field. */
#define CC_AES_AES_CONTROL_AES_OUT_MID_TUN_TO_HASH_SecondStage (0UL) /*!< The AES engine writes to the HASH the result of the second tunnel stage. */
#define CC_AES_AES_CONTROL_AES_OUT_MID_TUN_TO_HASH_FirstStage (1UL) /*!< The AES engine writes to the HASH the result of the first tunnel stage. */

/* Bit 26 : This field determines whether the input data to the second tunnel stage is padded with zeroes (according to the remaining_bytes value) or not. */
#define CC_AES_AES_CONTROL_AES_TUNNEL_B1_PAD_EN_Pos (26UL) /*!< Position of AES_TUNNEL_B1_PAD_EN field. */
#define CC_AES_AES_CONTROL_AES_TUNNEL_B1_PAD_EN_Msk (0x1UL << CC_AES_AES_CONTROL_AES_TUNNEL_B1_PAD_EN_Pos) /*!< Bit mask of AES_TUNNEL_B1_PAD_EN field. */
#define CC_AES_AES_CONTROL_AES_TUNNEL_B1_PAD_EN_Disable (0UL) /*!< The data input to the second tunnel block is not padded with zeros. */
#define CC_AES_AES_CONTROL_AES_TUNNEL_B1_PAD_EN_Enable (1UL) /*!< The data input to the second tunnel block is padded with zeros. */

/* Bit 25 : This fields determines whether the AES output is the result of the first or second tunneling stage. */
#define CC_AES_AES_CONTROL_AES_OUTPUT_MID_TUNNEL_DATA_Pos (25UL) /*!< Position of AES_OUTPUT_MID_TUNNEL_DATA field. */
#define CC_AES_AES_CONTROL_AES_OUTPUT_MID_TUNNEL_DATA_Msk (0x1UL << CC_AES_AES_CONTROL_AES_OUTPUT_MID_TUNNEL_DATA_Pos) /*!< Bit mask of AES_OUTPUT_MID_TUNNEL_DATA field. */
#define CC_AES_AES_CONTROL_AES_OUTPUT_MID_TUNNEL_DATA_SecondStage (0UL) /*!< The AES engine outputs the result of the second tunnel stage (standard tunneling) */
#define CC_AES_AES_CONTROL_AES_OUTPUT_MID_TUNNEL_DATA_FirstStage (1UL) /*!< The AES engine outputs the result of the first tunnel stage. */

/* Bit 24 : This field determines whether the first tunnel stage performs encrypt or decrypt operation. */
#define CC_AES_AES_CONTROL_AES_TUNNEL0_ENCRYPT_Pos (24UL) /*!< Position of AES_TUNNEL0_ENCRYPT field. */
#define CC_AES_AES_CONTROL_AES_TUNNEL0_ENCRYPT_Msk (0x1UL << CC_AES_AES_CONTROL_AES_TUNNEL0_ENCRYPT_Pos) /*!< Bit mask of AES_TUNNEL0_ENCRYPT field. */
#define CC_AES_AES_CONTROL_AES_TUNNEL0_ENCRYPT_Disable (0UL) /*!< The first tunnel stage performs decrypt operations */
#define CC_AES_AES_CONTROL_AES_TUNNEL0_ENCRYPT_Enable (1UL) /*!< The first tunnel stage performs encrypt operations */

/* Bit 23 : For tunneling operations this field determine the data that is fed to the second tunneling stage. */
#define CC_AES_AES_CONTROL_AES_TUN_B1_USES_PADDED_DATA_IN_Pos (23UL) /*!< Position of AES_TUN_B1_USES_PADDED_DATA_IN field. */
#define CC_AES_AES_CONTROL_AES_TUN_B1_USES_PADDED_DATA_IN_Msk (0x1UL << CC_AES_AES_CONTROL_AES_TUN_B1_USES_PADDED_DATA_IN_Pos) /*!< Bit mask of AES_TUN_B1_USES_PADDED_DATA_IN field. */
#define CC_AES_AES_CONTROL_AES_TUN_B1_USES_PADDED_DATA_IN_Disable (0UL) /*!< Output of first block is used as input (standard tunneling operation) */
#define CC_AES_AES_CONTROL_AES_TUN_B1_USES_PADDED_DATA_IN_Enable (1UL) /*!< Data_in after padding rather than the output of the first block */

/* Bit 22 : This field determines whether the second tunnel stage performs encrypt or decrypt operation. */
#define CC_AES_AES_CONTROL_AES_TUNNEL1_DECRYPT_Pos (22UL) /*!< Position of AES_TUNNEL1_DECRYPT field. */
#define CC_AES_AES_CONTROL_AES_TUNNEL1_DECRYPT_Msk (0x1UL << CC_AES_AES_CONTROL_AES_TUNNEL1_DECRYPT_Pos) /*!< Bit mask of AES_TUNNEL1_DECRYPT field. */
#define CC_AES_AES_CONTROL_AES_TUNNEL1_DECRYPT_Disable (0UL) /*!< The second tunnel stage performs encrypt operations */
#define CC_AES_AES_CONTROL_AES_TUNNEL1_DECRYPT_Enable (1UL) /*!< The second tunnel stage performs decrypt operations */

/* Bits 15..14 : This field determines the AES key length of the second stage operation in tunneling operations. */
#define CC_AES_AES_CONTROL_NK_KEY1_Pos (14UL) /*!< Position of NK_KEY1 field. */
#define CC_AES_AES_CONTROL_NK_KEY1_Msk (0x3UL << CC_AES_AES_CONTROL_NK_KEY1_Pos) /*!< Bit mask of NK_KEY1 field. */
#define CC_AES_AES_CONTROL_NK_KEY1_128Bits (0UL) /*!< Use 128 bit AES key */
#define CC_AES_AES_CONTROL_NK_KEY1_192Bits (1UL) /*!< Use 192 bit AES key */
#define CC_AES_AES_CONTROL_NK_KEY1_256Bits (2UL) /*!< Use 256 bit AES key */

/* Bits 13..12 : This field determines the AES key length in non-tunneling operations, and the AES key length of the first stage in tunneling operations. */
#define CC_AES_AES_CONTROL_NK_KEY0_Pos (12UL) /*!< Position of NK_KEY0 field. */
#define CC_AES_AES_CONTROL_NK_KEY0_Msk (0x3UL << CC_AES_AES_CONTROL_NK_KEY0_Pos) /*!< Bit mask of NK_KEY0 field. */
#define CC_AES_AES_CONTROL_NK_KEY0_128Bits (0UL) /*!< Use 128 bit AES key */
#define CC_AES_AES_CONTROL_NK_KEY0_192Bits (1UL) /*!< Use 192 bit AES key */
#define CC_AES_AES_CONTROL_NK_KEY0_256Bits (2UL) /*!< Use 256 bit AES key */

/* Bit 11 : If MODE_KEY0 is set to 3'b001 (CBC), and this field is set, the mode is BITLOCKER. */
#define CC_AES_AES_CONTROL_CBC_IS_BITLOCKER_Pos (11UL) /*!< Position of CBC_IS_BITLOCKER field. */
#define CC_AES_AES_CONTROL_CBC_IS_BITLOCKER_Msk (0x1UL << CC_AES_AES_CONTROL_CBC_IS_BITLOCKER_Pos) /*!< Bit mask of CBC_IS_BITLOCKER field. */

/* Bit 10 : This field determines whether the AES performs dual-tunnel operations or standard non-tunneling operations. */
#define CC_AES_AES_CONTROL_AES_TUNNEL_IS_ON_Pos (10UL) /*!< Position of AES_TUNNEL_IS_ON field. */
#define CC_AES_AES_CONTROL_AES_TUNNEL_IS_ON_Msk (0x1UL << CC_AES_AES_CONTROL_AES_TUNNEL_IS_ON_Pos) /*!< Bit mask of AES_TUNNEL_IS_ON field. */
#define CC_AES_AES_CONTROL_AES_TUNNEL_IS_ON_NonTunneling (0UL) /*!< Non-tunneling operations */
#define CC_AES_AES_CONTROL_AES_TUNNEL_IS_ON_Tunneling (1UL) /*!< Tunneling operations */

/* Bit 8 : If MODE_KEY0 is set to 3'b001 (CBC), and this field is set, the mode is CBC-with ESSIV. */
#define CC_AES_AES_CONTROL_CBC_IS_ESSIV_Pos (8UL) /*!< Position of CBC_IS_ESSIV field. */
#define CC_AES_AES_CONTROL_CBC_IS_ESSIV_Msk (0x1UL << CC_AES_AES_CONTROL_CBC_IS_ESSIV_Pos) /*!< Bit mask of CBC_IS_ESSIV field. */

/* Bits 7..5 : This field determines the AES mode of the second stage operation in tunneling operations. */
#define CC_AES_AES_CONTROL_MODE_KEY1_Pos (5UL) /*!< Position of MODE_KEY1 field. */
#define CC_AES_AES_CONTROL_MODE_KEY1_Msk (0x7UL << CC_AES_AES_CONTROL_MODE_KEY1_Pos) /*!< Bit mask of MODE_KEY1 field. */
#define CC_AES_AES_CONTROL_MODE_KEY1_ECB (0UL) /*!< Electronic codebook mode */
#define CC_AES_AES_CONTROL_MODE_KEY1_CBC (1UL) /*!< Cipher block chaining mode */
#define CC_AES_AES_CONTROL_MODE_KEY1_CTR (2UL) /*!< Counter mode */
#define CC_AES_AES_CONTROL_MODE_KEY1_CBC_MAC (3UL) /*!< Cipher block chaining message authentication code mode */
#define CC_AES_AES_CONTROL_MODE_KEY1_XCBC_MAC (5UL) /*!< Cipher block chaining message authentication with extensions mode */
#define CC_AES_AES_CONTROL_MODE_KEY1_CMAC (7UL) /*!< Cipher-based message authentication code mode */

/* Bits 4..2 : This field determines the AES mode in non tunneling operations, and the AES mode of the first stage in tunneling operations. */
#define CC_AES_AES_CONTROL_MODE_KEY0_Pos (2UL) /*!< Position of MODE_KEY0 field. */
#define CC_AES_AES_CONTROL_MODE_KEY0_Msk (0x7UL << CC_AES_AES_CONTROL_MODE_KEY0_Pos) /*!< Bit mask of MODE_KEY0 field. */
#define CC_AES_AES_CONTROL_MODE_KEY0_ECB (0UL) /*!< Electronic codebook mode */
#define CC_AES_AES_CONTROL_MODE_KEY0_CBC (1UL) /*!< Cipher block chaining mode */
#define CC_AES_AES_CONTROL_MODE_KEY0_CTR (2UL) /*!< Counter mode */
#define CC_AES_AES_CONTROL_MODE_KEY0_CBC_MAC (3UL) /*!< Cipher block chaining message authentication code mode */
#define CC_AES_AES_CONTROL_MODE_KEY0_XEX_XTS (4UL) /*!< XEX-based tweaked-codebook with ciphertext stealing mode */
#define CC_AES_AES_CONTROL_MODE_KEY0_XCBC_MAC (5UL) /*!< Cipher block chaining message authentication with extensions mode */
#define CC_AES_AES_CONTROL_MODE_KEY0_OFB (6UL) /*!< Output feedback mode */
#define CC_AES_AES_CONTROL_MODE_KEY0_CMAC (7UL) /*!< Cipher-based message authentication code mode */

/* Bit 1 : If MODE_KEY0 is set to 3'b001 (CBC), and this field is set, the mode is CBC-CTS. In addition, if MODE_KEY0 is set to 3'b010 (CTR), and this field is set, the mode is GCTR. */
#define CC_AES_AES_CONTROL_MODE0_IS_CBC_CTS_Pos (1UL) /*!< Position of MODE0_IS_CBC_CTS field. */
#define CC_AES_AES_CONTROL_MODE0_IS_CBC_CTS_Msk (0x1UL << CC_AES_AES_CONTROL_MODE0_IS_CBC_CTS_Pos) /*!< Bit mask of MODE0_IS_CBC_CTS field. */

/* Bit 0 : This field determines whether the AES performs decrypt/encrypt operations, in non-tunneling operations. */
#define CC_AES_AES_CONTROL_DEC_KEY0_Pos (0UL) /*!< Position of DEC_KEY0 field. */
#define CC_AES_AES_CONTROL_DEC_KEY0_Msk (0x1UL << CC_AES_AES_CONTROL_DEC_KEY0_Pos) /*!< Bit mask of DEC_KEY0 field. */
#define CC_AES_AES_CONTROL_DEC_KEY0_Encrypt (0UL) /*!< Perform encrypt operation */
#define CC_AES_AES_CONTROL_DEC_KEY0_Decrypt (1UL) /*!< Perform decrypt operation */

/* Register: CC_AES_AES_HW_FLAGS */
/* Description: This register holds the pre-synthesis hw flag configuration of the AES engine */

/* Bit 12 : The DFA_CNTRMSR_EXIST flag */
#define CC_AES_AES_HW_FLAGS_DFA_CNTRMSR_EXIST_Pos (12UL) /*!< Position of DFA_CNTRMSR_EXIST field. */
#define CC_AES_AES_HW_FLAGS_DFA_CNTRMSR_EXIST_Msk (0x1UL << CC_AES_AES_HW_FLAGS_DFA_CNTRMSR_EXIST_Pos) /*!< Bit mask of DFA_CNTRMSR_EXIST field. */

/* Bit 11 : The SECOND_REGS_SET_EXIST flag */
#define CC_AES_AES_HW_FLAGS_SECOND_REGS_SET_EXIST_Pos (11UL) /*!< Position of SECOND_REGS_SET_EXIST field. */
#define CC_AES_AES_HW_FLAGS_SECOND_REGS_SET_EXIST_Msk (0x1UL << CC_AES_AES_HW_FLAGS_SECOND_REGS_SET_EXIST_Pos) /*!< Bit mask of SECOND_REGS_SET_EXIST field. */

/* Bit 10 : The AES_TUNNEL_EXISTS flag */
#define CC_AES_AES_HW_FLAGS_AES_TUNNEL_EXISTS_Pos (10UL) /*!< Position of AES_TUNNEL_EXISTS field. */
#define CC_AES_AES_HW_FLAGS_AES_TUNNEL_EXISTS_Msk (0x1UL << CC_AES_AES_HW_FLAGS_AES_TUNNEL_EXISTS_Pos) /*!< Bit mask of AES_TUNNEL_EXISTS field. */

/* Bit 9 : The AES_SUPPORT_PREV_IV flag */
#define CC_AES_AES_HW_FLAGS_AES_SUPPORT_PREV_IV_Pos (9UL) /*!< Position of AES_SUPPORT_PREV_IV field. */
#define CC_AES_AES_HW_FLAGS_AES_SUPPORT_PREV_IV_Msk (0x1UL << CC_AES_AES_HW_FLAGS_AES_SUPPORT_PREV_IV_Pos) /*!< Bit mask of AES_SUPPORT_PREV_IV field. */

/* Bit 8 : The USE_5_SBOXES flag */
#define CC_AES_AES_HW_FLAGS_USE_5_SBOXES_Pos (8UL) /*!< Position of USE_5_SBOXES field. */
#define CC_AES_AES_HW_FLAGS_USE_5_SBOXES_Msk (0x1UL << CC_AES_AES_HW_FLAGS_USE_5_SBOXES_Pos) /*!< Bit mask of USE_5_SBOXES field. */

/* Bit 5 : The USE_SBOX_TABLE flag */
#define CC_AES_AES_HW_FLAGS_USE_SBOX_TABLE_Pos (5UL) /*!< Position of USE_SBOX_TABLE field. */
#define CC_AES_AES_HW_FLAGS_USE_SBOX_TABLE_Msk (0x1UL << CC_AES_AES_HW_FLAGS_USE_SBOX_TABLE_Pos) /*!< Bit mask of USE_SBOX_TABLE field. */

/* Bit 4 : The ONLY_ENCRYPT flag */
#define CC_AES_AES_HW_FLAGS_ONLY_ENCRYPT_Pos (4UL) /*!< Position of ONLY_ENCRYPT field. */
#define CC_AES_AES_HW_FLAGS_ONLY_ENCRYPT_Msk (0x1UL << CC_AES_AES_HW_FLAGS_ONLY_ENCRYPT_Pos) /*!< Bit mask of ONLY_ENCRYPT field. */

/* Bit 3 : The CTR_EXIST flag */
#define CC_AES_AES_HW_FLAGS_CTR_EXIST_Pos (3UL) /*!< Position of CTR_EXIST field. */
#define CC_AES_AES_HW_FLAGS_CTR_EXIST_Msk (0x1UL << CC_AES_AES_HW_FLAGS_CTR_EXIST_Pos) /*!< Bit mask of CTR_EXIST field. */

/* Bit 2 : The DPA_CNTRMSR_EXISTS flag */
#define CC_AES_AES_HW_FLAGS_DPA_CNTRMSR_EXIST_Pos (2UL) /*!< Position of DPA_CNTRMSR_EXIST field. */
#define CC_AES_AES_HW_FLAGS_DPA_CNTRMSR_EXIST_Msk (0x1UL << CC_AES_AES_HW_FLAGS_DPA_CNTRMSR_EXIST_Pos) /*!< Bit mask of DPA_CNTRMSR_EXIST field. */

/* Bit 1 : The AES_LARGE_RKEK flag */
#define CC_AES_AES_HW_FLAGS_AES_LARGE_RKEK_Pos (1UL) /*!< Position of AES_LARGE_RKEK field. */
#define CC_AES_AES_HW_FLAGS_AES_LARGE_RKEK_Msk (0x1UL << CC_AES_AES_HW_FLAGS_AES_LARGE_RKEK_Pos) /*!< Bit mask of AES_LARGE_RKEK field. */

/* Bit 0 : The SUPPORT_256_192_KEY flag */
#define CC_AES_AES_HW_FLAGS_SUPPORT_256_192_KEY_Pos (0UL) /*!< Position of SUPPORT_256_192_KEY field. */
#define CC_AES_AES_HW_FLAGS_SUPPORT_256_192_KEY_Msk (0x1UL << CC_AES_AES_HW_FLAGS_SUPPORT_256_192_KEY_Pos) /*!< Bit mask of SUPPORT_256_192_KEY field. */

/* Register: CC_AES_AES_CTR_NO_INCREMENT */
/* Description: This register enables the AES CTR no increment mode in which the counter mode is not incremented between 2 blocks */

/* Bit 0 : This field enables the AES CTR no increment mode in which the counter mode is not incremented between 2 blocks */
#define CC_AES_AES_CTR_NO_INCREMENT_AES_CTR_NO_INCREMENT_Pos (0UL) /*!< Position of AES_CTR_NO_INCREMENT field. */
#define CC_AES_AES_CTR_NO_INCREMENT_AES_CTR_NO_INCREMENT_Msk (0x1UL << CC_AES_AES_CTR_NO_INCREMENT_AES_CTR_NO_INCREMENT_Pos) /*!< Bit mask of AES_CTR_NO_INCREMENT field. */

/* Register: CC_AES_AES_DFA_IS_ON */
/* Description: This register disable/enable the AES DFA. Note: This is a special register, affected by internal logic. test result of this register is NA. */

/* Bit 0 : Writing to this register turns the DFA counter-measures on. This register exists only if DFA countermeasures are supported. */
#define CC_AES_AES_DFA_IS_ON_AES_DFA_IS_ON_Pos (0UL) /*!< Position of AES_DFA_IS_ON field. */
#define CC_AES_AES_DFA_IS_ON_AES_DFA_IS_ON_Msk (0x1UL << CC_AES_AES_DFA_IS_ON_AES_DFA_IS_ON_Pos) /*!< Bit mask of AES_DFA_IS_ON field. */

/* Register: CC_AES_AES_DFA_ERR_STATUS */
/* Description: DFA error status register. */

/* Bit 0 : After a DFA violation this register is set and the AES block is disabled until the next reset. This register only exists if DFA countermeasures are supported. */
#define CC_AES_AES_DFA_ERR_STATUS_AES_DFA_ERR_STATUS_Pos (0UL) /*!< Position of AES_DFA_ERR_STATUS field. */
#define CC_AES_AES_DFA_ERR_STATUS_AES_DFA_ERR_STATUS_Msk (0x1UL << CC_AES_AES_DFA_ERR_STATUS_AES_DFA_ERR_STATUS_Pos) /*!< Bit mask of AES_DFA_ERR_STATUS field. */

/* Register: CC_AES_AES_CMAC_SIZE0_KICK */
/* Description: Writing to this address triggers the AES engine to perform a CMAC operation with size 0. The CMAC result can be read from the AES_IV0 register. */

/* Bit 0 : Writing to this address triggers the AES engine to perform a CMAC operation with size 0. The CMAC result can be read from the AES_IV0 register. */
#define CC_AES_AES_CMAC_SIZE0_KICK_AES_CMAC_SIZE0_KICK_Pos (0UL) /*!< Position of AES_CMAC_SIZE0_KICK field. */
#define CC_AES_AES_CMAC_SIZE0_KICK_AES_CMAC_SIZE0_KICK_Msk (0x1UL << CC_AES_AES_CMAC_SIZE0_KICK_AES_CMAC_SIZE0_KICK_Pos) /*!< Bit mask of AES_CMAC_SIZE0_KICK field. */


/* Peripheral: CC_AHB */
/* Description: CryptoCell AHB */

/* Register: CC_AHB_AHBM_SINGLES */
/* Description: This register forces the AHB transactions from CRYPTOCELL master to be always singles. */

/* Bit 0 : Force AHB singles */
#define CC_AHB_AHBM_SINGLES_AHB_SINGLES_Pos (0UL) /*!< Position of AHB_SINGLES field. */
#define CC_AHB_AHBM_SINGLES_AHB_SINGLES_Msk (0x1UL << CC_AHB_AHBM_SINGLES_AHB_SINGLES_Pos) /*!< Bit mask of AHB_SINGLES field. */

/* Register: CC_AHB_AHBM_HPROT */
/* Description: This register holds the AHB HPROT value */

/* Bits 3..0 : The AHB HPROT value */
#define CC_AHB_AHBM_HPROT_AHB_PROT_Pos (0UL) /*!< Position of AHB_PROT field. */
#define CC_AHB_AHBM_HPROT_AHB_PROT_Msk (0xFUL << CC_AHB_AHBM_HPROT_AHB_PROT_Pos) /*!< Bit mask of AHB_PROT field. */

/* Register: CC_AHB_AHBM_HMASTLOCK */
/* Description: This register holds AHB HMASTLOCK value */

/* Bit 0 : The AHB HMASTLOCK value. */
#define CC_AHB_AHBM_HMASTLOCK_AHB_HMASTLOCK_Pos (0UL) /*!< Position of AHB_HMASTLOCK field. */
#define CC_AHB_AHBM_HMASTLOCK_AHB_HMASTLOCK_Msk (0x1UL << CC_AHB_AHBM_HMASTLOCK_AHB_HMASTLOCK_Pos) /*!< Bit mask of AHB_HMASTLOCK field. */

/* Register: CC_AHB_AHBM_HNONSEC */
/* Description: This register holds AHB HNONSEC value */

/* Bit 1 : The AHB HNONSEC value for read transaction. */
#define CC_AHB_AHBM_HNONSEC_AHB_READ_HNONSEC_Pos (1UL) /*!< Position of AHB_READ_HNONSEC field. */
#define CC_AHB_AHBM_HNONSEC_AHB_READ_HNONSEC_Msk (0x1UL << CC_AHB_AHBM_HNONSEC_AHB_READ_HNONSEC_Pos) /*!< Bit mask of AHB_READ_HNONSEC field. */

/* Bit 0 : The AHB HNONSEC value for write transaction. */
#define CC_AHB_AHBM_HNONSEC_AHB_WRITE_HNONSEC_Pos (0UL) /*!< Position of AHB_WRITE_HNONSEC field. */
#define CC_AHB_AHBM_HNONSEC_AHB_WRITE_HNONSEC_Msk (0x1UL << CC_AHB_AHBM_HNONSEC_AHB_WRITE_HNONSEC_Pos) /*!< Bit mask of AHB_WRITE_HNONSEC field. */


/* Peripheral: CC_AO */
/* Description: CryptoCell AO */

/* Register: CC_AO_HOST_DCU_EN0 */
/* Description: The DCU [31:0] enable register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : Debug control unit (DCU) enable bits. */
#define CC_AO_HOST_DCU_EN0_HOST_DCU_EN0_Pos (0UL) /*!< Position of HOST_DCU_EN0 field. */
#define CC_AO_HOST_DCU_EN0_HOST_DCU_EN0_Msk (0xFFFFFFFFUL << CC_AO_HOST_DCU_EN0_HOST_DCU_EN0_Pos) /*!< Bit mask of HOST_DCU_EN0 field. */

/* Register: CC_AO_HOST_DCU_EN1 */
/* Description: The DCU [63:32] enable register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : Debug control unit (DCU) enable bits. */
#define CC_AO_HOST_DCU_EN1_HOST_DCU_EN1_Pos (0UL) /*!< Position of HOST_DCU_EN1 field. */
#define CC_AO_HOST_DCU_EN1_HOST_DCU_EN1_Msk (0xFFFFFFFFUL << CC_AO_HOST_DCU_EN1_HOST_DCU_EN1_Pos) /*!< Bit mask of HOST_DCU_EN1 field. */

/* Register: CC_AO_HOST_DCU_EN2 */
/* Description: The DCU [95:64] enable register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : Debug control unit (DCU) enable bits. */
#define CC_AO_HOST_DCU_EN2_HOST_DCU_EN2_Pos (0UL) /*!< Position of HOST_DCU_EN2 field. */
#define CC_AO_HOST_DCU_EN2_HOST_DCU_EN2_Msk (0xFFFFFFFFUL << CC_AO_HOST_DCU_EN2_HOST_DCU_EN2_Pos) /*!< Bit mask of HOST_DCU_EN2 field. */

/* Register: CC_AO_HOST_DCU_EN3 */
/* Description: The DCU [1271:96] enable register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : Debug control unit (DCU) enable bits. */
#define CC_AO_HOST_DCU_EN3_HOST_DCU_EN3_Pos (0UL) /*!< Position of HOST_DCU_EN3 field. */
#define CC_AO_HOST_DCU_EN3_HOST_DCU_EN3_Msk (0xFFFFFFFFUL << CC_AO_HOST_DCU_EN3_HOST_DCU_EN3_Pos) /*!< Bit mask of HOST_DCU_EN3 field. */

/* Register: CC_AO_HOST_DCU_LOCK0 */
/* Description: The DCU lock register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : DCU_LOCK [31:0] register (a dedicated lock register per DCU bit). */
#define CC_AO_HOST_DCU_LOCK0_HOST_DCU_LOCK0_Pos (0UL) /*!< Position of HOST_DCU_LOCK0 field. */
#define CC_AO_HOST_DCU_LOCK0_HOST_DCU_LOCK0_Msk (0xFFFFFFFFUL << CC_AO_HOST_DCU_LOCK0_HOST_DCU_LOCK0_Pos) /*!< Bit mask of HOST_DCU_LOCK0 field. */

/* Register: CC_AO_HOST_DCU_LOCK1 */
/* Description: The DCU lock register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : DCU_LOCK [63:32] register (a dedicated lock register per DCU bit). */
#define CC_AO_HOST_DCU_LOCK1_HOST_DCU_LOCK1_Pos (0UL) /*!< Position of HOST_DCU_LOCK1 field. */
#define CC_AO_HOST_DCU_LOCK1_HOST_DCU_LOCK1_Msk (0xFFFFFFFFUL << CC_AO_HOST_DCU_LOCK1_HOST_DCU_LOCK1_Pos) /*!< Bit mask of HOST_DCU_LOCK1 field. */

/* Register: CC_AO_HOST_DCU_LOCK2 */
/* Description: The DCU lock register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : DCU_LOCK [95:64] register (a dedicated lock register per DCU bit). */
#define CC_AO_HOST_DCU_LOCK2_HOST_DCU_LOCK2_Pos (0UL) /*!< Position of HOST_DCU_LOCK2 field. */
#define CC_AO_HOST_DCU_LOCK2_HOST_DCU_LOCK2_Msk (0xFFFFFFFFUL << CC_AO_HOST_DCU_LOCK2_HOST_DCU_LOCK2_Pos) /*!< Bit mask of HOST_DCU_LOCK2 field. */

/* Register: CC_AO_HOST_DCU_LOCK3 */
/* Description: The DCU lock register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : DCU_LOCK [127:96] register (a dedicated lock register per DCU bit). */
#define CC_AO_HOST_DCU_LOCK3_HOST_DCU_LOCK3_Pos (0UL) /*!< Position of HOST_DCU_LOCK3 field. */
#define CC_AO_HOST_DCU_LOCK3_HOST_DCU_LOCK3_Msk (0xFFFFFFFFUL << CC_AO_HOST_DCU_LOCK3_HOST_DCU_LOCK3_Pos) /*!< Bit mask of HOST_DCU_LOCK3 field. */

/* Register: CC_AO_AO_ICV_DCU_RESTRICTION_MASK0 */
/* Description: The dcu lock register. */

/* Bits 31..0 : AI_ICV_DCU_RESTRICTION_MASK [31:0] parameter, that will be a customer modifiable. */
#define CC_AO_AO_ICV_DCU_RESTRICTION_MASK0_AO_ICV_DCU_RESTRICTION_MASK0_Pos (0UL) /*!< Position of AO_ICV_DCU_RESTRICTION_MASK0 field. */
#define CC_AO_AO_ICV_DCU_RESTRICTION_MASK0_AO_ICV_DCU_RESTRICTION_MASK0_Msk (0xFFFFFFFFUL << CC_AO_AO_ICV_DCU_RESTRICTION_MASK0_AO_ICV_DCU_RESTRICTION_MASK0_Pos) /*!< Bit mask of AO_ICV_DCU_RESTRICTION_MASK0 field. */

/* Register: CC_AO_AO_ICV_DCU_RESTRICTION_MASK1 */
/* Description: The 'ICV_DCU_RESTRICTION_MASK' parameter is read by FW during the secure debug verification to prevent OEM from setting specific DCUs that protect ICV secrets */

/* Bits 31..0 : AI_ICV_DCU_RESTRICTION_MASK [63:32] parameter, that will be a customer modifiable. */
#define CC_AO_AO_ICV_DCU_RESTRICTION_MASK1_AO_ICV_DCU_RESTRICTION_MASK1_Pos (0UL) /*!< Position of AO_ICV_DCU_RESTRICTION_MASK1 field. */
#define CC_AO_AO_ICV_DCU_RESTRICTION_MASK1_AO_ICV_DCU_RESTRICTION_MASK1_Msk (0xFFFFFFFFUL << CC_AO_AO_ICV_DCU_RESTRICTION_MASK1_AO_ICV_DCU_RESTRICTION_MASK1_Pos) /*!< Bit mask of AO_ICV_DCU_RESTRICTION_MASK1 field. */

/* Register: CC_AO_AO_ICV_DCU_RESTRICTION_MASK2 */
/* Description: The 'ICV_DCU_RESTRICTION_MASK' parameter is read by FW during the secure debug verification to prevent OEM from setting specific DCUs that protect ICV secrets */

/* Bits 31..0 : AI_ICV_DCU_RESTRICTION_MASK [95:64] parameter, that will be a customer modifiable. */
#define CC_AO_AO_ICV_DCU_RESTRICTION_MASK2_AO_ICV_DCU_RESTRICTION_MASK2_Pos (0UL) /*!< Position of AO_ICV_DCU_RESTRICTION_MASK2 field. */
#define CC_AO_AO_ICV_DCU_RESTRICTION_MASK2_AO_ICV_DCU_RESTRICTION_MASK2_Msk (0xFFFFFFFFUL << CC_AO_AO_ICV_DCU_RESTRICTION_MASK2_AO_ICV_DCU_RESTRICTION_MASK2_Pos) /*!< Bit mask of AO_ICV_DCU_RESTRICTION_MASK2 field. */

/* Register: CC_AO_AO_ICV_DCU_RESTRICTION_MASK3 */
/* Description: The 'ICV_DCU_RESTRICTION_MASK' parameter is read by FW during the secure debug verification to prevent OEM from setting specific DCUs that protect ICV secrets */

/* Bits 31..0 : AI_ICV_DCU_RESTRICTION_MASK [127:96] parameter, that will be a customer modifiable. */
#define CC_AO_AO_ICV_DCU_RESTRICTION_MASK3_AO_ICV_DCU_RESTRICTION_MASK3_Pos (0UL) /*!< Position of AO_ICV_DCU_RESTRICTION_MASK3 field. */
#define CC_AO_AO_ICV_DCU_RESTRICTION_MASK3_AO_ICV_DCU_RESTRICTION_MASK3_Msk (0xFFFFFFFFUL << CC_AO_AO_ICV_DCU_RESTRICTION_MASK3_AO_ICV_DCU_RESTRICTION_MASK3_Pos) /*!< Bit mask of AO_ICV_DCU_RESTRICTION_MASK3 field. */

/* Register: CC_AO_AO_CC_SEC_DEBUG_RESET */
/* Description: The reset-upon-debug indication */

/* Bit 0 : Asserted when CRYPTOCELL secure debug is enabled. It will not be possible to load HW keys from OTP in this mode. */
#define CC_AO_AO_CC_SEC_DEBUG_RESET_AO_CC_SEC_DEBUG_RESET_Pos (0UL) /*!< Position of AO_CC_SEC_DEBUG_RESET field. */
#define CC_AO_AO_CC_SEC_DEBUG_RESET_AO_CC_SEC_DEBUG_RESET_Msk (0x1UL << CC_AO_AO_CC_SEC_DEBUG_RESET_AO_CC_SEC_DEBUG_RESET_Pos) /*!< Bit mask of AO_CC_SEC_DEBUG_RESET field. */

/* Register: CC_AO_HOST_AO_LOCK_BITS */
/* Description: These masks will define, per LCS, which DCU bits will be tied to zero, even if the host tries to set them. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 8 : When this FW control is set, the DFA_ENABLE register cannot be written until the next PoR. The DFA_ENABLE_LOCK register is set-once per PoR. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_DFA_ENABLE_LOCK_Pos (8UL) /*!< Position of HOST_DFA_ENABLE_LOCK field. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_DFA_ENABLE_LOCK_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_HOST_DFA_ENABLE_LOCK_Pos) /*!< Bit mask of HOST_DFA_ENABLE_LOCK field. */

/* Bit 7 : When this FW controlled register is set, the AES DFA countermeasures are enabled/disabled regardless of the AES_DFA_IS_ON register value. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_FORCE_DFA_ENABLE_Pos (7UL) /*!< Position of HOST_FORCE_DFA_ENABLE field. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_FORCE_DFA_ENABLE_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_HOST_FORCE_DFA_ENABLE_Pos) /*!< Bit mask of HOST_FORCE_DFA_ENABLE field. */

/* Bit 6 : The RESET_UPON_DEBUG_DISABLE register is set-once (per PoR). */
#define CC_AO_HOST_AO_LOCK_BITS_RESET_UPON_DEBUG_DISABLE_Pos (6UL) /*!< Position of RESET_UPON_DEBUG_DISABLE field. */
#define CC_AO_HOST_AO_LOCK_BITS_RESET_UPON_DEBUG_DISABLE_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_RESET_UPON_DEBUG_DISABLE_Pos) /*!< Bit mask of RESET_UPON_DEBUG_DISABLE field. */

/* Bit 5 : The ICV_RMA_LOCK register is set-once per PoR. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_ICV_RMA_LOCK_Pos (5UL) /*!< Position of HOST_ICV_RMA_LOCK field. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_ICV_RMA_LOCK_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_HOST_ICV_RMA_LOCK_Pos) /*!< Bit mask of HOST_ICV_RMA_LOCK field. */

/* Bit 4 : When this FW controlled register is set, the KCE HW key is masked to zero. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_KCE_LOCK_Pos (4UL) /*!< Position of HOST_KCE_LOCK field. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_KCE_LOCK_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_HOST_KCE_LOCK_Pos) /*!< Bit mask of HOST_KCE_LOCK field. */

/* Bit 3 : When this FW controlled register is set, the KCP HW key is masked to zero. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_KCP_LOCK_Pos (3UL) /*!< Position of HOST_KCP_LOCK field. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_KCP_LOCK_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_HOST_KCP_LOCK_Pos) /*!< Bit mask of HOST_KCP_LOCK field. */

/* Bit 2 : When this FW controlled register is set, the KCEICV HW key is masked to zero. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_KCEICV_LOCK_Pos (2UL) /*!< Position of HOST_KCEICV_LOCK field. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_KCEICV_LOCK_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_HOST_KCEICV_LOCK_Pos) /*!< Bit mask of HOST_KCEICV_LOCK field. */

/* Bit 1 : When this FW controlled register is set, the KPICV HW key is masked to zero. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_KPICV_LOCK_Pos (1UL) /*!< Position of HOST_KPICV_LOCK field. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_KPICV_LOCK_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_HOST_KPICV_LOCK_Pos) /*!< Bit mask of HOST_KPICV_LOCK field. */

/* Bit 0 : When the 'fatal_error' register is asserted - HW keys will not be copied from OTP */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_FATAL_ERR_Pos (0UL) /*!< Position of HOST_FATAL_ERR field. */
#define CC_AO_HOST_AO_LOCK_BITS_HOST_FATAL_ERR_Msk (0x1UL << CC_AO_HOST_AO_LOCK_BITS_HOST_FATAL_ERR_Pos) /*!< Bit mask of HOST_FATAL_ERR field. */

/* Register: CC_AO_AO_APB_FILTERING */
/* Description: This register holds the AO_APB_FILTERING data. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 9 : When this FW controlled register is set, the APBC_ONLY_INST_ACCESS_ALLOWED register cannot be modified until the next PoR */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_INST_ACCESS_ALLOW_LOCK_Pos (9UL) /*!< Position of APBC_ONLY_INST_ACCESS_ALLOW_LOCK field. */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_INST_ACCESS_ALLOW_LOCK_Msk (0x1UL << CC_AO_AO_APB_FILTERING_APBC_ONLY_INST_ACCESS_ALLOW_LOCK_Pos) /*!< Bit mask of APBC_ONLY_INST_ACCESS_ALLOW_LOCK field. */

/* Bit 8 : When this FW controlled register is set, the APB-C slave accepts only instruction accesses */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_INST_ACCESS_ALLOW_Pos (8UL) /*!< Position of APBC_ONLY_INST_ACCESS_ALLOW field. */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_INST_ACCESS_ALLOW_Msk (0x1UL << CC_AO_AO_APB_FILTERING_APBC_ONLY_INST_ACCESS_ALLOW_Pos) /*!< Bit mask of APBC_ONLY_INST_ACCESS_ALLOW field. */

/* Bit 7 : When this FW controlled register is set, the APBC_ONLY_PRIV_ACCESS_ALLOWED register cannot be modified until the next PoR */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_PRIV_ACCESS_ALLOW_LOCK_Pos (7UL) /*!< Position of APBC_ONLY_PRIV_ACCESS_ALLOW_LOCK field. */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_PRIV_ACCESS_ALLOW_LOCK_Msk (0x1UL << CC_AO_AO_APB_FILTERING_APBC_ONLY_PRIV_ACCESS_ALLOW_LOCK_Pos) /*!< Bit mask of APBC_ONLY_PRIV_ACCESS_ALLOW_LOCK field. */

/* Bit 6 : When this FW controlled register is set, the APB-C slave accepts only privileged accesses */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_PRIV_ACCESS_ALLOW_Pos (6UL) /*!< Position of APBC_ONLY_PRIV_ACCESS_ALLOW field. */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_PRIV_ACCESS_ALLOW_Msk (0x1UL << CC_AO_AO_APB_FILTERING_APBC_ONLY_PRIV_ACCESS_ALLOW_Pos) /*!< Bit mask of APBC_ONLY_PRIV_ACCESS_ALLOW field. */

/* Bit 5 : When this FW controlled register is set, the APBC_ONLY_SEC_ACCESS_ALLOWED register cannot be modified until the next PoR */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_SEC_ACCESS_ALLOW_LOCK_Pos (5UL) /*!< Position of APBC_ONLY_SEC_ACCESS_ALLOW_LOCK field. */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_SEC_ACCESS_ALLOW_LOCK_Msk (0x1UL << CC_AO_AO_APB_FILTERING_APBC_ONLY_SEC_ACCESS_ALLOW_LOCK_Pos) /*!< Bit mask of APBC_ONLY_SEC_ACCESS_ALLOW_LOCK field. */

/* Bit 4 : When this FW controlled register is set, the APB-C slave accepts only secure accesses */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_SEC_ACCESS_ALLOW_Pos (4UL) /*!< Position of APBC_ONLY_SEC_ACCESS_ALLOW field. */
#define CC_AO_AO_APB_FILTERING_APBC_ONLY_SEC_ACCESS_ALLOW_Msk (0x1UL << CC_AO_AO_APB_FILTERING_APBC_ONLY_SEC_ACCESS_ALLOW_Pos) /*!< Bit mask of APBC_ONLY_SEC_ACCESS_ALLOW field. */

/* Bit 3 : When this FW controlled register is set, the APBC_ONLY_PRIV_ACCESS_ALLOWED register cannot be modified until the next PoR */
#define CC_AO_AO_APB_FILTERING_ONLY_PRIV_ACCESS_ALLOW_LOCK_Pos (3UL) /*!< Position of ONLY_PRIV_ACCESS_ALLOW_LOCK field. */
#define CC_AO_AO_APB_FILTERING_ONLY_PRIV_ACCESS_ALLOW_LOCK_Msk (0x1UL << CC_AO_AO_APB_FILTERING_ONLY_PRIV_ACCESS_ALLOW_LOCK_Pos) /*!< Bit mask of ONLY_PRIV_ACCESS_ALLOW_LOCK field. */

/* Bit 2 : When this FW controlled register is set, the APB slave accepts only privileged accesses */
#define CC_AO_AO_APB_FILTERING_ONLY_PRIV_ACCESS_ALLOW_Pos (2UL) /*!< Position of ONLY_PRIV_ACCESS_ALLOW field. */
#define CC_AO_AO_APB_FILTERING_ONLY_PRIV_ACCESS_ALLOW_Msk (0x1UL << CC_AO_AO_APB_FILTERING_ONLY_PRIV_ACCESS_ALLOW_Pos) /*!< Bit mask of ONLY_PRIV_ACCESS_ALLOW field. */

/* Bit 1 : When this FW controlled register is set, the ONLY_SEC_ACCESS_ALLOWED register cannot be modified until the next PoR */
#define CC_AO_AO_APB_FILTERING_ONLY_SEC_ACCESS_ALLOW_LOCK_Pos (1UL) /*!< Position of ONLY_SEC_ACCESS_ALLOW_LOCK field. */
#define CC_AO_AO_APB_FILTERING_ONLY_SEC_ACCESS_ALLOW_LOCK_Msk (0x1UL << CC_AO_AO_APB_FILTERING_ONLY_SEC_ACCESS_ALLOW_LOCK_Pos) /*!< Bit mask of ONLY_SEC_ACCESS_ALLOW_LOCK field. */

/* Bit 0 : When this FW controlled register is set, the APB slave accepts only secure accesses */
#define CC_AO_AO_APB_FILTERING_ONLY_SEC_ACCESS_ALLOW_Pos (0UL) /*!< Position of ONLY_SEC_ACCESS_ALLOW field. */
#define CC_AO_AO_APB_FILTERING_ONLY_SEC_ACCESS_ALLOW_Msk (0x1UL << CC_AO_AO_APB_FILTERING_ONLY_SEC_ACCESS_ALLOW_Pos) /*!< Bit mask of ONLY_SEC_ACCESS_ALLOW field. */

/* Register: CC_AO_AO_CC_GPPC */
/* Description: Holds the AO_CC_GPPC value from AO. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 7..0 : The AO_CC_GPPC value */
#define CC_AO_AO_CC_GPPC_AO_CC_GPPC_Pos (0UL) /*!< Position of AO_CC_GPPC field. */
#define CC_AO_AO_CC_GPPC_AO_CC_GPPC_Msk (0xFFUL << CC_AO_AO_CC_GPPC_AO_CC_GPPC_Pos) /*!< Bit mask of AO_CC_GPPC field. */

/* Register: CC_AO_HOST_RGF_CC_SW_RST */
/* Description: Writing to this register trigger a reset to CRYPTOCELL. This reset takes about 4 core clock cycles. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Trigger a reset to CRYPTOCELL. */
#define CC_AO_HOST_RGF_CC_SW_RST_HOST_RGF_CC_SW_RST_Pos (0UL) /*!< Position of HOST_RGF_CC_SW_RST field. */
#define CC_AO_HOST_RGF_CC_SW_RST_HOST_RGF_CC_SW_RST_Msk (0x1UL << CC_AO_HOST_RGF_CC_SW_RST_HOST_RGF_CC_SW_RST_Pos) /*!< Bit mask of HOST_RGF_CC_SW_RST field. */


/* Peripheral: CC_CHACHA */
/* Description: CryptoCell CHACHA */

/* Register: CC_CHACHA_CHACHA_CONTROL_REG */
/* Description: ChaCha general configuration. */

/* Bit 10 : Use a 96 bit init-vector */
#define CC_CHACHA_CHACHA_CONTROL_REG_USE_IV_96BIT_Pos (10UL) /*!< Position of USE_IV_96BIT field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_USE_IV_96BIT_Msk (0x1UL << CC_CHACHA_CHACHA_CONTROL_REG_USE_IV_96BIT_Pos) /*!< Bit mask of USE_IV_96BIT field. */

/* Bit 9 : For new message */
#define CC_CHACHA_CHACHA_CONTROL_REG_RESET_BLOCK_CNT_Pos (9UL) /*!< Position of RESET_BLOCK_CNT field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_RESET_BLOCK_CNT_Msk (0x1UL << CC_CHACHA_CHACHA_CONTROL_REG_RESET_BLOCK_CNT_Pos) /*!< Bit mask of RESET_BLOCK_CNT field. */

/* Bits 5..4 : Number of rounds of rotation. */
#define CC_CHACHA_CHACHA_CONTROL_REG_NUM_OF_ROUNDS_Pos (4UL) /*!< Position of NUM_OF_ROUNDS field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_NUM_OF_ROUNDS_Msk (0x3UL << CC_CHACHA_CHACHA_CONTROL_REG_NUM_OF_ROUNDS_Pos) /*!< Bit mask of NUM_OF_ROUNDS field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_NUM_OF_ROUNDS_Default (0UL) /*!< Use 20 rounds of rotation */
#define CC_CHACHA_CHACHA_CONTROL_REG_NUM_OF_ROUNDS_12Rounds (1UL) /*!< Use 12 rounds of rotation */
#define CC_CHACHA_CHACHA_CONTROL_REG_NUM_OF_ROUNDS_8Rounds (2UL) /*!< Use 8 rounds of rotation */

/* Bit 3 : Key length selection. */
#define CC_CHACHA_CHACHA_CONTROL_REG_KEY_LEN_Pos (3UL) /*!< Position of KEY_LEN field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_KEY_LEN_Msk (0x1UL << CC_CHACHA_CHACHA_CONTROL_REG_KEY_LEN_Pos) /*!< Bit mask of KEY_LEN field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_KEY_LEN_256Bit (0UL) /*!< Use 256 bit key length */
#define CC_CHACHA_CHACHA_CONTROL_REG_KEY_LEN_128Bit (1UL) /*!< Use 128 bit key length */

/* Bit 2 : Calculate key for Poly1305. Only available if ChaCha engine is present. */
#define CC_CHACHA_CHACHA_CONTROL_REG_CALC_KEY_FOR_POLY1305_Pos (2UL) /*!< Position of CALC_KEY_FOR_POLY1305 field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_CALC_KEY_FOR_POLY1305_Msk (0x1UL << CC_CHACHA_CHACHA_CONTROL_REG_CALC_KEY_FOR_POLY1305_Pos) /*!< Bit mask of CALC_KEY_FOR_POLY1305 field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_CALC_KEY_FOR_POLY1305_Disable (0UL) /*!< Do not calculate Poly1305 key */
#define CC_CHACHA_CHACHA_CONTROL_REG_CALC_KEY_FOR_POLY1305_Enable (1UL) /*!< Calculate 1305 key */

/* Bit 1 : Start init of new message. */
#define CC_CHACHA_CHACHA_CONTROL_REG_INIT_FROM_HOST_Pos (1UL) /*!< Position of INIT_FROM_HOST field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_INIT_FROM_HOST_Msk (0x1UL << CC_CHACHA_CHACHA_CONTROL_REG_INIT_FROM_HOST_Pos) /*!< Bit mask of INIT_FROM_HOST field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_INIT_FROM_HOST_Disable (0UL) /*!< Disable */
#define CC_CHACHA_CHACHA_CONTROL_REG_INIT_FROM_HOST_Enable (1UL) /*!< Initialize new message */

/* Bit 0 : Run engine in ChaCha or Salsa mode */
#define CC_CHACHA_CHACHA_CONTROL_REG_CHACHA_OR_SALSA_Pos (0UL) /*!< Position of CHACHA_OR_SALSA field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_CHACHA_OR_SALSA_Msk (0x1UL << CC_CHACHA_CHACHA_CONTROL_REG_CHACHA_OR_SALSA_Pos) /*!< Bit mask of CHACHA_OR_SALSA field. */
#define CC_CHACHA_CHACHA_CONTROL_REG_CHACHA_OR_SALSA_ChaCha (0UL) /*!< Run engine in ChaCha mode */
#define CC_CHACHA_CHACHA_CONTROL_REG_CHACHA_OR_SALSA_Salsa (1UL) /*!< Run engine in Salsa mode */

/* Register: CC_CHACHA_CHACHA_VERSION */
/* Description: ChaCha version */

/* Bits 31..0 : No field description provided */
#define CC_CHACHA_CHACHA_VERSION_CHACHA_VERSION_Pos (0UL) /*!< Position of CHACHA_VERSION field. */
#define CC_CHACHA_CHACHA_VERSION_CHACHA_VERSION_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_VERSION_CHACHA_VERSION_Pos) /*!< Bit mask of CHACHA_VERSION field. */

/* Register: CC_CHACHA_CHACHA_KEY0 */
/* Description: Bits [255:224] of ChaCha key */

/* Bits 31..0 : Bits [255:224] of ChaCha key */
#define CC_CHACHA_CHACHA_KEY0_CHACHA_KEY0_Pos (0UL) /*!< Position of CHACHA_KEY0 field. */
#define CC_CHACHA_CHACHA_KEY0_CHACHA_KEY0_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_KEY0_CHACHA_KEY0_Pos) /*!< Bit mask of CHACHA_KEY0 field. */

/* Register: CC_CHACHA_CHACHA_KEY1 */
/* Description: Bits [223:192] of ChaCha key */

/* Bits 31..0 : Bits [223:192] of ChaCha key */
#define CC_CHACHA_CHACHA_KEY1_CHACHA_KEY1_Pos (0UL) /*!< Position of CHACHA_KEY1 field. */
#define CC_CHACHA_CHACHA_KEY1_CHACHA_KEY1_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_KEY1_CHACHA_KEY1_Pos) /*!< Bit mask of CHACHA_KEY1 field. */

/* Register: CC_CHACHA_CHACHA_KEY2 */
/* Description: Bits [191:160] of ChaCha key */

/* Bits 31..0 : Bits [191:160] of ChaCha key */
#define CC_CHACHA_CHACHA_KEY2_CHACHA_KEY2_Pos (0UL) /*!< Position of CHACHA_KEY2 field. */
#define CC_CHACHA_CHACHA_KEY2_CHACHA_KEY2_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_KEY2_CHACHA_KEY2_Pos) /*!< Bit mask of CHACHA_KEY2 field. */

/* Register: CC_CHACHA_CHACHA_KEY3 */
/* Description: Bits [159:128] of ChaCha key */

/* Bits 31..0 : Bits [159:128] of ChaCha key */
#define CC_CHACHA_CHACHA_KEY3_CHACHA_KEY3_Pos (0UL) /*!< Position of CHACHA_KEY3 field. */
#define CC_CHACHA_CHACHA_KEY3_CHACHA_KEY3_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_KEY3_CHACHA_KEY3_Pos) /*!< Bit mask of CHACHA_KEY3 field. */

/* Register: CC_CHACHA_CHACHA_KEY4 */
/* Description: Bits [127:96] of ChaCha key */

/* Bits 31..0 : Bits [127:96] of ChaCha key */
#define CC_CHACHA_CHACHA_KEY4_CHACHA_KEY4_Pos (0UL) /*!< Position of CHACHA_KEY4 field. */
#define CC_CHACHA_CHACHA_KEY4_CHACHA_KEY4_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_KEY4_CHACHA_KEY4_Pos) /*!< Bit mask of CHACHA_KEY4 field. */

/* Register: CC_CHACHA_CHACHA_KEY5 */
/* Description: Bits [95:64] of ChaCha key */

/* Bits 31..0 : Bits [95:64] of ChaCha key */
#define CC_CHACHA_CHACHA_KEY5_CHACHA_KEY5_Pos (0UL) /*!< Position of CHACHA_KEY5 field. */
#define CC_CHACHA_CHACHA_KEY5_CHACHA_KEY5_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_KEY5_CHACHA_KEY5_Pos) /*!< Bit mask of CHACHA_KEY5 field. */

/* Register: CC_CHACHA_CHACHA_KEY6 */
/* Description: Bits [63:32] of ChaCha key */

/* Bits 31..0 : Bits [63:32] of ChaCha key */
#define CC_CHACHA_CHACHA_KEY6_CHACHA_KEY6_Pos (0UL) /*!< Position of CHACHA_KEY6 field. */
#define CC_CHACHA_CHACHA_KEY6_CHACHA_KEY6_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_KEY6_CHACHA_KEY6_Pos) /*!< Bit mask of CHACHA_KEY6 field. */

/* Register: CC_CHACHA_CHACHA_KEY7 */
/* Description: Bits [31:0] of ChaCha key */

/* Bits 31..0 : Bits [31:0] of ChaCha key */
#define CC_CHACHA_CHACHA_KEY7_CHACHA_KEY7_Pos (0UL) /*!< Position of CHACHA_KEY7 field. */
#define CC_CHACHA_CHACHA_KEY7_CHACHA_KEY7_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_KEY7_CHACHA_KEY7_Pos) /*!< Bit mask of CHACHA_KEY7 field. */

/* Register: CC_CHACHA_CHACHA_IV_0 */
/* Description: Bits [31:0] of ChaCha init-vector zero register */

/* Bits 31..0 : Bits [31:0] of ChaCha init-vector zero register */
#define CC_CHACHA_CHACHA_IV_0_CHACHA_IV_0_Pos (0UL) /*!< Position of CHACHA_IV_0 field. */
#define CC_CHACHA_CHACHA_IV_0_CHACHA_IV_0_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_IV_0_CHACHA_IV_0_Pos) /*!< Bit mask of CHACHA_IV_0 field. */

/* Register: CC_CHACHA_CHACHA_IV_1 */
/* Description: Bits [31:0] of ChaCha init-vector register */

/* Bits 31..0 : Bits [31:0] of ChaCha init-vector register */
#define CC_CHACHA_CHACHA_IV_1_CHACHA_IV_1_Pos (0UL) /*!< Position of CHACHA_IV_1 field. */
#define CC_CHACHA_CHACHA_IV_1_CHACHA_IV_1_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_IV_1_CHACHA_IV_1_Pos) /*!< Bit mask of CHACHA_IV_1 field. */

/* Register: CC_CHACHA_CHACHA_BUSY */
/* Description: This register is asserted whenever the ChaCha/Salsa core is active */

/* Bit 0 : This register is asserted whenever the ChaCha/Salsa core is active */
#define CC_CHACHA_CHACHA_BUSY_CHACHA_BUSY_Pos (0UL) /*!< Position of CHACHA_BUSY field. */
#define CC_CHACHA_CHACHA_BUSY_CHACHA_BUSY_Msk (0x1UL << CC_CHACHA_CHACHA_BUSY_CHACHA_BUSY_Pos) /*!< Bit mask of CHACHA_BUSY field. */

/* Register: CC_CHACHA_CHACHA_HW_FLAGS */
/* Description: This register holds the pre-synthesis HW flag configuration of the ChaCha/Salsa engine */

/* Bit 2 : If this flag is set, the next matrix calculated when the current one is written to data output path. */
#define CC_CHACHA_CHACHA_HW_FLAGS_FAST_CHACHA_Pos (2UL) /*!< Position of FAST_CHACHA field. */
#define CC_CHACHA_CHACHA_HW_FLAGS_FAST_CHACHA_Msk (0x1UL << CC_CHACHA_CHACHA_HW_FLAGS_FAST_CHACHA_Pos) /*!< Bit mask of FAST_CHACHA field. */
#define CC_CHACHA_CHACHA_HW_FLAGS_FAST_CHACHA_Disabled (0UL) /*!< Fast ChaCha/Salsa not supported by the engine. */
#define CC_CHACHA_CHACHA_HW_FLAGS_FAST_CHACHA_Enabled (1UL) /*!< Fast ChaCha/Salsa supported by the engine. */

/* Bit 1 : If this flag is set, the Salsa/ChaCha engine include Salsa implementation. */
#define CC_CHACHA_CHACHA_HW_FLAGS_SALSA_EXISTS_Pos (1UL) /*!< Position of SALSA_EXISTS field. */
#define CC_CHACHA_CHACHA_HW_FLAGS_SALSA_EXISTS_Msk (0x1UL << CC_CHACHA_CHACHA_HW_FLAGS_SALSA_EXISTS_Pos) /*!< Bit mask of SALSA_EXISTS field. */
#define CC_CHACHA_CHACHA_HW_FLAGS_SALSA_EXISTS_Disabled (0UL) /*!< Salsa not supported by the engine. */
#define CC_CHACHA_CHACHA_HW_FLAGS_SALSA_EXISTS_Enabled (1UL) /*!< Salsa supported by the engine. */

/* Bit 0 : If this flag is set, the Salsa/ChaCha engine include ChaCha implementation. */
#define CC_CHACHA_CHACHA_HW_FLAGS_CHACHA_EXISTS_Pos (0UL) /*!< Position of CHACHA_EXISTS field. */
#define CC_CHACHA_CHACHA_HW_FLAGS_CHACHA_EXISTS_Msk (0x1UL << CC_CHACHA_CHACHA_HW_FLAGS_CHACHA_EXISTS_Pos) /*!< Bit mask of CHACHA_EXISTS field. */
#define CC_CHACHA_CHACHA_HW_FLAGS_CHACHA_EXISTS_Disabled (0UL) /*!< ChaCha not supported by the engine. */
#define CC_CHACHA_CHACHA_HW_FLAGS_CHACHA_EXISTS_Enabled (1UL) /*!< ChaCha supported by the engine. */

/* Register: CC_CHACHA_CHACHA_BLOCK_CNT_LSB */
/* Description: The two first words (n) in the last row of the cipher matrix are the block counter. At the end of each block (512b), the block_cnt for the next block is written by HW to the CHACHA_BLOCK_CNT_LSB and CHACHA_BLOCK_CNT_MSB registers. If starting a new message the block counter must also be reset. */

/* Bits 31..0 : This register holds the ChaCha block counter bits [31:0] and must be read and written during respectively suspend and resume operations. */
#define CC_CHACHA_CHACHA_BLOCK_CNT_LSB_CHACHA_BLOCK_CNT_LSB_Pos (0UL) /*!< Position of CHACHA_BLOCK_CNT_LSB field. */
#define CC_CHACHA_CHACHA_BLOCK_CNT_LSB_CHACHA_BLOCK_CNT_LSB_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_BLOCK_CNT_LSB_CHACHA_BLOCK_CNT_LSB_Pos) /*!< Bit mask of CHACHA_BLOCK_CNT_LSB field. */

/* Register: CC_CHACHA_CHACHA_BLOCK_CNT_MSB */
/* Description: The two first words (n) in the last row of the cipher matrix are the block counter. at the end of each block (512b), the block_cnt for the next block is written by HW to the CHACHA_BLOCK_CNT_LSB and CHACHA_BLOCK_CNT_MSB registers. If starting a new message the block counter must also be reset. */

/* Bits 31..0 : This register holds the ChaCha block counter bits [63:32] and must be read and written during respectively suspend and resume operations. */
#define CC_CHACHA_CHACHA_BLOCK_CNT_MSB_CHACHA_BLOCK_CNT_MSB_Pos (0UL) /*!< Position of CHACHA_BLOCK_CNT_MSB field. */
#define CC_CHACHA_CHACHA_BLOCK_CNT_MSB_CHACHA_BLOCK_CNT_MSB_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_BLOCK_CNT_MSB_CHACHA_BLOCK_CNT_MSB_Pos) /*!< Bit mask of CHACHA_BLOCK_CNT_MSB field. */

/* Register: CC_CHACHA_CHACHA_SW_RESET */
/* Description: Resets ChaCha/Salsa engine. */

/* Bit 0 : Writing to this address resets the only FSM of ChaCha engine. The reset takes 4 core_clk cycles. */
#define CC_CHACHA_CHACHA_SW_RESET_CHACH_SW_RESET_Pos (0UL) /*!< Position of CHACH_SW_RESET field. */
#define CC_CHACHA_CHACHA_SW_RESET_CHACH_SW_RESET_Msk (0x1UL << CC_CHACHA_CHACHA_SW_RESET_CHACH_SW_RESET_Pos) /*!< Bit mask of CHACH_SW_RESET field. */

/* Register: CC_CHACHA_CHACHA_FOR_POLY_KEY0 */
/* Description: Bits [255:224] of CHACHA_FOR_POLY_KEY0 */

/* Bits 31..0 : Bits [255:224] of CHACHA_FOR_POLY_KEY0 */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY0_CHACHA_FOR_POLY_KEY0_Pos (0UL) /*!< Position of CHACHA_FOR_POLY_KEY0 field. */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY0_CHACHA_FOR_POLY_KEY0_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_FOR_POLY_KEY0_CHACHA_FOR_POLY_KEY0_Pos) /*!< Bit mask of CHACHA_FOR_POLY_KEY0 field. */

/* Register: CC_CHACHA_CHACHA_FOR_POLY_KEY1 */
/* Description: Bits [223:192] of CHACHA_FOR_POLY_KEY1 */

/* Bits 31..0 : Bits 223:192 of CHACHA_FOR_POLY_KEY1 */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY1_CHACHA_FOR_POLY_KEY1_Pos (0UL) /*!< Position of CHACHA_FOR_POLY_KEY1 field. */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY1_CHACHA_FOR_POLY_KEY1_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_FOR_POLY_KEY1_CHACHA_FOR_POLY_KEY1_Pos) /*!< Bit mask of CHACHA_FOR_POLY_KEY1 field. */

/* Register: CC_CHACHA_CHACHA_FOR_POLY_KEY2 */
/* Description: Bits191:160 of CHACHA_FOR_POLY_KEY2 */

/* Bits 31..0 : Bits191:160 of CHACHA_FOR_POLY_KEY2 */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY2_CHACHA_FOR_POLY_KEY2_Pos (0UL) /*!< Position of CHACHA_FOR_POLY_KEY2 field. */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY2_CHACHA_FOR_POLY_KEY2_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_FOR_POLY_KEY2_CHACHA_FOR_POLY_KEY2_Pos) /*!< Bit mask of CHACHA_FOR_POLY_KEY2 field. */

/* Register: CC_CHACHA_CHACHA_FOR_POLY_KEY3 */
/* Description: Bits159:128 of CHACHA_FOR_POLY_KEY3 */

/* Bits 31..0 : Bits 159:128 of CHACHA_FOR_POLY_KEY3 */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY3_CHACHA_FOR_POLY_KEY3_Pos (0UL) /*!< Position of CHACHA_FOR_POLY_KEY3 field. */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY3_CHACHA_FOR_POLY_KEY3_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_FOR_POLY_KEY3_CHACHA_FOR_POLY_KEY3_Pos) /*!< Bit mask of CHACHA_FOR_POLY_KEY3 field. */

/* Register: CC_CHACHA_CHACHA_FOR_POLY_KEY4 */
/* Description: Bits 127:96 of CHACHA_FOR_POLY_KEY4 */

/* Bits 31..0 : Bits 127:96 of CHACHA_FOR_POLY_KEY4 */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY4_CHACHA_FOR_POLY_KEY4_Pos (0UL) /*!< Position of CHACHA_FOR_POLY_KEY4 field. */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY4_CHACHA_FOR_POLY_KEY4_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_FOR_POLY_KEY4_CHACHA_FOR_POLY_KEY4_Pos) /*!< Bit mask of CHACHA_FOR_POLY_KEY4 field. */

/* Register: CC_CHACHA_CHACHA_FOR_POLY_KEY5 */
/* Description: Bits 95:64 of CHACHA_FOR_POLY_KEY5 */

/* Bits 31..0 : Bits 95:64 of CHACHA_FOR_POLY_KEY5 */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY5_CHACHA_FOR_POLY_KEY5_Pos (0UL) /*!< Position of CHACHA_FOR_POLY_KEY5 field. */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY5_CHACHA_FOR_POLY_KEY5_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_FOR_POLY_KEY5_CHACHA_FOR_POLY_KEY5_Pos) /*!< Bit mask of CHACHA_FOR_POLY_KEY5 field. */

/* Register: CC_CHACHA_CHACHA_FOR_POLY_KEY6 */
/* Description: Bits 63:32 of CHACHA_FOR_POLY_KEY6 */

/* Bits 31..0 : Bits 63:32 of CHACHA_FOR_POLY_KEY6 */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY6_CHACHA_FOR_POLY_KEY6_Pos (0UL) /*!< Position of CHACHA_FOR_POLY_KEY6 field. */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY6_CHACHA_FOR_POLY_KEY6_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_FOR_POLY_KEY6_CHACHA_FOR_POLY_KEY6_Pos) /*!< Bit mask of CHACHA_FOR_POLY_KEY6 field. */

/* Register: CC_CHACHA_CHACHA_FOR_POLY_KEY7 */
/* Description: Bits 31:0 of CHACHA_FOR_POLY_KEY7 */

/* Bits 31..0 : Bits 31:0 of CHACHA_FOR_POLY_KEY7 */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY7_CHACHA_FOR_POLY_KEY7_Pos (0UL) /*!< Position of CHACHA_FOR_POLY_KEY7 field. */
#define CC_CHACHA_CHACHA_FOR_POLY_KEY7_CHACHA_FOR_POLY_KEY7_Msk (0xFFFFFFFFUL << CC_CHACHA_CHACHA_FOR_POLY_KEY7_CHACHA_FOR_POLY_KEY7_Pos) /*!< Bit mask of CHACHA_FOR_POLY_KEY7 field. */

/* Register: CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG */
/* Description: ChaCha/Salsa data order configuration. */

/* Bit 4 : Change the byte order of the output data. Reverse each byte in each word output (b0-&amp;gt;b3, b1-&amp;gt;b2, b2-&amp;gt;b1,b3-&amp;gt;b0) */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_BYTE_ORDER_Pos (4UL) /*!< Position of CHACHA_DOUT_BYTE_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_BYTE_ORDER_Msk (0x1UL << CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_BYTE_ORDER_Pos) /*!< Bit mask of CHACHA_DOUT_BYTE_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_BYTE_ORDER_Default (0UL) /*!< Use default output data byte order */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_BYTE_ORDER_Reverse (1UL) /*!< Use reversed output data byte order */

/* Bit 3 : Change the word order of the output data. Reverse each word in 128 bit output (w0-&amp;gt;w3, w1-&amp;gt;w2, w2-&amp;gt;w1, w3-w0) */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_WORD_ORDER_Pos (3UL) /*!< Position of CHACHA_DOUT_WORD_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_WORD_ORDER_Msk (0x1UL << CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_WORD_ORDER_Pos) /*!< Bit mask of CHACHA_DOUT_WORD_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_WORD_ORDER_Default (0UL) /*!< Use default output data word order */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DOUT_WORD_ORDER_Reverse (1UL) /*!< Use reversed output data word order */

/* Bit 2 : Change the quarter of a matrix order in core. Reverse each quarter of a matrix (m[0-127]-&amp;gt;m[384-511], m[128-255]-&amp;gt;m[256-383], m[256-383]-&amp;gt;m[128-255], m[384-511]-&amp;gt;m[0-127])) */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_CORE_MATRIX_LBE_ORDER_Pos (2UL) /*!< Position of CHACHA_CORE_MATRIX_LBE_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_CORE_MATRIX_LBE_ORDER_Msk (0x1UL << CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_CORE_MATRIX_LBE_ORDER_Pos) /*!< Bit mask of CHACHA_CORE_MATRIX_LBE_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_CORE_MATRIX_LBE_ORDER_Default (0UL) /*!< Use default quarter of matrix order */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_CORE_MATRIX_LBE_ORDER_Reverse (1UL) /*!< Use reversed quarter of matrix order */

/* Bit 1 : Change the byte order of the input data. Reverse each byte in each word input (b0-&amp;gt;b3, b1-&amp;gt;b2, b2-&amp;gt;b1, b3-&amp;gt;b0) */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_BYTE_ORDER_Pos (1UL) /*!< Position of CHACHA_DIN_BYTE_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_BYTE_ORDER_Msk (0x1UL << CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_BYTE_ORDER_Pos) /*!< Bit mask of CHACHA_DIN_BYTE_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_BYTE_ORDER_Default (0UL) /*!< Use default input data byte order */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_BYTE_ORDER_Reverse (1UL) /*!< Use reversed input data byte order */

/* Bit 0 : Change the words order of the input data. Reverse each word in 128 bit input (w0-&amp;gt;w3, w1-&amp;gt;w2, w2-&amp;gt;w1, w3-w0) */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_WORD_ORDER_Pos (0UL) /*!< Position of CHACHA_DIN_WORD_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_WORD_ORDER_Msk (0x1UL << CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_WORD_ORDER_Pos) /*!< Bit mask of CHACHA_DIN_WORD_ORDER field. */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_WORD_ORDER_Default (0UL) /*!< Use default input data word order */
#define CC_CHACHA_CHACHA_BYTE_WORD_ORDER_CNTL_REG_CHACHA_DIN_WORD_ORDER_Reverse (1UL) /*!< Use reversed input data word order */

/* Register: CC_CHACHA_CHACHA_DEBUG_REG */
/* Description: This register is used to debug the ChaCha engine */

/* Bits 1..0 : Reflects the debug state of the ChaCha FSM. */
#define CC_CHACHA_CHACHA_DEBUG_REG_CHACHA_DEBUG_FSM_STATE_Pos (0UL) /*!< Position of CHACHA_DEBUG_FSM_STATE field. */
#define CC_CHACHA_CHACHA_DEBUG_REG_CHACHA_DEBUG_FSM_STATE_Msk (0x3UL << CC_CHACHA_CHACHA_DEBUG_REG_CHACHA_DEBUG_FSM_STATE_Pos) /*!< Bit mask of CHACHA_DEBUG_FSM_STATE field. */
#define CC_CHACHA_CHACHA_DEBUG_REG_CHACHA_DEBUG_FSM_STATE_IDLE_STATE (0UL) /*!< CHACHA FSM is in idle state */
#define CC_CHACHA_CHACHA_DEBUG_REG_CHACHA_DEBUG_FSM_STATE_INIT_STATE (1UL) /*!< CHACHA FSM is in init state */
#define CC_CHACHA_CHACHA_DEBUG_REG_CHACHA_DEBUG_FSM_STATE_ROUNDS_STATE (2UL) /*!< CHACHA FSM is in rounds state */
#define CC_CHACHA_CHACHA_DEBUG_REG_CHACHA_DEBUG_FSM_STATE_FINAL_STATE (3UL) /*!< CHACHA FSM is in final state */


/* Peripheral: CC_CTL */
/* Description: CryptoCell CTL */

/* Register: CC_CTL_CRYPTO_CTL */
/* Description: Defines the cryptographic flow. */

/* Bits 4..0 : Determines the active cryptographic engine. */
#define CC_CTL_CRYPTO_CTL_MODE_Pos (0UL) /*!< Position of MODE field. */
#define CC_CTL_CRYPTO_CTL_MODE_Msk (0x1FUL << CC_CTL_CRYPTO_CTL_MODE_Pos) /*!< Bit mask of MODE field. */
#define CC_CTL_CRYPTO_CTL_MODE_Bypass (0UL) /*!< Bypass cryptographic engine */
#define CC_CTL_CRYPTO_CTL_MODE_AES (1UL) /*!< Use AES engine */
#define CC_CTL_CRYPTO_CTL_MODE_AES_TO_HASH (2UL) /*!< Pipe AES engine output to HASH engine input */
#define CC_CTL_CRYPTO_CTL_MODE_AES_AND_HASH (3UL) /*!< Process input using both AES and HASH engine */
#define CC_CTL_CRYPTO_CTL_MODE_HASH (7UL) /*!< Use HASH engine */
#define CC_CTL_CRYPTO_CTL_MODE_AES_MAC_AND_BYPASS (9UL) /*!< Calculate AES MAC and bypass */
#define CC_CTL_CRYPTO_CTL_MODE_AES_TO_HASH_AND_DOUT (10UL) /*!< Pipe AES engine output to HASH engine input. The resulting HASH output is piped to DOUT buffer. */

/* Register: CC_CTL_CRYPTO_BUSY */
/* Description: This register is asserted when the cryptographic core is busy. */

/* Bit 0 : Busy asserted on AES_BUSY or HASH_BUSY, or when the DIN FIFO is not empty. */
#define CC_CTL_CRYPTO_BUSY_CRYPTO_BUSY_Pos (0UL) /*!< Position of CRYPTO_BUSY field. */
#define CC_CTL_CRYPTO_BUSY_CRYPTO_BUSY_Msk (0x1UL << CC_CTL_CRYPTO_BUSY_CRYPTO_BUSY_Pos) /*!< Bit mask of CRYPTO_BUSY field. */
#define CC_CTL_CRYPTO_BUSY_CRYPTO_BUSY_Ready (0UL) /*!< Cryptographic core is ready */
#define CC_CTL_CRYPTO_BUSY_CRYPTO_BUSY_Busy (1UL) /*!< Cryptographic core is busy */

/* Register: CC_CTL_HASH_BUSY */
/* Description: This register is set when the HASH engine is busy. */

/* Bit 0 : Busy asserted on HASH_BUSY. */
#define CC_CTL_HASH_BUSY_HASH_BUSY_Pos (0UL) /*!< Position of HASH_BUSY field. */
#define CC_CTL_HASH_BUSY_HASH_BUSY_Msk (0x1UL << CC_CTL_HASH_BUSY_HASH_BUSY_Pos) /*!< Bit mask of HASH_BUSY field. */
#define CC_CTL_HASH_BUSY_HASH_BUSY_Ready (0UL) /*!< HASH engine is ready */
#define CC_CTL_HASH_BUSY_HASH_BUSY_Busy (1UL) /*!< HASH engine is busy */

/* Register: CC_CTL_CONTEXT_ID */
/* Description: A generic R/W register for firmware use. */

/* Bits 7..0 : Context id */
#define CC_CTL_CONTEXT_ID_CONTEXT_ID_Pos (0UL) /*!< Position of CONTEXT_ID field. */
#define CC_CTL_CONTEXT_ID_CONTEXT_ID_Msk (0xFFUL << CC_CTL_CONTEXT_ID_CONTEXT_ID_Pos) /*!< Bit mask of CONTEXT_ID field. */


/* Peripheral: CC_DIN */
/* Description: CryptoCell Data-In (DIN) block */

/* Register: CC_DIN_DIN_BUFFER */
/* Description: This address can be used by the CPU to write data directly to the DIN buffer to be sent to engines. */

/* Bits 31..0 : This register is mapped into 8 addresses in order to enable a CPU burst. */
#define CC_DIN_DIN_BUFFER_DIN_BUFFER_DATA_Pos (0UL) /*!< Position of DIN_BUFFER_DATA field. */
#define CC_DIN_DIN_BUFFER_DIN_BUFFER_DATA_Msk (0xFFFFFFFFUL << CC_DIN_DIN_BUFFER_DIN_BUFFER_DATA_Pos) /*!< Bit mask of DIN_BUFFER_DATA field. */

/* Register: CC_DIN_DIN_MEM_DMA_BUSY */
/* Description: DIN memory DMA busy - indicates that DIN DMA memory source is busy. */

/* Bit 0 : DIN memory DMA busy status */
#define CC_DIN_DIN_MEM_DMA_BUSY_DIN_MEM_DMA_BUSY_Pos (0UL) /*!< Position of DIN_MEM_DMA_BUSY field. */
#define CC_DIN_DIN_MEM_DMA_BUSY_DIN_MEM_DMA_BUSY_Msk (0x1UL << CC_DIN_DIN_MEM_DMA_BUSY_DIN_MEM_DMA_BUSY_Pos) /*!< Bit mask of DIN_MEM_DMA_BUSY field. */
#define CC_DIN_DIN_MEM_DMA_BUSY_DIN_MEM_DMA_BUSY_Idle (0UL) /*!< DIN DMA is idle */
#define CC_DIN_DIN_MEM_DMA_BUSY_DIN_MEM_DMA_BUSY_Busy (1UL) /*!< DIN DMA is busy */

/* Register: CC_DIN_SRC_LLI_WORD0 */
/* Description: This register is used in direct LLI mode, and holds the location of the data source in the memory. */

/* Bits 31..0 : Source address within memory. */
#define CC_DIN_SRC_LLI_WORD0_SRC_LLI_WORD0_Pos (0UL) /*!< Position of SRC_LLI_WORD0 field. */
#define CC_DIN_SRC_LLI_WORD0_SRC_LLI_WORD0_Msk (0xFFFFFFFFUL << CC_DIN_SRC_LLI_WORD0_SRC_LLI_WORD0_Pos) /*!< Bit mask of SRC_LLI_WORD0 field. */

/* Register: CC_DIN_SRC_LLI_WORD1 */
/* Description: This register is used in direct LLI mode, and holds the number of bytes to be read from the memory. Writing to this register triggers the DMA. Note: this is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 31 : Configure for the last LLI entry */
#define CC_DIN_SRC_LLI_WORD1_LAST_Pos (31UL) /*!< Position of LAST field. */
#define CC_DIN_SRC_LLI_WORD1_LAST_Msk (0x1UL << CC_DIN_SRC_LLI_WORD1_LAST_Pos) /*!< Bit mask of LAST field. */

/* Bit 30 : Configure for the first LLI entry */
#define CC_DIN_SRC_LLI_WORD1_FIRST_Pos (30UL) /*!< Position of FIRST field. */
#define CC_DIN_SRC_LLI_WORD1_FIRST_Msk (0x1UL << CC_DIN_SRC_LLI_WORD1_FIRST_Pos) /*!< Bit mask of FIRST field. */

/* Bits 29..0 : Total number of bytes to read using DMA in this entry */
#define CC_DIN_SRC_LLI_WORD1_BYTES_NUM_Pos (0UL) /*!< Position of BYTES_NUM field. */
#define CC_DIN_SRC_LLI_WORD1_BYTES_NUM_Msk (0x3FFFFFFFUL << CC_DIN_SRC_LLI_WORD1_BYTES_NUM_Pos) /*!< Bit mask of BYTES_NUM field. */

/* Register: CC_DIN_SRAM_SRC_ADDR */
/* Description: Location of data (source address) to be read from RNG_SRAM. Note: this is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : RNG_SRAM source base address of data */
#define CC_DIN_SRAM_SRC_ADDR_SRAM_SOURCE_Pos (0UL) /*!< Position of SRAM_SOURCE field. */
#define CC_DIN_SRAM_SRC_ADDR_SRAM_SOURCE_Msk (0xFFFFFFFFUL << CC_DIN_SRAM_SRC_ADDR_SRAM_SOURCE_Pos) /*!< Bit mask of SRAM_SOURCE field. */

/* Register: CC_DIN_DIN_SRAM_BYTES_LEN */
/* Description: This register holds the size of the data (in bytes) to be read from the RNG_SRAM. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : Size of data to read from RNG_SRAM (bytes). This is the trigger to the RNG_SRAM SRC DMA. */
#define CC_DIN_DIN_SRAM_BYTES_LEN_BYTES_LEN_Pos (0UL) /*!< Position of BYTES_LEN field. */
#define CC_DIN_DIN_SRAM_BYTES_LEN_BYTES_LEN_Msk (0xFFFFFFFFUL << CC_DIN_DIN_SRAM_BYTES_LEN_BYTES_LEN_Pos) /*!< Bit mask of BYTES_LEN field. */

/* Register: CC_DIN_DIN_SRAM_DMA_BUSY */
/* Description: This register holds the status of the RNG_SRAM DMA DIN. */

/* Bit 0 : DIN RNG_SRAM DMA busy status */
#define CC_DIN_DIN_SRAM_DMA_BUSY_BUSY_Pos (0UL) /*!< Position of BUSY field. */
#define CC_DIN_DIN_SRAM_DMA_BUSY_BUSY_Msk (0x1UL << CC_DIN_DIN_SRAM_DMA_BUSY_BUSY_Pos) /*!< Bit mask of BUSY field. */
#define CC_DIN_DIN_SRAM_DMA_BUSY_BUSY_Idle (0UL) /*!< DIN RNG_SRAM DMA is idle */
#define CC_DIN_DIN_SRAM_DMA_BUSY_BUSY_Busy (1UL) /*!< DIN RNG_SRAM DMA is busy */

/* Register: CC_DIN_DIN_SRAM_ENDIANNESS */
/* Description: This register defines the endianness of the DIN interface to RNG_SRAM. */

/* Bit 0 : Defines the endianness of DIN interface to RNG_SRAM */
#define CC_DIN_DIN_SRAM_ENDIANNESS_SRAM_DIN_ENDIANNESS_Pos (0UL) /*!< Position of SRAM_DIN_ENDIANNESS field. */
#define CC_DIN_DIN_SRAM_ENDIANNESS_SRAM_DIN_ENDIANNESS_Msk (0x1UL << CC_DIN_DIN_SRAM_ENDIANNESS_SRAM_DIN_ENDIANNESS_Pos) /*!< Bit mask of SRAM_DIN_ENDIANNESS field. */
#define CC_DIN_DIN_SRAM_ENDIANNESS_SRAM_DIN_ENDIANNESS_LittleEndian (0UL) /*!< DIN interface to RNG_SRAM is configured as little-endian */
#define CC_DIN_DIN_SRAM_ENDIANNESS_SRAM_DIN_ENDIANNESS_BigEndian (1UL) /*!< DIN interface to RNG_SRAM is configured as big-endian */

/* Register: CC_DIN_DIN_CPU_DATA_SIZE */
/* Description: This register hold the number of bytes to be written to the DIN buffer. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 15..0 : When using CPU direct write to the DIN buffer, the size of input data in bytes should be written to this register. */
#define CC_DIN_DIN_CPU_DATA_SIZE_CPU_DIN_SIZE_Pos (0UL) /*!< Position of CPU_DIN_SIZE field. */
#define CC_DIN_DIN_CPU_DATA_SIZE_CPU_DIN_SIZE_Msk (0xFFFFUL << CC_DIN_DIN_CPU_DATA_SIZE_CPU_DIN_SIZE_Pos) /*!< Bit mask of CPU_DIN_SIZE field. */

/* Register: CC_DIN_FIFO_IN_EMPTY */
/* Description: DIN FIFO empty indication */

/* Bit 0 : DIN FIFO status */
#define CC_DIN_FIFO_IN_EMPTY_EMPTY_Pos (0UL) /*!< Position of EMPTY field. */
#define CC_DIN_FIFO_IN_EMPTY_EMPTY_Msk (0x1UL << CC_DIN_FIFO_IN_EMPTY_EMPTY_Pos) /*!< Bit mask of EMPTY field. */
#define CC_DIN_FIFO_IN_EMPTY_EMPTY_NotEmpty (0UL) /*!< DIN FIFO is not empty */
#define CC_DIN_FIFO_IN_EMPTY_EMPTY_Empty (1UL) /*!< DIN FIFO is empty */

/* Register: CC_DIN_DIN_FIFO_RST_PNTR */
/* Description: Writing to this register resets the DIN_FIFO pointers. */

/* Bit 0 : Writing any value to this address resets the DIN_FIFO pointers. */
#define CC_DIN_DIN_FIFO_RST_PNTR_RST_Pos (0UL) /*!< Position of RST field. */
#define CC_DIN_DIN_FIFO_RST_PNTR_RST_Msk (0x1UL << CC_DIN_DIN_FIFO_RST_PNTR_RST_Pos) /*!< Bit mask of RST field. */


/* Peripheral: CC_DOUT */
/* Description: CryptoCell DOUT */

/* Register: CC_DOUT_DOUT_BUFFER */
/* Description: Cryptographic result - CPU can directly access this register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : This address can be used by the CPU to read data directly from the DOUT buffer. */
#define CC_DOUT_DOUT_BUFFER_DOUT_BUFFER_DATA_Pos (0UL) /*!< Position of DOUT_BUFFER_DATA field. */
#define CC_DOUT_DOUT_BUFFER_DOUT_BUFFER_DATA_Msk (0xFFFFFFFFUL << CC_DOUT_DOUT_BUFFER_DOUT_BUFFER_DATA_Pos) /*!< Bit mask of DOUT_BUFFER_DATA field. */

/* Register: CC_DOUT_DOUT_MEM_DMA_BUSY */
/* Description: DOUT memory DMA busy - indicates that DOUT DMA memory destination is busy */

/* Bit 0 : DOUT memory DMA busy status */
#define CC_DOUT_DOUT_MEM_DMA_BUSY_DOUT_MEM_DMA_BUSY_Pos (0UL) /*!< Position of DOUT_MEM_DMA_BUSY field. */
#define CC_DOUT_DOUT_MEM_DMA_BUSY_DOUT_MEM_DMA_BUSY_Msk (0x1UL << CC_DOUT_DOUT_MEM_DMA_BUSY_DOUT_MEM_DMA_BUSY_Pos) /*!< Bit mask of DOUT_MEM_DMA_BUSY field. */
#define CC_DOUT_DOUT_MEM_DMA_BUSY_DOUT_MEM_DMA_BUSY_Idle (0UL) /*!< DOUT DMA is idle */
#define CC_DOUT_DOUT_MEM_DMA_BUSY_DOUT_MEM_DMA_BUSY_Busy (1UL) /*!< DOUT DMA is busy */

/* Register: CC_DOUT_DST_LLI_WORD0 */
/* Description: This register is used in direct LLI mode, and holds the location of the data destination in the memory. */

/* Bits 31..0 : Destination address within memory */
#define CC_DOUT_DST_LLI_WORD0_DST_LLI_WORD0_Pos (0UL) /*!< Position of DST_LLI_WORD0 field. */
#define CC_DOUT_DST_LLI_WORD0_DST_LLI_WORD0_Msk (0xFFFFFFFFUL << CC_DOUT_DST_LLI_WORD0_DST_LLI_WORD0_Pos) /*!< Bit mask of DST_LLI_WORD0 field. */

/* Register: CC_DOUT_DST_LLI_WORD1 */
/* Description: This register is used in direct LLI mode, and holds the number of bytes to be written to the memory. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 31 : Configure for the last LLI entry */
#define CC_DOUT_DST_LLI_WORD1_LAST_Pos (31UL) /*!< Position of LAST field. */
#define CC_DOUT_DST_LLI_WORD1_LAST_Msk (0x1UL << CC_DOUT_DST_LLI_WORD1_LAST_Pos) /*!< Bit mask of LAST field. */

/* Bit 30 : Configure for the first LLI entry */
#define CC_DOUT_DST_LLI_WORD1_FIRST_Pos (30UL) /*!< Position of FIRST field. */
#define CC_DOUT_DST_LLI_WORD1_FIRST_Msk (0x1UL << CC_DOUT_DST_LLI_WORD1_FIRST_Pos) /*!< Bit mask of FIRST field. */

/* Bits 29..0 : Total number of bytes to be written using DMA in this entry */
#define CC_DOUT_DST_LLI_WORD1_BYTES_NUM_Pos (0UL) /*!< Position of BYTES_NUM field. */
#define CC_DOUT_DST_LLI_WORD1_BYTES_NUM_Msk (0x3FFFFFFFUL << CC_DOUT_DST_LLI_WORD1_BYTES_NUM_Pos) /*!< Bit mask of BYTES_NUM field. */

/* Register: CC_DOUT_SRAM_DEST_ADDR */
/* Description: Location of data (destination address) to be written to RNG_SRAM. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : RNG_SRAM destination base address for data */
#define CC_DOUT_SRAM_DEST_ADDR_SRAM_DEST_Pos (0UL) /*!< Position of SRAM_DEST field. */
#define CC_DOUT_SRAM_DEST_ADDR_SRAM_DEST_Msk (0xFFFFFFFFUL << CC_DOUT_SRAM_DEST_ADDR_SRAM_DEST_Pos) /*!< Bit mask of SRAM_DEST field. */

/* Register: CC_DOUT_DOUT_SRAM_BYTES_LEN */
/* Description: This register holds the size of the data (in bytes) to be written to the RNG_SRAM. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : Size of data to write to RNG_SRAM (bytes). This is the trigger to the RNG_SRAM DST DMA. */
#define CC_DOUT_DOUT_SRAM_BYTES_LEN_BYTES_LEN_Pos (0UL) /*!< Position of BYTES_LEN field. */
#define CC_DOUT_DOUT_SRAM_BYTES_LEN_BYTES_LEN_Msk (0xFFFFFFFFUL << CC_DOUT_DOUT_SRAM_BYTES_LEN_BYTES_LEN_Pos) /*!< Bit mask of BYTES_LEN field. */

/* Register: CC_DOUT_DOUT_SRAM_DMA_BUSY */
/* Description: This register holds the status of the RNG_SRAM DMA DOUT. */

/* Bit 0 : DOUT RNG_SRAM DMA busy status */
#define CC_DOUT_DOUT_SRAM_DMA_BUSY_BUSY_Pos (0UL) /*!< Position of BUSY field. */
#define CC_DOUT_DOUT_SRAM_DMA_BUSY_BUSY_Msk (0x1UL << CC_DOUT_DOUT_SRAM_DMA_BUSY_BUSY_Pos) /*!< Bit mask of BUSY field. */
#define CC_DOUT_DOUT_SRAM_DMA_BUSY_BUSY_Idle (0UL) /*!< DOUT RNG_SRAM DMA is idle */
#define CC_DOUT_DOUT_SRAM_DMA_BUSY_BUSY_Busy (1UL) /*!< DOUT RNG_SRAM DMA is busy */

/* Register: CC_DOUT_DOUT_SRAM_ENDIANNESS */
/* Description: This register defines the endianness of the DOUT interface from RNG_SRAM. */

/* Bit 0 : Defines the endianness of DOUT interface from RNG_SRAM */
#define CC_DOUT_DOUT_SRAM_ENDIANNESS_DOUT_SRAM_ENDIANNESS_Pos (0UL) /*!< Position of DOUT_SRAM_ENDIANNESS field. */
#define CC_DOUT_DOUT_SRAM_ENDIANNESS_DOUT_SRAM_ENDIANNESS_Msk (0x1UL << CC_DOUT_DOUT_SRAM_ENDIANNESS_DOUT_SRAM_ENDIANNESS_Pos) /*!< Bit mask of DOUT_SRAM_ENDIANNESS field. */
#define CC_DOUT_DOUT_SRAM_ENDIANNESS_DOUT_SRAM_ENDIANNESS_LittleEndian (0UL) /*!< DOUT interface from RNG_SRAM is configured as little-endian */
#define CC_DOUT_DOUT_SRAM_ENDIANNESS_DOUT_SRAM_ENDIANNESS_BigEndian (1UL) /*!< DOUT interface from RNG_SRAM is configured as big-endian */

/* Register: CC_DOUT_READ_ALIGN_LAST */
/* Description: Indication that the next read from the CPU is the last one. This is needed only when the data size is NOT modulo 4 (e.g. HASH padding). */

/* Bit 0 : Flush the read aligner content (used for reading the last data). */
#define CC_DOUT_READ_ALIGN_LAST_LAST_Pos (0UL) /*!< Position of LAST field. */
#define CC_DOUT_READ_ALIGN_LAST_LAST_Msk (0x1UL << CC_DOUT_READ_ALIGN_LAST_LAST_Pos) /*!< Bit mask of LAST field. */

/* Register: CC_DOUT_DOUT_FIFO_EMPTY */
/* Description: DOUT FIFO empty indication */

/* Bit 0 : DOUT FIFO status */
#define CC_DOUT_DOUT_FIFO_EMPTY_DOUT_FIFO_EMPTY_Pos (0UL) /*!< Position of DOUT_FIFO_EMPTY field. */
#define CC_DOUT_DOUT_FIFO_EMPTY_DOUT_FIFO_EMPTY_Msk (0x1UL << CC_DOUT_DOUT_FIFO_EMPTY_DOUT_FIFO_EMPTY_Pos) /*!< Bit mask of DOUT_FIFO_EMPTY field. */
#define CC_DOUT_DOUT_FIFO_EMPTY_DOUT_FIFO_EMPTY_NotEmpty (0UL) /*!< DOUT FIFO is not empty */
#define CC_DOUT_DOUT_FIFO_EMPTY_DOUT_FIFO_EMPTY_Empty (1UL) /*!< DOUT FIFO is empty */


/* Peripheral: CC_GHASH */
/* Description: CRYPTOCELL GHASH engine */

/* Register: CC_GHASH_GHASH_SUBKEY_0_0 */
/* Description: Bits [31:0] of GHASH key 0 (used as the GHASH module key). */

/* Bits 31..0 : Bits [31:0] of GHASH key 0. */
#define CC_GHASH_GHASH_SUBKEY_0_0_GHASH_SUBKEY_0_0_Pos (0UL) /*!< Position of GHASH_SUBKEY_0_0 field. */
#define CC_GHASH_GHASH_SUBKEY_0_0_GHASH_SUBKEY_0_0_Msk (0xFFFFFFFFUL << CC_GHASH_GHASH_SUBKEY_0_0_GHASH_SUBKEY_0_0_Pos) /*!< Bit mask of GHASH_SUBKEY_0_0 field. */

/* Register: CC_GHASH_GHASH_SUBKEY_0_1 */
/* Description: Bits [63:32] of GHASH key 0 (used as the GHASH module key). */

/* Bits 31..0 : Bits [63:32] of GHASH key 0. */
#define CC_GHASH_GHASH_SUBKEY_0_1_GHASH_SUBKEY_0_1_Pos (0UL) /*!< Position of GHASH_SUBKEY_0_1 field. */
#define CC_GHASH_GHASH_SUBKEY_0_1_GHASH_SUBKEY_0_1_Msk (0xFFFFFFFFUL << CC_GHASH_GHASH_SUBKEY_0_1_GHASH_SUBKEY_0_1_Pos) /*!< Bit mask of GHASH_SUBKEY_0_1 field. */

/* Register: CC_GHASH_GHASH_SUBKEY_0_2 */
/* Description: Bits [95:64] of GHASH key 0 (used as the GHASH module key). */

/* Bits 31..0 : Bits [95:64] of GHASH key 0. */
#define CC_GHASH_GHASH_SUBKEY_0_2_GHASH_SUBKEY_0_2_Pos (0UL) /*!< Position of GHASH_SUBKEY_0_2 field. */
#define CC_GHASH_GHASH_SUBKEY_0_2_GHASH_SUBKEY_0_2_Msk (0xFFFFFFFFUL << CC_GHASH_GHASH_SUBKEY_0_2_GHASH_SUBKEY_0_2_Pos) /*!< Bit mask of GHASH_SUBKEY_0_2 field. */

/* Register: CC_GHASH_GHASH_SUBKEY_0_3 */
/* Description: Bits [127:96] of GHASH key 0 (used as the GHASH module key). */

/* Bits 31..0 : Bits [127:96] of GHASH key 0. */
#define CC_GHASH_GHASH_SUBKEY_0_3_GHASH_SUBKEY_0_3_Pos (0UL) /*!< Position of GHASH_SUBKEY_0_3 field. */
#define CC_GHASH_GHASH_SUBKEY_0_3_GHASH_SUBKEY_0_3_Msk (0xFFFFFFFFUL << CC_GHASH_GHASH_SUBKEY_0_3_GHASH_SUBKEY_0_3_Pos) /*!< Bit mask of GHASH_SUBKEY_0_3 field. */

/* Register: CC_GHASH_GHASH_IV_0_0 */
/* Description: Bits [31:0] of GHASH_IV0 register. GHASH_IV0 is used as the GHASH IV (initialization value) register. */

/* Bits 31..0 : Bits [31:0] of GHASH_IV0 register of the GHASH module. */
#define CC_GHASH_GHASH_IV_0_0_GHASH_IV_0_0_Pos (0UL) /*!< Position of GHASH_IV_0_0 field. */
#define CC_GHASH_GHASH_IV_0_0_GHASH_IV_0_0_Msk (0xFFFFFFFFUL << CC_GHASH_GHASH_IV_0_0_GHASH_IV_0_0_Pos) /*!< Bit mask of GHASH_IV_0_0 field. */

/* Register: CC_GHASH_GHASH_IV_0_1 */
/* Description: Bits [63:32] of GHASH_IV0. GHASH_IV0 is used as the GHASH IV (initialization value) register. */

/* Bits 31..0 : Bits [63:32] of GHASH_IV0 register of the GHASH module. */
#define CC_GHASH_GHASH_IV_0_1_GHASH_IV_0_1_Pos (0UL) /*!< Position of GHASH_IV_0_1 field. */
#define CC_GHASH_GHASH_IV_0_1_GHASH_IV_0_1_Msk (0xFFFFFFFFUL << CC_GHASH_GHASH_IV_0_1_GHASH_IV_0_1_Pos) /*!< Bit mask of GHASH_IV_0_1 field. */

/* Register: CC_GHASH_GHASH_IV_0_2 */
/* Description: Bits [95:64] of GHASH_IV0 register. GHASH IV0 is used as the GHASH IV (initialization value) register. */

/* Bits 31..0 : Bits [95:64] of GHASH_IV0 register of the GHASH module. */
#define CC_GHASH_GHASH_IV_0_2_GHASH_IV_0_2_Pos (0UL) /*!< Position of GHASH_IV_0_2 field. */
#define CC_GHASH_GHASH_IV_0_2_GHASH_IV_0_2_Msk (0xFFFFFFFFUL << CC_GHASH_GHASH_IV_0_2_GHASH_IV_0_2_Pos) /*!< Bit mask of GHASH_IV_0_2 field. */

/* Register: CC_GHASH_GHASH_IV_0_3 */
/* Description: Bits [127:96] of GHASH_IV0 register. GHASH IV0 is used as the GHASH IV (initialization value) register. */

/* Bits 31..0 : Bits [127:96] of GHASH_IV0 register of the ghash module. */
#define CC_GHASH_GHASH_IV_0_3_GHASH_IV_0_3_Pos (0UL) /*!< Position of GHASH_IV_0_3 field. */
#define CC_GHASH_GHASH_IV_0_3_GHASH_IV_0_3_Msk (0xFFFFFFFFUL << CC_GHASH_GHASH_IV_0_3_GHASH_IV_0_3_Pos) /*!< Bit mask of GHASH_IV_0_3 field. */

/* Register: CC_GHASH_GHASH_BUSY */
/* Description: The GHASH engine busy register. This register is set when the GHASH engine is active. */

/* Bit 0 : GHASH_BUSY register. This register is set when the GHASH engine is active. */
#define CC_GHASH_GHASH_BUSY_GHASH_BUSY_Pos (0UL) /*!< Position of GHASH_BUSY field. */
#define CC_GHASH_GHASH_BUSY_GHASH_BUSY_Msk (0x1UL << CC_GHASH_GHASH_BUSY_GHASH_BUSY_Pos) /*!< Bit mask of GHASH_BUSY field. */

/* Register: CC_GHASH_GHASH_INIT */
/* Description: Initialize the GHASH engine for a new GHASH operation. */

/* Bit 0 : Write to this register to configure the GHASH engine to be ready to a new operation. */
#define CC_GHASH_GHASH_INIT_GHASH_INIT_Pos (0UL) /*!< Position of GHASH_INIT field. */
#define CC_GHASH_GHASH_INIT_GHASH_INIT_Msk (0x1UL << CC_GHASH_GHASH_INIT_GHASH_INIT_Pos) /*!< Bit mask of GHASH_INIT field. */


/* Peripheral: CC_HASH */
/* Description: CryptoCell HASH */

/* Register: CC_HASH_HASH_H0 */
/* Description: H0 data. Can only be written in the following HASH_CONTROL modes: MD5 SHA1 SHA224 SHA256 SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H0_HASH_H0_Pos (0UL) /*!< Position of HASH_H0 field. */
#define CC_HASH_HASH_H0_HASH_H0_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H0_HASH_H0_Pos) /*!< Bit mask of HASH_H0 field. */

/* Register: CC_HASH_HASH_H1 */
/* Description: H1 data. Can only be written in the following HASH_CONTROL modes: MD5 SHA1 SHA224 SHA256 SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H1_HASH_H1_Pos (0UL) /*!< Position of HASH_H1 field. */
#define CC_HASH_HASH_H1_HASH_H1_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H1_HASH_H1_Pos) /*!< Bit mask of HASH_H1 field. */

/* Register: CC_HASH_HASH_H2 */
/* Description: H2 data. Can only be written in the following HASH_CONTROL modes: MD5 SHA1 SHA224 SHA256 SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H2_HASH_H2_Pos (0UL) /*!< Position of HASH_H2 field. */
#define CC_HASH_HASH_H2_HASH_H2_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H2_HASH_H2_Pos) /*!< Bit mask of HASH_H2 field. */

/* Register: CC_HASH_HASH_H3 */
/* Description: H3 data. Can only be written in the following HASH_CONTROL modes: MD5 SHA1 SHA224 SHA256 SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H3_HASH_H3_Pos (0UL) /*!< Position of HASH_H3 field. */
#define CC_HASH_HASH_H3_HASH_H3_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H3_HASH_H3_Pos) /*!< Bit mask of HASH_H3 field. */

/* Register: CC_HASH_HASH_H4 */
/* Description: H4 data. Can only be written in the following HASH_CONTROL modes: SHA1 SHA224 SHA256 SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H4_HASH_H4_Pos (0UL) /*!< Position of HASH_H4 field. */
#define CC_HASH_HASH_H4_HASH_H4_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H4_HASH_H4_Pos) /*!< Bit mask of HASH_H4 field. */

/* Register: CC_HASH_HASH_H5 */
/* Description: H5 data. Can only be written in the following HASH_CONTROL modes: SHA224 SHA256 SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H5_HASH_H5_Pos (0UL) /*!< Position of HASH_H5 field. */
#define CC_HASH_HASH_H5_HASH_H5_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H5_HASH_H5_Pos) /*!< Bit mask of HASH_H5 field. */

/* Register: CC_HASH_HASH_H6 */
/* Description: H6 data. Can only be written in the following HASH_CONTROL modes: SHA224 SHA256 SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H6_HASH_H6_Pos (0UL) /*!< Position of HASH_H6 field. */
#define CC_HASH_HASH_H6_HASH_H6_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H6_HASH_H6_Pos) /*!< Bit mask of HASH_H6 field. */

/* Register: CC_HASH_HASH_H7 */
/* Description: H7 data. Can only be written in the following HASH_CONTROL modes: SHA224 SHA256 SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H7_HASH_H7_Pos (0UL) /*!< Position of HASH_H7 field. */
#define CC_HASH_HASH_H7_HASH_H7_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H7_HASH_H7_Pos) /*!< Bit mask of HASH_H7 field. */

/* Register: CC_HASH_HASH_H8 */
/* Description: H8 data. Can only be written in the following HASH_CONTROL modes: SHA384 SHA512 */

/* Bits 31..0 : Write initial hash value before start of operation, or read final hash value result. */
#define CC_HASH_HASH_H8_HASH_H8_Pos (0UL) /*!< Position of HASH_H8 field. */
#define CC_HASH_HASH_H8_HASH_H8_Msk (0xFFFFFFFFUL << CC_HASH_HASH_H8_HASH_H8_Pos) /*!< Bit mask of HASH_H8 field. */

/* Register: CC_HASH_AUTO_HW_PADDING */
/* Description: HW padding automatically activated by engine. For the special case of ZERO bytes data vector this register should not be used. Instead use register HASH_PAD_CFG. */

/* Bit 0 : Enable automatic HW padding. Note: Not supported for 0 bytes! Note: disable this register when hash operation is done. */
#define CC_HASH_AUTO_HW_PADDING_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_HASH_AUTO_HW_PADDING_EN_Msk (0x1UL << CC_HASH_AUTO_HW_PADDING_EN_Pos) /*!< Bit mask of EN field. */
#define CC_HASH_AUTO_HW_PADDING_EN_Disable (0UL) /*!< Do not enable automatic HW padding */
#define CC_HASH_AUTO_HW_PADDING_EN_Enable (1UL) /*!< Enable automatic HW padding. If enabled, there is no need for SW intervention by writing register HASH_PAD_CFG. */

/* Register: CC_HASH_HASH_XOR_DIN */
/* Description: This register is always XOR with the input to the HASH engine. Set to '0' if XOR is not reqiured. */

/* Bits 31..0 : This register holds the value to be XOR with HASH input data. */
#define CC_HASH_HASH_XOR_DIN_HASH_XOR_DATA_Pos (0UL) /*!< Position of HASH_XOR_DATA field. */
#define CC_HASH_HASH_XOR_DIN_HASH_XOR_DATA_Msk (0xFFFFFFFFUL << CC_HASH_HASH_XOR_DIN_HASH_XOR_DATA_Pos) /*!< Bit mask of HASH_XOR_DATA field. */

/* Register: CC_HASH_LOAD_INIT_STATE */
/* Description: Indication to HASH that the following data is to be loaded into initial value registers HASH_H0:HASH_H8 or IV to AES MAC. */

/* Bit 0 : Load data to initial state registers. Digest/IV for HASH/AES_MAC. When done loading data this bit should be reset. */
#define CC_HASH_LOAD_INIT_STATE_LOAD_Pos (0UL) /*!< Position of LOAD field. */
#define CC_HASH_LOAD_INIT_STATE_LOAD_Msk (0x1UL << CC_HASH_LOAD_INIT_STATE_LOAD_Pos) /*!< Bit mask of LOAD field. */

/* Register: CC_HASH_HASH_SEL_AES_MAC */
/* Description: Select the HASH or AES MAC module */

/* Bit 1 : Select HASH or GHASH module */
#define CC_HASH_HASH_SEL_AES_MAC_GHASH_SEL_Pos (1UL) /*!< Position of GHASH_SEL field. */
#define CC_HASH_HASH_SEL_AES_MAC_GHASH_SEL_Msk (0x1UL << CC_HASH_HASH_SEL_AES_MAC_GHASH_SEL_Pos) /*!< Bit mask of GHASH_SEL field. */
#define CC_HASH_HASH_SEL_AES_MAC_GHASH_SEL_Disable (0UL) /*!< Select the HASH module */
#define CC_HASH_HASH_SEL_AES_MAC_GHASH_SEL_Enable (1UL) /*!< Select the GHASH module */

/* Bit 0 : Select the HASH or AES MAC module */
#define CC_HASH_HASH_SEL_AES_MAC_HASH_SEL_AES_MAC_Pos (0UL) /*!< Position of HASH_SEL_AES_MAC field. */
#define CC_HASH_HASH_SEL_AES_MAC_HASH_SEL_AES_MAC_Msk (0x1UL << CC_HASH_HASH_SEL_AES_MAC_HASH_SEL_AES_MAC_Pos) /*!< Bit mask of HASH_SEL_AES_MAC field. */
#define CC_HASH_HASH_SEL_AES_MAC_HASH_SEL_AES_MAC_Disable (0UL) /*!< Select the HASH module */
#define CC_HASH_HASH_SEL_AES_MAC_HASH_SEL_AES_MAC_Enable (1UL) /*!< Select the AES MAC module */

/* Register: CC_HASH_HASH_VERSION */
/* Description: Hash version register */

/* Bits 15..12 : Major version number */
#define CC_HASH_HASH_VERSION_MAJOR_VERSION_NUMBER_Pos (12UL) /*!< Position of MAJOR_VERSION_NUMBER field. */
#define CC_HASH_HASH_VERSION_MAJOR_VERSION_NUMBER_Msk (0xFUL << CC_HASH_HASH_VERSION_MAJOR_VERSION_NUMBER_Pos) /*!< Bit mask of MAJOR_VERSION_NUMBER field. */

/* Bits 11..8 : Minor version number */
#define CC_HASH_HASH_VERSION_MINOR_VERSION_NUMBER_Pos (8UL) /*!< Position of MINOR_VERSION_NUMBER field. */
#define CC_HASH_HASH_VERSION_MINOR_VERSION_NUMBER_Msk (0xFUL << CC_HASH_HASH_VERSION_MINOR_VERSION_NUMBER_Pos) /*!< Bit mask of MINOR_VERSION_NUMBER field. */

/* Bits 7..0 : No field description provided */
#define CC_HASH_HASH_VERSION_FIXES_Pos (0UL) /*!< Position of FIXES field. */
#define CC_HASH_HASH_VERSION_FIXES_Msk (0xFFUL << CC_HASH_HASH_VERSION_FIXES_Pos) /*!< Bit mask of FIXES field. */

/* Register: CC_HASH_HASH_CONTROL */
/* Description: Hash_control register. selects which hash mode to run */

/* Bits 3..0 : Bits 3:0 of the HASH mode field. */
#define CC_HASH_HASH_CONTROL_MODE_Pos (0UL) /*!< Position of MODE field. */
#define CC_HASH_HASH_CONTROL_MODE_Msk (0xFUL << CC_HASH_HASH_CONTROL_MODE_Pos) /*!< Bit mask of MODE field. */
#define CC_HASH_HASH_CONTROL_MODE_MD5 (0UL) /*!< Select MD5 mode, if present */
#define CC_HASH_HASH_CONTROL_MODE_SHA1 (1UL) /*!< Select SHA1 mode */
#define CC_HASH_HASH_CONTROL_MODE_SHA256 (2UL) /*!< Select SHA256 mode */
#define CC_HASH_HASH_CONTROL_MODE_SHA224 (10UL) /*!< Select SHA224 mode */

/* Register: CC_HASH_HASH_PAD_EN */
/* Description: This register enables the HASH HW padding. */

/* Bit 0 : Enable or disable HASH HW padding. */
#define CC_HASH_HASH_PAD_EN_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_HASH_HASH_PAD_EN_EN_Msk (0x1UL << CC_HASH_HASH_PAD_EN_EN_Pos) /*!< Bit mask of EN field. */
#define CC_HASH_HASH_PAD_EN_EN_Disable (0UL) /*!< Disable generation of padding by hw pad block. */
#define CC_HASH_HASH_PAD_EN_EN_Enable (1UL) /*!< Enable generation of padding by hw pad block. */

/* Register: CC_HASH_HASH_PAD_CFG */
/* Description: HASH_PADP_CFG register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 2 : Enable padding generation. Must be reset upon completion of padding. */
#define CC_HASH_HASH_PAD_CFG_DO_PAD_Pos (2UL) /*!< Position of DO_PAD field. */
#define CC_HASH_HASH_PAD_CFG_DO_PAD_Msk (0x1UL << CC_HASH_HASH_PAD_CFG_DO_PAD_Pos) /*!< Bit mask of DO_PAD field. */

/* Register: CC_HASH_HASH_CUR_LEN_0 */
/* Description: This register hold the length of current hash operation bit 31:0. */

/* Bits 31..0 : Represent the current length of valid bits where digest need to be computed in bytes. */
#define CC_HASH_HASH_CUR_LEN_0_Length_Pos (0UL) /*!< Position of Length field. */
#define CC_HASH_HASH_CUR_LEN_0_Length_Msk (0xFFFFFFFFUL << CC_HASH_HASH_CUR_LEN_0_Length_Pos) /*!< Bit mask of Length field. */

/* Register: CC_HASH_HASH_CUR_LEN_1 */
/* Description: This register hold the length of current hash operation bit 63:32. */

/* Bits 31..0 : Represent the current length of valid bits where digest need to be computed in bytes. */
#define CC_HASH_HASH_CUR_LEN_1_Length_Pos (0UL) /*!< Position of Length field. */
#define CC_HASH_HASH_CUR_LEN_1_Length_Msk (0xFFFFFFFFUL << CC_HASH_HASH_CUR_LEN_1_Length_Pos) /*!< Bit mask of Length field. */

/* Register: CC_HASH_HASH_PARAM */
/* Description: Hash_param register. */

/* Bit 18 : Indicate if HASH to DOUT is present in the design */
#define CC_HASH_HASH_PARAM_DUMP_HASH_TO_DOUT_EXISTS_Pos (18UL) /*!< Position of DUMP_HASH_TO_DOUT_EXISTS field. */
#define CC_HASH_HASH_PARAM_DUMP_HASH_TO_DOUT_EXISTS_Msk (0x1UL << CC_HASH_HASH_PARAM_DUMP_HASH_TO_DOUT_EXISTS_Pos) /*!< Bit mask of DUMP_HASH_TO_DOUT_EXISTS field. */
#define CC_HASH_HASH_PARAM_DUMP_HASH_TO_DOUT_EXISTS_False (0UL) /*!< HASH to DOUT not supported by hardware. */
#define CC_HASH_HASH_PARAM_DUMP_HASH_TO_DOUT_EXISTS_True (1UL) /*!< HASH to DOUT supported by hardwre. */

/* Bit 17 : Indicate if compare digest logic is present in the design */
#define CC_HASH_HASH_PARAM_HASH_COMPARE_EXISTS_Pos (17UL) /*!< Position of HASH_COMPARE_EXISTS field. */
#define CC_HASH_HASH_PARAM_HASH_COMPARE_EXISTS_Msk (0x1UL << CC_HASH_HASH_PARAM_HASH_COMPARE_EXISTS_Pos) /*!< Bit mask of HASH_COMPARE_EXISTS field. */
#define CC_HASH_HASH_PARAM_HASH_COMPARE_EXISTS_False (0UL) /*!< Compare digest logic not supported by hardware. */
#define CC_HASH_HASH_PARAM_HASH_COMPARE_EXISTS_True (1UL) /*!< Compare digest logic supported by hardware. */

/* Bit 16 : Indicate if SHA256 is present in the design */
#define CC_HASH_HASH_PARAM_SHA_256_EXISTS_Pos (16UL) /*!< Position of SHA_256_EXISTS field. */
#define CC_HASH_HASH_PARAM_SHA_256_EXISTS_Msk (0x1UL << CC_HASH_HASH_PARAM_SHA_256_EXISTS_Pos) /*!< Bit mask of SHA_256_EXISTS field. */
#define CC_HASH_HASH_PARAM_SHA_256_EXISTS_False (0UL) /*!< SHA256 not supported by hardware. */
#define CC_HASH_HASH_PARAM_SHA_256_EXISTS_True (1UL) /*!< SHA256 supported by hardware. */

/* Bit 15 : Indicate if HMAC logic is present in the design */
#define CC_HASH_HASH_PARAM_HMAC_EXISTS_Pos (15UL) /*!< Position of HMAC_EXISTS field. */
#define CC_HASH_HASH_PARAM_HMAC_EXISTS_Msk (0x1UL << CC_HASH_HASH_PARAM_HMAC_EXISTS_Pos) /*!< Bit mask of HMAC_EXISTS field. */
#define CC_HASH_HASH_PARAM_HMAC_EXISTS_False (0UL) /*!< HMAC not supported by hardware. */
#define CC_HASH_HASH_PARAM_HMAC_EXISTS_True (1UL) /*!< HMAC supported by hardwre. */

/* Bit 14 : Indicate if MD5 is present in hw */
#define CC_HASH_HASH_PARAM_MD5_EXISTS_Pos (14UL) /*!< Position of MD5_EXISTS field. */
#define CC_HASH_HASH_PARAM_MD5_EXISTS_Msk (0x1UL << CC_HASH_HASH_PARAM_MD5_EXISTS_Pos) /*!< Bit mask of MD5_EXISTS field. */
#define CC_HASH_HASH_PARAM_MD5_EXISTS_False (0UL) /*!< MD5 not supported by hardware. */
#define CC_HASH_HASH_PARAM_MD5_EXISTS_True (1UL) /*!< MD5 supported by hardwre. */

/* Bit 13 : Indicate if pad block is present in the design. */
#define CC_HASH_HASH_PARAM_PAD_EXISTS_Pos (13UL) /*!< Position of PAD_EXISTS field. */
#define CC_HASH_HASH_PARAM_PAD_EXISTS_Msk (0x1UL << CC_HASH_HASH_PARAM_PAD_EXISTS_Pos) /*!< Bit mask of PAD_EXISTS field. */
#define CC_HASH_HASH_PARAM_PAD_EXISTS_False (0UL) /*!< Pad function not supported by hardware. */
#define CC_HASH_HASH_PARAM_PAD_EXISTS_True (1UL) /*!< Pad function is supported by hardware. */

/* Bit 12 : Indicate if SHA512 is present in the design. By default SHA1 and SHA256 are present. 0: SHA1 and SHA256 are present only 1: SHA1 and all sha-2 are present (SHA256 SHA512). */
#define CC_HASH_HASH_PARAM_SHA_512_EXISTS_Pos (12UL) /*!< Position of SHA_512_EXISTS field. */
#define CC_HASH_HASH_PARAM_SHA_512_EXISTS_Msk (0x1UL << CC_HASH_HASH_PARAM_SHA_512_EXISTS_Pos) /*!< Bit mask of SHA_512_EXISTS field. */
#define CC_HASH_HASH_PARAM_SHA_512_EXISTS_False (0UL) /*!< Only SHA1 and SHA256 are present. */
#define CC_HASH_HASH_PARAM_SHA_512_EXISTS_True (1UL) /*!< All SHA2 are present, including SHA512. */

/* Bits 11..8 : Determine the granularity of word size. */
#define CC_HASH_HASH_PARAM_DW_Pos (8UL) /*!< Position of DW field. */
#define CC_HASH_HASH_PARAM_DW_Msk (0xFUL << CC_HASH_HASH_PARAM_DW_Pos) /*!< Bit mask of DW field. */
#define CC_HASH_HASH_PARAM_DW_32Bit (0UL) /*!< 32 bit word data. */
#define CC_HASH_HASH_PARAM_DW_64Bit (1UL) /*!< 64 bit word data. */

/* Bits 7..4 : Indicate if Hi adders are present for each Hi value or 1 adder is shared for all Hi. */
#define CC_HASH_HASH_PARAM_CH_Pos (4UL) /*!< Position of CH field. */
#define CC_HASH_HASH_PARAM_CH_Msk (0xFUL << CC_HASH_HASH_PARAM_CH_Pos) /*!< Bit mask of CH field. */
#define CC_HASH_HASH_PARAM_CH_One (0UL) /*!< One Hi value is updated at a time. */
#define CC_HASH_HASH_PARAM_CH_All (1UL) /*!< All Hi values are updated at the same time. */

/* Bits 3..0 : Indicates the number of concurrent words the hash is using to compute signature. */
#define CC_HASH_HASH_PARAM_CW_Pos (0UL) /*!< Position of CW field. */
#define CC_HASH_HASH_PARAM_CW_Msk (0xFUL << CC_HASH_HASH_PARAM_CW_Pos) /*!< Bit mask of CW field. */
#define CC_HASH_HASH_PARAM_CW_One (1UL) /*!< One concurrent w(t). */
#define CC_HASH_HASH_PARAM_CW_Two (2UL) /*!< Two concurrent w(t). */

/* Register: CC_HASH_HASH_AES_SW_RESET */
/* Description: Hash_aes_sw_reset register. */

/* Bit 0 : Hash receive reset internally. */
#define CC_HASH_HASH_AES_SW_RESET_HASH_AES_SW_RESET_Pos (0UL) /*!< Position of HASH_AES_SW_RESET field. */
#define CC_HASH_HASH_AES_SW_RESET_HASH_AES_SW_RESET_Msk (0x1UL << CC_HASH_HASH_AES_SW_RESET_HASH_AES_SW_RESET_Pos) /*!< Bit mask of HASH_AES_SW_RESET field. */

/* Register: CC_HASH_HASH_ENDIANESS */
/* Description: This register hold the hash_endianess configuration. */

/* Bit 0 : The default value is little-endian. The data and generation of padding can be swapped to be big-endian. */
#define CC_HASH_HASH_ENDIANESS_ENDIAN_Pos (0UL) /*!< Position of ENDIAN field. */
#define CC_HASH_HASH_ENDIANESS_ENDIAN_Msk (0x1UL << CC_HASH_HASH_ENDIANESS_ENDIAN_Pos) /*!< Bit mask of ENDIAN field. */


/* Peripheral: CC_HOST_RGF */
/* Description: CryptoCell HOST_RGF */

/* Register: CC_HOST_RGF_HOST_RGF_IRR */
/* Description: The interrupt request register. Each bit of this register holds the interrupt status of a single interrupt source. */

/* Bit 11 : The GPR interrupt status. */
#define CC_HOST_RGF_HOST_RGF_IRR_GPR0_Pos (11UL) /*!< Position of GPR0 field. */
#define CC_HOST_RGF_HOST_RGF_IRR_GPR0_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IRR_GPR0_Pos) /*!< Bit mask of GPR0 field. */

/* Bit 10 : The RNG interrupt status. */
#define CC_HOST_RGF_HOST_RGF_IRR_RNG_INT_Pos (10UL) /*!< Position of RNG_INT field. */
#define CC_HOST_RGF_HOST_RGF_IRR_RNG_INT_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IRR_RNG_INT_Pos) /*!< Bit mask of RNG_INT field. */

/* Bit 9 : The PKA end of operation interrupt status. */
#define CC_HOST_RGF_HOST_RGF_IRR_PKA_EXP_INT_Pos (9UL) /*!< Position of PKA_EXP_INT field. */
#define CC_HOST_RGF_HOST_RGF_IRR_PKA_EXP_INT_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IRR_PKA_EXP_INT_Pos) /*!< Bit mask of PKA_EXP_INT field. */

/* Bit 8 : The AHB error interrupt status. */
#define CC_HOST_RGF_HOST_RGF_IRR_AHB_ERR_INT_Pos (8UL) /*!< Position of AHB_ERR_INT field. */
#define CC_HOST_RGF_HOST_RGF_IRR_AHB_ERR_INT_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IRR_AHB_ERR_INT_Pos) /*!< Bit mask of AHB_ERR_INT field. */

/* Bit 7 : The DOUT to memory DMA done interrupt status. This interrupt is asserted when all data was delivered to memory buffer from DOUT. */
#define CC_HOST_RGF_HOST_RGF_IRR_DOUT_TO_MEM_INT_Pos (7UL) /*!< Position of DOUT_TO_MEM_INT field. */
#define CC_HOST_RGF_HOST_RGF_IRR_DOUT_TO_MEM_INT_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IRR_DOUT_TO_MEM_INT_Pos) /*!< Bit mask of DOUT_TO_MEM_INT field. */

/* Bit 6 : The memory to DIN DMA done interrupt status. This interrupt is asserted when all data was delivered to DIN buffer from memory. */
#define CC_HOST_RGF_HOST_RGF_IRR_MEM_TO_DIN_INT_Pos (6UL) /*!< Position of MEM_TO_DIN_INT field. */
#define CC_HOST_RGF_HOST_RGF_IRR_MEM_TO_DIN_INT_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IRR_MEM_TO_DIN_INT_Pos) /*!< Bit mask of MEM_TO_DIN_INT field. */

/* Bit 5 : The DOUT to SRAM DMA done interrupt status. This interrupt is asserted when all data was delivered to SRAM buffer from DOUT. */
#define CC_HOST_RGF_HOST_RGF_IRR_DOUT_TO_SRAM_INT_Pos (5UL) /*!< Position of DOUT_TO_SRAM_INT field. */
#define CC_HOST_RGF_HOST_RGF_IRR_DOUT_TO_SRAM_INT_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IRR_DOUT_TO_SRAM_INT_Pos) /*!< Bit mask of DOUT_TO_SRAM_INT field. */

/* Bit 4 : The SRAM to DIN DMA done interrupt status. This interrupt is asserted when all data was delivered to DIN buffer from SRAM. */
#define CC_HOST_RGF_HOST_RGF_IRR_SRAM_TO_DIN_INT_Pos (4UL) /*!< Position of SRAM_TO_DIN_INT field. */
#define CC_HOST_RGF_HOST_RGF_IRR_SRAM_TO_DIN_INT_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IRR_SRAM_TO_DIN_INT_Pos) /*!< Bit mask of SRAM_TO_DIN_INT field. */

/* Register: CC_HOST_RGF_HOST_RGF_IMR */
/* Description: The interrupt mask register. Each bit of this register holds the mask of a single interrupt source. */

/* Bit 11 : The GPR interrupt mask. */
#define CC_HOST_RGF_HOST_RGF_IMR_GPR0_Pos (11UL) /*!< Position of GPR0 field. */
#define CC_HOST_RGF_HOST_RGF_IMR_GPR0_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IMR_GPR0_Pos) /*!< Bit mask of GPR0 field. */

/* Bit 10 : The RNG interrupt mask. */
#define CC_HOST_RGF_HOST_RGF_IMR_RNG_INT_MASK_Pos (10UL) /*!< Position of RNG_INT_MASK field. */
#define CC_HOST_RGF_HOST_RGF_IMR_RNG_INT_MASK_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IMR_RNG_INT_MASK_Pos) /*!< Bit mask of RNG_INT_MASK field. */

/* Bit 9 : The PKA end of operation interrupt mask. */
#define CC_HOST_RGF_HOST_RGF_IMR_PKA_EXP_MASK_Pos (9UL) /*!< Position of PKA_EXP_MASK field. */
#define CC_HOST_RGF_HOST_RGF_IMR_PKA_EXP_MASK_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IMR_PKA_EXP_MASK_Pos) /*!< Bit mask of PKA_EXP_MASK field. */

/* Bit 8 : The AHB error interrupt mask. */
#define CC_HOST_RGF_HOST_RGF_IMR_AHB_ERR_MASK_Pos (8UL) /*!< Position of AHB_ERR_MASK field. */
#define CC_HOST_RGF_HOST_RGF_IMR_AHB_ERR_MASK_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IMR_AHB_ERR_MASK_Pos) /*!< Bit mask of AHB_ERR_MASK field. */

/* Bit 7 : The DOUT to memory DMA done interrupt mask. */
#define CC_HOST_RGF_HOST_RGF_IMR_DOUT_TO_MEM_MASK_Pos (7UL) /*!< Position of DOUT_TO_MEM_MASK field. */
#define CC_HOST_RGF_HOST_RGF_IMR_DOUT_TO_MEM_MASK_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IMR_DOUT_TO_MEM_MASK_Pos) /*!< Bit mask of DOUT_TO_MEM_MASK field. */

/* Bit 6 : The memory to DIN DMA done interrupt mask. */
#define CC_HOST_RGF_HOST_RGF_IMR_MEM_TO_DIN_MASK_Pos (6UL) /*!< Position of MEM_TO_DIN_MASK field. */
#define CC_HOST_RGF_HOST_RGF_IMR_MEM_TO_DIN_MASK_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IMR_MEM_TO_DIN_MASK_Pos) /*!< Bit mask of MEM_TO_DIN_MASK field. */

/* Bit 5 : The DOUT to SRAM DMA done interrupt mask. */
#define CC_HOST_RGF_HOST_RGF_IMR_DOUT_TO_SRAM_MASK_Pos (5UL) /*!< Position of DOUT_TO_SRAM_MASK field. */
#define CC_HOST_RGF_HOST_RGF_IMR_DOUT_TO_SRAM_MASK_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IMR_DOUT_TO_SRAM_MASK_Pos) /*!< Bit mask of DOUT_TO_SRAM_MASK field. */

/* Bit 4 : The SRAM to DIN DMA done interrupt mask. */
#define CC_HOST_RGF_HOST_RGF_IMR_SRAM_TO_DIN_MASK_Pos (4UL) /*!< Position of SRAM_TO_DIN_MASK field. */
#define CC_HOST_RGF_HOST_RGF_IMR_SRAM_TO_DIN_MASK_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_IMR_SRAM_TO_DIN_MASK_Pos) /*!< Bit mask of SRAM_TO_DIN_MASK field. */

/* Register: CC_HOST_RGF_HOST_RGF_ICR */
/* Description: Interrupt clear register. */

/* Bit 11 : The GPR interrupt clear. */
#define CC_HOST_RGF_HOST_RGF_ICR_GPR0_Pos (11UL) /*!< Position of GPR0 field. */
#define CC_HOST_RGF_HOST_RGF_ICR_GPR0_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ICR_GPR0_Pos) /*!< Bit mask of GPR0 field. */

/* Bit 10 : The RNG interrupt clear. */
#define CC_HOST_RGF_HOST_RGF_ICR_RNG_INT_CLEAR_Pos (10UL) /*!< Position of RNG_INT_CLEAR field. */
#define CC_HOST_RGF_HOST_RGF_ICR_RNG_INT_CLEAR_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ICR_RNG_INT_CLEAR_Pos) /*!< Bit mask of RNG_INT_CLEAR field. */

/* Bit 9 : The PKA end of operation interrupt clear. */
#define CC_HOST_RGF_HOST_RGF_ICR_PKA_EXP_CLEAR_Pos (9UL) /*!< Position of PKA_EXP_CLEAR field. */
#define CC_HOST_RGF_HOST_RGF_ICR_PKA_EXP_CLEAR_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ICR_PKA_EXP_CLEAR_Pos) /*!< Bit mask of PKA_EXP_CLEAR field. */

/* Bit 8 : The AHB error interrupt clear. */
#define CC_HOST_RGF_HOST_RGF_ICR_AHB_ERR_CLEAR_Pos (8UL) /*!< Position of AHB_ERR_CLEAR field. */
#define CC_HOST_RGF_HOST_RGF_ICR_AHB_ERR_CLEAR_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ICR_AHB_ERR_CLEAR_Pos) /*!< Bit mask of AHB_ERR_CLEAR field. */

/* Bit 7 : The DOUT to memory DMA done interrupt clear. */
#define CC_HOST_RGF_HOST_RGF_ICR_DOUT_TO_MEM_CLEAR_Pos (7UL) /*!< Position of DOUT_TO_MEM_CLEAR field. */
#define CC_HOST_RGF_HOST_RGF_ICR_DOUT_TO_MEM_CLEAR_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ICR_DOUT_TO_MEM_CLEAR_Pos) /*!< Bit mask of DOUT_TO_MEM_CLEAR field. */

/* Bit 6 : The memory to DIN DMA done interrupt clear. */
#define CC_HOST_RGF_HOST_RGF_ICR_MEM_TO_DIN_CLEAR_Pos (6UL) /*!< Position of MEM_TO_DIN_CLEAR field. */
#define CC_HOST_RGF_HOST_RGF_ICR_MEM_TO_DIN_CLEAR_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ICR_MEM_TO_DIN_CLEAR_Pos) /*!< Bit mask of MEM_TO_DIN_CLEAR field. */

/* Bit 5 : The DOUT to SRAM DMA done interrupt clear. */
#define CC_HOST_RGF_HOST_RGF_ICR_DOUT_TO_SRAM_CLEAR_Pos (5UL) /*!< Position of DOUT_TO_SRAM_CLEAR field. */
#define CC_HOST_RGF_HOST_RGF_ICR_DOUT_TO_SRAM_CLEAR_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ICR_DOUT_TO_SRAM_CLEAR_Pos) /*!< Bit mask of DOUT_TO_SRAM_CLEAR field. */

/* Bit 4 : The SRAM to DIN DMA done interrupt clear. */
#define CC_HOST_RGF_HOST_RGF_ICR_SRAM_TO_DIN_CLEAR_Pos (4UL) /*!< Position of SRAM_TO_DIN_CLEAR field. */
#define CC_HOST_RGF_HOST_RGF_ICR_SRAM_TO_DIN_CLEAR_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ICR_SRAM_TO_DIN_CLEAR_Pos) /*!< Bit mask of SRAM_TO_DIN_CLEAR field. */

/* Register: CC_HOST_RGF_HOST_RGF_ENDIAN */
/* Description: This register defines the endianness of the host-accessible registers. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 15 : DIN read word endianness. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_WBG_Pos (15UL) /*!< Position of DIN_RD_WBG field. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_WBG_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_WBG_Pos) /*!< Bit mask of DIN_RD_WBG field. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_WBG_LittleEndian (0UL) /*!< Configure DIN read word as little endian */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_WBG_BigEndian (1UL) /*!< Configure DIN read word as big endian */

/* Bit 11 : DOUT write word endianness. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_WBG_Pos (11UL) /*!< Position of DOUT_WR_WBG field. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_WBG_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_WBG_Pos) /*!< Bit mask of DOUT_WR_WBG field. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_WBG_LittleEndian (0UL) /*!< Configure DOUT write word as little endian */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_WBG_BigEndian (1UL) /*!< Configure DOUT write word as big endian */

/* Bit 7 : DIN read endianness. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_BG_Pos (7UL) /*!< Position of DIN_RD_BG field. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_BG_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_BG_Pos) /*!< Bit mask of DIN_RD_BG field. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_BG_LittleEndian (0UL) /*!< Configure DIN read as little endian */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DIN_RD_BG_BigEndian (1UL) /*!< Configure DIN read as big endian */

/* Bit 3 : DOUT write endianness. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_BG_Pos (3UL) /*!< Position of DOUT_WR_BG field. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_BG_Msk (0x1UL << CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_BG_Pos) /*!< Bit mask of DOUT_WR_BG field. */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_BG_LittleEndian (0UL) /*!< Configure DOUT write as little endian */
#define CC_HOST_RGF_HOST_RGF_ENDIAN_DOUT_WR_BG_BigEndian (1UL) /*!< Configure DOUT write as big endian */

/* Register: CC_HOST_RGF_HOST_RGF_SIGNATURE */
/* Description: This register holds the CRYPTOCELL product signature. */

/* Bits 31..0 : Static identification signature. Used by the host driver to verify CRYPTOCELL is present at this address offset. */
#define CC_HOST_RGF_HOST_RGF_SIGNATURE_HOST_SIGNATURE_Pos (0UL) /*!< Position of HOST_SIGNATURE field. */
#define CC_HOST_RGF_HOST_RGF_SIGNATURE_HOST_SIGNATURE_Msk (0xFFFFFFFFUL << CC_HOST_RGF_HOST_RGF_SIGNATURE_HOST_SIGNATURE_Pos) /*!< Bit mask of HOST_SIGNATURE field. */

/* Register: CC_HOST_RGF_HOST_BOOT */
/* Description: This register holds the values of CRYPTOCELL pre-synthesis flags */

/* Bit 30 : Aes_exists_local */
#define CC_HOST_RGF_HOST_BOOT_AES_EXISTS_LOCAL_Pos (30UL) /*!< Position of AES_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_AES_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_AES_EXISTS_LOCAL_Pos) /*!< Bit mask of AES_EXISTS_LOCAL field. */

/* Bit 29 : Only_encrypt_local */
#define CC_HOST_RGF_HOST_BOOT_ONLY_ENCRYPT_LOCAL_Pos (29UL) /*!< Position of ONLY_ENCRYPT_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_ONLY_ENCRYPT_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_ONLY_ENCRYPT_LOCAL_Pos) /*!< Bit mask of ONLY_ENCRYPT_LOCAL field. */

/* Bit 28 : Support_256_192_key_local */
#define CC_HOST_RGF_HOST_BOOT_SUPPORT_256_192_KEY_LOCAL_Pos (28UL) /*!< Position of SUPPORT_256_192_KEY_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_SUPPORT_256_192_KEY_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_SUPPORT_256_192_KEY_LOCAL_Pos) /*!< Bit mask of SUPPORT_256_192_KEY_LOCAL field. */

/* Bit 27 : Tunneling_enb_local */
#define CC_HOST_RGF_HOST_BOOT_TUNNELING_ENB_LOCAL_Pos (27UL) /*!< Position of TUNNELING_ENB_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_TUNNELING_ENB_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_TUNNELING_ENB_LOCAL_Pos) /*!< Bit mask of TUNNELING_ENB_LOCAL field. */

/* Bit 26 : Aes_din_byte_resolution_local */
#define CC_HOST_RGF_HOST_BOOT_AES_DIN_BYTE_RESOLUTION_LOCAL_Pos (26UL) /*!< Position of AES_DIN_BYTE_RESOLUTION_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_AES_DIN_BYTE_RESOLUTION_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_AES_DIN_BYTE_RESOLUTION_LOCAL_Pos) /*!< Bit mask of AES_DIN_BYTE_RESOLUTION_LOCAL field. */

/* Bit 25 : Ctr_exists_local */
#define CC_HOST_RGF_HOST_BOOT_CTR_EXISTS_LOCAL_Pos (25UL) /*!< Position of CTR_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_CTR_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_CTR_EXISTS_LOCAL_Pos) /*!< Bit mask of CTR_EXISTS_LOCAL field. */

/* Bit 24 : Aes_xex_exists_local */
#define CC_HOST_RGF_HOST_BOOT_AES_XEX_EXISTS_LOCAL_Pos (24UL) /*!< Position of AES_XEX_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_AES_XEX_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_AES_XEX_EXISTS_LOCAL_Pos) /*!< Bit mask of AES_XEX_EXISTS_LOCAL field. */

/* Bit 23 : Aes_xex_hw_t_calc_local */
#define CC_HOST_RGF_HOST_BOOT_AES_XEX_HW_T_CALC_LOCAL_Pos (23UL) /*!< Position of AES_XEX_HW_T_CALC_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_AES_XEX_HW_T_CALC_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_AES_XEX_HW_T_CALC_LOCAL_Pos) /*!< Bit mask of AES_XEX_HW_T_CALC_LOCAL field. */

/* Bit 22 : Aes_ccm_exists_local */
#define CC_HOST_RGF_HOST_BOOT_AES_CCM_EXISTS_LOCAL_Pos (22UL) /*!< Position of AES_CCM_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_AES_CCM_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_AES_CCM_EXISTS_LOCAL_Pos) /*!< Bit mask of AES_CCM_EXISTS_LOCAL field. */

/* Bit 21 : Aes_cmac_exists_local */
#define CC_HOST_RGF_HOST_BOOT_AES_CMAC_EXISTS_LOCAL_Pos (21UL) /*!< Position of AES_CMAC_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_AES_CMAC_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_AES_CMAC_EXISTS_LOCAL_Pos) /*!< Bit mask of AES_CMAC_EXISTS_LOCAL field. */

/* Bit 20 : Aes_xcbc_mac_exists_local */
#define CC_HOST_RGF_HOST_BOOT_AES_XCBC_MAC_EXISTS_LOCAL_Pos (20UL) /*!< Position of AES_XCBC_MAC_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_AES_XCBC_MAC_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_AES_XCBC_MAC_EXISTS_LOCAL_Pos) /*!< Bit mask of AES_XCBC_MAC_EXISTS_LOCAL field. */

/* Bit 19 : Des_exists_local */
#define CC_HOST_RGF_HOST_BOOT_DES_EXISTS_LOCAL_Pos (19UL) /*!< Position of DES_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_DES_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_DES_EXISTS_LOCAL_Pos) /*!< Bit mask of DES_EXISTS_LOCAL field. */

/* Bit 18 : C2_exists_local */
#define CC_HOST_RGF_HOST_BOOT_C2_EXISTS_LOCAL_Pos (18UL) /*!< Position of C2_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_C2_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_C2_EXISTS_LOCAL_Pos) /*!< Bit mask of C2_EXISTS_LOCAL field. */

/* Bit 17 : Hash_exists_local */
#define CC_HOST_RGF_HOST_BOOT_HASH_EXISTS_LOCAL_Pos (17UL) /*!< Position of HASH_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_HASH_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_HASH_EXISTS_LOCAL_Pos) /*!< Bit mask of HASH_EXISTS_LOCAL field. */

/* Bit 16 : Md5_prsnt_local */
#define CC_HOST_RGF_HOST_BOOT_MD5_PRSNT_LOCAL_Pos (16UL) /*!< Position of MD5_PRSNT_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_MD5_PRSNT_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_MD5_PRSNT_LOCAL_Pos) /*!< Bit mask of MD5_PRSNT_LOCAL field. */

/* Bit 15 : Sha_256_prsnt_local */
#define CC_HOST_RGF_HOST_BOOT_SHA_256_PRSNT_LOCAL_Pos (15UL) /*!< Position of SHA_256_PRSNT_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_SHA_256_PRSNT_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_SHA_256_PRSNT_LOCAL_Pos) /*!< Bit mask of SHA_256_PRSNT_LOCAL field. */

/* Bit 14 : Sha_512_prsnt_local */
#define CC_HOST_RGF_HOST_BOOT_SHA_512_PRSNT_LOCAL_Pos (14UL) /*!< Position of SHA_512_PRSNT_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_SHA_512_PRSNT_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_SHA_512_PRSNT_LOCAL_Pos) /*!< Bit mask of SHA_512_PRSNT_LOCAL field. */

/* Bit 13 : Rc4_exists_local */
#define CC_HOST_RGF_HOST_BOOT_RC4_EXISTS_LOCAL_Pos (13UL) /*!< Position of RC4_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_RC4_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_RC4_EXISTS_LOCAL_Pos) /*!< Bit mask of RC4_EXISTS_LOCAL field. */

/* Bit 12 : Pka_exists_local */
#define CC_HOST_RGF_HOST_BOOT_PKA_EXISTS_LOCAL_Pos (12UL) /*!< Position of PKA_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_PKA_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_PKA_EXISTS_LOCAL_Pos) /*!< Bit mask of PKA_EXISTS_LOCAL field. */

/* Bit 11 : Rng_exists_local */
#define CC_HOST_RGF_HOST_BOOT_RNG_EXISTS_LOCAL_Pos (11UL) /*!< Position of RNG_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_RNG_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_RNG_EXISTS_LOCAL_Pos) /*!< Bit mask of RNG_EXISTS_LOCAL field. */

/* Bit 10 : Pau_exists_local */
#define CC_HOST_RGF_HOST_BOOT_PAU_EXISTS_LOCAL_Pos (10UL) /*!< Position of PAU_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_PAU_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_PAU_EXISTS_LOCAL_Pos) /*!< Bit mask of PAU_EXISTS_LOCAL field. */

/* Bit 9 : Dscrptr_exists_local */
#define CC_HOST_RGF_HOST_BOOT_DSCRPTR_EXISTS_LOCAL_Pos (9UL) /*!< Position of DSCRPTR_EXISTS_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_DSCRPTR_EXISTS_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_DSCRPTR_EXISTS_LOCAL_Pos) /*!< Bit mask of DSCRPTR_EXISTS_LOCAL field. */

/* Bits 8..6 : Sram_size_local */
#define CC_HOST_RGF_HOST_BOOT_SRAM_SIZE_LOCAL_Pos (6UL) /*!< Position of SRAM_SIZE_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_SRAM_SIZE_LOCAL_Msk (0x7UL << CC_HOST_RGF_HOST_BOOT_SRAM_SIZE_LOCAL_Pos) /*!< Bit mask of SRAM_SIZE_LOCAL field. */

/* Bit 5 : Rkek_ecc_exists_local_n */
#define CC_HOST_RGF_HOST_BOOT_RKEK_ECC_EXISTS_LOCAL_N_Pos (5UL) /*!< Position of RKEK_ECC_EXISTS_LOCAL_N field. */
#define CC_HOST_RGF_HOST_BOOT_RKEK_ECC_EXISTS_LOCAL_N_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_RKEK_ECC_EXISTS_LOCAL_N_Pos) /*!< Bit mask of RKEK_ECC_EXISTS_LOCAL_N field. */

/* Bit 3 : Ext_mem_secured_local */
#define CC_HOST_RGF_HOST_BOOT_EXT_MEM_SECURED_LOCAL_Pos (3UL) /*!< Position of EXT_MEM_SECURED_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_EXT_MEM_SECURED_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_EXT_MEM_SECURED_LOCAL_Pos) /*!< Bit mask of EXT_MEM_SECURED_LOCAL field. */

/* Bit 2 : Hash_in_fuses_local */
#define CC_HOST_RGF_HOST_BOOT_HASH_IN_FUSES_LOCAL_Pos (2UL) /*!< Position of HASH_IN_FUSES_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_HASH_IN_FUSES_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_HASH_IN_FUSES_LOCAL_Pos) /*!< Bit mask of HASH_IN_FUSES_LOCAL field. */

/* Bit 1 : Large_rkek_local */
#define CC_HOST_RGF_HOST_BOOT_LARGE_RKEK_LOCAL_Pos (1UL) /*!< Position of LARGE_RKEK_LOCAL field. */
#define CC_HOST_RGF_HOST_BOOT_LARGE_RKEK_LOCAL_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_LARGE_RKEK_LOCAL_Pos) /*!< Bit mask of LARGE_RKEK_LOCAL field. */

/* Bit 0 : Power_gating_exists_local */
#define CC_HOST_RGF_HOST_BOOT_SYNTHESIS_CONFIG_Pos (0UL) /*!< Position of SYNTHESIS_CONFIG field. */
#define CC_HOST_RGF_HOST_BOOT_SYNTHESIS_CONFIG_Msk (0x1UL << CC_HOST_RGF_HOST_BOOT_SYNTHESIS_CONFIG_Pos) /*!< Bit mask of SYNTHESIS_CONFIG field. */

/* Register: CC_HOST_RGF_HOST_CRYPTOKEY_SEL */
/* Description: AES hardware key select. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 2..0 : Select the source of the HW key that is used by the AES engine. */
#define CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_Pos (0UL) /*!< Position of SEL_CRYPTO_KEY field. */
#define CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_Msk (0x7UL << CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_Pos) /*!< Bit mask of SEL_CRYPTO_KEY field. */
#define CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_KDR (0UL) /*!< Hardware unique device root key from CRYPTOCELL NVM OTP */
#define CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_KRTL (1UL) /*!< RTL key */
#define CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_KCP (2UL) /*!< Code provisioning key from CRYPTOCELL NVM OTP */
#define CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_KCE (3UL) /*!< Code encryption key from CRYPTOCELL NVM OTP */
#define CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_KPICV (4UL) /*!< IC vendor provisioning key from CRYPTOCELL NVM OTP */
#define CC_HOST_RGF_HOST_CRYPTOKEY_SEL_SEL_CRYPTO_KEY_KCEICV (5UL) /*!< IC vendor code encryption key from CRYPTOCELL NVM OTP */

/* Register: CC_HOST_RGF_HOST_CORE_CLK_GATING_ENABLE */
/* Description: This register enables the core clk gating by masking/enabling the cc_idle_state output signal. */

/* Bit 0 : Enable the core clk gating, */
#define CC_HOST_RGF_HOST_CORE_CLK_GATING_ENABLE_HOST_CORE_CLK_GATING_ENABLE_Pos (0UL) /*!< Position of HOST_CORE_CLK_GATING_ENABLE field. */
#define CC_HOST_RGF_HOST_CORE_CLK_GATING_ENABLE_HOST_CORE_CLK_GATING_ENABLE_Msk (0x1UL << CC_HOST_RGF_HOST_CORE_CLK_GATING_ENABLE_HOST_CORE_CLK_GATING_ENABLE_Pos) /*!< Bit mask of HOST_CORE_CLK_GATING_ENABLE field. */

/* Register: CC_HOST_RGF_HOST_CC_IS_IDLE */
/* Description: This register holds the idle indication of CRYPTOCELL. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 9 : Crypto flow is idle */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_CRYPTO_IS_IDLE_Pos (9UL) /*!< Position of CRYPTO_IS_IDLE field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_CRYPTO_IS_IDLE_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_CRYPTO_IS_IDLE_Pos) /*!< Bit mask of CRYPTO_IS_IDLE field. */

/* Bit 8 : PKA is idle */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_PKA_IS_IDLE_Pos (8UL) /*!< Position of PKA_IS_IDLE field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_PKA_IS_IDLE_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_PKA_IS_IDLE_Pos) /*!< Bit mask of PKA_IS_IDLE field. */

/* Bit 7 : RNG is idle */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_RNG_IS_IDLE_Pos (7UL) /*!< Position of RNG_IS_IDLE field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_RNG_IS_IDLE_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_RNG_IS_IDLE_Pos) /*!< Bit mask of RNG_IS_IDLE field. */

/* Bit 6 : Fatal write */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_FATAL_WR_Pos (6UL) /*!< Position of FATAL_WR field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_FATAL_WR_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_FATAL_WR_Pos) /*!< Bit mask of FATAL_WR field. */

/* Bit 5 : NVM is idle */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_NVM_IS_IDLE_Pos (5UL) /*!< Position of NVM_IS_IDLE field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_NVM_IS_IDLE_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_NVM_IS_IDLE_Pos) /*!< Bit mask of NVM_IS_IDLE field. */

/* Bit 4 : NVM arbiter is idle */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_NVM_ARB_IS_IDLE_Pos (4UL) /*!< Position of NVM_ARB_IS_IDLE field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_NVM_ARB_IS_IDLE_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_NVM_ARB_IS_IDLE_Pos) /*!< Bit mask of NVM_ARB_IS_IDLE field. */

/* Bit 3 : AHB state machine is idle */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_AHB_IS_IDLE_Pos (3UL) /*!< Position of AHB_IS_IDLE field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_AHB_IS_IDLE_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_AHB_IS_IDLE_Pos) /*!< Bit mask of AHB_IS_IDLE field. */

/* Bit 2 : Symetric flow is busy */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_SYM_IS_BUSY_Pos (2UL) /*!< Position of SYM_IS_BUSY field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_SYM_IS_BUSY_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_SYM_IS_BUSY_Pos) /*!< Bit mask of SYM_IS_BUSY field. */

/* Bit 1 : The event that indicates that CRYPTOCELL is idle. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_HOST_CC_IS_IDLE_EVENT_Pos (1UL) /*!< Position of HOST_CC_IS_IDLE_EVENT field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_HOST_CC_IS_IDLE_EVENT_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_HOST_CC_IS_IDLE_EVENT_Pos) /*!< Bit mask of HOST_CC_IS_IDLE_EVENT field. */

/* Bit 0 : Asserted if CRYPTOCELL is idle. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_HOST_CC_IS_IDLE_Pos (0UL) /*!< Position of HOST_CC_IS_IDLE field. */
#define CC_HOST_RGF_HOST_CC_IS_IDLE_HOST_CC_IS_IDLE_Msk (0x1UL << CC_HOST_RGF_HOST_CC_IS_IDLE_HOST_CC_IS_IDLE_Pos) /*!< Bit mask of HOST_CC_IS_IDLE field. */

/* Register: CC_HOST_RGF_HOST_POWERDOWN */
/* Description: This register start the power-down sequence. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Power down enable register. */
#define CC_HOST_RGF_HOST_POWERDOWN_HOST_POWERDOWN_Pos (0UL) /*!< Position of HOST_POWERDOWN field. */
#define CC_HOST_RGF_HOST_POWERDOWN_HOST_POWERDOWN_Msk (0x1UL << CC_HOST_RGF_HOST_POWERDOWN_HOST_POWERDOWN_Pos) /*!< Bit mask of HOST_POWERDOWN field. */

/* Register: CC_HOST_RGF_HOST_REMOVE_GHASH_ENGINE */
/* Description: Asserted if the GHASH engine has been removed during synthesis These inputs are to be statically tied to 0 or 1 by the customers. When such an input is set, the matching engines inputs are tied to zero and its outputs are disconnected, so that the engine will be entirely removed by synthesis */

/* Bit 0 : The GHASH engine is not present */
#define CC_HOST_RGF_HOST_REMOVE_GHASH_ENGINE_HOST_REMOVE_GHASH_ENGINE_Pos (0UL) /*!< Position of HOST_REMOVE_GHASH_ENGINE field. */
#define CC_HOST_RGF_HOST_REMOVE_GHASH_ENGINE_HOST_REMOVE_GHASH_ENGINE_Msk (0x1UL << CC_HOST_RGF_HOST_REMOVE_GHASH_ENGINE_HOST_REMOVE_GHASH_ENGINE_Pos) /*!< Bit mask of HOST_REMOVE_GHASH_ENGINE field. */

/* Register: CC_HOST_RGF_HOST_REMOVE_CHACHA_ENGINE */
/* Description: Asserted if the CHACHA engine has been removed during synthesis These inputs are to be statically tied to 0 or 1 by the customers. When such an input is set, the matching engines inputs are tied to zero and its outputs are disconnected, so that the engine will be entirely removed by synthesis */

/* Bit 0 : The CHACHA engine is not present */
#define CC_HOST_RGF_HOST_REMOVE_CHACHA_ENGINE_HOST_REMOVE_CHACHA_ENGINE_Pos (0UL) /*!< Position of HOST_REMOVE_CHACHA_ENGINE field. */
#define CC_HOST_RGF_HOST_REMOVE_CHACHA_ENGINE_HOST_REMOVE_CHACHA_ENGINE_Msk (0x1UL << CC_HOST_RGF_HOST_REMOVE_CHACHA_ENGINE_HOST_REMOVE_CHACHA_ENGINE_Pos) /*!< Bit mask of HOST_REMOVE_CHACHA_ENGINE field. */


/* Peripheral: CC_HOST_SRAM */
/* Description: CryptoCell HOST_SRAM */

/* Register: CC_HOST_SRAM_SRAM_DATA */
/* Description: Read and write data from RNG_SRAM. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 31..0 : 32 bit write or read from RNG_SRAM. Read triggers the SRAM read DMA address automatically. Incremented write triggers the SRAM write DMA address to be automatically incremented. */
#define CC_HOST_SRAM_SRAM_DATA_SRAM_DATA_Pos (0UL) /*!< Position of SRAM_DATA field. */
#define CC_HOST_SRAM_SRAM_DATA_SRAM_DATA_Msk (0xFFFFFFFFUL << CC_HOST_SRAM_SRAM_DATA_SRAM_DATA_Pos) /*!< Bit mask of SRAM_DATA field. */

/* Register: CC_HOST_SRAM_SRAM_ADDR */
/* Description: First address given to RNG_SRAM DMA for read/write transactions from RNG_SRAM. */

/* Bits 14..0 : RNG_SRAM starting address */
#define CC_HOST_SRAM_SRAM_ADDR_SRAM_ADDR_Pos (0UL) /*!< Position of SRAM_ADDR field. */
#define CC_HOST_SRAM_SRAM_ADDR_SRAM_ADDR_Msk (0x7FFFUL << CC_HOST_SRAM_SRAM_ADDR_SRAM_ADDR_Pos) /*!< Bit mask of SRAM_ADDR field. */

/* Register: CC_HOST_SRAM_SRAM_DATA_READY */
/* Description: The RNG_SRAM content is ready for read in SRAM_DATA. */

/* Bit 0 : RNG_SRAM content is ready for read in SRAM_DATA. */
#define CC_HOST_SRAM_SRAM_DATA_READY_SRAM_READY_Pos (0UL) /*!< Position of SRAM_READY field. */
#define CC_HOST_SRAM_SRAM_DATA_READY_SRAM_READY_Msk (0x1UL << CC_HOST_SRAM_SRAM_DATA_READY_SRAM_READY_Pos) /*!< Bit mask of SRAM_READY field. */


/* Peripheral: CC_ID_REGISTERS */
/* Description: CryptoCell ID_REGISTERS */

/* Register: CC_ID_REGISTERS_PERIPHERAL_ID_4 */
/* Description: No register description provided */

/* Bits 3..0 : Continuation code. 0x4 for Arm products. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_4_DES_2_JEP106_Pos (0UL) /*!< Position of DES_2_JEP106 field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_4_DES_2_JEP106_Msk (0xFUL << CC_ID_REGISTERS_PERIPHERAL_ID_4_DES_2_JEP106_Pos) /*!< Bit mask of DES_2_JEP106 field. */

/* Register: CC_ID_REGISTERS_PERIPHERAL_ID_0 */
/* Description: No register description provided */

/* Bits 7..0 : Identification register part number, bits[7:0] */
#define CC_ID_REGISTERS_PERIPHERAL_ID_0_PART_0_Pos (0UL) /*!< Position of PART_0 field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_0_PART_0_Msk (0xFFUL << CC_ID_REGISTERS_PERIPHERAL_ID_0_PART_0_Pos) /*!< Bit mask of PART_0 field. */

/* Register: CC_ID_REGISTERS_PERIPHERAL_ID_1 */
/* Description: No register description provided */

/* Bits 7..4 : Identification code, bits[3:0]. 0x3B for Arm products. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_1_DES_0_JEP106_Pos (4UL) /*!< Position of DES_0_JEP106 field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_1_DES_0_JEP106_Msk (0xFUL << CC_ID_REGISTERS_PERIPHERAL_ID_1_DES_0_JEP106_Pos) /*!< Bit mask of DES_0_JEP106 field. */

/* Bits 3..0 : Identification register part number, bits[11:8] */
#define CC_ID_REGISTERS_PERIPHERAL_ID_1_PART_1_Pos (0UL) /*!< Position of PART_1 field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_1_PART_1_Msk (0xFUL << CC_ID_REGISTERS_PERIPHERAL_ID_1_PART_1_Pos) /*!< Bit mask of PART_1 field. */

/* Register: CC_ID_REGISTERS_PERIPHERAL_ID_2 */
/* Description: No register description provided */

/* Bits 7..4 : Starts at zero and increments for every new IP release. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_2_REVISION_Pos (4UL) /*!< Position of REVISION field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_2_REVISION_Msk (0xFUL << CC_ID_REGISTERS_PERIPHERAL_ID_2_REVISION_Pos) /*!< Bit mask of REVISION field. */

/* Bit 3 : Constant 0x1. Indicates that a JEDEC assigned value is used. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_2_JEDEC_Pos (3UL) /*!< Position of JEDEC field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_2_JEDEC_Msk (0x1UL << CC_ID_REGISTERS_PERIPHERAL_ID_2_JEDEC_Pos) /*!< Bit mask of JEDEC field. */

/* Bits 2..0 : Identification code, bits[6:4]. 0x3B for Arm products. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_2_DES_1_JEP106_Pos (0UL) /*!< Position of DES_1_JEP106 field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_2_DES_1_JEP106_Msk (0x7UL << CC_ID_REGISTERS_PERIPHERAL_ID_2_DES_1_JEP106_Pos) /*!< Bit mask of DES_1_JEP106 field. */

/* Register: CC_ID_REGISTERS_PERIPHERAL_ID_3 */
/* Description: No register description provided */

/* Bits 7..4 : Starts at zero for every revision, and increments if metal fixes are applied between two IP releases. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_3_REVAND_Pos (4UL) /*!< Position of REVAND field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_3_REVAND_Msk (0xFUL << CC_ID_REGISTERS_PERIPHERAL_ID_3_REVAND_Pos) /*!< Bit mask of REVAND field. */

/* Bits 3..0 : Customer modified, normally zero, but if a partner applies any changes themselves, they must change this value. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_3_CMOD_Pos (0UL) /*!< Position of CMOD field. */
#define CC_ID_REGISTERS_PERIPHERAL_ID_3_CMOD_Msk (0xFUL << CC_ID_REGISTERS_PERIPHERAL_ID_3_CMOD_Pos) /*!< Bit mask of CMOD field. */

/* Register: CC_ID_REGISTERS_COMPONENT_ID_0 */
/* Description: No register description provided */

/* Bits 7..0 : Constant 0xD */
#define CC_ID_REGISTERS_COMPONENT_ID_0_PRMBL_0_Pos (0UL) /*!< Position of PRMBL_0 field. */
#define CC_ID_REGISTERS_COMPONENT_ID_0_PRMBL_0_Msk (0xFFUL << CC_ID_REGISTERS_COMPONENT_ID_0_PRMBL_0_Pos) /*!< Bit mask of PRMBL_0 field. */

/* Register: CC_ID_REGISTERS_COMPONENT_ID_1 */
/* Description: No register description provided */

/* Bits 7..4 : Component type 0 0xF for cryptocell */
#define CC_ID_REGISTERS_COMPONENT_ID_1_CLASS_Pos (4UL) /*!< Position of CLASS field. */
#define CC_ID_REGISTERS_COMPONENT_ID_1_CLASS_Msk (0xFUL << CC_ID_REGISTERS_COMPONENT_ID_1_CLASS_Pos) /*!< Bit mask of CLASS field. */

/* Bits 3..0 : Constant 0x0 */
#define CC_ID_REGISTERS_COMPONENT_ID_1_PRMBL_1_Pos (0UL) /*!< Position of PRMBL_1 field. */
#define CC_ID_REGISTERS_COMPONENT_ID_1_PRMBL_1_Msk (0xFUL << CC_ID_REGISTERS_COMPONENT_ID_1_PRMBL_1_Pos) /*!< Bit mask of PRMBL_1 field. */

/* Register: CC_ID_REGISTERS_COMPONENT_ID_2 */
/* Description: No register description provided */

/* Bits 7..0 : Constant 0x5 */
#define CC_ID_REGISTERS_COMPONENT_ID_2_PRMBL_2_Pos (0UL) /*!< Position of PRMBL_2 field. */
#define CC_ID_REGISTERS_COMPONENT_ID_2_PRMBL_2_Msk (0xFFUL << CC_ID_REGISTERS_COMPONENT_ID_2_PRMBL_2_Pos) /*!< Bit mask of PRMBL_2 field. */

/* Register: CC_ID_REGISTERS_COMPONENT_ID_3 */
/* Description: No register description provided */

/* Bits 7..0 : Constant 0xB1 */
#define CC_ID_REGISTERS_COMPONENT_ID_3_PRMBL_3_Pos (0UL) /*!< Position of PRMBL_3 field. */
#define CC_ID_REGISTERS_COMPONENT_ID_3_PRMBL_3_Msk (0xFFUL << CC_ID_REGISTERS_COMPONENT_ID_3_PRMBL_3_Pos) /*!< Bit mask of PRMBL_3 field. */


/* Peripheral: CC_MISC */
/* Description: CryptoCell MISC */

/* Register: CC_MISC_AES_CLK_ENABLE */
/* Description: The AES clock enable register. Note: this is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Enable or disable the AES engine clock. */
#define CC_MISC_AES_CLK_ENABLE_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_MISC_AES_CLK_ENABLE_EN_Msk (0x1UL << CC_MISC_AES_CLK_ENABLE_EN_Pos) /*!< Bit mask of EN field. */
#define CC_MISC_AES_CLK_ENABLE_EN_Disable (0UL) /*!< Disable the AES engine clock */
#define CC_MISC_AES_CLK_ENABLE_EN_Enable (1UL) /*!< Enable the AES engine clock */

/* Register: CC_MISC_HASH_CLK_ENABLE */
/* Description: The HASH clock enable register. Note: this is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Enable or disable the HASH engine clock. */
#define CC_MISC_HASH_CLK_ENABLE_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_MISC_HASH_CLK_ENABLE_EN_Msk (0x1UL << CC_MISC_HASH_CLK_ENABLE_EN_Pos) /*!< Bit mask of EN field. */
#define CC_MISC_HASH_CLK_ENABLE_EN_Disable (0UL) /*!< Disable the HASH engine clock */
#define CC_MISC_HASH_CLK_ENABLE_EN_Enable (1UL) /*!< Enable the HASH engine clock */

/* Register: CC_MISC_PKA_CLK_ENABLE */
/* Description: The PKA clock enable register. Note: this is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Enable or disable the PKA engine clock. */
#define CC_MISC_PKA_CLK_ENABLE_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_MISC_PKA_CLK_ENABLE_EN_Msk (0x1UL << CC_MISC_PKA_CLK_ENABLE_EN_Pos) /*!< Bit mask of EN field. */
#define CC_MISC_PKA_CLK_ENABLE_EN_Disable (0UL) /*!< Disable the PKA engine clock */
#define CC_MISC_PKA_CLK_ENABLE_EN_Enable (1UL) /*!< Enable the PKA engine clock */

/* Register: CC_MISC_DMA_CLK_ENABLE */
/* Description: The DMA clock enable register. Note: this is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Enable or disable the DMA engine clock. */
#define CC_MISC_DMA_CLK_ENABLE_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_MISC_DMA_CLK_ENABLE_EN_Msk (0x1UL << CC_MISC_DMA_CLK_ENABLE_EN_Pos) /*!< Bit mask of EN field. */
#define CC_MISC_DMA_CLK_ENABLE_EN_Disable (0UL) /*!< Disable the DMA engine clock */
#define CC_MISC_DMA_CLK_ENABLE_EN_Enable (1UL) /*!< Enable the DMA engine clock */

/* Register: CC_MISC_CLK_STATUS */
/* Description: The CRYPTOCELL clock status register. Note: this is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 8 : Status of DMA engine clock. */
#define CC_MISC_CLK_STATUS_DMA_CLK_STATUS_Pos (8UL) /*!< Position of DMA_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_DMA_CLK_STATUS_Msk (0x1UL << CC_MISC_CLK_STATUS_DMA_CLK_STATUS_Pos) /*!< Bit mask of DMA_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_DMA_CLK_STATUS_Disabled (0UL) /*!< The DMA engine clock is disabled */
#define CC_MISC_CLK_STATUS_DMA_CLK_STATUS_Enabled (1UL) /*!< The DMA engine clock is enabled */

/* Bit 7 : Status of CHACHA engine clock. */
#define CC_MISC_CLK_STATUS_CHACHA_CLK_STATUS_Pos (7UL) /*!< Position of CHACHA_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_CHACHA_CLK_STATUS_Msk (0x1UL << CC_MISC_CLK_STATUS_CHACHA_CLK_STATUS_Pos) /*!< Bit mask of CHACHA_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_CHACHA_CLK_STATUS_Disabled (0UL) /*!< The CHACHA engine clock is disabled */
#define CC_MISC_CLK_STATUS_CHACHA_CLK_STATUS_Enabled (1UL) /*!< The CHACHA engine clock is enabled */

/* Bit 3 : Status of PKA engine clock. */
#define CC_MISC_CLK_STATUS_PKA_CLK_STATUS_Pos (3UL) /*!< Position of PKA_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_PKA_CLK_STATUS_Msk (0x1UL << CC_MISC_CLK_STATUS_PKA_CLK_STATUS_Pos) /*!< Bit mask of PKA_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_PKA_CLK_STATUS_Disabled (0UL) /*!< The PKA engine clock is disabled */
#define CC_MISC_CLK_STATUS_PKA_CLK_STATUS_Enabled (1UL) /*!< The PKA engine clock is enabled */

/* Bit 2 : Status of HASH engine clock. */
#define CC_MISC_CLK_STATUS_HASH_CLK_STATUS_Pos (2UL) /*!< Position of HASH_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_HASH_CLK_STATUS_Msk (0x1UL << CC_MISC_CLK_STATUS_HASH_CLK_STATUS_Pos) /*!< Bit mask of HASH_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_HASH_CLK_STATUS_Disabled (0UL) /*!< The HASH engine clock is disabled */
#define CC_MISC_CLK_STATUS_HASH_CLK_STATUS_Enabled (1UL) /*!< The HASH engine clock is enabled */

/* Bit 0 : Status of AES engine clock. */
#define CC_MISC_CLK_STATUS_AES_CLK_STATUS_Pos (0UL) /*!< Position of AES_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_AES_CLK_STATUS_Msk (0x1UL << CC_MISC_CLK_STATUS_AES_CLK_STATUS_Pos) /*!< Bit mask of AES_CLK_STATUS field. */
#define CC_MISC_CLK_STATUS_AES_CLK_STATUS_Disabled (0UL) /*!< The AES engine clock is disabled */
#define CC_MISC_CLK_STATUS_AES_CLK_STATUS_Enabled (1UL) /*!< The AES engine clock is enabled */

/* Register: CC_MISC_CHACHA_CLK_ENABLE */
/* Description: CHACHA / SALSA clock enable register. Note: this is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Enable or disable the CHACHA engine clock. */
#define CC_MISC_CHACHA_CLK_ENABLE_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_MISC_CHACHA_CLK_ENABLE_EN_Msk (0x1UL << CC_MISC_CHACHA_CLK_ENABLE_EN_Pos) /*!< Bit mask of EN field. */
#define CC_MISC_CHACHA_CLK_ENABLE_EN_Disable (0UL) /*!< Disable the CHACHA engine clock */
#define CC_MISC_CHACHA_CLK_ENABLE_EN_Enable (1UL) /*!< Enable the CHACHA engine clock */


/* Peripheral: CC_NVM */
/* Description: CryptoCell NVM */

/* Register: CC_NVM_AIB_FUSE_PROG_COMPLETED */
/* Description: This register reflects the FUSE_AIB_PROG_COMPLETED input, which indicates that the fuse programming was completed. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Indicates if the fuse programming operation has been completed. */
#define CC_NVM_AIB_FUSE_PROG_COMPLETED_AIB_FUSE_PROG_COMPLETED_Pos (0UL) /*!< Position of AIB_FUSE_PROG_COMPLETED field. */
#define CC_NVM_AIB_FUSE_PROG_COMPLETED_AIB_FUSE_PROG_COMPLETED_Msk (0x1UL << CC_NVM_AIB_FUSE_PROG_COMPLETED_AIB_FUSE_PROG_COMPLETED_Pos) /*!< Bit mask of AIB_FUSE_PROG_COMPLETED field. */

/* Register: CC_NVM_NVM_DEBUG_STATUS */
/* Description: NVM FSM debug status register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bits 3..1 : NVM finite state machine status */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_Pos (1UL) /*!< Position of NVM_SM field. */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_Msk (0x7UL << CC_NVM_NVM_DEBUG_STATUS_NVM_SM_Pos) /*!< Bit mask of NVM_SM field. */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_Idle (0UL) /*!< NVM FSM is idle */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_ReadDummy (1UL) /*!< OTP dummy read */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_ReadICVFlag (2UL) /*!< ICV manufacturer flags read */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_ReadOEMFlag (3UL) /*!< OEM flags read */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_ReadGPPC (4UL) /*!< GPPC read */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_Decode (5UL) /*!< Decode */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_LCSValid (6UL) /*!< LCS valid */
#define CC_NVM_NVM_DEBUG_STATUS_NVM_SM_LCSIsValid (7UL) /*!< LCS is valid */

/* Register: CC_NVM_LCS_IS_VALID */
/* Description: Indicates that the LCS register holds a valid value. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Indicates whether LCS is valid. */
#define CC_NVM_LCS_IS_VALID_LCS_IS_VALID_REG_Pos (0UL) /*!< Position of LCS_IS_VALID_REG field. */
#define CC_NVM_LCS_IS_VALID_LCS_IS_VALID_REG_Msk (0x1UL << CC_NVM_LCS_IS_VALID_LCS_IS_VALID_REG_Pos) /*!< Bit mask of LCS_IS_VALID_REG field. */

/* Register: CC_NVM_NVM_IS_IDLE */
/* Description: Indicates that the LCS register holds a valid value. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 0 : Indicates whether the NVM manager finishes its operation, calculates the LCS, reads the HW keys, compares the number of zeros and clears the keys */
#define CC_NVM_NVM_IS_IDLE_NVM_IS_IDLE_REG_Pos (0UL) /*!< Position of NVM_IS_IDLE_REG field. */
#define CC_NVM_NVM_IS_IDLE_NVM_IS_IDLE_REG_Msk (0x1UL << CC_NVM_NVM_IS_IDLE_NVM_IS_IDLE_REG_Pos) /*!< Bit mask of NVM_IS_IDLE_REG field. */

/* Register: CC_NVM_LCS_REG */
/* Description: The lifecycle state register. Note: This is a special register, affected by internal logic. Test result of this register is NA. */

/* Bit 12 : Indication that the number of zeroes in the loaded KCEICV is not equal to the value set in the manufacture flag. */
#define CC_NVM_LCS_REG_ERROR_KCEICV_ZERO_CNT_Pos (12UL) /*!< Position of ERROR_KCEICV_ZERO_CNT field. */
#define CC_NVM_LCS_REG_ERROR_KCEICV_ZERO_CNT_Msk (0x1UL << CC_NVM_LCS_REG_ERROR_KCEICV_ZERO_CNT_Pos) /*!< Bit mask of ERROR_KCEICV_ZERO_CNT field. */

/* Bit 11 : Indication that the number of zeroes in the loaded KPICV is not equal to the value set in the manufacture flag. */
#define CC_NVM_LCS_REG_ERROR_KPICV_ZERO_CNT_Pos (11UL) /*!< Position of ERROR_KPICV_ZERO_CNT field. */
#define CC_NVM_LCS_REG_ERROR_KPICV_ZERO_CNT_Msk (0x1UL << CC_NVM_LCS_REG_ERROR_KPICV_ZERO_CNT_Pos) /*!< Bit mask of ERROR_KPICV_ZERO_CNT field. */

/* Bit 10 : Indication that the number of zeroes in the loaded KCE is not equal to the value set in the OEM flag. */
#define CC_NVM_LCS_REG_ERROR_KCE_ZERO_CNT_Pos (10UL) /*!< Position of ERROR_KCE_ZERO_CNT field. */
#define CC_NVM_LCS_REG_ERROR_KCE_ZERO_CNT_Msk (0x1UL << CC_NVM_LCS_REG_ERROR_KCE_ZERO_CNT_Pos) /*!< Bit mask of ERROR_KCE_ZERO_CNT field. */

/* Bit 9 : Indication that the number of zeroes in the loaded KCP is not equal to the value set in the OEM flag. */
#define CC_NVM_LCS_REG_ERROR_PROV_ZERO_CNT_Pos (9UL) /*!< Position of ERROR_PROV_ZERO_CNT field. */
#define CC_NVM_LCS_REG_ERROR_PROV_ZERO_CNT_Msk (0x1UL << CC_NVM_LCS_REG_ERROR_PROV_ZERO_CNT_Pos) /*!< Bit mask of ERROR_PROV_ZERO_CNT field. */

/* Bit 8 : Indication that the number of zeroes in the loaded KDR is not equal to the value set in the manufacture flag. */
#define CC_NVM_LCS_REG_ERROR_KDR_ZERO_CNT_Pos (8UL) /*!< Position of ERROR_KDR_ZERO_CNT field. */
#define CC_NVM_LCS_REG_ERROR_KDR_ZERO_CNT_Msk (0x1UL << CC_NVM_LCS_REG_ERROR_KDR_ZERO_CNT_Pos) /*!< Bit mask of ERROR_KDR_ZERO_CNT field. */

/* Bits 2..0 : Indicates the lcs (lifecycle state) value. */
#define CC_NVM_LCS_REG_LCS_REG_Pos (0UL) /*!< Position of LCS_REG field. */
#define CC_NVM_LCS_REG_LCS_REG_Msk (0x7UL << CC_NVM_LCS_REG_LCS_REG_Pos) /*!< Bit mask of LCS_REG field. */
#define CC_NVM_LCS_REG_LCS_REG_CM (0UL) /*!< Chip manufacturer */
#define CC_NVM_LCS_REG_LCS_REG_DM (1UL) /*!< Device manufacturer */
#define CC_NVM_LCS_REG_LCS_REG_SE (5UL) /*!< Secure Enable */
#define CC_NVM_LCS_REG_LCS_REG_RMA (7UL) /*!< Return Merchandise Authorization */

/* Register: CC_NVM_HOST_SHADOW_KDR_REG */
/* Description: This register interface is used to update the KDR registers when the device LCS is in CM or DM mode. Register is write-once (per warm boot) in LCS=RMA. The KDR is updated by shifting. */

/* Bit 0 : This field is used to update the KDR registers when the device LCS is in CM, DM or RMA mode. The KDR is updated by shifting. */
#define CC_NVM_HOST_SHADOW_KDR_REG_HOST_SHADOW_KDR_REG_Pos (0UL) /*!< Position of HOST_SHADOW_KDR_REG field. */
#define CC_NVM_HOST_SHADOW_KDR_REG_HOST_SHADOW_KDR_REG_Msk (0x1UL << CC_NVM_HOST_SHADOW_KDR_REG_HOST_SHADOW_KDR_REG_Pos) /*!< Bit mask of HOST_SHADOW_KDR_REG field. */

/* Register: CC_NVM_HOST_SHADOW_KCP_REG */
/* Description: This register interface is used to update the KCP registers when the device LCS is in CM or DM mode. The KCP is updated by shifting. */

/* Bit 0 : This field is used to update the KCP registers when the device LCS is in CM or DM mode. The KCP is updated by shifting. */
#define CC_NVM_HOST_SHADOW_KCP_REG_HOST_SHADOW_KCP_REG_Pos (0UL) /*!< Position of HOST_SHADOW_KCP_REG field. */
#define CC_NVM_HOST_SHADOW_KCP_REG_HOST_SHADOW_KCP_REG_Msk (0x1UL << CC_NVM_HOST_SHADOW_KCP_REG_HOST_SHADOW_KCP_REG_Pos) /*!< Bit mask of HOST_SHADOW_KCP_REG field. */

/* Register: CC_NVM_HOST_SHADOW_KCE_REG */
/* Description: This register interface is used to update the KCE registers when the device LCS is in CM or DM mode. The KCE is updated by shifting. */

/* Bit 0 : This field is used to update the KCE registers when the device LCS is in CM or DM mode. The KCE is updated by shifting. */
#define CC_NVM_HOST_SHADOW_KCE_REG_HOST_SHADOW_KCE_REG_Pos (0UL) /*!< Position of HOST_SHADOW_KCE_REG field. */
#define CC_NVM_HOST_SHADOW_KCE_REG_HOST_SHADOW_KCE_REG_Msk (0x1UL << CC_NVM_HOST_SHADOW_KCE_REG_HOST_SHADOW_KCE_REG_Pos) /*!< Bit mask of HOST_SHADOW_KCE_REG field. */

/* Register: CC_NVM_HOST_SHADOW_KPICV_REG */
/* Description: This register interface is used to update the KPICV registers when the device LCS is in CM or DM mode. The KPICV is updated by shifting. */

/* Bit 0 : This field is used to update the KPICV registers when the device LCS is in CM or DM mode. The KPICV is updated by shifting. */
#define CC_NVM_HOST_SHADOW_KPICV_REG_HOST_SHADOW_KPICV_REG_Pos (0UL) /*!< Position of HOST_SHADOW_KPICV_REG field. */
#define CC_NVM_HOST_SHADOW_KPICV_REG_HOST_SHADOW_KPICV_REG_Msk (0x1UL << CC_NVM_HOST_SHADOW_KPICV_REG_HOST_SHADOW_KPICV_REG_Pos) /*!< Bit mask of HOST_SHADOW_KPICV_REG field. */

/* Register: CC_NVM_HOST_SHADOW_KCEICV_REG */
/* Description: This register interface is used to update the KCEICV registers when the device LCS is in CM or DM mode. The KCEICV is updated by shifting. */

/* Bit 0 : This field is used to update the KCEICV registers when the device is in CM or DM mode. The KCEICV is updated by shifting. */
#define CC_NVM_HOST_SHADOW_KCEICV_REG_HOST_SHADOW_KCEICV_REG_Pos (0UL) /*!< Position of HOST_SHADOW_KCEICV_REG field. */
#define CC_NVM_HOST_SHADOW_KCEICV_REG_HOST_SHADOW_KCEICV_REG_Msk (0x1UL << CC_NVM_HOST_SHADOW_KCEICV_REG_HOST_SHADOW_KCEICV_REG_Pos) /*!< Bit mask of HOST_SHADOW_KCEICV_REG field. */

/* Register: CC_NVM_OTP_ADDR_WIDTH_DEF */
/* Description: Define the integrated OTP address width in words. Note: This is a special register, affected by internal logic. Test result of this register is NA. The supported sizes are 6 (for 2 kbits), and 7,8,9,11 (for 64 kbits). The default value in the provided RTL will be 6. */

/* Bits 3..0 : Holds the OTP address width in words */
#define CC_NVM_OTP_ADDR_WIDTH_DEF_OTP_ADDR_WIDTH_DEF_Pos (0UL) /*!< Position of OTP_ADDR_WIDTH_DEF field. */
#define CC_NVM_OTP_ADDR_WIDTH_DEF_OTP_ADDR_WIDTH_DEF_Msk (0xFUL << CC_NVM_OTP_ADDR_WIDTH_DEF_OTP_ADDR_WIDTH_DEF_Pos) /*!< Bit mask of OTP_ADDR_WIDTH_DEF field. */


/* Peripheral: CC_PKA */
/* Description: CryptoCell PKA */

/* Register: CC_PKA_MEMORY_MAP0 */
/* Description: This register maps the virtual register r0 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r0 register to. */
#define CC_PKA_MEMORY_MAP0_MEMORY_MAP0_Pos (1UL) /*!< Position of MEMORY_MAP0 field. */
#define CC_PKA_MEMORY_MAP0_MEMORY_MAP0_Msk (0x3FFUL << CC_PKA_MEMORY_MAP0_MEMORY_MAP0_Pos) /*!< Bit mask of MEMORY_MAP0 field. */

/* Register: CC_PKA_MEMORY_MAP1 */
/* Description: This register maps the virtual register r1 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r1 register to. */
#define CC_PKA_MEMORY_MAP1_MEMORY_MAP1_Pos (1UL) /*!< Position of MEMORY_MAP1 field. */
#define CC_PKA_MEMORY_MAP1_MEMORY_MAP1_Msk (0x3FFUL << CC_PKA_MEMORY_MAP1_MEMORY_MAP1_Pos) /*!< Bit mask of MEMORY_MAP1 field. */

/* Register: CC_PKA_MEMORY_MAP2 */
/* Description: This register maps the virtual register r2 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r2 register to. */
#define CC_PKA_MEMORY_MAP2_MEMORY_MAP2_Pos (1UL) /*!< Position of MEMORY_MAP2 field. */
#define CC_PKA_MEMORY_MAP2_MEMORY_MAP2_Msk (0x3FFUL << CC_PKA_MEMORY_MAP2_MEMORY_MAP2_Pos) /*!< Bit mask of MEMORY_MAP2 field. */

/* Register: CC_PKA_MEMORY_MAP3 */
/* Description: This register maps the virtual register r3 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r3 register to. */
#define CC_PKA_MEMORY_MAP3_MEMORY_MAP3_Pos (1UL) /*!< Position of MEMORY_MAP3 field. */
#define CC_PKA_MEMORY_MAP3_MEMORY_MAP3_Msk (0x3FFUL << CC_PKA_MEMORY_MAP3_MEMORY_MAP3_Pos) /*!< Bit mask of MEMORY_MAP3 field. */

/* Register: CC_PKA_MEMORY_MAP4 */
/* Description: This register maps the virtual register r4 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r4 register to. */
#define CC_PKA_MEMORY_MAP4_MEMORY_MAP4_Pos (1UL) /*!< Position of MEMORY_MAP4 field. */
#define CC_PKA_MEMORY_MAP4_MEMORY_MAP4_Msk (0x3FFUL << CC_PKA_MEMORY_MAP4_MEMORY_MAP4_Pos) /*!< Bit mask of MEMORY_MAP4 field. */

/* Register: CC_PKA_MEMORY_MAP5 */
/* Description: This register maps the virtual register r5 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r5 register to. */
#define CC_PKA_MEMORY_MAP5_MEMORY_MAP5_Pos (1UL) /*!< Position of MEMORY_MAP5 field. */
#define CC_PKA_MEMORY_MAP5_MEMORY_MAP5_Msk (0x3FFUL << CC_PKA_MEMORY_MAP5_MEMORY_MAP5_Pos) /*!< Bit mask of MEMORY_MAP5 field. */

/* Register: CC_PKA_MEMORY_MAP6 */
/* Description: This register maps the virtual register r6 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r6 register to. */
#define CC_PKA_MEMORY_MAP6_MEMORY_MAP6_Pos (1UL) /*!< Position of MEMORY_MAP6 field. */
#define CC_PKA_MEMORY_MAP6_MEMORY_MAP6_Msk (0x3FFUL << CC_PKA_MEMORY_MAP6_MEMORY_MAP6_Pos) /*!< Bit mask of MEMORY_MAP6 field. */

/* Register: CC_PKA_MEMORY_MAP7 */
/* Description: This register maps the virtual register r7 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r7 register to. */
#define CC_PKA_MEMORY_MAP7_MEMORY_MAP7_Pos (1UL) /*!< Position of MEMORY_MAP7 field. */
#define CC_PKA_MEMORY_MAP7_MEMORY_MAP7_Msk (0x3FFUL << CC_PKA_MEMORY_MAP7_MEMORY_MAP7_Pos) /*!< Bit mask of MEMORY_MAP7 field. */

/* Register: CC_PKA_MEMORY_MAP8 */
/* Description: This register maps the virtual register r8 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r8 register to. */
#define CC_PKA_MEMORY_MAP8_MEMORY_MAP8_Pos (1UL) /*!< Position of MEMORY_MAP8 field. */
#define CC_PKA_MEMORY_MAP8_MEMORY_MAP8_Msk (0x3FFUL << CC_PKA_MEMORY_MAP8_MEMORY_MAP8_Pos) /*!< Bit mask of MEMORY_MAP8 field. */

/* Register: CC_PKA_MEMORY_MAP9 */
/* Description: This register maps the virtual register r9 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r9 register to. */
#define CC_PKA_MEMORY_MAP9_MEMORY_MAP9_Pos (1UL) /*!< Position of MEMORY_MAP9 field. */
#define CC_PKA_MEMORY_MAP9_MEMORY_MAP9_Msk (0x3FFUL << CC_PKA_MEMORY_MAP9_MEMORY_MAP9_Pos) /*!< Bit mask of MEMORY_MAP9 field. */

/* Register: CC_PKA_MEMORY_MAP10 */
/* Description: This register maps the virtual register r10 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r10 register to. */
#define CC_PKA_MEMORY_MAP10_MEMORY_MAP10_Pos (1UL) /*!< Position of MEMORY_MAP10 field. */
#define CC_PKA_MEMORY_MAP10_MEMORY_MAP10_Msk (0x3FFUL << CC_PKA_MEMORY_MAP10_MEMORY_MAP10_Pos) /*!< Bit mask of MEMORY_MAP10 field. */

/* Register: CC_PKA_MEMORY_MAP11 */
/* Description: This register maps the virtual register r11 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r11 register to. */
#define CC_PKA_MEMORY_MAP11_MEMORY_MAP11_Pos (1UL) /*!< Position of MEMORY_MAP11 field. */
#define CC_PKA_MEMORY_MAP11_MEMORY_MAP11_Msk (0x3FFUL << CC_PKA_MEMORY_MAP11_MEMORY_MAP11_Pos) /*!< Bit mask of MEMORY_MAP11 field. */

/* Register: CC_PKA_MEMORY_MAP12 */
/* Description: This register maps the virtual register r12 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r12 register to. */
#define CC_PKA_MEMORY_MAP12_MEMORY_MAP12_Pos (1UL) /*!< Position of MEMORY_MAP12 field. */
#define CC_PKA_MEMORY_MAP12_MEMORY_MAP12_Msk (0x3FFUL << CC_PKA_MEMORY_MAP12_MEMORY_MAP12_Pos) /*!< Bit mask of MEMORY_MAP12 field. */

/* Register: CC_PKA_MEMORY_MAP13 */
/* Description: This register maps the virtual register r13 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r13 register to. */
#define CC_PKA_MEMORY_MAP13_MEMORY_MAP13_Pos (1UL) /*!< Position of MEMORY_MAP13 field. */
#define CC_PKA_MEMORY_MAP13_MEMORY_MAP13_Msk (0x3FFUL << CC_PKA_MEMORY_MAP13_MEMORY_MAP13_Pos) /*!< Bit mask of MEMORY_MAP13 field. */

/* Register: CC_PKA_MEMORY_MAP14 */
/* Description: This register maps the virtual register r14 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r14 register to. */
#define CC_PKA_MEMORY_MAP14_MEMORY_MAP14_Pos (1UL) /*!< Position of MEMORY_MAP14 field. */
#define CC_PKA_MEMORY_MAP14_MEMORY_MAP14_Msk (0x3FFUL << CC_PKA_MEMORY_MAP14_MEMORY_MAP14_Pos) /*!< Bit mask of MEMORY_MAP14 field. */

/* Register: CC_PKA_MEMORY_MAP15 */
/* Description: This register maps the virtual register r15 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r15 register to. */
#define CC_PKA_MEMORY_MAP15_MEMORY_MAP15_Pos (1UL) /*!< Position of MEMORY_MAP15 field. */
#define CC_PKA_MEMORY_MAP15_MEMORY_MAP15_Msk (0x3FFUL << CC_PKA_MEMORY_MAP15_MEMORY_MAP15_Pos) /*!< Bit mask of MEMORY_MAP15 field. */

/* Register: CC_PKA_MEMORY_MAP16 */
/* Description: This register maps the virtual register r16 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r16 register to. */
#define CC_PKA_MEMORY_MAP16_MEMORY_MAP16_Pos (1UL) /*!< Position of MEMORY_MAP16 field. */
#define CC_PKA_MEMORY_MAP16_MEMORY_MAP16_Msk (0x3FFUL << CC_PKA_MEMORY_MAP16_MEMORY_MAP16_Pos) /*!< Bit mask of MEMORY_MAP16 field. */

/* Register: CC_PKA_MEMORY_MAP17 */
/* Description: This register maps the virtual register r17 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r17 register to. */
#define CC_PKA_MEMORY_MAP17_MEMORY_MAP17_Pos (1UL) /*!< Position of MEMORY_MAP17 field. */
#define CC_PKA_MEMORY_MAP17_MEMORY_MAP17_Msk (0x3FFUL << CC_PKA_MEMORY_MAP17_MEMORY_MAP17_Pos) /*!< Bit mask of MEMORY_MAP17 field. */

/* Register: CC_PKA_MEMORY_MAP18 */
/* Description: This register maps the virtual register r18 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r18 register to. */
#define CC_PKA_MEMORY_MAP18_MEMORY_MAP18_Pos (1UL) /*!< Position of MEMORY_MAP18 field. */
#define CC_PKA_MEMORY_MAP18_MEMORY_MAP18_Msk (0x3FFUL << CC_PKA_MEMORY_MAP18_MEMORY_MAP18_Pos) /*!< Bit mask of MEMORY_MAP18 field. */

/* Register: CC_PKA_MEMORY_MAP19 */
/* Description: This register maps the virtual register r19 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r19 register to. */
#define CC_PKA_MEMORY_MAP19_MEMORY_MAP19_Pos (1UL) /*!< Position of MEMORY_MAP19 field. */
#define CC_PKA_MEMORY_MAP19_MEMORY_MAP19_Msk (0x3FFUL << CC_PKA_MEMORY_MAP19_MEMORY_MAP19_Pos) /*!< Bit mask of MEMORY_MAP19 field. */

/* Register: CC_PKA_MEMORY_MAP20 */
/* Description: This register maps the virtual register r20 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r20 register to. */
#define CC_PKA_MEMORY_MAP20_MEMORY_MAP20_Pos (1UL) /*!< Position of MEMORY_MAP20 field. */
#define CC_PKA_MEMORY_MAP20_MEMORY_MAP20_Msk (0x3FFUL << CC_PKA_MEMORY_MAP20_MEMORY_MAP20_Pos) /*!< Bit mask of MEMORY_MAP20 field. */

/* Register: CC_PKA_MEMORY_MAP21 */
/* Description: This register maps the virtual register r21 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r21 register to. */
#define CC_PKA_MEMORY_MAP21_MEMORY_MAP21_Pos (1UL) /*!< Position of MEMORY_MAP21 field. */
#define CC_PKA_MEMORY_MAP21_MEMORY_MAP21_Msk (0x3FFUL << CC_PKA_MEMORY_MAP21_MEMORY_MAP21_Pos) /*!< Bit mask of MEMORY_MAP21 field. */

/* Register: CC_PKA_MEMORY_MAP22 */
/* Description: This register maps the virtual register r22 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r22 register to. */
#define CC_PKA_MEMORY_MAP22_MEMORY_MAP22_Pos (1UL) /*!< Position of MEMORY_MAP22 field. */
#define CC_PKA_MEMORY_MAP22_MEMORY_MAP22_Msk (0x3FFUL << CC_PKA_MEMORY_MAP22_MEMORY_MAP22_Pos) /*!< Bit mask of MEMORY_MAP22 field. */

/* Register: CC_PKA_MEMORY_MAP23 */
/* Description: This register maps the virtual register r23 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r23 register to. */
#define CC_PKA_MEMORY_MAP23_MEMORY_MAP23_Pos (1UL) /*!< Position of MEMORY_MAP23 field. */
#define CC_PKA_MEMORY_MAP23_MEMORY_MAP23_Msk (0x3FFUL << CC_PKA_MEMORY_MAP23_MEMORY_MAP23_Pos) /*!< Bit mask of MEMORY_MAP23 field. */

/* Register: CC_PKA_MEMORY_MAP24 */
/* Description: This register maps the virtual register r24 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r24 register to. */
#define CC_PKA_MEMORY_MAP24_MEMORY_MAP24_Pos (1UL) /*!< Position of MEMORY_MAP24 field. */
#define CC_PKA_MEMORY_MAP24_MEMORY_MAP24_Msk (0x3FFUL << CC_PKA_MEMORY_MAP24_MEMORY_MAP24_Pos) /*!< Bit mask of MEMORY_MAP24 field. */

/* Register: CC_PKA_MEMORY_MAP25 */
/* Description: This register maps the virtual register r25 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r25 register to. */
#define CC_PKA_MEMORY_MAP25_MEMORY_MAP25_Pos (1UL) /*!< Position of MEMORY_MAP25 field. */
#define CC_PKA_MEMORY_MAP25_MEMORY_MAP25_Msk (0x3FFUL << CC_PKA_MEMORY_MAP25_MEMORY_MAP25_Pos) /*!< Bit mask of MEMORY_MAP25 field. */

/* Register: CC_PKA_MEMORY_MAP26 */
/* Description: This register maps the virtual register r26 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r26 register to. */
#define CC_PKA_MEMORY_MAP26_MEMORY_MAP26_Pos (1UL) /*!< Position of MEMORY_MAP26 field. */
#define CC_PKA_MEMORY_MAP26_MEMORY_MAP26_Msk (0x3FFUL << CC_PKA_MEMORY_MAP26_MEMORY_MAP26_Pos) /*!< Bit mask of MEMORY_MAP26 field. */

/* Register: CC_PKA_MEMORY_MAP27 */
/* Description: This register maps the virtual register r27 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r27 register to. */
#define CC_PKA_MEMORY_MAP27_MEMORY_MAP27_Pos (1UL) /*!< Position of MEMORY_MAP27 field. */
#define CC_PKA_MEMORY_MAP27_MEMORY_MAP27_Msk (0x3FFUL << CC_PKA_MEMORY_MAP27_MEMORY_MAP27_Pos) /*!< Bit mask of MEMORY_MAP27 field. */

/* Register: CC_PKA_MEMORY_MAP28 */
/* Description: This register maps the virtual register r28 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r28 register to. */
#define CC_PKA_MEMORY_MAP28_MEMORY_MAP28_Pos (1UL) /*!< Position of MEMORY_MAP28 field. */
#define CC_PKA_MEMORY_MAP28_MEMORY_MAP28_Msk (0x3FFUL << CC_PKA_MEMORY_MAP28_MEMORY_MAP28_Pos) /*!< Bit mask of MEMORY_MAP28 field. */

/* Register: CC_PKA_MEMORY_MAP29 */
/* Description: This register maps the virtual register r29 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r29 register to. */
#define CC_PKA_MEMORY_MAP29_MEMORY_MAP29_Pos (1UL) /*!< Position of MEMORY_MAP29 field. */
#define CC_PKA_MEMORY_MAP29_MEMORY_MAP29_Msk (0x3FFUL << CC_PKA_MEMORY_MAP29_MEMORY_MAP29_Pos) /*!< Bit mask of MEMORY_MAP29 field. */

/* Register: CC_PKA_MEMORY_MAP30 */
/* Description: This register maps the virtual register r30 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r30 register to. */
#define CC_PKA_MEMORY_MAP30_MEMORY_MAP30_Pos (1UL) /*!< Position of MEMORY_MAP30 field. */
#define CC_PKA_MEMORY_MAP30_MEMORY_MAP30_Msk (0x3FFUL << CC_PKA_MEMORY_MAP30_MEMORY_MAP30_Pos) /*!< Bit mask of MEMORY_MAP30 field. */

/* Register: CC_PKA_MEMORY_MAP31 */
/* Description: This register maps the virtual register r31 to a physical address in memory. */

/* Bits 10..1 : Contains the physical address in memory to map the r31 register to. */
#define CC_PKA_MEMORY_MAP31_MEMORY_MAP31_Pos (1UL) /*!< Position of MEMORY_MAP31 field. */
#define CC_PKA_MEMORY_MAP31_MEMORY_MAP31_Msk (0x3FFUL << CC_PKA_MEMORY_MAP31_MEMORY_MAP31_Pos) /*!< Bit mask of MEMORY_MAP31 field. */

/* Register: CC_PKA_OPCODE */
/* Description: This register holds the PKA opcode. */

/* Bits 31..27 : Defines the PKA operation */
#define CC_PKA_OPCODE_OPCODE_Pos (27UL) /*!< Position of OPCODE field. */
#define CC_PKA_OPCODE_OPCODE_Msk (0x1FUL << CC_PKA_OPCODE_OPCODE_Pos) /*!< Bit mask of OPCODE field. */
#define CC_PKA_OPCODE_OPCODE_Terminate (0x0UL) /*!< Terminate operation */
#define CC_PKA_OPCODE_OPCODE_Add_Inc (0x4UL) /*!< Add or increment operation */
#define CC_PKA_OPCODE_OPCODE_Sub_Dec_Neg (0x5UL) /*!< Subtract, decrement, or negate operation */
#define CC_PKA_OPCODE_OPCODE_ModAdd_ModInc (0x6UL) /*!< Modular add or increment operation */
#define CC_PKA_OPCODE_OPCODE_ModSub_ModDec_ModNeg (0x7UL) /*!< Modular subtract, decrement, or negate operation */
#define CC_PKA_OPCODE_OPCODE_AND_TST0_CLR0 (0x8UL) /*!< Boolean AND, TST0, or CLR0 operation */
#define CC_PKA_OPCODE_OPCODE_OR_COPY_SET0 (0x9UL) /*!< Boolean OR, COPY, or SET0 operation */
#define CC_PKA_OPCODE_OPCODE_XOR_FLIP0_INVERT_COMPARE (0xAUL) /*!< Boolean XOR, FLIP0, INVERT or COMPARE operation */
#define CC_PKA_OPCODE_OPCODE_SHR0 (0xCUL) /*!< Shift right 0 operation */
#define CC_PKA_OPCODE_OPCODE_SHR1 (0xDUL) /*!< Shift right 1 operation */
#define CC_PKA_OPCODE_OPCODE_SHL0 (0xEUL) /*!< Shift left 0 operation */
#define CC_PKA_OPCODE_OPCODE_SHL1 (0xFUL) /*!< Shift left 1 operation */
#define CC_PKA_OPCODE_OPCODE_MulLow (0x10UL) /*!< Multiply low operation */
#define CC_PKA_OPCODE_OPCODE_ModMul (0x11UL) /*!< Modular multiply operation */
#define CC_PKA_OPCODE_OPCODE_ModMulN (0x12UL) /*!< Modular multiply N operation */
#define CC_PKA_OPCODE_OPCODE_ModExp (0x13UL) /*!< Modular exponentiation operation */
#define CC_PKA_OPCODE_OPCODE_Division (0x14UL) /*!< Division operation */
#define CC_PKA_OPCODE_OPCODE_Div (0x15UL) /*!< Div operation */
#define CC_PKA_OPCODE_OPCODE_ModDiv (0x16UL) /*!< Modular division operation */

/* Bits 26..24 : The length of the operation. The value serves as a pointer to PKA length register, for example, if the value is 0, PKA_L0 holds the size of the operation. */
#define CC_PKA_OPCODE_LEN_Pos (24UL) /*!< Position of LEN field. */
#define CC_PKA_OPCODE_LEN_Msk (0x7UL << CC_PKA_OPCODE_LEN_Pos) /*!< Bit mask of LEN field. */

/* Bits 23..18 : Operand A virtual address 0-15. */
#define CC_PKA_OPCODE_REG_A_Pos (18UL) /*!< Position of REG_A field. */
#define CC_PKA_OPCODE_REG_A_Msk (0x3FUL << CC_PKA_OPCODE_REG_A_Pos) /*!< Bit mask of REG_A field. */

/* Bits 17..12 : Operand B virtual address 0-15. */
#define CC_PKA_OPCODE_REG_B_Pos (12UL) /*!< Position of REG_B field. */
#define CC_PKA_OPCODE_REG_B_Msk (0x3FUL << CC_PKA_OPCODE_REG_B_Pos) /*!< Bit mask of REG_B field. */

/* Bits 11..6 : Result register virtual address 0-15. */
#define CC_PKA_OPCODE_REG_R_Pos (6UL) /*!< Position of REG_R field. */
#define CC_PKA_OPCODE_REG_R_Msk (0x3FUL << CC_PKA_OPCODE_REG_R_Pos) /*!< Bit mask of REG_R field. */

/* Bits 5..0 : Holds the opreation's tag or the operand C virtual address. */
#define CC_PKA_OPCODE_TAG_Pos (0UL) /*!< Position of TAG field. */
#define CC_PKA_OPCODE_TAG_Msk (0x3FUL << CC_PKA_OPCODE_TAG_Pos) /*!< Bit mask of TAG field. */

/* Register: CC_PKA_N_NP_T0_T1_ADDR */
/* Description: This register maps n_np_t0_t1 to a virtual address. */

/* Bits 19..15 : Virtual address of temporary register number 1 */
#define CC_PKA_N_NP_T0_T1_ADDR_T1_VIRTUAL_ADDR_Pos (15UL) /*!< Position of T1_VIRTUAL_ADDR field. */
#define CC_PKA_N_NP_T0_T1_ADDR_T1_VIRTUAL_ADDR_Msk (0x1FUL << CC_PKA_N_NP_T0_T1_ADDR_T1_VIRTUAL_ADDR_Pos) /*!< Bit mask of T1_VIRTUAL_ADDR field. */

/* Bits 14..10 : Virtual address of temporary register number 0 */
#define CC_PKA_N_NP_T0_T1_ADDR_T0_VIRTUAL_ADDR_Pos (10UL) /*!< Position of T0_VIRTUAL_ADDR field. */
#define CC_PKA_N_NP_T0_T1_ADDR_T0_VIRTUAL_ADDR_Msk (0x1FUL << CC_PKA_N_NP_T0_T1_ADDR_T0_VIRTUAL_ADDR_Pos) /*!< Bit mask of T0_VIRTUAL_ADDR field. */

/* Bits 9..5 : Virtual address of register NP. */
#define CC_PKA_N_NP_T0_T1_ADDR_NP_VIRTUAL_ADDR_Pos (5UL) /*!< Position of NP_VIRTUAL_ADDR field. */
#define CC_PKA_N_NP_T0_T1_ADDR_NP_VIRTUAL_ADDR_Msk (0x1FUL << CC_PKA_N_NP_T0_T1_ADDR_NP_VIRTUAL_ADDR_Pos) /*!< Bit mask of NP_VIRTUAL_ADDR field. */

/* Bits 4..0 : Virtual address of register N. */
#define CC_PKA_N_NP_T0_T1_ADDR_N_VIRTUAL_ADDR_Pos (0UL) /*!< Position of N_VIRTUAL_ADDR field. */
#define CC_PKA_N_NP_T0_T1_ADDR_N_VIRTUAL_ADDR_Msk (0x1FUL << CC_PKA_N_NP_T0_T1_ADDR_N_VIRTUAL_ADDR_Pos) /*!< Bit mask of N_VIRTUAL_ADDR field. */

/* Register: CC_PKA_PKA_STATUS */
/* Description: This register holds the pka pipe status. */

/* Bits 20..16 : Opcode of the last operation */
#define CC_PKA_PKA_STATUS_OPCODE_Pos (16UL) /*!< Position of OPCODE field. */
#define CC_PKA_PKA_STATUS_OPCODE_Msk (0x1FUL << CC_PKA_PKA_STATUS_OPCODE_Pos) /*!< Bit mask of OPCODE field. */

/* Bit 15 : Indicates the modular inverse of zero. */
#define CC_PKA_PKA_STATUS_MODINV_OF_ZERO_Pos (15UL) /*!< Position of MODINV_OF_ZERO field. */
#define CC_PKA_PKA_STATUS_MODINV_OF_ZERO_Msk (0x1UL << CC_PKA_PKA_STATUS_MODINV_OF_ZERO_Pos) /*!< Bit mask of MODINV_OF_ZERO field. */

/* Bit 14 : Indication if the division is done by zero. */
#define CC_PKA_PKA_STATUS_DIV_BY_ZERO_Pos (14UL) /*!< Position of DIV_BY_ZERO field. */
#define CC_PKA_PKA_STATUS_DIV_BY_ZERO_Msk (0x1UL << CC_PKA_PKA_STATUS_DIV_BY_ZERO_Pos) /*!< Bit mask of DIV_BY_ZERO field. */

/* Bit 13 : Modular overflow flag. */
#define CC_PKA_PKA_STATUS_ALU_MODOVRFLW_Pos (13UL) /*!< Position of ALU_MODOVRFLW field. */
#define CC_PKA_PKA_STATUS_ALU_MODOVRFLW_Msk (0x1UL << CC_PKA_PKA_STATUS_ALU_MODOVRFLW_Pos) /*!< Bit mask of ALU_MODOVRFLW field. */

/* Bit 12 : Indicates if the result of ALU OUT is zero. */
#define CC_PKA_PKA_STATUS_ALU_OUT_ZERO_Pos (12UL) /*!< Position of ALU_OUT_ZERO field. */
#define CC_PKA_PKA_STATUS_ALU_OUT_ZERO_Msk (0x1UL << CC_PKA_PKA_STATUS_ALU_OUT_ZERO_Pos) /*!< Bit mask of ALU_OUT_ZERO field. */

/* Bit 11 : Indicates the last subtraction operation's sign. */
#define CC_PKA_PKA_STATUS_ALU_SUB_IS_ZERO_Pos (11UL) /*!< Position of ALU_SUB_IS_ZERO field. */
#define CC_PKA_PKA_STATUS_ALU_SUB_IS_ZERO_Msk (0x1UL << CC_PKA_PKA_STATUS_ALU_SUB_IS_ZERO_Pos) /*!< Bit mask of ALU_SUB_IS_ZERO field. */

/* Bit 10 : Holds the carry of the last modular operation. */
#define CC_PKA_PKA_STATUS_ALU_CARRY_MOD_Pos (10UL) /*!< Position of ALU_CARRY_MOD field. */
#define CC_PKA_PKA_STATUS_ALU_CARRY_MOD_Msk (0x1UL << CC_PKA_PKA_STATUS_ALU_CARRY_MOD_Pos) /*!< Bit mask of ALU_CARRY_MOD field. */

/* Bit 9 : Holds the carry of the last ALU operation. */
#define CC_PKA_PKA_STATUS_ALU_CARRY_Pos (9UL) /*!< Position of ALU_CARRY field. */
#define CC_PKA_PKA_STATUS_ALU_CARRY_Msk (0x1UL << CC_PKA_PKA_STATUS_ALU_CARRY_Pos) /*!< Bit mask of ALU_CARRY field. */

/* Bit 8 : Indicates the last operation's sign (MSB). */
#define CC_PKA_PKA_STATUS_ALU_SIGN_OUT_Pos (8UL) /*!< Position of ALU_SIGN_OUT field. */
#define CC_PKA_PKA_STATUS_ALU_SIGN_OUT_Msk (0x1UL << CC_PKA_PKA_STATUS_ALU_SIGN_OUT_Pos) /*!< Bit mask of ALU_SIGN_OUT field. */

/* Bits 7..4 : The least significant 4-bits of the operand updated in shift operation. */
#define CC_PKA_PKA_STATUS_ALU_LSB_4BITS_Pos (4UL) /*!< Position of ALU_LSB_4BITS field. */
#define CC_PKA_PKA_STATUS_ALU_LSB_4BITS_Msk (0xFUL << CC_PKA_PKA_STATUS_ALU_LSB_4BITS_Pos) /*!< Bit mask of ALU_LSB_4BITS field. */

/* Bits 3..0 : The most significant 4-bits of the operand updated in shift operation. */
#define CC_PKA_PKA_STATUS_ALU_MSB_4BITS_Pos (0UL) /*!< Position of ALU_MSB_4BITS field. */
#define CC_PKA_PKA_STATUS_ALU_MSB_4BITS_Msk (0xFUL << CC_PKA_PKA_STATUS_ALU_MSB_4BITS_Pos) /*!< Bit mask of ALU_MSB_4BITS field. */

/* Register: CC_PKA_PKA_SW_RESET */
/* Description: Writing to this register triggers a software reset of the pka. */

/* Bit 0 : The reset mechanism takes about four PKA clock cycles until the reset line is deasserted */
#define CC_PKA_PKA_SW_RESET_PKA_SW_RESET_Pos (0UL) /*!< Position of PKA_SW_RESET field. */
#define CC_PKA_PKA_SW_RESET_PKA_SW_RESET_Msk (0x1UL << CC_PKA_PKA_SW_RESET_PKA_SW_RESET_Pos) /*!< Bit mask of PKA_SW_RESET field. */

/* Register: CC_PKA_PKA_L0 */
/* Description: This register holds the size of the operation. */

/* Bits 12..0 : Size of the operation in bits. */
#define CC_PKA_PKA_L0_PKA_L0_Pos (0UL) /*!< Position of PKA_L0 field. */
#define CC_PKA_PKA_L0_PKA_L0_Msk (0x1FFFUL << CC_PKA_PKA_L0_PKA_L0_Pos) /*!< Bit mask of PKA_L0 field. */

/* Register: CC_PKA_PKA_L1 */
/* Description: This register holds the size of the operation. */

/* Bits 12..0 : Size of the operation in bits. */
#define CC_PKA_PKA_L1_PKA_L1_Pos (0UL) /*!< Position of PKA_L1 field. */
#define CC_PKA_PKA_L1_PKA_L1_Msk (0x1FFFUL << CC_PKA_PKA_L1_PKA_L1_Pos) /*!< Bit mask of PKA_L1 field. */

/* Register: CC_PKA_PKA_L2 */
/* Description: This register holds the size of the operation. */

/* Bits 12..0 : Size of the operation in bits. */
#define CC_PKA_PKA_L2_PKA_L2_Pos (0UL) /*!< Position of PKA_L2 field. */
#define CC_PKA_PKA_L2_PKA_L2_Msk (0x1FFFUL << CC_PKA_PKA_L2_PKA_L2_Pos) /*!< Bit mask of PKA_L2 field. */

/* Register: CC_PKA_PKA_L3 */
/* Description: This register holds the size of the operation. */

/* Bits 12..0 : Size of the operation in bits. */
#define CC_PKA_PKA_L3_PKA_L3_Pos (0UL) /*!< Position of PKA_L3 field. */
#define CC_PKA_PKA_L3_PKA_L3_Msk (0x1FFFUL << CC_PKA_PKA_L3_PKA_L3_Pos) /*!< Bit mask of PKA_L3 field. */

/* Register: CC_PKA_PKA_L4 */
/* Description: This register holds the size of the operation. */

/* Bits 12..0 : Size of the operation in bits. */
#define CC_PKA_PKA_L4_PKA_L4_Pos (0UL) /*!< Position of PKA_L4 field. */
#define CC_PKA_PKA_L4_PKA_L4_Msk (0x1FFFUL << CC_PKA_PKA_L4_PKA_L4_Pos) /*!< Bit mask of PKA_L4 field. */

/* Register: CC_PKA_PKA_L5 */
/* Description: This register holds the size of the operation. */

/* Bits 12..0 : Size of the operation in bits. */
#define CC_PKA_PKA_L5_PKA_L5_Pos (0UL) /*!< Position of PKA_L5 field. */
#define CC_PKA_PKA_L5_PKA_L5_Msk (0x1FFFUL << CC_PKA_PKA_L5_PKA_L5_Pos) /*!< Bit mask of PKA_L5 field. */

/* Register: CC_PKA_PKA_L6 */
/* Description: This register holds the size of the operation. */

/* Bits 12..0 : Size of the operation in bits. */
#define CC_PKA_PKA_L6_PKA_L6_Pos (0UL) /*!< Position of PKA_L6 field. */
#define CC_PKA_PKA_L6_PKA_L6_Msk (0x1FFFUL << CC_PKA_PKA_L6_PKA_L6_Pos) /*!< Bit mask of PKA_L6 field. */

/* Register: CC_PKA_PKA_L7 */
/* Description: This register holds the size of the operation. */

/* Bits 12..0 : Size of the operation in bits. */
#define CC_PKA_PKA_L7_PKA_L7_Pos (0UL) /*!< Position of PKA_L7 field. */
#define CC_PKA_PKA_L7_PKA_L7_Msk (0x1FFFUL << CC_PKA_PKA_L7_PKA_L7_Pos) /*!< Bit mask of PKA_L7 field. */

/* Register: CC_PKA_PKA_PIPE_RDY */
/* Description: This register indicates whether the PKA pipe is ready to receive a new OPCODE. */

/* Bit 0 : Indication whether PKA pipe is ready for new OPCODE. */
#define CC_PKA_PKA_PIPE_RDY_PKA_PIPE_RDY_Pos (0UL) /*!< Position of PKA_PIPE_RDY field. */
#define CC_PKA_PKA_PIPE_RDY_PKA_PIPE_RDY_Msk (0x1UL << CC_PKA_PKA_PIPE_RDY_PKA_PIPE_RDY_Pos) /*!< Bit mask of PKA_PIPE_RDY field. */

/* Register: CC_PKA_PKA_DONE */
/* Description: This register indicates whether PKA operation is completed. */

/* Bit 0 : Indicates if PKA operation is completed, and pipe is empty. */
#define CC_PKA_PKA_DONE_PKA_DONE_Pos (0UL) /*!< Position of PKA_DONE field. */
#define CC_PKA_PKA_DONE_PKA_DONE_Msk (0x1UL << CC_PKA_PKA_DONE_PKA_DONE_Pos) /*!< Bit mask of PKA_DONE field. */

/* Register: CC_PKA_PKA_MON_SELECT */
/* Description: This register defines which PKA FSM monitor is being output. */

/* Bits 3..0 : Defines which PKA FSM monitor is being output. */
#define CC_PKA_PKA_MON_SELECT_PKA_MON_SELECT_Pos (0UL) /*!< Position of PKA_MON_SELECT field. */
#define CC_PKA_PKA_MON_SELECT_PKA_MON_SELECT_Msk (0xFUL << CC_PKA_PKA_MON_SELECT_PKA_MON_SELECT_Pos) /*!< Bit mask of PKA_MON_SELECT field. */

/* Register: CC_PKA_PKA_VERSION */
/* Description: This register holds the PKA version */

/* Bits 31..0 : This is the PKA version */
#define CC_PKA_PKA_VERSION_PKA_VERSION_Pos (0UL) /*!< Position of PKA_VERSION field. */
#define CC_PKA_PKA_VERSION_PKA_VERSION_Msk (0xFFFFFFFFUL << CC_PKA_PKA_VERSION_PKA_VERSION_Pos) /*!< Bit mask of PKA_VERSION field. */

/* Register: CC_PKA_PKA_MON_READ */
/* Description: The PKA monitor bus register. */

/* Bits 31..0 : This is the PKA monitor bus register output */
#define CC_PKA_PKA_MON_READ_PKA_MON_READ_Pos (0UL) /*!< Position of PKA_MON_READ field. */
#define CC_PKA_PKA_MON_READ_PKA_MON_READ_Msk (0xFFFFFFFFUL << CC_PKA_PKA_MON_READ_PKA_MON_READ_Pos) /*!< Bit mask of PKA_MON_READ field. */

/* Register: CC_PKA_PKA_SRAM_ADDR */
/* Description: First address given to PKA SRAM for write transactions. */

/* Bits 31..0 : PKA SRAM write starting address */
#define CC_PKA_PKA_SRAM_ADDR_PKA_SRAM_ADDR_Pos (0UL) /*!< Position of PKA_SRAM_ADDR field. */
#define CC_PKA_PKA_SRAM_ADDR_PKA_SRAM_ADDR_Msk (0xFFFFFFFFUL << CC_PKA_PKA_SRAM_ADDR_PKA_SRAM_ADDR_Pos) /*!< Bit mask of PKA_SRAM_ADDR field. */

/* Register: CC_PKA_PKA_SRAM_WDATA */
/* Description: Write data to PKA SRAM. */

/* Bits 31..0 : 32 bit write to PKA SRAM: A write triggers the SRAM write DMA address to be automatically incremented */
#define CC_PKA_PKA_SRAM_WDATA_PKA_SRAM_WDATA_Pos (0UL) /*!< Position of PKA_SRAM_WDATA field. */
#define CC_PKA_PKA_SRAM_WDATA_PKA_SRAM_WDATA_Msk (0xFFFFFFFFUL << CC_PKA_PKA_SRAM_WDATA_PKA_SRAM_WDATA_Pos) /*!< Bit mask of PKA_SRAM_WDATA field. */

/* Register: CC_PKA_PKA_SRAM_RDATA */
/* Description: Read data from PKA SRAM. */

/* Bits 31..0 : 32 bit read from PKA SRAM: A read triggers the SRAM read DMA address to be automatically incremented */
#define CC_PKA_PKA_SRAM_RDATA_PKA_SRAM_RDATA_Pos (0UL) /*!< Position of PKA_SRAM_RDATA field. */
#define CC_PKA_PKA_SRAM_RDATA_PKA_SRAM_RDATA_Msk (0xFFFFFFFFUL << CC_PKA_PKA_SRAM_RDATA_PKA_SRAM_RDATA_Pos) /*!< Bit mask of PKA_SRAM_RDATA field. */

/* Register: CC_PKA_PKA_SRAM_WR_CLR */
/* Description: Write buffer clean. */

/* Bits 31..0 : Clear the write buffer. */
#define CC_PKA_PKA_SRAM_WR_CLR_PKA_SRAM_WR_CLR_Pos (0UL) /*!< Position of PKA_SRAM_WR_CLR field. */
#define CC_PKA_PKA_SRAM_WR_CLR_PKA_SRAM_WR_CLR_Msk (0xFFFFFFFFUL << CC_PKA_PKA_SRAM_WR_CLR_PKA_SRAM_WR_CLR_Pos) /*!< Bit mask of PKA_SRAM_WR_CLR field. */

/* Register: CC_PKA_PKA_SRAM_RADDR */
/* Description: First address given to PKA SRAM for read transactions. */

/* Bits 31..0 : PKA SRAM read starting address */
#define CC_PKA_PKA_SRAM_RADDR_PKA_SRAM_RADDR_Pos (0UL) /*!< Position of PKA_SRAM_RADDR field. */
#define CC_PKA_PKA_SRAM_RADDR_PKA_SRAM_RADDR_Msk (0xFFFFFFFFUL << CC_PKA_PKA_SRAM_RADDR_PKA_SRAM_RADDR_Pos) /*!< Bit mask of PKA_SRAM_RADDR field. */

/* Register: CC_PKA_PKA_WORD_ACCESS */
/* Description: This register holds data to write to or read from the PKA when using special read or write word operation. */

/* Bits 31..0 : 32 bit read/write data. */
#define CC_PKA_PKA_WORD_ACCESS_PKA_WORD_ACCESS_Pos (0UL) /*!< Position of PKA_WORD_ACCESS field. */
#define CC_PKA_PKA_WORD_ACCESS_PKA_WORD_ACCESS_Msk (0xFFFFFFFFUL << CC_PKA_PKA_WORD_ACCESS_PKA_WORD_ACCESS_Pos) /*!< Bit mask of PKA_WORD_ACCESS field. */

/* Register: CC_PKA_PKA_BUFF_ADDR */
/* Description: This register maps the virtual buffer registers to a physical address in memory. */

/* Bits 11..0 : Contains the physical address in memory to map the buffer registers. */
#define CC_PKA_PKA_BUFF_ADDR_PKA_BUF_ADDR_Pos (0UL) /*!< Position of PKA_BUF_ADDR field. */
#define CC_PKA_PKA_BUFF_ADDR_PKA_BUF_ADDR_Msk (0xFFFUL << CC_PKA_PKA_BUFF_ADDR_PKA_BUF_ADDR_Pos) /*!< Bit mask of PKA_BUF_ADDR field. */


/* Peripheral: CC_RNG */
/* Description: CryptoCell RNG */

/* Register: CC_RNG_RNG_IMR */
/* Description: Interrupt masking register.  Consists of PRNG_IMR[31:16] and TRNG_IMR[15:0]. (PRNG bits exists only if PRNG_EXISTS flag is set) */

/* Bit 5 : Masks the RNG DMA completion interrupt. No interrupt is generated. See RNG_ISR for explanation on this interrupt. */
#define CC_RNG_RNG_IMR_RNG_DMA_DONE_INT_Pos (5UL) /*!< Position of RNG_DMA_DONE_INT field. */
#define CC_RNG_RNG_IMR_RNG_DMA_DONE_INT_Msk (0x1UL << CC_RNG_RNG_IMR_RNG_DMA_DONE_INT_Pos) /*!< Bit mask of RNG_DMA_DONE_INT field. */

/* Bit 4 : Masks the watchdog interrupt. No interrupt is generated. See RNG_ISR for explanation on this interrupt. */
#define CC_RNG_RNG_IMR_WATCHDOG_INT_MASK_Pos (4UL) /*!< Position of WATCHDOG_INT_MASK field. */
#define CC_RNG_RNG_IMR_WATCHDOG_INT_MASK_Msk (0x1UL << CC_RNG_RNG_IMR_WATCHDOG_INT_MASK_Pos) /*!< Bit mask of WATCHDOG_INT_MASK field. */

/* Bit 3 : Masks the von-Neumann error interrupt. No interrupt is generated. See RNG_ISR for explanation on this interrupt. */
#define CC_RNG_RNG_IMR_VN_ERR_INT_MASK_Pos (3UL) /*!< Position of VN_ERR_INT_MASK field. */
#define CC_RNG_RNG_IMR_VN_ERR_INT_MASK_Msk (0x1UL << CC_RNG_RNG_IMR_VN_ERR_INT_MASK_Pos) /*!< Bit mask of VN_ERR_INT_MASK field. */

/* Bit 2 : Masks the CRNGT error interrupt. No interrupt is generated. See RNG_ISR for explanation on this interrupt. */
#define CC_RNG_RNG_IMR_CRNGT_ERR_INT_MASK_Pos (2UL) /*!< Position of CRNGT_ERR_INT_MASK field. */
#define CC_RNG_RNG_IMR_CRNGT_ERR_INT_MASK_Msk (0x1UL << CC_RNG_RNG_IMR_CRNGT_ERR_INT_MASK_Pos) /*!< Bit mask of CRNGT_ERR_INT_MASK field. */

/* Bit 1 : Masks the autocorrelation interrupt. No interrupt is generated. See RNG_ISR for explanation on this interrupt. */
#define CC_RNG_RNG_IMR_AUTOCORR_ERR_INT_MASK_Pos (1UL) /*!< Position of AUTOCORR_ERR_INT_MASK field. */
#define CC_RNG_RNG_IMR_AUTOCORR_ERR_INT_MASK_Msk (0x1UL << CC_RNG_RNG_IMR_AUTOCORR_ERR_INT_MASK_Pos) /*!< Bit mask of AUTOCORR_ERR_INT_MASK field. */

/* Bit 0 : Masks the EHR interrupt. No interrupt is generated. See RNG_ISR for explanation on this interrupt. */
#define CC_RNG_RNG_IMR_EHR_VALID_INT_MASK_Pos (0UL) /*!< Position of EHR_VALID_INT_MASK field. */
#define CC_RNG_RNG_IMR_EHR_VALID_INT_MASK_Msk (0x1UL << CC_RNG_RNG_IMR_EHR_VALID_INT_MASK_Pos) /*!< Bit mask of EHR_VALID_INT_MASK field. */

/* Register: CC_RNG_RNG_ISR */
/* Description: Status register. If corresponding RNG_IMR bit is unmasked, an interrupt is generated. Consists of PRNG_ISR[31:16] and TRNG_ISR[15:0]. */

/* Bits 26..25 : When the KAT_ERR bit is set, these bits represent which known answer test has failed */
#define CC_RNG_RNG_ISR_WHICH_KAT_ERR_Pos (25UL) /*!< Position of WHICH_KAT_ERR field. */
#define CC_RNG_RNG_ISR_WHICH_KAT_ERR_Msk (0x3UL << CC_RNG_RNG_ISR_WHICH_KAT_ERR_Pos) /*!< Bit mask of WHICH_KAT_ERR field. */
#define CC_RNG_RNG_ISR_WHICH_KAT_ERR_FirstTest (0UL) /*!< First test of instantiation */
#define CC_RNG_RNG_ISR_WHICH_KAT_ERR_SecondTest (1UL) /*!< Second test of instantiation */
#define CC_RNG_RNG_ISR_WHICH_KAT_ERR_FirstReseed (2UL) /*!< First test of reseeding */
#define CC_RNG_RNG_ISR_WHICH_KAT_ERR_SecondReseed (3UL) /*!< Second test of reseeding */

/* Bit 24 : Asserted if one of the KAT (known answer tests) tests has failed. Once set the RNG engine ceases to function. */
#define CC_RNG_RNG_ISR_KAT_ERR_Pos (24UL) /*!< Position of KAT_ERR field. */
#define CC_RNG_RNG_ISR_KAT_ERR_Msk (0x1UL << CC_RNG_RNG_ISR_KAT_ERR_Pos) /*!< Bit mask of KAT_ERR field. */

/* Bit 23 : Asserted once the request size counter (which represents how many generations of random bits in the PRNG have been produced) has reached 2^12, thus requiring a working state update before generating new random numbers. */
#define CC_RNG_RNG_ISR_REQ_SIZE_Pos (23UL) /*!< Position of REQ_SIZE field. */
#define CC_RNG_RNG_ISR_REQ_SIZE_Msk (0x1UL << CC_RNG_RNG_ISR_REQ_SIZE_Pos) /*!< Bit mask of REQ_SIZE field. */

/* Bit 22 : Asserted if CRNGT in the PRNG test failed. Failure occurs when two consecutive results of AES are equal */
#define CC_RNG_RNG_ISR_PRNG_CRNGT_ERR_Pos (22UL) /*!< Position of PRNG_CRNGT_ERR field. */
#define CC_RNG_RNG_ISR_PRNG_CRNGT_ERR_Msk (0x1UL << CC_RNG_RNG_ISR_PRNG_CRNGT_ERR_Pos) /*!< Bit mask of PRNG_CRNGT_ERR field. */

/* Bit 21 : Asserted if the top 40 bits of the reseed counter are set (that is the reseed counter is larger than 2^48-2^8). This is a recommendation for running the reseed algorithm before the counter reaches its max value. */
#define CC_RNG_RNG_ISR_RESEED_CNTR_TOP_40_Pos (21UL) /*!< Position of RESEED_CNTR_TOP_40 field. */
#define CC_RNG_RNG_ISR_RESEED_CNTR_TOP_40_Msk (0x1UL << CC_RNG_RNG_ISR_RESEED_CNTR_TOP_40_Pos) /*!< Bit mask of RESEED_CNTR_TOP_40 field. */

/* Bit 20 : Asserted once reseed counter has reached 2^48, requiring to run the reseed algorithm before generating new random numbers. */
#define CC_RNG_RNG_ISR_RESEED_CNTR_FULL_Pos (20UL) /*!< Position of RESEED_CNTR_FULL field. */
#define CC_RNG_RNG_ISR_RESEED_CNTR_FULL_Msk (0x1UL << CC_RNG_RNG_ISR_RESEED_CNTR_FULL_Pos) /*!< Bit mask of RESEED_CNTR_FULL field. */

/* Bit 19 : Asserted when the result of PRNG is valid and ready to be read. The result can be read from the RNG_READOUT register. */
#define CC_RNG_RNG_ISR_OUTPUT_READY_Pos (19UL) /*!< Position of OUTPUT_READY field. */
#define CC_RNG_RNG_ISR_OUTPUT_READY_Msk (0x1UL << CC_RNG_RNG_ISR_OUTPUT_READY_Pos) /*!< Bit mask of OUTPUT_READY field. */

/* Bit 18 : Asserted when completion of final update algorithm. */
#define CC_RNG_RNG_ISR_FINAL_UPDATE_DONE_Pos (18UL) /*!< Position of FINAL_UPDATE_DONE field. */
#define CC_RNG_RNG_ISR_FINAL_UPDATE_DONE_Msk (0x1UL << CC_RNG_RNG_ISR_FINAL_UPDATE_DONE_Pos) /*!< Bit mask of FINAL_UPDATE_DONE field. */

/* Bit 17 : Asserted when completion of instantiation algorithm with no errors. */
#define CC_RNG_RNG_ISR_INSTANTIATION_DONE_Pos (17UL) /*!< Position of INSTANTIATION_DONE field. */
#define CC_RNG_RNG_ISR_INSTANTIATION_DONE_Msk (0x1UL << CC_RNG_RNG_ISR_INSTANTIATION_DONE_Pos) /*!< Bit mask of INSTANTIATION_DONE field. */

/* Bit 16 : Asserted when completion of reseeding algorithm with no errors. */
#define CC_RNG_RNG_ISR_RESEEDING_DONE_Pos (16UL) /*!< Position of RESEEDING_DONE field. */
#define CC_RNG_RNG_ISR_RESEEDING_DONE_Msk (0x1UL << CC_RNG_RNG_ISR_RESEEDING_DONE_Pos) /*!< Bit mask of RESEEDING_DONE field. */

/* Bit 5 : Asserted when RNG DMA to SRAM is completed. */
#define CC_RNG_RNG_ISR_RNG_DMA_DONE_Pos (5UL) /*!< Position of RNG_DMA_DONE field. */
#define CC_RNG_RNG_ISR_RNG_DMA_DONE_Msk (0x1UL << CC_RNG_RNG_ISR_RNG_DMA_DONE_Pos) /*!< Bit mask of RNG_DMA_DONE field. */

/* Bit 3 : Asserted on von-Neumann error where 32 consecutive collected bits are identical, zero, or one. */
#define CC_RNG_RNG_ISR_VN_ERR_Pos (3UL) /*!< Position of VN_ERR field. */
#define CC_RNG_RNG_ISR_VN_ERR_Msk (0x1UL << CC_RNG_RNG_ISR_VN_ERR_Pos) /*!< Bit mask of VN_ERR field. */

/* Bit 2 : Asserted if CRNGT in the TRNG test failed where two consecutive blocks of 16 collected bits are equal. */
#define CC_RNG_RNG_ISR_CRNGT_ERR_Pos (2UL) /*!< Position of CRNGT_ERR field. */
#define CC_RNG_RNG_ISR_CRNGT_ERR_Msk (0x1UL << CC_RNG_RNG_ISR_CRNGT_ERR_Pos) /*!< Bit mask of CRNGT_ERR field. */

/* Bit 1 : Asserted if autocorrelation test failed four times in a row. Once set the TRNG ceases to function until next reset. */
#define CC_RNG_RNG_ISR_AUTOCORR_ERR_Pos (1UL) /*!< Position of AUTOCORR_ERR field. */
#define CC_RNG_RNG_ISR_AUTOCORR_ERR_Msk (0x1UL << CC_RNG_RNG_ISR_AUTOCORR_ERR_Pos) /*!< Bit mask of AUTOCORR_ERR field. */

/* Bit 0 : Asserted when 192 bits have been collected in the TRNG and are ready to be read. */
#define CC_RNG_RNG_ISR_EHR_VALID_Pos (0UL) /*!< Position of EHR_VALID field. */
#define CC_RNG_RNG_ISR_EHR_VALID_Msk (0x1UL << CC_RNG_RNG_ISR_EHR_VALID_Pos) /*!< Bit mask of EHR_VALID field. */

/* Register: CC_RNG_RNG_ICR */
/* Description: Interrupt/status bit clear register. Consists of PRNG_ICR[31:16] and TRNG_ICR[15:0]. */

/* Bits 26..25 : Cannot be cleared by software! Only RNG reset clears this bit. */
#define CC_RNG_RNG_ICR_WHICH_KAT_ERR_Pos (25UL) /*!< Position of WHICH_KAT_ERR field. */
#define CC_RNG_RNG_ICR_WHICH_KAT_ERR_Msk (0x3UL << CC_RNG_RNG_ICR_WHICH_KAT_ERR_Pos) /*!< Bit mask of WHICH_KAT_ERR field. */

/* Bit 24 : Cannot be cleared by software! Only RNG reset clears this bit. */
#define CC_RNG_RNG_ICR_KAT_ERR_Pos (24UL) /*!< Position of KAT_ERR field. */
#define CC_RNG_RNG_ICR_KAT_ERR_Msk (0x1UL << CC_RNG_RNG_ICR_KAT_ERR_Pos) /*!< Bit mask of KAT_ERR field. */

/* Bit 23 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_REQ_SIZE_Pos (23UL) /*!< Position of REQ_SIZE field. */
#define CC_RNG_RNG_ICR_REQ_SIZE_Msk (0x1UL << CC_RNG_RNG_ICR_REQ_SIZE_Pos) /*!< Bit mask of REQ_SIZE field. */

/* Bit 22 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_PRNG_CRNGT_ERR_Pos (22UL) /*!< Position of PRNG_CRNGT_ERR field. */
#define CC_RNG_RNG_ICR_PRNG_CRNGT_ERR_Msk (0x1UL << CC_RNG_RNG_ICR_PRNG_CRNGT_ERR_Pos) /*!< Bit mask of PRNG_CRNGT_ERR field. */

/* Bit 21 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_RESEED_CNTR_TOP_40_Pos (21UL) /*!< Position of RESEED_CNTR_TOP_40 field. */
#define CC_RNG_RNG_ICR_RESEED_CNTR_TOP_40_Msk (0x1UL << CC_RNG_RNG_ICR_RESEED_CNTR_TOP_40_Pos) /*!< Bit mask of RESEED_CNTR_TOP_40 field. */

/* Bit 20 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_RESEED_CNTR_FULL_Pos (20UL) /*!< Position of RESEED_CNTR_FULL field. */
#define CC_RNG_RNG_ICR_RESEED_CNTR_FULL_Msk (0x1UL << CC_RNG_RNG_ICR_RESEED_CNTR_FULL_Pos) /*!< Bit mask of RESEED_CNTR_FULL field. */

/* Bit 19 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_OUTPUT_READY_Pos (19UL) /*!< Position of OUTPUT_READY field. */
#define CC_RNG_RNG_ICR_OUTPUT_READY_Msk (0x1UL << CC_RNG_RNG_ICR_OUTPUT_READY_Pos) /*!< Bit mask of OUTPUT_READY field. */

/* Bit 18 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_FINAL_UPDATE_DONE_Pos (18UL) /*!< Position of FINAL_UPDATE_DONE field. */
#define CC_RNG_RNG_ICR_FINAL_UPDATE_DONE_Msk (0x1UL << CC_RNG_RNG_ICR_FINAL_UPDATE_DONE_Pos) /*!< Bit mask of FINAL_UPDATE_DONE field. */

/* Bit 17 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_INSTANTIATION_DONE_Pos (17UL) /*!< Position of INSTANTIATION_DONE field. */
#define CC_RNG_RNG_ICR_INSTANTIATION_DONE_Msk (0x1UL << CC_RNG_RNG_ICR_INSTANTIATION_DONE_Pos) /*!< Bit mask of INSTANTIATION_DONE field. */

/* Bit 16 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_RESEEDING_DONE_Pos (16UL) /*!< Position of RESEEDING_DONE field. */
#define CC_RNG_RNG_ICR_RESEEDING_DONE_Msk (0x1UL << CC_RNG_RNG_ICR_RESEEDING_DONE_Pos) /*!< Bit mask of RESEEDING_DONE field. */

/* Bit 5 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_RNG_DMA_DONE_Pos (5UL) /*!< Position of RNG_DMA_DONE field. */
#define CC_RNG_RNG_ICR_RNG_DMA_DONE_Msk (0x1UL << CC_RNG_RNG_ICR_RNG_DMA_DONE_Pos) /*!< Bit mask of RNG_DMA_DONE field. */

/* Bit 4 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_RNG_WATCHDOG_Pos (4UL) /*!< Position of RNG_WATCHDOG field. */
#define CC_RNG_RNG_ICR_RNG_WATCHDOG_Msk (0x1UL << CC_RNG_RNG_ICR_RNG_WATCHDOG_Pos) /*!< Bit mask of RNG_WATCHDOG field. */

/* Bit 3 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_VN_ERR_Pos (3UL) /*!< Position of VN_ERR field. */
#define CC_RNG_RNG_ICR_VN_ERR_Msk (0x1UL << CC_RNG_RNG_ICR_VN_ERR_Pos) /*!< Bit mask of VN_ERR field. */

/* Bit 2 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_CRNGT_ERR_Pos (2UL) /*!< Position of CRNGT_ERR field. */
#define CC_RNG_RNG_ICR_CRNGT_ERR_Msk (0x1UL << CC_RNG_RNG_ICR_CRNGT_ERR_Pos) /*!< Bit mask of CRNGT_ERR field. */

/* Bit 1 : Cannot be cleared by software! Only RNG reset clears this bit. */
#define CC_RNG_RNG_ICR_AUTOCORR_ERR_Pos (1UL) /*!< Position of AUTOCORR_ERR field. */
#define CC_RNG_RNG_ICR_AUTOCORR_ERR_Msk (0x1UL << CC_RNG_RNG_ICR_AUTOCORR_ERR_Pos) /*!< Bit mask of AUTOCORR_ERR field. */

/* Bit 0 : Writing value '1' clears corresponding bit in RNG_ISR */
#define CC_RNG_RNG_ICR_EHR_VALID_Pos (0UL) /*!< Position of EHR_VALID field. */
#define CC_RNG_RNG_ICR_EHR_VALID_Msk (0x1UL << CC_RNG_RNG_ICR_EHR_VALID_Pos) /*!< Bit mask of EHR_VALID field. */

/* Register: CC_RNG_TRNG_CONFIG */
/* Description: This register handles TRNG configuration */

/* Bit 2 : Secure output is used for direct connection of the RNG block outputs to an engine input key. If CRYPTOCELL does not include a HW PRNG this field should be set to 1. */
#define CC_RNG_TRNG_CONFIG_SOP_SEL_Pos (2UL) /*!< Position of SOP_SEL field. */
#define CC_RNG_TRNG_CONFIG_SOP_SEL_Msk (0x1UL << CC_RNG_TRNG_CONFIG_SOP_SEL_Pos) /*!< Bit mask of SOP_SEL field. */
#define CC_RNG_TRNG_CONFIG_SOP_SEL_PRNG (0UL) /*!< Use PRNG as secure output port. RNG_READOUT in PRNG is used as secure output. */
#define CC_RNG_TRNG_CONFIG_SOP_SEL_TRNG (1UL) /*!< Use TRNG as secure output port. EHR_DATA in TRNG is used as secure output. */

/* Bits 1..0 : Defines the length of the oscillator ring (= the number of inverters) out of four possible selections. */
#define CC_RNG_TRNG_CONFIG_RND_SRC_SEL_Pos (0UL) /*!< Position of RND_SRC_SEL field. */
#define CC_RNG_TRNG_CONFIG_RND_SRC_SEL_Msk (0x3UL << CC_RNG_TRNG_CONFIG_RND_SRC_SEL_Pos) /*!< Bit mask of RND_SRC_SEL field. */

/* Register: CC_RNG_TRNG_VALID */
/* Description: This register indicates that the trng data is valid. */

/* Bit 0 : Asserted once collection of bits in the TRNG is completed, and data can be read from the EHR_DATA register. */
#define CC_RNG_TRNG_VALID_EHR_VALID_Pos (0UL) /*!< Position of EHR_VALID field. */
#define CC_RNG_TRNG_VALID_EHR_VALID_Msk (0x1UL << CC_RNG_TRNG_VALID_EHR_VALID_Pos) /*!< Bit mask of EHR_VALID field. */

/* Register: CC_RNG_EHR_DATA_0 */
/* Description: This register contains the data collected in the TRNG[31:0]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */

/* Bits 31..0 : Contains the data collected in the TRNG[31:0]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */
#define CC_RNG_EHR_DATA_0_EHR_DATA_Pos (0UL) /*!< Position of EHR_DATA field. */
#define CC_RNG_EHR_DATA_0_EHR_DATA_Msk (0xFFFFFFFFUL << CC_RNG_EHR_DATA_0_EHR_DATA_Pos) /*!< Bit mask of EHR_DATA field. */

/* Register: CC_RNG_EHR_DATA_1 */
/* Description: This register contains the data collected in the TRNG[63:32]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set) */

/* Bits 31..0 : Contains the data collected in the trng[63_32]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */
#define CC_RNG_EHR_DATA_1_EHR_DATA_Pos (0UL) /*!< Position of EHR_DATA field. */
#define CC_RNG_EHR_DATA_1_EHR_DATA_Msk (0xFFFFFFFFUL << CC_RNG_EHR_DATA_1_EHR_DATA_Pos) /*!< Bit mask of EHR_DATA field. */

/* Register: CC_RNG_EHR_DATA_2 */
/* Description: This register contains the data collected in the trng[95_64]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */

/* Bits 31..0 : Contains the data collected in the trng[95_64]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */
#define CC_RNG_EHR_DATA_2_EHR_DATA_Pos (0UL) /*!< Position of EHR_DATA field. */
#define CC_RNG_EHR_DATA_2_EHR_DATA_Msk (0xFFFFFFFFUL << CC_RNG_EHR_DATA_2_EHR_DATA_Pos) /*!< Bit mask of EHR_DATA field. */

/* Register: CC_RNG_EHR_DATA_3 */
/* Description: This register contains the data collected in the trng[127_96]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */

/* Bits 31..0 : Contains the data collected in the trng[127_96]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */
#define CC_RNG_EHR_DATA_3_EHR_DATA_Pos (0UL) /*!< Position of EHR_DATA field. */
#define CC_RNG_EHR_DATA_3_EHR_DATA_Msk (0xFFFFFFFFUL << CC_RNG_EHR_DATA_3_EHR_DATA_Pos) /*!< Bit mask of EHR_DATA field. */

/* Register: CC_RNG_EHR_DATA_4 */
/* Description: This register contains the data collected in the trng[159_128]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */

/* Bits 31..0 : Contains the data collected in the trng[159_128]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */
#define CC_RNG_EHR_DATA_4_EHR_DATA_Pos (0UL) /*!< Position of EHR_DATA field. */
#define CC_RNG_EHR_DATA_4_EHR_DATA_Msk (0xFFFFFFFFUL << CC_RNG_EHR_DATA_4_EHR_DATA_Pos) /*!< Bit mask of EHR_DATA field. */

/* Register: CC_RNG_EHR_DATA_5 */
/* Description: This register contains the data collected in the trng[191_160]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */

/* Bits 31..0 : Contains the data collected in the trng[191_160]. Note: can only be set if the RNG engine is in debug mode (RNG_DEBUG_EN_INPUT is set). */
#define CC_RNG_EHR_DATA_5_EHR_DATA_Pos (0UL) /*!< Position of EHR_DATA field. */
#define CC_RNG_EHR_DATA_5_EHR_DATA_Msk (0xFFFFFFFFUL << CC_RNG_EHR_DATA_5_EHR_DATA_Pos) /*!< Bit mask of EHR_DATA field. */

/* Register: CC_RNG_RND_SOURCE_ENABLE */
/* Description: This register holds the enable signal for the random source. */

/* Bit 0 : Enable signal for the random source. */
#define CC_RNG_RND_SOURCE_ENABLE_RND_SRC_EN_Pos (0UL) /*!< Position of RND_SRC_EN field. */
#define CC_RNG_RND_SOURCE_ENABLE_RND_SRC_EN_Msk (0x1UL << CC_RNG_RND_SOURCE_ENABLE_RND_SRC_EN_Pos) /*!< Bit mask of RND_SRC_EN field. */

/* Register: CC_RNG_SAMPLE_CNT1 */
/* Description: Number of clock cycles between sampling of a random bit. */

/* Bits 31..0 : Sets the number of RNG_CLK cycles between two consecutive ring oscillator samples. Note: if the von-Neumann is bypassed, the minimum value for sample counter must not be less than decimal seventeen. */
#define CC_RNG_SAMPLE_CNT1_SAMPLE_CNTR1_Pos (0UL) /*!< Position of SAMPLE_CNTR1 field. */
#define CC_RNG_SAMPLE_CNT1_SAMPLE_CNTR1_Msk (0xFFFFFFFFUL << CC_RNG_SAMPLE_CNT1_SAMPLE_CNTR1_Pos) /*!< Bit mask of SAMPLE_CNTR1 field. */

/* Register: CC_RNG_AUTOCORR_STATISTIC */
/* Description: Statistics about autocorrelation test activations. */

/* Bits 21..14 : Count each time an autocorrelation test fails. Any write to the register resets the counter. Stops collecting statistics if one of the counters has reached the limit. */
#define CC_RNG_AUTOCORR_STATISTIC_AUTOCORR_FAILS_Pos (14UL) /*!< Position of AUTOCORR_FAILS field. */
#define CC_RNG_AUTOCORR_STATISTIC_AUTOCORR_FAILS_Msk (0xFFUL << CC_RNG_AUTOCORR_STATISTIC_AUTOCORR_FAILS_Pos) /*!< Bit mask of AUTOCORR_FAILS field. */

/* Bits 13..0 : Count each time an autocorrelation test starts. Any write to the register resets the counter. Stops collecting statistics if one of the counters has reached the limit. */
#define CC_RNG_AUTOCORR_STATISTIC_AUTOCORR_TRYS_Pos (0UL) /*!< Position of AUTOCORR_TRYS field. */
#define CC_RNG_AUTOCORR_STATISTIC_AUTOCORR_TRYS_Msk (0x3FFFUL << CC_RNG_AUTOCORR_STATISTIC_AUTOCORR_TRYS_Pos) /*!< Bit mask of AUTOCORR_TRYS field. */

/* Register: CC_RNG_TRNG_DEBUG_CONTROL */
/* Description: This register is used to debug the trng */

/* Bit 3 : When this bit is set, the autocorrelation test in the TRNG module is bypassed. Note: can only be set while in debug mode. if TRNG_TESTS_BYPASS_EN HW flag is defined, this bit can be set while not in debug mode. */
#define CC_RNG_TRNG_DEBUG_CONTROL_AUTO_CORRELATE_BYPASS_Pos (3UL) /*!< Position of AUTO_CORRELATE_BYPASS field. */
#define CC_RNG_TRNG_DEBUG_CONTROL_AUTO_CORRELATE_BYPASS_Msk (0x1UL << CC_RNG_TRNG_DEBUG_CONTROL_AUTO_CORRELATE_BYPASS_Pos) /*!< Bit mask of AUTO_CORRELATE_BYPASS field. */

/* Bit 2 : When this bit is set, the CRNGT test in the TRNG is bypassed. Note: can only be set while in debug mode. If TRNG_TESTS_BYPASS_EN HW flag is defined, this bit can be set while not in debug mode. */
#define CC_RNG_TRNG_DEBUG_CONTROL_TRNG_CRNGT_BYPASS_Pos (2UL) /*!< Position of TRNG_CRNGT_BYPASS field. */
#define CC_RNG_TRNG_DEBUG_CONTROL_TRNG_CRNGT_BYPASS_Msk (0x1UL << CC_RNG_TRNG_DEBUG_CONTROL_TRNG_CRNGT_BYPASS_Pos) /*!< Bit mask of TRNG_CRNGT_BYPASS field. */

/* Bit 1 : When this bit is set, the von-Neumann balancer is bypassed (including the 32 consecutive bits test). Note: can only be set while in debug mode. If TRNG_TESTS_BYPASS_EN HW flag is defined, this bit can be set while not in debug mode. */
#define CC_RNG_TRNG_DEBUG_CONTROL_VNC_BYPASS_Pos (1UL) /*!< Position of VNC_BYPASS field. */
#define CC_RNG_TRNG_DEBUG_CONTROL_VNC_BYPASS_Msk (0x1UL << CC_RNG_TRNG_DEBUG_CONTROL_VNC_BYPASS_Pos) /*!< Bit mask of VNC_BYPASS field. */

/* Register: CC_RNG_RNG_SW_RESET */
/* Description: Generate a reset for the RNG engine. */

/* Bit 0 : Any value written ('0' or '1') causes a reset cycle to the TRNG block. The reset mechanism takes about four RNG clock cycles until the reset line is de-asserted. */
#define CC_RNG_RNG_SW_RESET_RNG_SW_RESET_Pos (0UL) /*!< Position of RNG_SW_RESET field. */
#define CC_RNG_RNG_SW_RESET_RNG_SW_RESET_Msk (0x1UL << CC_RNG_RNG_SW_RESET_RNG_SW_RESET_Pos) /*!< Bit mask of RNG_SW_RESET field. */

/* Register: CC_RNG_RNG_DEBUG_EN_INPUT */
/* Description: Reflects if RNG engine debug mode is enabled */

/* Bit 0 : RNG engine debug mode is enabled */
#define CC_RNG_RNG_DEBUG_EN_INPUT_RNG_DEBUG_EN_Pos (0UL) /*!< Position of RNG_DEBUG_EN field. */
#define CC_RNG_RNG_DEBUG_EN_INPUT_RNG_DEBUG_EN_Msk (0x1UL << CC_RNG_RNG_DEBUG_EN_INPUT_RNG_DEBUG_EN_Pos) /*!< Bit mask of RNG_DEBUG_EN field. */

/* Register: CC_RNG_RNG_BUSY */
/* Description: Rng busy indication */

/* Bit 2 : Reflects PRNG_BUSY. */
#define CC_RNG_RNG_BUSY_PRNG_BUSY_Pos (2UL) /*!< Position of PRNG_BUSY field. */
#define CC_RNG_RNG_BUSY_PRNG_BUSY_Msk (0x1UL << CC_RNG_RNG_BUSY_PRNG_BUSY_Pos) /*!< Bit mask of PRNG_BUSY field. */

/* Bit 1 : Reflects TRNG_BUSY. */
#define CC_RNG_RNG_BUSY_TRNG_BUSY_Pos (1UL) /*!< Position of TRNG_BUSY field. */
#define CC_RNG_RNG_BUSY_TRNG_BUSY_Msk (0x1UL << CC_RNG_RNG_BUSY_TRNG_BUSY_Pos) /*!< Bit mask of TRNG_BUSY field. */

/* Bit 0 : Reflects RNG_BUSY output port which consists of TRNG_BUSY and PRNG_BUSY. */
#define CC_RNG_RNG_BUSY_RNG_BUSY_Pos (0UL) /*!< Position of RNG_BUSY field. */
#define CC_RNG_RNG_BUSY_RNG_BUSY_Msk (0x1UL << CC_RNG_RNG_BUSY_RNG_BUSY_Pos) /*!< Bit mask of RNG_BUSY field. */

/* Register: CC_RNG_RST_BITS_COUNTER */
/* Description: Resets the counter of collected bits in the TRNG. */

/* Bit 0 : Writing any value to this address resets the bits counter and TRNG_VALID register. RND_SOURCE_ENABLE register must be unset in order for reset to take place. */
#define CC_RNG_RST_BITS_COUNTER_RST_BITS_COUNTER_Pos (0UL) /*!< Position of RST_BITS_COUNTER field. */
#define CC_RNG_RST_BITS_COUNTER_RST_BITS_COUNTER_Msk (0x1UL << CC_RNG_RST_BITS_COUNTER_RST_BITS_COUNTER_Pos) /*!< Bit mask of RST_BITS_COUNTER field. */

/* Register: CC_RNG_RNG_VERSION */
/* Description: This register holds the RNG version */

/* Bit 7 : @1'b0 - 20 sbox aes @1'b1 - 5 sbox aes */
#define CC_RNG_RNG_VERSION_RNG_USE_5_SBOXES_Pos (7UL) /*!< Position of RNG_USE_5_SBOXES field. */
#define CC_RNG_RNG_VERSION_RNG_USE_5_SBOXES_Msk (0x1UL << CC_RNG_RNG_VERSION_RNG_USE_5_SBOXES_Pos) /*!< Bit mask of RNG_USE_5_SBOXES field. */

/* Bit 6 : @1'b0 - does not exist @1'b1 - exists */
#define CC_RNG_RNG_VERSION_RESEEDING_EXISTS_Pos (6UL) /*!< Position of RESEEDING_EXISTS field. */
#define CC_RNG_RNG_VERSION_RESEEDING_EXISTS_Msk (0x1UL << CC_RNG_RNG_VERSION_RESEEDING_EXISTS_Pos) /*!< Bit mask of RESEEDING_EXISTS field. */

/* Bit 5 : @1'b0 - does not exist @1'b1 - exists */
#define CC_RNG_RNG_VERSION_KAT_EXISTS_Pos (5UL) /*!< Position of KAT_EXISTS field. */
#define CC_RNG_RNG_VERSION_KAT_EXISTS_Msk (0x1UL << CC_RNG_RNG_VERSION_KAT_EXISTS_Pos) /*!< Bit mask of KAT_EXISTS field. */

/* Bit 4 : @1'b0 - does not exist @1'b1 - exists */
#define CC_RNG_RNG_VERSION_PRNG_EXISTS_Pos (4UL) /*!< Position of PRNG_EXISTS field. */
#define CC_RNG_RNG_VERSION_PRNG_EXISTS_Msk (0x1UL << CC_RNG_RNG_VERSION_PRNG_EXISTS_Pos) /*!< Bit mask of PRNG_EXISTS field. */

/* Bit 3 : @1'b0 - trng tests bypass not enabled @1'b1 - trng tests bypass enabled */
#define CC_RNG_RNG_VERSION_TRNG_TESTS_BYPASS_EN_Pos (3UL) /*!< Position of TRNG_TESTS_BYPASS_EN field. */
#define CC_RNG_RNG_VERSION_TRNG_TESTS_BYPASS_EN_Msk (0x1UL << CC_RNG_RNG_VERSION_TRNG_TESTS_BYPASS_EN_Pos) /*!< Bit mask of TRNG_TESTS_BYPASS_EN field. */

/* Bit 2 : @1'b0 - does not exist @1'b1 - exists */
#define CC_RNG_RNG_VERSION_AUTOCORR_EXISTS_Pos (2UL) /*!< Position of AUTOCORR_EXISTS field. */
#define CC_RNG_RNG_VERSION_AUTOCORR_EXISTS_Msk (0x1UL << CC_RNG_RNG_VERSION_AUTOCORR_EXISTS_Pos) /*!< Bit mask of AUTOCORR_EXISTS field. */

/* Bit 1 : @1'b0 - does not exist @1'b1 - exists */
#define CC_RNG_RNG_VERSION_CRNGT_EXISTS_Pos (1UL) /*!< Position of CRNGT_EXISTS field. */
#define CC_RNG_RNG_VERSION_CRNGT_EXISTS_Msk (0x1UL << CC_RNG_RNG_VERSION_CRNGT_EXISTS_Pos) /*!< Bit mask of CRNGT_EXISTS field. */

/* Bit 0 : @1'b0 - 128 bit ehr @1'b1 - 192 bit ehr */
#define CC_RNG_RNG_VERSION_EHR_WIDTH_192_Pos (0UL) /*!< Position of EHR_WIDTH_192 field. */
#define CC_RNG_RNG_VERSION_EHR_WIDTH_192_Msk (0x1UL << CC_RNG_RNG_VERSION_EHR_WIDTH_192_Pos) /*!< Bit mask of EHR_WIDTH_192 field. */

/* Register: CC_RNG_RNG_CLK_ENABLE */
/* Description: Writing to this register enables/disables the RNG clock. */

/* Bit 0 : Writing value '1' enables RNG clock. */
#define CC_RNG_RNG_CLK_ENABLE_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_RNG_RNG_CLK_ENABLE_EN_Msk (0x1UL << CC_RNG_RNG_CLK_ENABLE_EN_Pos) /*!< Bit mask of EN field. */

/* Register: CC_RNG_RNG_DMA_ENABLE */
/* Description: Writing to this register enables/disables the RNG DMA. */

/* Bit 0 : Writing value '1' enables RNG DMA to SRAM. The value is cleared when DMA completes its operation. */
#define CC_RNG_RNG_DMA_ENABLE_EN_Pos (0UL) /*!< Position of EN field. */
#define CC_RNG_RNG_DMA_ENABLE_EN_Msk (0x1UL << CC_RNG_RNG_DMA_ENABLE_EN_Pos) /*!< Bit mask of EN field. */

/* Register: CC_RNG_RNG_DMA_SRC_MASK */
/* Description: This register defines which ring-oscillator length should be used when using the RNG DMA. */

/* Bit 3 : Writing value '1' enables SRC_SEL 3. */
#define CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL3_Pos (3UL) /*!< Position of EN_SRC_SEL3 field. */
#define CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL3_Msk (0x1UL << CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL3_Pos) /*!< Bit mask of EN_SRC_SEL3 field. */

/* Bit 2 : Writing value '1' enables SRC_SEL 2. */
#define CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL2_Pos (2UL) /*!< Position of EN_SRC_SEL2 field. */
#define CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL2_Msk (0x1UL << CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL2_Pos) /*!< Bit mask of EN_SRC_SEL2 field. */

/* Bit 1 : Writing value '1' enables SRC_SEL 1. */
#define CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL1_Pos (1UL) /*!< Position of EN_SRC_SEL1 field. */
#define CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL1_Msk (0x1UL << CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL1_Pos) /*!< Bit mask of EN_SRC_SEL1 field. */

/* Bit 0 : Writing value '1' enables SRC_SEL 0. */
#define CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL0_Pos (0UL) /*!< Position of EN_SRC_SEL0 field. */
#define CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL0_Msk (0x1UL << CC_RNG_RNG_DMA_SRC_MASK_EN_SRC_SEL0_Pos) /*!< Bit mask of EN_SRC_SEL0 field. */

/* Register: CC_RNG_RNG_DMA_SRAM_ADDR */
/* Description: This register defines the start address of the DMA for the TRNG data. */

/* Bits 10..0 : Defines the start address of the DMA for the TRNG data. */
#define CC_RNG_RNG_DMA_SRAM_ADDR_RNG_SRAM_DMA_ADDR_Pos (0UL) /*!< Position of RNG_SRAM_DMA_ADDR field. */
#define CC_RNG_RNG_DMA_SRAM_ADDR_RNG_SRAM_DMA_ADDR_Msk (0x7FFUL << CC_RNG_RNG_DMA_SRAM_ADDR_RNG_SRAM_DMA_ADDR_Pos) /*!< Bit mask of RNG_SRAM_DMA_ADDR field. */

/* Register: CC_RNG_RNG_DMA_SAMPLES_NUM */
/* Description: This register defines the number of 192-bits samples that the DMA collects per RNG configuration. */

/* Bits 7..0 : Defines the number of 192-bits samples that the DMA collects per RNG configuration. */
#define CC_RNG_RNG_DMA_SAMPLES_NUM_RNG_SAMPLES_NUM_Pos (0UL) /*!< Position of RNG_SAMPLES_NUM field. */
#define CC_RNG_RNG_DMA_SAMPLES_NUM_RNG_SAMPLES_NUM_Msk (0xFFUL << CC_RNG_RNG_DMA_SAMPLES_NUM_RNG_SAMPLES_NUM_Pos) /*!< Bit mask of RNG_SAMPLES_NUM field. */

/* Register: CC_RNG_RNG_WATCHDOG_VAL */
/* Description: This register defines the maximum number of clock cycles per TRNG collection of 192 samples. If the number of cycles for a collection exceeds this threshold, TRNG signals an interrupt. */

/* Bits 31..0 : Defines the maximum number of clock cycles per TRNG collection of 192 samples. If the number of cycles for a collection exceeds this threshold, TRNG signals an interrupt. */
#define CC_RNG_RNG_WATCHDOG_VAL_RNG_WATCHDOG_VAL_Pos (0UL) /*!< Position of RNG_WATCHDOG_VAL field. */
#define CC_RNG_RNG_WATCHDOG_VAL_RNG_WATCHDOG_VAL_Msk (0xFFFFFFFFUL << CC_RNG_RNG_WATCHDOG_VAL_RNG_WATCHDOG_VAL_Pos) /*!< Bit mask of RNG_WATCHDOG_VAL field. */

/* Register: CC_RNG_RNG_DMA_STATUS */
/* Description: This register holds the RNG DMA status. */

/* Bits 10..3 : Number of samples already collected in the current ring oscillator chain length. */
#define CC_RNG_RNG_DMA_STATUS_NUM_OF_SAMPLES_Pos (3UL) /*!< Position of NUM_OF_SAMPLES field. */
#define CC_RNG_RNG_DMA_STATUS_NUM_OF_SAMPLES_Msk (0xFFUL << CC_RNG_RNG_DMA_STATUS_NUM_OF_SAMPLES_Pos) /*!< Bit mask of NUM_OF_SAMPLES field. */

/* Bits 2..1 : The active ring oscillator length using by DMA */
#define CC_RNG_RNG_DMA_STATUS_DMA_SRC_SEL_Pos (1UL) /*!< Position of DMA_SRC_SEL field. */
#define CC_RNG_RNG_DMA_STATUS_DMA_SRC_SEL_Msk (0x3UL << CC_RNG_RNG_DMA_STATUS_DMA_SRC_SEL_Pos) /*!< Bit mask of DMA_SRC_SEL field. */

/* Bit 0 : Indicates whether DMA is busy. */
#define CC_RNG_RNG_DMA_STATUS_RNG_DMA_BUSY_Pos (0UL) /*!< Position of RNG_DMA_BUSY field. */
#define CC_RNG_RNG_DMA_STATUS_RNG_DMA_BUSY_Msk (0x1UL << CC_RNG_RNG_DMA_STATUS_RNG_DMA_BUSY_Pos) /*!< Bit mask of RNG_DMA_BUSY field. */


/* Peripheral: CLOCK */
/* Description: Clock management 0 */

/* Register: CLOCK_TASKS_HFCLKSTART */
/* Description: Start HFCLK128M/HFCLK64M source as selected in HFCLKSRC */

/* Bit 0 : Start HFCLK128M/HFCLK64M source as selected in HFCLKSRC */
#define CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Pos (0UL) /*!< Position of TASKS_HFCLKSTART field. */
#define CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Msk (0x1UL << CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Pos) /*!< Bit mask of TASKS_HFCLKSTART field. */
#define CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_TASKS_HFCLKSTOP */
/* Description: Stop HFCLK128M/HFCLK64M source */

/* Bit 0 : Stop HFCLK128M/HFCLK64M source */
#define CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Pos (0UL) /*!< Position of TASKS_HFCLKSTOP field. */
#define CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Msk (0x1UL << CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Pos) /*!< Bit mask of TASKS_HFCLKSTOP field. */
#define CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_TASKS_LFCLKSTART */
/* Description: Start LFCLK source as selected in LFCLKSRC */

/* Bit 0 : Start LFCLK source as selected in LFCLKSRC */
#define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos (0UL) /*!< Position of TASKS_LFCLKSTART field. */
#define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Msk (0x1UL << CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos) /*!< Bit mask of TASKS_LFCLKSTART field. */
#define CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_TASKS_LFCLKSTOP */
/* Description: Stop LFCLK source */

/* Bit 0 : Stop LFCLK source */
#define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos (0UL) /*!< Position of TASKS_LFCLKSTOP field. */
#define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Msk (0x1UL << CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos) /*!< Bit mask of TASKS_LFCLKSTOP field. */
#define CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_TASKS_CAL */
/* Description: Start calibration of LFRC oscillator */

/* Bit 0 : Start calibration of LFRC oscillator */
#define CLOCK_TASKS_CAL_TASKS_CAL_Pos (0UL) /*!< Position of TASKS_CAL field. */
#define CLOCK_TASKS_CAL_TASKS_CAL_Msk (0x1UL << CLOCK_TASKS_CAL_TASKS_CAL_Pos) /*!< Bit mask of TASKS_CAL field. */
#define CLOCK_TASKS_CAL_TASKS_CAL_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_TASKS_HFCLKAUDIOSTART */
/* Description: Start HFCLKAUDIO source */

/* Bit 0 : Start HFCLKAUDIO source */
#define CLOCK_TASKS_HFCLKAUDIOSTART_TASKS_HFCLKAUDIOSTART_Pos (0UL) /*!< Position of TASKS_HFCLKAUDIOSTART field. */
#define CLOCK_TASKS_HFCLKAUDIOSTART_TASKS_HFCLKAUDIOSTART_Msk (0x1UL << CLOCK_TASKS_HFCLKAUDIOSTART_TASKS_HFCLKAUDIOSTART_Pos) /*!< Bit mask of TASKS_HFCLKAUDIOSTART field. */
#define CLOCK_TASKS_HFCLKAUDIOSTART_TASKS_HFCLKAUDIOSTART_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_TASKS_HFCLKAUDIOSTOP */
/* Description: Stop HFCLKAUDIO source */

/* Bit 0 : Stop HFCLKAUDIO source */
#define CLOCK_TASKS_HFCLKAUDIOSTOP_TASKS_HFCLKAUDIOSTOP_Pos (0UL) /*!< Position of TASKS_HFCLKAUDIOSTOP field. */
#define CLOCK_TASKS_HFCLKAUDIOSTOP_TASKS_HFCLKAUDIOSTOP_Msk (0x1UL << CLOCK_TASKS_HFCLKAUDIOSTOP_TASKS_HFCLKAUDIOSTOP_Pos) /*!< Bit mask of TASKS_HFCLKAUDIOSTOP field. */
#define CLOCK_TASKS_HFCLKAUDIOSTOP_TASKS_HFCLKAUDIOSTOP_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_TASKS_HFCLK192MSTART */
/* Description: Start HFCLK192M source as selected in HFCLK192MSRC */

/* Bit 0 : Start HFCLK192M source as selected in HFCLK192MSRC */
#define CLOCK_TASKS_HFCLK192MSTART_TASKS_HFCLK192MSTART_Pos (0UL) /*!< Position of TASKS_HFCLK192MSTART field. */
#define CLOCK_TASKS_HFCLK192MSTART_TASKS_HFCLK192MSTART_Msk (0x1UL << CLOCK_TASKS_HFCLK192MSTART_TASKS_HFCLK192MSTART_Pos) /*!< Bit mask of TASKS_HFCLK192MSTART field. */
#define CLOCK_TASKS_HFCLK192MSTART_TASKS_HFCLK192MSTART_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_TASKS_HFCLK192MSTOP */
/* Description: Stop HFCLK192M source */

/* Bit 0 : Stop HFCLK192M source */
#define CLOCK_TASKS_HFCLK192MSTOP_TASKS_HFCLK192MSTOP_Pos (0UL) /*!< Position of TASKS_HFCLK192MSTOP field. */
#define CLOCK_TASKS_HFCLK192MSTOP_TASKS_HFCLK192MSTOP_Msk (0x1UL << CLOCK_TASKS_HFCLK192MSTOP_TASKS_HFCLK192MSTOP_Pos) /*!< Bit mask of TASKS_HFCLK192MSTOP field. */
#define CLOCK_TASKS_HFCLK192MSTOP_TASKS_HFCLK192MSTOP_Trigger (1UL) /*!< Trigger task */

/* Register: CLOCK_SUBSCRIBE_HFCLKSTART */
/* Description: Subscribe configuration for task HFCLKSTART */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_HFCLKSTART_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_HFCLKSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_HFCLKSTART_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_HFCLKSTART_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_HFCLKSTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task HFCLKSTART will subscribe to */
#define CLOCK_SUBSCRIBE_HFCLKSTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_HFCLKSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_HFCLKSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_SUBSCRIBE_HFCLKSTOP */
/* Description: Subscribe configuration for task HFCLKSTOP */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_HFCLKSTOP_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_HFCLKSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_HFCLKSTOP_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_HFCLKSTOP_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_HFCLKSTOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task HFCLKSTOP will subscribe to */
#define CLOCK_SUBSCRIBE_HFCLKSTOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_HFCLKSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_HFCLKSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_SUBSCRIBE_LFCLKSTART */
/* Description: Subscribe configuration for task LFCLKSTART */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_LFCLKSTART_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_LFCLKSTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task LFCLKSTART will subscribe to */
#define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_LFCLKSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_SUBSCRIBE_LFCLKSTOP */
/* Description: Subscribe configuration for task LFCLKSTOP */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_LFCLKSTOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task LFCLKSTOP will subscribe to */
#define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_LFCLKSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_SUBSCRIBE_CAL */
/* Description: Subscribe configuration for task CAL */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_CAL_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_CAL_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_CAL_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_CAL_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_CAL_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CAL will subscribe to */
#define CLOCK_SUBSCRIBE_CAL_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_CAL_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_CAL_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_SUBSCRIBE_HFCLKAUDIOSTART */
/* Description: Subscribe configuration for task HFCLKAUDIOSTART */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTART_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_HFCLKAUDIOSTART_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTART_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task HFCLKAUDIOSTART will subscribe to */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_HFCLKAUDIOSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP */
/* Description: Subscribe configuration for task HFCLKAUDIOSTOP */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task HFCLKAUDIOSTOP will subscribe to */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_HFCLKAUDIOSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_SUBSCRIBE_HFCLK192MSTART */
/* Description: Subscribe configuration for task HFCLK192MSTART */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_HFCLK192MSTART_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_HFCLK192MSTART_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_HFCLK192MSTART_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_HFCLK192MSTART_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_HFCLK192MSTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task HFCLK192MSTART will subscribe to */
#define CLOCK_SUBSCRIBE_HFCLK192MSTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_HFCLK192MSTART_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_HFCLK192MSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_SUBSCRIBE_HFCLK192MSTOP */
/* Description: Subscribe configuration for task HFCLK192MSTOP */

/* Bit 31 :   */
#define CLOCK_SUBSCRIBE_HFCLK192MSTOP_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_SUBSCRIBE_HFCLK192MSTOP_EN_Msk (0x1UL << CLOCK_SUBSCRIBE_HFCLK192MSTOP_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_SUBSCRIBE_HFCLK192MSTOP_EN_Disabled (0UL) /*!< Disable subscription */
#define CLOCK_SUBSCRIBE_HFCLK192MSTOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task HFCLK192MSTOP will subscribe to */
#define CLOCK_SUBSCRIBE_HFCLK192MSTOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_SUBSCRIBE_HFCLK192MSTOP_CHIDX_Msk (0xFFUL << CLOCK_SUBSCRIBE_HFCLK192MSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_EVENTS_HFCLKSTARTED */
/* Description: HFCLK128M/HFCLK64M source started */

/* Bit 0 : HFCLK128M/HFCLK64M source started */
#define CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Pos (0UL) /*!< Position of EVENTS_HFCLKSTARTED field. */
#define CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Msk (0x1UL << CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Pos) /*!< Bit mask of EVENTS_HFCLKSTARTED field. */
#define CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Generated (1UL) /*!< Event generated */

/* Register: CLOCK_EVENTS_LFCLKSTARTED */
/* Description: LFCLK source started */

/* Bit 0 : LFCLK source started */
#define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos (0UL) /*!< Position of EVENTS_LFCLKSTARTED field. */
#define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Msk (0x1UL << CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos) /*!< Bit mask of EVENTS_LFCLKSTARTED field. */
#define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Generated (1UL) /*!< Event generated */

/* Register: CLOCK_EVENTS_DONE */
/* Description: Calibration of LFRC oscillator complete event */

/* Bit 0 : Calibration of LFRC oscillator complete event */
#define CLOCK_EVENTS_DONE_EVENTS_DONE_Pos (0UL) /*!< Position of EVENTS_DONE field. */
#define CLOCK_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << CLOCK_EVENTS_DONE_EVENTS_DONE_Pos) /*!< Bit mask of EVENTS_DONE field. */
#define CLOCK_EVENTS_DONE_EVENTS_DONE_NotGenerated (0UL) /*!< Event not generated */
#define CLOCK_EVENTS_DONE_EVENTS_DONE_Generated (1UL) /*!< Event generated */

/* Register: CLOCK_EVENTS_HFCLKAUDIOSTARTED */
/* Description: HFCLKAUDIO source started */

/* Bit 0 : HFCLKAUDIO source started */
#define CLOCK_EVENTS_HFCLKAUDIOSTARTED_EVENTS_HFCLKAUDIOSTARTED_Pos (0UL) /*!< Position of EVENTS_HFCLKAUDIOSTARTED field. */
#define CLOCK_EVENTS_HFCLKAUDIOSTARTED_EVENTS_HFCLKAUDIOSTARTED_Msk (0x1UL << CLOCK_EVENTS_HFCLKAUDIOSTARTED_EVENTS_HFCLKAUDIOSTARTED_Pos) /*!< Bit mask of EVENTS_HFCLKAUDIOSTARTED field. */
#define CLOCK_EVENTS_HFCLKAUDIOSTARTED_EVENTS_HFCLKAUDIOSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define CLOCK_EVENTS_HFCLKAUDIOSTARTED_EVENTS_HFCLKAUDIOSTARTED_Generated (1UL) /*!< Event generated */

/* Register: CLOCK_EVENTS_HFCLK192MSTARTED */
/* Description: HFCLK192M source started */

/* Bit 0 : HFCLK192M source started */
#define CLOCK_EVENTS_HFCLK192MSTARTED_EVENTS_HFCLK192MSTARTED_Pos (0UL) /*!< Position of EVENTS_HFCLK192MSTARTED field. */
#define CLOCK_EVENTS_HFCLK192MSTARTED_EVENTS_HFCLK192MSTARTED_Msk (0x1UL << CLOCK_EVENTS_HFCLK192MSTARTED_EVENTS_HFCLK192MSTARTED_Pos) /*!< Bit mask of EVENTS_HFCLK192MSTARTED field. */
#define CLOCK_EVENTS_HFCLK192MSTARTED_EVENTS_HFCLK192MSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define CLOCK_EVENTS_HFCLK192MSTARTED_EVENTS_HFCLK192MSTARTED_Generated (1UL) /*!< Event generated */

/* Register: CLOCK_PUBLISH_HFCLKSTARTED */
/* Description: Publish configuration for event HFCLKSTARTED */

/* Bit 31 :   */
#define CLOCK_PUBLISH_HFCLKSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_PUBLISH_HFCLKSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_HFCLKSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_PUBLISH_HFCLKSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define CLOCK_PUBLISH_HFCLKSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event HFCLKSTARTED will publish to. */
#define CLOCK_PUBLISH_HFCLKSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_PUBLISH_HFCLKSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_HFCLKSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_PUBLISH_LFCLKSTARTED */
/* Description: Publish configuration for event LFCLKSTARTED */

/* Bit 31 :   */
#define CLOCK_PUBLISH_LFCLKSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_PUBLISH_LFCLKSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_LFCLKSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_PUBLISH_LFCLKSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define CLOCK_PUBLISH_LFCLKSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event LFCLKSTARTED will publish to. */
#define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_LFCLKSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_PUBLISH_DONE */
/* Description: Publish configuration for event DONE */

/* Bit 31 :   */
#define CLOCK_PUBLISH_DONE_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_PUBLISH_DONE_EN_Msk (0x1UL << CLOCK_PUBLISH_DONE_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_PUBLISH_DONE_EN_Disabled (0UL) /*!< Disable publishing */
#define CLOCK_PUBLISH_DONE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DONE will publish to. */
#define CLOCK_PUBLISH_DONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_PUBLISH_DONE_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_DONE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_PUBLISH_HFCLKAUDIOSTARTED */
/* Description: Publish configuration for event HFCLKAUDIOSTARTED */

/* Bit 31 :   */
#define CLOCK_PUBLISH_HFCLKAUDIOSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_PUBLISH_HFCLKAUDIOSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_HFCLKAUDIOSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_PUBLISH_HFCLKAUDIOSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define CLOCK_PUBLISH_HFCLKAUDIOSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event HFCLKAUDIOSTARTED will publish to. */
#define CLOCK_PUBLISH_HFCLKAUDIOSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_PUBLISH_HFCLKAUDIOSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_HFCLKAUDIOSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_PUBLISH_HFCLK192MSTARTED */
/* Description: Publish configuration for event HFCLK192MSTARTED */

/* Bit 31 :   */
#define CLOCK_PUBLISH_HFCLK192MSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define CLOCK_PUBLISH_HFCLK192MSTARTED_EN_Msk (0x1UL << CLOCK_PUBLISH_HFCLK192MSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define CLOCK_PUBLISH_HFCLK192MSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define CLOCK_PUBLISH_HFCLK192MSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event HFCLK192MSTARTED will publish to. */
#define CLOCK_PUBLISH_HFCLK192MSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define CLOCK_PUBLISH_HFCLK192MSTARTED_CHIDX_Msk (0xFFUL << CLOCK_PUBLISH_HFCLK192MSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: CLOCK_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 9 : Enable or disable interrupt for event HFCLK192MSTARTED */
#define CLOCK_INTEN_HFCLK192MSTARTED_Pos (9UL) /*!< Position of HFCLK192MSTARTED field. */
#define CLOCK_INTEN_HFCLK192MSTARTED_Msk (0x1UL << CLOCK_INTEN_HFCLK192MSTARTED_Pos) /*!< Bit mask of HFCLK192MSTARTED field. */
#define CLOCK_INTEN_HFCLK192MSTARTED_Disabled (0UL) /*!< Disable */
#define CLOCK_INTEN_HFCLK192MSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event HFCLKAUDIOSTARTED */
#define CLOCK_INTEN_HFCLKAUDIOSTARTED_Pos (8UL) /*!< Position of HFCLKAUDIOSTARTED field. */
#define CLOCK_INTEN_HFCLKAUDIOSTARTED_Msk (0x1UL << CLOCK_INTEN_HFCLKAUDIOSTARTED_Pos) /*!< Bit mask of HFCLKAUDIOSTARTED field. */
#define CLOCK_INTEN_HFCLKAUDIOSTARTED_Disabled (0UL) /*!< Disable */
#define CLOCK_INTEN_HFCLKAUDIOSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event DONE */
#define CLOCK_INTEN_DONE_Pos (7UL) /*!< Position of DONE field. */
#define CLOCK_INTEN_DONE_Msk (0x1UL << CLOCK_INTEN_DONE_Pos) /*!< Bit mask of DONE field. */
#define CLOCK_INTEN_DONE_Disabled (0UL) /*!< Disable */
#define CLOCK_INTEN_DONE_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event LFCLKSTARTED */
#define CLOCK_INTEN_LFCLKSTARTED_Pos (1UL) /*!< Position of LFCLKSTARTED field. */
#define CLOCK_INTEN_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTEN_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field. */
#define CLOCK_INTEN_LFCLKSTARTED_Disabled (0UL) /*!< Disable */
#define CLOCK_INTEN_LFCLKSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event HFCLKSTARTED */
#define CLOCK_INTEN_HFCLKSTARTED_Pos (0UL) /*!< Position of HFCLKSTARTED field. */
#define CLOCK_INTEN_HFCLKSTARTED_Msk (0x1UL << CLOCK_INTEN_HFCLKSTARTED_Pos) /*!< Bit mask of HFCLKSTARTED field. */
#define CLOCK_INTEN_HFCLKSTARTED_Disabled (0UL) /*!< Disable */
#define CLOCK_INTEN_HFCLKSTARTED_Enabled (1UL) /*!< Enable */

/* Register: CLOCK_INTENSET */
/* Description: Enable interrupt */

/* Bit 9 : Write '1' to enable interrupt for event HFCLK192MSTARTED */
#define CLOCK_INTENSET_HFCLK192MSTARTED_Pos (9UL) /*!< Position of HFCLK192MSTARTED field. */
#define CLOCK_INTENSET_HFCLK192MSTARTED_Msk (0x1UL << CLOCK_INTENSET_HFCLK192MSTARTED_Pos) /*!< Bit mask of HFCLK192MSTARTED field. */
#define CLOCK_INTENSET_HFCLK192MSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENSET_HFCLK192MSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENSET_HFCLK192MSTARTED_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event HFCLKAUDIOSTARTED */
#define CLOCK_INTENSET_HFCLKAUDIOSTARTED_Pos (8UL) /*!< Position of HFCLKAUDIOSTARTED field. */
#define CLOCK_INTENSET_HFCLKAUDIOSTARTED_Msk (0x1UL << CLOCK_INTENSET_HFCLKAUDIOSTARTED_Pos) /*!< Bit mask of HFCLKAUDIOSTARTED field. */
#define CLOCK_INTENSET_HFCLKAUDIOSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENSET_HFCLKAUDIOSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENSET_HFCLKAUDIOSTARTED_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event DONE */
#define CLOCK_INTENSET_DONE_Pos (7UL) /*!< Position of DONE field. */
#define CLOCK_INTENSET_DONE_Msk (0x1UL << CLOCK_INTENSET_DONE_Pos) /*!< Bit mask of DONE field. */
#define CLOCK_INTENSET_DONE_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENSET_DONE_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENSET_DONE_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event LFCLKSTARTED */
#define CLOCK_INTENSET_LFCLKSTARTED_Pos (1UL) /*!< Position of LFCLKSTARTED field. */
#define CLOCK_INTENSET_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENSET_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field. */
#define CLOCK_INTENSET_LFCLKSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENSET_LFCLKSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENSET_LFCLKSTARTED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event HFCLKSTARTED */
#define CLOCK_INTENSET_HFCLKSTARTED_Pos (0UL) /*!< Position of HFCLKSTARTED field. */
#define CLOCK_INTENSET_HFCLKSTARTED_Msk (0x1UL << CLOCK_INTENSET_HFCLKSTARTED_Pos) /*!< Bit mask of HFCLKSTARTED field. */
#define CLOCK_INTENSET_HFCLKSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENSET_HFCLKSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENSET_HFCLKSTARTED_Set (1UL) /*!< Enable */

/* Register: CLOCK_INTENCLR */
/* Description: Disable interrupt */

/* Bit 9 : Write '1' to disable interrupt for event HFCLK192MSTARTED */
#define CLOCK_INTENCLR_HFCLK192MSTARTED_Pos (9UL) /*!< Position of HFCLK192MSTARTED field. */
#define CLOCK_INTENCLR_HFCLK192MSTARTED_Msk (0x1UL << CLOCK_INTENCLR_HFCLK192MSTARTED_Pos) /*!< Bit mask of HFCLK192MSTARTED field. */
#define CLOCK_INTENCLR_HFCLK192MSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENCLR_HFCLK192MSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENCLR_HFCLK192MSTARTED_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event HFCLKAUDIOSTARTED */
#define CLOCK_INTENCLR_HFCLKAUDIOSTARTED_Pos (8UL) /*!< Position of HFCLKAUDIOSTARTED field. */
#define CLOCK_INTENCLR_HFCLKAUDIOSTARTED_Msk (0x1UL << CLOCK_INTENCLR_HFCLKAUDIOSTARTED_Pos) /*!< Bit mask of HFCLKAUDIOSTARTED field. */
#define CLOCK_INTENCLR_HFCLKAUDIOSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENCLR_HFCLKAUDIOSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENCLR_HFCLKAUDIOSTARTED_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event DONE */
#define CLOCK_INTENCLR_DONE_Pos (7UL) /*!< Position of DONE field. */
#define CLOCK_INTENCLR_DONE_Msk (0x1UL << CLOCK_INTENCLR_DONE_Pos) /*!< Bit mask of DONE field. */
#define CLOCK_INTENCLR_DONE_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENCLR_DONE_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENCLR_DONE_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event LFCLKSTARTED */
#define CLOCK_INTENCLR_LFCLKSTARTED_Pos (1UL) /*!< Position of LFCLKSTARTED field. */
#define CLOCK_INTENCLR_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTENCLR_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field. */
#define CLOCK_INTENCLR_LFCLKSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENCLR_LFCLKSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENCLR_LFCLKSTARTED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event HFCLKSTARTED */
#define CLOCK_INTENCLR_HFCLKSTARTED_Pos (0UL) /*!< Position of HFCLKSTARTED field. */
#define CLOCK_INTENCLR_HFCLKSTARTED_Msk (0x1UL << CLOCK_INTENCLR_HFCLKSTARTED_Pos) /*!< Bit mask of HFCLKSTARTED field. */
#define CLOCK_INTENCLR_HFCLKSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define CLOCK_INTENCLR_HFCLKSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define CLOCK_INTENCLR_HFCLKSTARTED_Clear (1UL) /*!< Disable */

/* Register: CLOCK_INTPEND */
/* Description: Pending interrupts */

/* Bit 9 : Read pending status of interrupt for event HFCLK192MSTARTED */
#define CLOCK_INTPEND_HFCLK192MSTARTED_Pos (9UL) /*!< Position of HFCLK192MSTARTED field. */
#define CLOCK_INTPEND_HFCLK192MSTARTED_Msk (0x1UL << CLOCK_INTPEND_HFCLK192MSTARTED_Pos) /*!< Bit mask of HFCLK192MSTARTED field. */
#define CLOCK_INTPEND_HFCLK192MSTARTED_NotPending (0UL) /*!< Read: Not pending */
#define CLOCK_INTPEND_HFCLK192MSTARTED_Pending (1UL) /*!< Read: Pending */

/* Bit 8 : Read pending status of interrupt for event HFCLKAUDIOSTARTED */
#define CLOCK_INTPEND_HFCLKAUDIOSTARTED_Pos (8UL) /*!< Position of HFCLKAUDIOSTARTED field. */
#define CLOCK_INTPEND_HFCLKAUDIOSTARTED_Msk (0x1UL << CLOCK_INTPEND_HFCLKAUDIOSTARTED_Pos) /*!< Bit mask of HFCLKAUDIOSTARTED field. */
#define CLOCK_INTPEND_HFCLKAUDIOSTARTED_NotPending (0UL) /*!< Read: Not pending */
#define CLOCK_INTPEND_HFCLKAUDIOSTARTED_Pending (1UL) /*!< Read: Pending */

/* Bit 7 : Read pending status of interrupt for event DONE */
#define CLOCK_INTPEND_DONE_Pos (7UL) /*!< Position of DONE field. */
#define CLOCK_INTPEND_DONE_Msk (0x1UL << CLOCK_INTPEND_DONE_Pos) /*!< Bit mask of DONE field. */
#define CLOCK_INTPEND_DONE_NotPending (0UL) /*!< Read: Not pending */
#define CLOCK_INTPEND_DONE_Pending (1UL) /*!< Read: Pending */

/* Bit 1 : Read pending status of interrupt for event LFCLKSTARTED */
#define CLOCK_INTPEND_LFCLKSTARTED_Pos (1UL) /*!< Position of LFCLKSTARTED field. */
#define CLOCK_INTPEND_LFCLKSTARTED_Msk (0x1UL << CLOCK_INTPEND_LFCLKSTARTED_Pos) /*!< Bit mask of LFCLKSTARTED field. */
#define CLOCK_INTPEND_LFCLKSTARTED_NotPending (0UL) /*!< Read: Not pending */
#define CLOCK_INTPEND_LFCLKSTARTED_Pending (1UL) /*!< Read: Pending */

/* Bit 0 : Read pending status of interrupt for event HFCLKSTARTED */
#define CLOCK_INTPEND_HFCLKSTARTED_Pos (0UL) /*!< Position of HFCLKSTARTED field. */
#define CLOCK_INTPEND_HFCLKSTARTED_Msk (0x1UL << CLOCK_INTPEND_HFCLKSTARTED_Pos) /*!< Bit mask of HFCLKSTARTED field. */
#define CLOCK_INTPEND_HFCLKSTARTED_NotPending (0UL) /*!< Read: Not pending */
#define CLOCK_INTPEND_HFCLKSTARTED_Pending (1UL) /*!< Read: Pending */

/* Register: CLOCK_HFCLKRUN */
/* Description: Status indicating that HFCLKSTART task has been triggered */

/* Bit 0 : HFCLKSTART task triggered or not */
#define CLOCK_HFCLKRUN_STATUS_Pos (0UL) /*!< Position of STATUS field. */
#define CLOCK_HFCLKRUN_STATUS_Msk (0x1UL << CLOCK_HFCLKRUN_STATUS_Pos) /*!< Bit mask of STATUS field. */
#define CLOCK_HFCLKRUN_STATUS_NotTriggered (0UL) /*!< Task not triggered */
#define CLOCK_HFCLKRUN_STATUS_Triggered (1UL) /*!< Task triggered */

/* Register: CLOCK_HFCLKSTAT */
/* Description: Status indicating which HFCLK128M/HFCLK64M source is running This register value in any CLOCK instance reflects status only due to configurations/actions in that CLOCK instance. */

/* Bit 16 : HFCLK state */
#define CLOCK_HFCLKSTAT_STATE_Pos (16UL) /*!< Position of STATE field. */
#define CLOCK_HFCLKSTAT_STATE_Msk (0x1UL << CLOCK_HFCLKSTAT_STATE_Pos) /*!< Bit mask of STATE field. */
#define CLOCK_HFCLKSTAT_STATE_NotRunning (0UL) /*!< HFCLK not running */
#define CLOCK_HFCLKSTAT_STATE_Running (1UL) /*!< HFCLK running */

/* Bit 4 : ALWAYSRUN activated */
#define CLOCK_HFCLKSTAT_ALWAYSRUNNING_Pos (4UL) /*!< Position of ALWAYSRUNNING field. */
#define CLOCK_HFCLKSTAT_ALWAYSRUNNING_Msk (0x1UL << CLOCK_HFCLKSTAT_ALWAYSRUNNING_Pos) /*!< Bit mask of ALWAYSRUNNING field. */
#define CLOCK_HFCLKSTAT_ALWAYSRUNNING_NotRunning (0UL) /*!< Automatic clock control enabled */
#define CLOCK_HFCLKSTAT_ALWAYSRUNNING_Running (1UL) /*!< Oscillator is always running */

/* Bit 0 : Active clock source */
#define CLOCK_HFCLKSTAT_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_HFCLKSTAT_SRC_Msk (0x1UL << CLOCK_HFCLKSTAT_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_HFCLKSTAT_SRC_HFINT (0UL) /*!< Clock source: HFINT - 128 MHz on-chip oscillator */
#define CLOCK_HFCLKSTAT_SRC_HFXO (1UL) /*!< Clock source: HFXO - 128 MHz clock derived from external 32 MHz crystal oscillator */

/* Register: CLOCK_LFCLKRUN */
/* Description: Status indicating that LFCLKSTART task has been triggered */

/* Bit 0 : LFCLKSTART task triggered or not */
#define CLOCK_LFCLKRUN_STATUS_Pos (0UL) /*!< Position of STATUS field. */
#define CLOCK_LFCLKRUN_STATUS_Msk (0x1UL << CLOCK_LFCLKRUN_STATUS_Pos) /*!< Bit mask of STATUS field. */
#define CLOCK_LFCLKRUN_STATUS_NotTriggered (0UL) /*!< Task not triggered */
#define CLOCK_LFCLKRUN_STATUS_Triggered (1UL) /*!< Task triggered */

/* Register: CLOCK_LFCLKSTAT */
/* Description: Status indicating which LFCLK source is running This register value in any CLOCK instance reflects status only due to configurations/actions in that CLOCK instance. */

/* Bit 16 : LFCLK state */
#define CLOCK_LFCLKSTAT_STATE_Pos (16UL) /*!< Position of STATE field. */
#define CLOCK_LFCLKSTAT_STATE_Msk (0x1UL << CLOCK_LFCLKSTAT_STATE_Pos) /*!< Bit mask of STATE field. */
#define CLOCK_LFCLKSTAT_STATE_NotRunning (0UL) /*!< LFCLK not running */
#define CLOCK_LFCLKSTAT_STATE_Running (1UL) /*!< LFCLK running */

/* Bit 4 : ALWAYSRUN activated */
#define CLOCK_LFCLKSTAT_ALWAYSRUNNING_Pos (4UL) /*!< Position of ALWAYSRUNNING field. */
#define CLOCK_LFCLKSTAT_ALWAYSRUNNING_Msk (0x1UL << CLOCK_LFCLKSTAT_ALWAYSRUNNING_Pos) /*!< Bit mask of ALWAYSRUNNING field. */
#define CLOCK_LFCLKSTAT_ALWAYSRUNNING_NotRunning (0UL) /*!< Automatic clock control enabled */
#define CLOCK_LFCLKSTAT_ALWAYSRUNNING_Running (1UL) /*!< Oscillator is always running */

/* Bits 1..0 : Active clock source */
#define CLOCK_LFCLKSTAT_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_LFCLKSTAT_SRC_Msk (0x3UL << CLOCK_LFCLKSTAT_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_LFCLKSTAT_SRC_LFULP (0UL) /*!< 32.768 kHz ultra-low power RC oscillator */
#define CLOCK_LFCLKSTAT_SRC_LFRC (1UL) /*!< 32.768 kHz RC oscillator */
#define CLOCK_LFCLKSTAT_SRC_LFXO (2UL) /*!< 32.768 kHz crystal oscillator */
#define CLOCK_LFCLKSTAT_SRC_LFSYNT (3UL) /*!< 32.768 kHz synthesized from HFCLK */

/* Register: CLOCK_LFCLKSRCCOPY */
/* Description: Copy of LFCLKSRC register, set when LFCLKSTART task was triggered */

/* Bits 1..0 : Clock source */
#define CLOCK_LFCLKSRCCOPY_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_LFCLKSRCCOPY_SRC_Msk (0x3UL << CLOCK_LFCLKSRCCOPY_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_LFCLKSRCCOPY_SRC_LFULP (0UL) /*!< 32.768 kHz ultra-low power RC oscillator */
#define CLOCK_LFCLKSRCCOPY_SRC_LFRC (1UL) /*!< 32.768 kHz RC oscillator */
#define CLOCK_LFCLKSRCCOPY_SRC_LFXO (2UL) /*!< 32.768 kHz crystal oscillator */
#define CLOCK_LFCLKSRCCOPY_SRC_LFSYNT (3UL) /*!< 32.768 kHz synthesized from HFCLK */

/* Register: CLOCK_HFCLKCURRFREQ */
/* Description: Current frequency of HFCLK */

/* Bits 1..0 : Current high frequency clock (HCLK) frequency */
#define CLOCK_HFCLKCURRFREQ_HFCLKCURRFREQ_Pos (0UL) /*!< Position of HFCLKCURRFREQ field. */
#define CLOCK_HFCLKCURRFREQ_HFCLKCURRFREQ_Msk (0x3UL << CLOCK_HFCLKCURRFREQ_HFCLKCURRFREQ_Pos) /*!< Bit mask of HFCLKCURRFREQ field. */
#define CLOCK_HFCLKCURRFREQ_HFCLKCURRFREQ_Div1 (0UL) /*!< HFCLK divided by 1 */
#define CLOCK_HFCLKCURRFREQ_HFCLKCURRFREQ_Div2 (1UL) /*!< HFCLK divided by 2 */
#define CLOCK_HFCLKCURRFREQ_HFCLKCURRFREQ_Div4 (2UL) /*!< HFCLK divided by 4 */

/* Register: CLOCK_HFCLK192MCURRFREQ */
/* Description: Current frequency of HFCLK192M */

/* Bits 1..0 : Current high frequency clock (HCLK192M) frequency */
#define CLOCK_HFCLK192MCURRFREQ_HFCLK192MCURRFREQ_Pos (0UL) /*!< Position of HFCLK192MCURRFREQ field. */
#define CLOCK_HFCLK192MCURRFREQ_HFCLK192MCURRFREQ_Msk (0x3UL << CLOCK_HFCLK192MCURRFREQ_HFCLK192MCURRFREQ_Pos) /*!< Bit mask of HFCLK192MCURRFREQ field. */
#define CLOCK_HFCLK192MCURRFREQ_HFCLK192MCURRFREQ_Div1 (0UL) /*!< HFCLK192M divided by 1 */
#define CLOCK_HFCLK192MCURRFREQ_HFCLK192MCURRFREQ_Div2 (1UL) /*!< HFCLK192M divided by 2 */
#define CLOCK_HFCLK192MCURRFREQ_HFCLK192MCURRFREQ_Div4 (2UL) /*!< HFCLK192M divided by 4 */

/* Register: CLOCK_HFCLKAUDIORUN */
/* Description: Status indicating that HFCLKAUDIOSTART task has been triggered */

/* Bit 0 : HFCLKAUDIOSTART task triggered or not */
#define CLOCK_HFCLKAUDIORUN_STATUS_Pos (0UL) /*!< Position of STATUS field. */
#define CLOCK_HFCLKAUDIORUN_STATUS_Msk (0x1UL << CLOCK_HFCLKAUDIORUN_STATUS_Pos) /*!< Bit mask of STATUS field. */
#define CLOCK_HFCLKAUDIORUN_STATUS_NotTriggered (0UL) /*!< Task not triggered */
#define CLOCK_HFCLKAUDIORUN_STATUS_Triggered (1UL) /*!< Task triggered */

/* Register: CLOCK_HFCLKAUDIOSTAT */
/* Description: Status indicating which HFCLKAUDIO source is running */

/* Bit 16 : HFCLKAUDIO state */
#define CLOCK_HFCLKAUDIOSTAT_STATE_Pos (16UL) /*!< Position of STATE field. */
#define CLOCK_HFCLKAUDIOSTAT_STATE_Msk (0x1UL << CLOCK_HFCLKAUDIOSTAT_STATE_Pos) /*!< Bit mask of STATE field. */
#define CLOCK_HFCLKAUDIOSTAT_STATE_NotRunning (0UL) /*!< HFCLKAUDIO not running */
#define CLOCK_HFCLKAUDIOSTAT_STATE_Running (1UL) /*!< HFCLKAUDIO running */

/* Bit 4 : ALWAYSRUN activated */
#define CLOCK_HFCLKAUDIOSTAT_ALWAYSRUNNING_Pos (4UL) /*!< Position of ALWAYSRUNNING field. */
#define CLOCK_HFCLKAUDIOSTAT_ALWAYSRUNNING_Msk (0x1UL << CLOCK_HFCLKAUDIOSTAT_ALWAYSRUNNING_Pos) /*!< Bit mask of ALWAYSRUNNING field. */
#define CLOCK_HFCLKAUDIOSTAT_ALWAYSRUNNING_NotRunning (0UL) /*!< Automatic clock control enabled */
#define CLOCK_HFCLKAUDIOSTAT_ALWAYSRUNNING_Running (1UL) /*!< Oscillator is always running */

/* Bit 0 : Active clock source */
#define CLOCK_HFCLKAUDIOSTAT_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_HFCLKAUDIOSTAT_SRC_Msk (0x1UL << CLOCK_HFCLKAUDIOSTAT_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_HFCLKAUDIOSTAT_SRC_HFINT (0UL) /*!< Clock source: HFINT - on-chip oscillator */
#define CLOCK_HFCLKAUDIOSTAT_SRC_HFXO (1UL) /*!< Clock source: HFXO - derived from external 32 MHz crystal oscillator */

/* Register: CLOCK_HFCLK192MRUN */
/* Description: Status indicating that HFCLK192MSTART task has been triggered */

/* Bit 0 : HFCLK192MSTART task triggered or not */
#define CLOCK_HFCLK192MRUN_STATUS_Pos (0UL) /*!< Position of STATUS field. */
#define CLOCK_HFCLK192MRUN_STATUS_Msk (0x1UL << CLOCK_HFCLK192MRUN_STATUS_Pos) /*!< Bit mask of STATUS field. */
#define CLOCK_HFCLK192MRUN_STATUS_NotTriggered (0UL) /*!< Task not triggered */
#define CLOCK_HFCLK192MRUN_STATUS_Triggered (1UL) /*!< Task triggered */

/* Register: CLOCK_HFCLK192MSTAT */
/* Description: Status indicating which HFCLK192M source is running */

/* Bit 16 : HFCLK192M state */
#define CLOCK_HFCLK192MSTAT_STATE_Pos (16UL) /*!< Position of STATE field. */
#define CLOCK_HFCLK192MSTAT_STATE_Msk (0x1UL << CLOCK_HFCLK192MSTAT_STATE_Pos) /*!< Bit mask of STATE field. */
#define CLOCK_HFCLK192MSTAT_STATE_NotRunning (0UL) /*!< HFCLK192M not running */
#define CLOCK_HFCLK192MSTAT_STATE_Running (1UL) /*!< HFCLK192M running */

/* Bit 4 : ALWAYSRUN activated */
#define CLOCK_HFCLK192MSTAT_ALWAYSRUNNING_Pos (4UL) /*!< Position of ALWAYSRUNNING field. */
#define CLOCK_HFCLK192MSTAT_ALWAYSRUNNING_Msk (0x1UL << CLOCK_HFCLK192MSTAT_ALWAYSRUNNING_Pos) /*!< Bit mask of ALWAYSRUNNING field. */
#define CLOCK_HFCLK192MSTAT_ALWAYSRUNNING_NotRunning (0UL) /*!< Automatic clock control enabled */
#define CLOCK_HFCLK192MSTAT_ALWAYSRUNNING_Running (1UL) /*!< Oscillator is always running */

/* Bit 0 : Active clock source */
#define CLOCK_HFCLK192MSTAT_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_HFCLK192MSTAT_SRC_Msk (0x1UL << CLOCK_HFCLK192MSTAT_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_HFCLK192MSTAT_SRC_HFINT (0UL) /*!< Clock source: HFINT - on-chip oscillator */
#define CLOCK_HFCLK192MSTAT_SRC_HFXO (1UL) /*!< Clock source: HFXO - derived from external 32 MHz crystal oscillator */

/* Register: CLOCK_HFCLKSRC */
/* Description: Clock source for HFCLK128M/HFCLK64M */

/* Bit 0 : Select which HFCLK source is started by the HFCLKSTART task */
#define CLOCK_HFCLKSRC_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_HFCLKSRC_SRC_Msk (0x1UL << CLOCK_HFCLKSRC_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_HFCLKSRC_SRC_HFINT (0UL) /*!< HFCLKSTART task starts HFINT oscillator */
#define CLOCK_HFCLKSRC_SRC_HFXO (1UL) /*!< HFCLKSTART task starts HFXO oscillator */

/* Register: CLOCK_LFCLKSRC */
/* Description: Clock source for LFCLK */

/* Bits 1..0 : Select which LFCLK source is started by the LFCLKSTART task */
#define CLOCK_LFCLKSRC_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_LFCLKSRC_SRC_Msk (0x3UL << CLOCK_LFCLKSRC_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_LFCLKSRC_SRC_LFULP (0UL) /*!< 32.768 kHz ultra-low power RC oscillator */
#define CLOCK_LFCLKSRC_SRC_LFRC (1UL) /*!< 32.768 kHz RC oscillator */
#define CLOCK_LFCLKSRC_SRC_LFXO (2UL) /*!< 32.768 kHz crystal oscillator */
#define CLOCK_LFCLKSRC_SRC_LFSYNT (3UL) /*!< 32.768 kHz synthesized from HFCLK */

/* Register: CLOCK_HFCLKCTRL */
/* Description: HFCLK128M frequency configuration */

/* Bits 1..0 : High frequency clock HCLK */
#define CLOCK_HFCLKCTRL_HCLK_Pos (0UL) /*!< Position of HCLK field. */
#define CLOCK_HFCLKCTRL_HCLK_Msk (0x3UL << CLOCK_HFCLKCTRL_HCLK_Pos) /*!< Bit mask of HCLK field. */
#define CLOCK_HFCLKCTRL_HCLK_Div1 (0UL) /*!< Divide HFCLK by 1 */
#define CLOCK_HFCLKCTRL_HCLK_Div2 (1UL) /*!< Divide HFCLK by 2 */
#define CLOCK_HFCLKCTRL_HCLK_Div4 (2UL) /*!< Divide HFCLK by 4 */

/* Register: CLOCK_HFCLKAUDIO_FREQUENCY */
/* Description: Audio PLL frequency in 11.176 MHz - 11.402 MHz or 12.165 MHz - 12.411 MHz frequency bands */

/* Bits 15..0 : Frequency 0: 10.666 MHz 65535: 13.333 MHz */
#define CLOCK_HFCLKAUDIO_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
#define CLOCK_HFCLKAUDIO_FREQUENCY_FREQUENCY_Msk (0xFFFFUL << CLOCK_HFCLKAUDIO_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */

/* Register: CLOCK_HFCLKAUDIO_FREQINC */
/* Description: Frequency increment */

/* Bits 7..0 : Signed 8-bit frequency increment, applied to FREQUENCY every FREQINCPERIOD */
#define CLOCK_HFCLKAUDIO_FREQINC_FREQINC_Pos (0UL) /*!< Position of FREQINC field. */
#define CLOCK_HFCLKAUDIO_FREQINC_FREQINC_Msk (0xFFUL << CLOCK_HFCLKAUDIO_FREQINC_FREQINC_Pos) /*!< Bit mask of FREQINC field. */

/* Register: CLOCK_HFCLKAUDIO_FREQINCPERIOD */
/* Description: Frequency increment period 1 us steps */

/* Bits 15..0 : 0: Invalid 1: 1 us period 65535: 65535 us period */
#define CLOCK_HFCLKAUDIO_FREQINCPERIOD_FREQINCPERIOD_Pos (0UL) /*!< Position of FREQINCPERIOD field. */
#define CLOCK_HFCLKAUDIO_FREQINCPERIOD_FREQINCPERIOD_Msk (0xFFFFUL << CLOCK_HFCLKAUDIO_FREQINCPERIOD_FREQINCPERIOD_Pos) /*!< Bit mask of FREQINCPERIOD field. */

/* Register: CLOCK_HFCLKAUDIO_FREQINCENABLE */
/* Description: Frequency increment enable */

/* Bit 0 :   */
#define CLOCK_HFCLKAUDIO_FREQINCENABLE_FREQINCENABLE_Pos (0UL) /*!< Position of FREQINCENABLE field. */
#define CLOCK_HFCLKAUDIO_FREQINCENABLE_FREQINCENABLE_Msk (0x1UL << CLOCK_HFCLKAUDIO_FREQINCENABLE_FREQINCENABLE_Pos) /*!< Bit mask of FREQINCENABLE field. */
#define CLOCK_HFCLKAUDIO_FREQINCENABLE_FREQINCENABLE_Disabled (0UL) /*!< Disable frequency incrementation */
#define CLOCK_HFCLKAUDIO_FREQINCENABLE_FREQINCENABLE_Enabled (1UL) /*!< Enable frequency incrementation */

/* Register: CLOCK_HFCLKALWAYSRUN */
/* Description: Automatic or manual control of HFCLK128M/HFCLK64M */

/* Bit 0 : Ensure clock is always running */
#define CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Pos (0UL) /*!< Position of ALWAYSRUN field. */
#define CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Msk (0x1UL << CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Pos) /*!< Bit mask of ALWAYSRUN field. */
#define CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Automatic (0UL) /*!< Use automatic clock control */
#define CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_AlwaysRun (1UL) /*!< Ensure clock is always running */

/* Register: CLOCK_LFCLKALWAYSRUN */
/* Description: Automatic or manual control of LFCLK */

/* Bit 0 : Ensure clock is always running */
#define CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos (0UL) /*!< Position of ALWAYSRUN field. */
#define CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk (0x1UL << CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos) /*!< Bit mask of ALWAYSRUN field. */
#define CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Automatic (0UL) /*!< Use automatic clock control */
#define CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_AlwaysRun (1UL) /*!< Ensure clock is always running */

/* Register: CLOCK_HFCLKAUDIOSRC */
/* Description: Clock source for the HFCLKAUDIO oscillator */

/* Bit 0 : Select which HFCLKAUDIO source is started by the HFCLKAUDIOSTART task */
#define CLOCK_HFCLKAUDIOSRC_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_HFCLKAUDIOSRC_SRC_Msk (0x1UL << CLOCK_HFCLKAUDIOSRC_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_HFCLKAUDIOSRC_SRC_HFINT (0UL) /*!< HFCLKAUDIOSTART task starts HFINT oscillator */
#define CLOCK_HFCLKAUDIOSRC_SRC_HFXO (1UL) /*!< HFCLKAUDIOSTART task starts HFXO oscillator */

/* Register: CLOCK_HFCLKAUDIOALWAYSRUN */
/* Description: Automatic or manual control of HFCLKAUDIO */

/* Bit 0 : Ensure clock is always running */
#define CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_Pos (0UL) /*!< Position of ALWAYSRUN field. */
#define CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_Msk (0x1UL << CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_Pos) /*!< Bit mask of ALWAYSRUN field. */
#define CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_Automatic (0UL) /*!< Use automatic clock control */
#define CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_AlwaysRun (1UL) /*!< Ensure clock is always running */

/* Register: CLOCK_HFCLK192MSRC */
/* Description: Clock source for HFCLK192M */

/* Bit 0 : Select which HFCLK192M source is started by the HFCLK192MSTART task */
#define CLOCK_HFCLK192MSRC_SRC_Pos (0UL) /*!< Position of SRC field. */
#define CLOCK_HFCLK192MSRC_SRC_Msk (0x1UL << CLOCK_HFCLK192MSRC_SRC_Pos) /*!< Bit mask of SRC field. */
#define CLOCK_HFCLK192MSRC_SRC_HFINT (0UL) /*!< HFCLK192MSTART task starts HFINT oscillator */
#define CLOCK_HFCLK192MSRC_SRC_HFXO (1UL) /*!< HFCLK192MSTART task starts HFXO oscillator */

/* Register: CLOCK_HFCLK192MALWAYSRUN */
/* Description: Automatic or manual control of HFCLK192M */

/* Bit 0 : Ensure clock is always running */
#define CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_Pos (0UL) /*!< Position of ALWAYSRUN field. */
#define CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_Msk (0x1UL << CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_Pos) /*!< Bit mask of ALWAYSRUN field. */
#define CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_Automatic (0UL) /*!< Use automatic clock control */
#define CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_AlwaysRun (1UL) /*!< Ensure clock is always running */

/* Register: CLOCK_HFCLK192MCTRL */
/* Description: HFCLK192M frequency configuration */

/* Bits 1..0 : High frequency clock HCLK192M */
#define CLOCK_HFCLK192MCTRL_HCLK192M_Pos (0UL) /*!< Position of HCLK192M field. */
#define CLOCK_HFCLK192MCTRL_HCLK192M_Msk (0x3UL << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) /*!< Bit mask of HCLK192M field. */
#define CLOCK_HFCLK192MCTRL_HCLK192M_Div1 (0UL) /*!< Divide HFCLK192M by 1 */
#define CLOCK_HFCLK192MCTRL_HCLK192M_Div2 (1UL) /*!< Divide HFCLK192M by 2 */
#define CLOCK_HFCLK192MCTRL_HCLK192M_Div4 (2UL) /*!< Divide HFCLK192M by 4 */


/* Peripheral: COMP */
/* Description: Comparator 0 */

/* Register: COMP_TASKS_START */
/* Description: Start comparator */

/* Bit 0 : Start comparator */
#define COMP_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define COMP_TASKS_START_TASKS_START_Msk (0x1UL << COMP_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define COMP_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: COMP_TASKS_STOP */
/* Description: Stop comparator */

/* Bit 0 : Stop comparator */
#define COMP_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define COMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << COMP_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define COMP_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: COMP_TASKS_SAMPLE */
/* Description: Sample comparator value */

/* Bit 0 : Sample comparator value */
#define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL) /*!< Position of TASKS_SAMPLE field. */
#define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos) /*!< Bit mask of TASKS_SAMPLE field. */
#define COMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (1UL) /*!< Trigger task */

/* Register: COMP_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define COMP_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define COMP_SUBSCRIBE_START_EN_Msk (0x1UL << COMP_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define COMP_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define COMP_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define COMP_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define COMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: COMP_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define COMP_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define COMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << COMP_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define COMP_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define COMP_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define COMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define COMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: COMP_SUBSCRIBE_SAMPLE */
/* Description: Subscribe configuration for task SAMPLE */

/* Bit 31 :   */
#define COMP_SUBSCRIBE_SAMPLE_EN_Pos (31UL) /*!< Position of EN field. */
#define COMP_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << COMP_SUBSCRIBE_SAMPLE_EN_Pos) /*!< Bit mask of EN field. */
#define COMP_SUBSCRIBE_SAMPLE_EN_Disabled (0UL) /*!< Disable subscription */
#define COMP_SUBSCRIBE_SAMPLE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SAMPLE will subscribe to */
#define COMP_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define COMP_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << COMP_SUBSCRIBE_SAMPLE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: COMP_EVENTS_READY */
/* Description: COMP is ready and output is valid */

/* Bit 0 : COMP is ready and output is valid */
#define COMP_EVENTS_READY_EVENTS_READY_Pos (0UL) /*!< Position of EVENTS_READY field. */
#define COMP_EVENTS_READY_EVENTS_READY_Msk (0x1UL << COMP_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY field. */
#define COMP_EVENTS_READY_EVENTS_READY_NotGenerated (0UL) /*!< Event not generated */
#define COMP_EVENTS_READY_EVENTS_READY_Generated (1UL) /*!< Event generated */

/* Register: COMP_EVENTS_DOWN */
/* Description: Downward crossing */

/* Bit 0 : Downward crossing */
#define COMP_EVENTS_DOWN_EVENTS_DOWN_Pos (0UL) /*!< Position of EVENTS_DOWN field. */
#define COMP_EVENTS_DOWN_EVENTS_DOWN_Msk (0x1UL << COMP_EVENTS_DOWN_EVENTS_DOWN_Pos) /*!< Bit mask of EVENTS_DOWN field. */
#define COMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated (0UL) /*!< Event not generated */
#define COMP_EVENTS_DOWN_EVENTS_DOWN_Generated (1UL) /*!< Event generated */

/* Register: COMP_EVENTS_UP */
/* Description: Upward crossing */

/* Bit 0 : Upward crossing */
#define COMP_EVENTS_UP_EVENTS_UP_Pos (0UL) /*!< Position of EVENTS_UP field. */
#define COMP_EVENTS_UP_EVENTS_UP_Msk (0x1UL << COMP_EVENTS_UP_EVENTS_UP_Pos) /*!< Bit mask of EVENTS_UP field. */
#define COMP_EVENTS_UP_EVENTS_UP_NotGenerated (0UL) /*!< Event not generated */
#define COMP_EVENTS_UP_EVENTS_UP_Generated (1UL) /*!< Event generated */

/* Register: COMP_EVENTS_CROSS */
/* Description: Downward or upward crossing */

/* Bit 0 : Downward or upward crossing */
#define COMP_EVENTS_CROSS_EVENTS_CROSS_Pos (0UL) /*!< Position of EVENTS_CROSS field. */
#define COMP_EVENTS_CROSS_EVENTS_CROSS_Msk (0x1UL << COMP_EVENTS_CROSS_EVENTS_CROSS_Pos) /*!< Bit mask of EVENTS_CROSS field. */
#define COMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated (0UL) /*!< Event not generated */
#define COMP_EVENTS_CROSS_EVENTS_CROSS_Generated (1UL) /*!< Event generated */

/* Register: COMP_PUBLISH_READY */
/* Description: Publish configuration for event READY */

/* Bit 31 :   */
#define COMP_PUBLISH_READY_EN_Pos (31UL) /*!< Position of EN field. */
#define COMP_PUBLISH_READY_EN_Msk (0x1UL << COMP_PUBLISH_READY_EN_Pos) /*!< Bit mask of EN field. */
#define COMP_PUBLISH_READY_EN_Disabled (0UL) /*!< Disable publishing */
#define COMP_PUBLISH_READY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event READY will publish to. */
#define COMP_PUBLISH_READY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define COMP_PUBLISH_READY_CHIDX_Msk (0xFFUL << COMP_PUBLISH_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: COMP_PUBLISH_DOWN */
/* Description: Publish configuration for event DOWN */

/* Bit 31 :   */
#define COMP_PUBLISH_DOWN_EN_Pos (31UL) /*!< Position of EN field. */
#define COMP_PUBLISH_DOWN_EN_Msk (0x1UL << COMP_PUBLISH_DOWN_EN_Pos) /*!< Bit mask of EN field. */
#define COMP_PUBLISH_DOWN_EN_Disabled (0UL) /*!< Disable publishing */
#define COMP_PUBLISH_DOWN_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DOWN will publish to. */
#define COMP_PUBLISH_DOWN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define COMP_PUBLISH_DOWN_CHIDX_Msk (0xFFUL << COMP_PUBLISH_DOWN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: COMP_PUBLISH_UP */
/* Description: Publish configuration for event UP */

/* Bit 31 :   */
#define COMP_PUBLISH_UP_EN_Pos (31UL) /*!< Position of EN field. */
#define COMP_PUBLISH_UP_EN_Msk (0x1UL << COMP_PUBLISH_UP_EN_Pos) /*!< Bit mask of EN field. */
#define COMP_PUBLISH_UP_EN_Disabled (0UL) /*!< Disable publishing */
#define COMP_PUBLISH_UP_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event UP will publish to. */
#define COMP_PUBLISH_UP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define COMP_PUBLISH_UP_CHIDX_Msk (0xFFUL << COMP_PUBLISH_UP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: COMP_PUBLISH_CROSS */
/* Description: Publish configuration for event CROSS */

/* Bit 31 :   */
#define COMP_PUBLISH_CROSS_EN_Pos (31UL) /*!< Position of EN field. */
#define COMP_PUBLISH_CROSS_EN_Msk (0x1UL << COMP_PUBLISH_CROSS_EN_Pos) /*!< Bit mask of EN field. */
#define COMP_PUBLISH_CROSS_EN_Disabled (0UL) /*!< Disable publishing */
#define COMP_PUBLISH_CROSS_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CROSS will publish to. */
#define COMP_PUBLISH_CROSS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define COMP_PUBLISH_CROSS_CHIDX_Msk (0xFFUL << COMP_PUBLISH_CROSS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: COMP_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 4 : Shortcut between event CROSS and task STOP */
#define COMP_SHORTS_CROSS_STOP_Pos (4UL) /*!< Position of CROSS_STOP field. */
#define COMP_SHORTS_CROSS_STOP_Msk (0x1UL << COMP_SHORTS_CROSS_STOP_Pos) /*!< Bit mask of CROSS_STOP field. */
#define COMP_SHORTS_CROSS_STOP_Disabled (0UL) /*!< Disable shortcut */
#define COMP_SHORTS_CROSS_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event UP and task STOP */
#define COMP_SHORTS_UP_STOP_Pos (3UL) /*!< Position of UP_STOP field. */
#define COMP_SHORTS_UP_STOP_Msk (0x1UL << COMP_SHORTS_UP_STOP_Pos) /*!< Bit mask of UP_STOP field. */
#define COMP_SHORTS_UP_STOP_Disabled (0UL) /*!< Disable shortcut */
#define COMP_SHORTS_UP_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 2 : Shortcut between event DOWN and task STOP */
#define COMP_SHORTS_DOWN_STOP_Pos (2UL) /*!< Position of DOWN_STOP field. */
#define COMP_SHORTS_DOWN_STOP_Msk (0x1UL << COMP_SHORTS_DOWN_STOP_Pos) /*!< Bit mask of DOWN_STOP field. */
#define COMP_SHORTS_DOWN_STOP_Disabled (0UL) /*!< Disable shortcut */
#define COMP_SHORTS_DOWN_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 1 : Shortcut between event READY and task STOP */
#define COMP_SHORTS_READY_STOP_Pos (1UL) /*!< Position of READY_STOP field. */
#define COMP_SHORTS_READY_STOP_Msk (0x1UL << COMP_SHORTS_READY_STOP_Pos) /*!< Bit mask of READY_STOP field. */
#define COMP_SHORTS_READY_STOP_Disabled (0UL) /*!< Disable shortcut */
#define COMP_SHORTS_READY_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event READY and task SAMPLE */
#define COMP_SHORTS_READY_SAMPLE_Pos (0UL) /*!< Position of READY_SAMPLE field. */
#define COMP_SHORTS_READY_SAMPLE_Msk (0x1UL << COMP_SHORTS_READY_SAMPLE_Pos) /*!< Bit mask of READY_SAMPLE field. */
#define COMP_SHORTS_READY_SAMPLE_Disabled (0UL) /*!< Disable shortcut */
#define COMP_SHORTS_READY_SAMPLE_Enabled (1UL) /*!< Enable shortcut */

/* Register: COMP_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 3 : Enable or disable interrupt for event CROSS */
#define COMP_INTEN_CROSS_Pos (3UL) /*!< Position of CROSS field. */
#define COMP_INTEN_CROSS_Msk (0x1UL << COMP_INTEN_CROSS_Pos) /*!< Bit mask of CROSS field. */
#define COMP_INTEN_CROSS_Disabled (0UL) /*!< Disable */
#define COMP_INTEN_CROSS_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event UP */
#define COMP_INTEN_UP_Pos (2UL) /*!< Position of UP field. */
#define COMP_INTEN_UP_Msk (0x1UL << COMP_INTEN_UP_Pos) /*!< Bit mask of UP field. */
#define COMP_INTEN_UP_Disabled (0UL) /*!< Disable */
#define COMP_INTEN_UP_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event DOWN */
#define COMP_INTEN_DOWN_Pos (1UL) /*!< Position of DOWN field. */
#define COMP_INTEN_DOWN_Msk (0x1UL << COMP_INTEN_DOWN_Pos) /*!< Bit mask of DOWN field. */
#define COMP_INTEN_DOWN_Disabled (0UL) /*!< Disable */
#define COMP_INTEN_DOWN_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event READY */
#define COMP_INTEN_READY_Pos (0UL) /*!< Position of READY field. */
#define COMP_INTEN_READY_Msk (0x1UL << COMP_INTEN_READY_Pos) /*!< Bit mask of READY field. */
#define COMP_INTEN_READY_Disabled (0UL) /*!< Disable */
#define COMP_INTEN_READY_Enabled (1UL) /*!< Enable */

/* Register: COMP_INTENSET */
/* Description: Enable interrupt */

/* Bit 3 : Write '1' to enable interrupt for event CROSS */
#define COMP_INTENSET_CROSS_Pos (3UL) /*!< Position of CROSS field. */
#define COMP_INTENSET_CROSS_Msk (0x1UL << COMP_INTENSET_CROSS_Pos) /*!< Bit mask of CROSS field. */
#define COMP_INTENSET_CROSS_Disabled (0UL) /*!< Read: Disabled */
#define COMP_INTENSET_CROSS_Enabled (1UL) /*!< Read: Enabled */
#define COMP_INTENSET_CROSS_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event UP */
#define COMP_INTENSET_UP_Pos (2UL) /*!< Position of UP field. */
#define COMP_INTENSET_UP_Msk (0x1UL << COMP_INTENSET_UP_Pos) /*!< Bit mask of UP field. */
#define COMP_INTENSET_UP_Disabled (0UL) /*!< Read: Disabled */
#define COMP_INTENSET_UP_Enabled (1UL) /*!< Read: Enabled */
#define COMP_INTENSET_UP_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event DOWN */
#define COMP_INTENSET_DOWN_Pos (1UL) /*!< Position of DOWN field. */
#define COMP_INTENSET_DOWN_Msk (0x1UL << COMP_INTENSET_DOWN_Pos) /*!< Bit mask of DOWN field. */
#define COMP_INTENSET_DOWN_Disabled (0UL) /*!< Read: Disabled */
#define COMP_INTENSET_DOWN_Enabled (1UL) /*!< Read: Enabled */
#define COMP_INTENSET_DOWN_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event READY */
#define COMP_INTENSET_READY_Pos (0UL) /*!< Position of READY field. */
#define COMP_INTENSET_READY_Msk (0x1UL << COMP_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
#define COMP_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
#define COMP_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
#define COMP_INTENSET_READY_Set (1UL) /*!< Enable */

/* Register: COMP_INTENCLR */
/* Description: Disable interrupt */

/* Bit 3 : Write '1' to disable interrupt for event CROSS */
#define COMP_INTENCLR_CROSS_Pos (3UL) /*!< Position of CROSS field. */
#define COMP_INTENCLR_CROSS_Msk (0x1UL << COMP_INTENCLR_CROSS_Pos) /*!< Bit mask of CROSS field. */
#define COMP_INTENCLR_CROSS_Disabled (0UL) /*!< Read: Disabled */
#define COMP_INTENCLR_CROSS_Enabled (1UL) /*!< Read: Enabled */
#define COMP_INTENCLR_CROSS_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event UP */
#define COMP_INTENCLR_UP_Pos (2UL) /*!< Position of UP field. */
#define COMP_INTENCLR_UP_Msk (0x1UL << COMP_INTENCLR_UP_Pos) /*!< Bit mask of UP field. */
#define COMP_INTENCLR_UP_Disabled (0UL) /*!< Read: Disabled */
#define COMP_INTENCLR_UP_Enabled (1UL) /*!< Read: Enabled */
#define COMP_INTENCLR_UP_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event DOWN */
#define COMP_INTENCLR_DOWN_Pos (1UL) /*!< Position of DOWN field. */
#define COMP_INTENCLR_DOWN_Msk (0x1UL << COMP_INTENCLR_DOWN_Pos) /*!< Bit mask of DOWN field. */
#define COMP_INTENCLR_DOWN_Disabled (0UL) /*!< Read: Disabled */
#define COMP_INTENCLR_DOWN_Enabled (1UL) /*!< Read: Enabled */
#define COMP_INTENCLR_DOWN_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event READY */
#define COMP_INTENCLR_READY_Pos (0UL) /*!< Position of READY field. */
#define COMP_INTENCLR_READY_Msk (0x1UL << COMP_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
#define COMP_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
#define COMP_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
#define COMP_INTENCLR_READY_Clear (1UL) /*!< Disable */

/* Register: COMP_RESULT */
/* Description: Compare result */

/* Bit 0 : Result of last compare. Decision point SAMPLE task. */
#define COMP_RESULT_RESULT_Pos (0UL) /*!< Position of RESULT field. */
#define COMP_RESULT_RESULT_Msk (0x1UL << COMP_RESULT_RESULT_Pos) /*!< Bit mask of RESULT field. */
#define COMP_RESULT_RESULT_Below (0UL) /*!< Input voltage is below the threshold (VIN+ &lt; VIN-) */
#define COMP_RESULT_RESULT_Above (1UL) /*!< Input voltage is above the threshold (VIN+ &gt; VIN-) */

/* Register: COMP_BGREADY */
/* Description: COMP module is ready */

/* Bit 0 : Result of last compare. Decision point SAMPLE task. */
#define COMP_BGREADY_STATE_Pos (0UL) /*!< Position of STATE field. */
#define COMP_BGREADY_STATE_Msk (0x1UL << COMP_BGREADY_STATE_Pos) /*!< Bit mask of STATE field. */
#define COMP_BGREADY_STATE_NotReady (0UL) /*!< Module is not ready */
#define COMP_BGREADY_STATE_Ready (1UL) /*!< Module is ready */

/* Register: COMP_ENABLE */
/* Description: COMP enable */

/* Bits 1..0 : Enable or disable COMP */
#define COMP_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define COMP_ENABLE_ENABLE_Msk (0x3UL << COMP_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define COMP_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
#define COMP_ENABLE_ENABLE_Enabled (2UL) /*!< Enable */

/* Register: COMP_PSEL */
/* Description: Pin select */

/* Bits 2..0 : Analog pin select */
#define COMP_PSEL_PSEL_Pos (0UL) /*!< Position of PSEL field. */
#define COMP_PSEL_PSEL_Msk (0x7UL << COMP_PSEL_PSEL_Pos) /*!< Bit mask of PSEL field. */
#define COMP_PSEL_PSEL_AnalogInput0 (0UL) /*!< AIN0 selected as analog input */
#define COMP_PSEL_PSEL_AnalogInput1 (1UL) /*!< AIN1 selected as analog input */
#define COMP_PSEL_PSEL_AnalogInput2 (2UL) /*!< AIN2 selected as analog input */
#define COMP_PSEL_PSEL_AnalogInput3 (3UL) /*!< AIN3 selected as analog input */
#define COMP_PSEL_PSEL_AnalogInput4 (4UL) /*!< AIN4 selected as analog input */
#define COMP_PSEL_PSEL_AnalogInput5 (5UL) /*!< AIN5 selected as analog input */
#define COMP_PSEL_PSEL_AnalogInput6 (6UL) /*!< AIN6 selected as analog input */
#define COMP_PSEL_PSEL_AnalogInput7 (7UL) /*!< AIN7 selected as analog input */

/* Register: COMP_REFSEL */
/* Description: Reference source select for single-ended mode */

/* Bits 2..0 : Reference select */
#define COMP_REFSEL_REFSEL_Pos (0UL) /*!< Position of REFSEL field. */
#define COMP_REFSEL_REFSEL_Msk (0x7UL << COMP_REFSEL_REFSEL_Pos) /*!< Bit mask of REFSEL field. */
#define COMP_REFSEL_REFSEL_Int1V2 (0UL) /*!< VREF = internal 1.2 V reference (VDD &gt;= 1.7 V) */
#define COMP_REFSEL_REFSEL_Int1V8 (1UL) /*!< VREF = internal 1.8 V reference (VDD &gt;= VREF + 0.2 V) */
#define COMP_REFSEL_REFSEL_Int2V4 (2UL) /*!< VREF = internal 2.4 V reference (VDD &gt;= VREF + 0.2 V) */
#define COMP_REFSEL_REFSEL_VDD (4UL) /*!< VREF = VDD */
#define COMP_REFSEL_REFSEL_ARef (5UL) /*!< VREF = AREF */

/* Register: COMP_EXTREFSEL */
/* Description: External reference select */

/* Bits 2..0 : External analog reference select */
#define COMP_EXTREFSEL_EXTREFSEL_Pos (0UL) /*!< Position of EXTREFSEL field. */
#define COMP_EXTREFSEL_EXTREFSEL_Msk (0x7UL << COMP_EXTREFSEL_EXTREFSEL_Pos) /*!< Bit mask of EXTREFSEL field. */
#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference0 (0UL) /*!< Use AIN0 as external analog reference */
#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference1 (1UL) /*!< Use AIN1 as external analog reference */
#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference2 (2UL) /*!< Use AIN2 as external analog reference */
#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference3 (3UL) /*!< Use AIN3 as external analog reference */
#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference4 (4UL) /*!< Use AIN4 as external analog reference */
#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference5 (5UL) /*!< Use AIN5 as external analog reference */
#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference6 (6UL) /*!< Use AIN6 as external analog reference */
#define COMP_EXTREFSEL_EXTREFSEL_AnalogReference7 (7UL) /*!< Use AIN7 as external analog reference */

/* Register: COMP_TH */
/* Description: Threshold configuration for hysteresis unit */

/* Bits 13..8 : VUP = (THUP+1)/64*VREF */
#define COMP_TH_THUP_Pos (8UL) /*!< Position of THUP field. */
#define COMP_TH_THUP_Msk (0x3FUL << COMP_TH_THUP_Pos) /*!< Bit mask of THUP field. */

/* Bits 5..0 : VDOWN = (THDOWN+1)/64*VREF */
#define COMP_TH_THDOWN_Pos (0UL) /*!< Position of THDOWN field. */
#define COMP_TH_THDOWN_Msk (0x3FUL << COMP_TH_THDOWN_Pos) /*!< Bit mask of THDOWN field. */

/* Register: COMP_MODE */
/* Description: Mode configuration */

/* Bit 8 : Main operation modes */
#define COMP_MODE_MAIN_Pos (8UL) /*!< Position of MAIN field. */
#define COMP_MODE_MAIN_Msk (0x1UL << COMP_MODE_MAIN_Pos) /*!< Bit mask of MAIN field. */
#define COMP_MODE_MAIN_SE (0UL) /*!< Single-ended mode */
#define COMP_MODE_MAIN_Diff (1UL) /*!< Differential mode */

/* Bits 1..0 : Speed and power modes */
#define COMP_MODE_SP_Pos (0UL) /*!< Position of SP field. */
#define COMP_MODE_SP_Msk (0x3UL << COMP_MODE_SP_Pos) /*!< Bit mask of SP field. */
#define COMP_MODE_SP_Low (0UL) /*!< Low-power mode */
#define COMP_MODE_SP_Normal (1UL) /*!< Normal mode */
#define COMP_MODE_SP_High (2UL) /*!< High-speed mode */

/* Register: COMP_HYST */
/* Description: Comparator hysteresis enable */

/* Bit 0 : Comparator hysteresis */
#define COMP_HYST_HYST_Pos (0UL) /*!< Position of HYST field. */
#define COMP_HYST_HYST_Msk (0x1UL << COMP_HYST_HYST_Pos) /*!< Bit mask of HYST field. */
#define COMP_HYST_HYST_NoHyst (0UL) /*!< Comparator hysteresis disabled */
#define COMP_HYST_HYST_Hyst50mV (1UL) /*!< Comparator hysteresis enabled */

/* Register: COMP_ISOURCE */
/* Description: Current source select on analog input */

/* Bits 1..0 : Comparator hysteresis */
#define COMP_ISOURCE_ISOURCE_Pos (0UL) /*!< Position of ISOURCE field. */
#define COMP_ISOURCE_ISOURCE_Msk (0x3UL << COMP_ISOURCE_ISOURCE_Pos) /*!< Bit mask of ISOURCE field. */
#define COMP_ISOURCE_ISOURCE_Off (0UL) /*!< Current source disabled */
#define COMP_ISOURCE_ISOURCE_Ien2mA5 (1UL) /*!< Current source enabled (+/- 2.5 uA) */
#define COMP_ISOURCE_ISOURCE_Ien5mA (2UL) /*!< Current source enabled (+/- 5 uA) */
#define COMP_ISOURCE_ISOURCE_Ien10mA (3UL) /*!< Current source enabled (+/- 10 uA) */

/* Register: COMP_REFTRIM */
/* Description: Trim internal band gap reference, copied from FICR (COMPREFTRIM register) at reset */

/* Bits 4..0 : Trimming value */
#define COMP_REFTRIM_REFTRIM_Pos (0UL) /*!< Position of REFTRIM field. */
#define COMP_REFTRIM_REFTRIM_Msk (0x1FUL << COMP_REFTRIM_REFTRIM_Pos) /*!< Bit mask of REFTRIM field. */

/* Register: COMP_ATECOMP */
/* Description: Analog test bus control for comparator */

/* Bits 1..0 : Configure connection of comparator to analog test bus */
#define COMP_ATECOMP_COMP_Pos (0UL) /*!< Position of COMP field. */
#define COMP_ATECOMP_COMP_Msk (0x3UL << COMP_ATECOMP_COMP_Pos) /*!< Bit mask of COMP field. */
#define COMP_ATECOMP_COMP_Disconnected (0UL) /*!< Disconnect */
#define COMP_ATECOMP_COMP_VIN (1UL) /*!< Connect VIN+ to ATB0 and VIN- to ATB1 (VIN- only in differential mode) */
#define COMP_ATECOMP_COMP_VRef (2UL) /*!< Connect internal bandgap voltage to ATB0 */
#define COMP_ATECOMP_COMP_Future (3UL) /*!< Reserved for future use */


/* Peripheral: CRYPTOCELL */
/* Description: ARM TrustZone CryptoCell register interface */

/* Register: CRYPTOCELL_TASKZEROPENALTY2 */
/* Description: CRYPTOCELL PcgcSlave: Set the penalty to zero for power/clock pair 2 */

/* Bit 0 :   */
#define CRYPTOCELL_TASKZEROPENALTY2_TASKZEROPENALTY2_Pos (0UL) /*!< Position of TASKZEROPENALTY2 field. */
#define CRYPTOCELL_TASKZEROPENALTY2_TASKZEROPENALTY2_Msk (0x1UL << CRYPTOCELL_TASKZEROPENALTY2_TASKZEROPENALTY2_Pos) /*!< Bit mask of TASKZEROPENALTY2 field. */

/* Register: CRYPTOCELL_TASKFULLPENALTY2 */
/* Description: CRYPTOCELL PcgcSlave: Set the penalty to full for power/clock pair 2 */

/* Bit 0 :   */
#define CRYPTOCELL_TASKFULLPENALTY2_TASKFULLPENALTY2_Pos (0UL) /*!< Position of TASKFULLPENALTY2 field. */
#define CRYPTOCELL_TASKFULLPENALTY2_TASKFULLPENALTY2_Msk (0x1UL << CRYPTOCELL_TASKFULLPENALTY2_TASKFULLPENALTY2_Pos) /*!< Bit mask of TASKFULLPENALTY2 field. */

/* Register: CRYPTOCELL_TASKZEROPENALTY1 */
/* Description: CRYPTOCELL PcgcSlave: Set the penalty to zero for power/clock pair 1 */

/* Bit 0 :   */
#define CRYPTOCELL_TASKZEROPENALTY1_TASKZEROPENALTY1_Pos (0UL) /*!< Position of TASKZEROPENALTY1 field. */
#define CRYPTOCELL_TASKZEROPENALTY1_TASKZEROPENALTY1_Msk (0x1UL << CRYPTOCELL_TASKZEROPENALTY1_TASKZEROPENALTY1_Pos) /*!< Bit mask of TASKZEROPENALTY1 field. */

/* Register: CRYPTOCELL_TASKFULLPENALTY1 */
/* Description: CRYPTOCELL PcgcSlave: Set the penalty to full for power/clock pair 1 */

/* Bit 0 :   */
#define CRYPTOCELL_TASKFULLPENALTY1_TASKFULLPENALTY1_Pos (0UL) /*!< Position of TASKFULLPENALTY1 field. */
#define CRYPTOCELL_TASKFULLPENALTY1_TASKFULLPENALTY1_Msk (0x1UL << CRYPTOCELL_TASKFULLPENALTY1_TASKFULLPENALTY1_Pos) /*!< Bit mask of TASKFULLPENALTY1 field. */

/* Register: CRYPTOCELL_TASKZEROPENALTY0 */
/* Description: CRYPTOCELL PcgcSlave: Set the penalty to zero for power/clock pair 0 */

/* Bit 0 :   */
#define CRYPTOCELL_TASKZEROPENALTY0_TASKZEROPENALTY0_Pos (0UL) /*!< Position of TASKZEROPENALTY0 field. */
#define CRYPTOCELL_TASKZEROPENALTY0_TASKZEROPENALTY0_Msk (0x1UL << CRYPTOCELL_TASKZEROPENALTY0_TASKZEROPENALTY0_Pos) /*!< Bit mask of TASKZEROPENALTY0 field. */

/* Register: CRYPTOCELL_TASKFULLPENALTY0 */
/* Description: CRYPTOCELL PcgcSlave: Set the penalty to full for power/clock pair 0 */

/* Bit 0 :   */
#define CRYPTOCELL_TASKFULLPENALTY0_TASKFULLPENALTY0_Pos (0UL) /*!< Position of TASKFULLPENALTY0 field. */
#define CRYPTOCELL_TASKFULLPENALTY0_TASKFULLPENALTY0_Msk (0x1UL << CRYPTOCELL_TASKFULLPENALTY0_TASKFULLPENALTY0_Pos) /*!< Bit mask of TASKFULLPENALTY0 field. */

/* Register: CRYPTOCELL_ENABLE */
/* Description: Enable CRYPTOCELL subsystem. */

/* Bit 0 : Enable or disable the CRYPTOCELL subsystem. */
#define CRYPTOCELL_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define CRYPTOCELL_ENABLE_ENABLE_Msk (0x1UL << CRYPTOCELL_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define CRYPTOCELL_ENABLE_ENABLE_Disabled (0UL) /*!< CRYPTOCELL subsystem disabled. */
#define CRYPTOCELL_ENABLE_ENABLE_Enabled (1UL) /*!< CRYPTOCELL subsystem enabled. */

/* Register: CRYPTOCELL_PENALTYRG0 */
/* Description: CRYPTOCELL PcgcSlave: Penalty reg power/clock pair 0 */

/* Bits 1..0 :   */
#define CRYPTOCELL_PENALTYRG0_PENALTYRG0_Pos (0UL) /*!< Position of PENALTYRG0 field. */
#define CRYPTOCELL_PENALTYRG0_PENALTYRG0_Msk (0x3UL << CRYPTOCELL_PENALTYRG0_PENALTYRG0_Pos) /*!< Bit mask of PENALTYRG0 field. */

/* Register: CRYPTOCELL_PENALTYRG1 */
/* Description: CRYPTOCELL PcgcSlave: Penalty reg power/clock pair 1 */

/* Bits 1..0 :   */
#define CRYPTOCELL_PENALTYRG1_PENALTYRG1_Pos (0UL) /*!< Position of PENALTYRG1 field. */
#define CRYPTOCELL_PENALTYRG1_PENALTYRG1_Msk (0x3UL << CRYPTOCELL_PENALTYRG1_PENALTYRG1_Pos) /*!< Bit mask of PENALTYRG1 field. */

/* Register: CRYPTOCELL_PENALTYRG2 */
/* Description: CRYPTOCELL PcgcSlave: Penalty reg power/clock pair 2 */

/* Bits 1..0 :   */
#define CRYPTOCELL_PENALTYRG2_PENALTYRG2_Pos (0UL) /*!< Position of PENALTYRG2 field. */
#define CRYPTOCELL_PENALTYRG2_PENALTYRG2_Msk (0x3UL << CRYPTOCELL_PENALTYRG2_PENALTYRG2_Pos) /*!< Bit mask of PENALTYRG2 field. */

/* Register: CRYPTOCELL_FORCEOVERRIDE0 */
/* Description: CRYPTOCELL and CC312KmuInterface PcgcSlave: Override power/clock pair 0 */

/* Bits 31..0 :   */
#define CRYPTOCELL_FORCEOVERRIDE0_FORCEOVERRIDE0_Pos (0UL) /*!< Position of FORCEOVERRIDE0 field. */
#define CRYPTOCELL_FORCEOVERRIDE0_FORCEOVERRIDE0_Msk (0xFFFFFFFFUL << CRYPTOCELL_FORCEOVERRIDE0_FORCEOVERRIDE0_Pos) /*!< Bit mask of FORCEOVERRIDE0 field. */

/* Register: CRYPTOCELL_FORCEOVERRIDE1 */
/* Description: CRYPTOCELL PcgcSlave: Override power/clock pair 1 */

/* Bits 31..0 :   */
#define CRYPTOCELL_FORCEOVERRIDE1_FORCEOVERRIDE1_Pos (0UL) /*!< Position of FORCEOVERRIDE1 field. */
#define CRYPTOCELL_FORCEOVERRIDE1_FORCEOVERRIDE1_Msk (0xFFFFFFFFUL << CRYPTOCELL_FORCEOVERRIDE1_FORCEOVERRIDE1_Pos) /*!< Bit mask of FORCEOVERRIDE1 field. */

/* Register: CRYPTOCELL_FORCEOVERRIDE2 */
/* Description: CRYPTOCELL PcgcSlave: Override power/clock pair 2 */

/* Bits 31..0 :   */
#define CRYPTOCELL_FORCEOVERRIDE2_FORCEOVERRIDE2_Pos (0UL) /*!< Position of FORCEOVERRIDE2 field. */
#define CRYPTOCELL_FORCEOVERRIDE2_FORCEOVERRIDE2_Msk (0xFFFFFFFFUL << CRYPTOCELL_FORCEOVERRIDE2_FORCEOVERRIDE2_Pos) /*!< Bit mask of FORCEOVERRIDE2 field. */


/* Peripheral: CTI */
/* Description: Cross-Trigger Interface control. NOTE: this is not a separate peripheral, but describes CM33 functionality. */

/* Register: CTI_CTICONTROL */
/* Description: CTI Control register */

/* Bit 0 : Enables or disables the CTI. */
#define CTI_CTICONTROL_GLBEN_Pos (0UL) /*!< Position of GLBEN field. */
#define CTI_CTICONTROL_GLBEN_Msk (0x1UL << CTI_CTICONTROL_GLBEN_Pos) /*!< Bit mask of GLBEN field. */
#define CTI_CTICONTROL_GLBEN_Disabled (0UL) /*!< All cross-triggering mapping logic functionality is disabled. */
#define CTI_CTICONTROL_GLBEN_Enabled (1UL) /*!< Cross-triggering mapping logic functionality is enabled. */

/* Register: CTI_CTIINTACK */
/* Description: CTI Interrupt Acknowledge register */

/* Bit 7 : ETM Event Input 3 */
#define CTI_CTIINTACK_ETMEVTIN3_Pos (7UL) /*!< Position of ETMEVTIN3 field. */
#define CTI_CTIINTACK_ETMEVTIN3_Msk (0x1UL << CTI_CTIINTACK_ETMEVTIN3_Pos) /*!< Bit mask of ETMEVTIN3 field. */
#define CTI_CTIINTACK_ETMEVTIN3_Acknowledge (1UL) /*!< Clears the ctitrigout. */

/* Bit 6 : ETM Event Input 2 */
#define CTI_CTIINTACK_ETMEVTIN2_Pos (6UL) /*!< Position of ETMEVTIN2 field. */
#define CTI_CTIINTACK_ETMEVTIN2_Msk (0x1UL << CTI_CTIINTACK_ETMEVTIN2_Pos) /*!< Bit mask of ETMEVTIN2 field. */
#define CTI_CTIINTACK_ETMEVTIN2_Acknowledge (1UL) /*!< Clears the ctitrigout. */

/* Bit 5 : ETM Event Input 1 */
#define CTI_CTIINTACK_ETMEVTIN1_Pos (5UL) /*!< Position of ETMEVTIN1 field. */
#define CTI_CTIINTACK_ETMEVTIN1_Msk (0x1UL << CTI_CTIINTACK_ETMEVTIN1_Pos) /*!< Bit mask of ETMEVTIN1 field. */
#define CTI_CTIINTACK_ETMEVTIN1_Acknowledge (1UL) /*!< Clears the ctitrigout. */

/* Bit 4 : ETM Event Input 0 */
#define CTI_CTIINTACK_ETMEVTIN0_Pos (4UL) /*!< Position of ETMEVTIN0 field. */
#define CTI_CTIINTACK_ETMEVTIN0_Msk (0x1UL << CTI_CTIINTACK_ETMEVTIN0_Pos) /*!< Bit mask of ETMEVTIN0 field. */
#define CTI_CTIINTACK_ETMEVTIN0_Acknowledge (1UL) /*!< Clears the ctitrigout. */

/* Bit 3 : N/A */
#define CTI_CTIINTACK_UNUSED1_Pos (3UL) /*!< Position of UNUSED1 field. */
#define CTI_CTIINTACK_UNUSED1_Msk (0x1UL << CTI_CTIINTACK_UNUSED1_Pos) /*!< Bit mask of UNUSED1 field. */
#define CTI_CTIINTACK_UNUSED1_Acknowledge (1UL) /*!< Clears the ctitrigout. */

/* Bit 2 : N/A */
#define CTI_CTIINTACK_UNUSED0_Pos (2UL) /*!< Position of UNUSED0 field. */
#define CTI_CTIINTACK_UNUSED0_Msk (0x1UL << CTI_CTIINTACK_UNUSED0_Pos) /*!< Bit mask of UNUSED0 field. */
#define CTI_CTIINTACK_UNUSED0_Acknowledge (1UL) /*!< Clears the ctitrigout. */

/* Bit 1 : Processor Restart */
#define CTI_CTIINTACK_CPURESTART_Pos (1UL) /*!< Position of CPURESTART field. */
#define CTI_CTIINTACK_CPURESTART_Msk (0x1UL << CTI_CTIINTACK_CPURESTART_Pos) /*!< Bit mask of CPURESTART field. */
#define CTI_CTIINTACK_CPURESTART_Acknowledge (1UL) /*!< Clears the ctitrigout. */

/* Bit 0 : Processor debug request */
#define CTI_CTIINTACK_DEBUGREQ_Pos (0UL) /*!< Position of DEBUGREQ field. */
#define CTI_CTIINTACK_DEBUGREQ_Msk (0x1UL << CTI_CTIINTACK_DEBUGREQ_Pos) /*!< Bit mask of DEBUGREQ field. */
#define CTI_CTIINTACK_DEBUGREQ_Acknowledge (1UL) /*!< Clears the ctitrigout. */

/* Register: CTI_CTIAPPSET */
/* Description: CTI Application Trigger Set register */

/* Bit 3 : Application trigger event for channel 3. */
#define CTI_CTIAPPSET_APPSET_3_Pos (3UL) /*!< Position of APPSET_3 field. */
#define CTI_CTIAPPSET_APPSET_3_Msk (0x1UL << CTI_CTIAPPSET_APPSET_3_Pos) /*!< Bit mask of APPSET_3 field. */
#define CTI_CTIAPPSET_APPSET_3_Inactive (0UL) /*!< Application trigger 3 is inactive. */
#define CTI_CTIAPPSET_APPSET_3_Active (1UL) /*!< Application trigger 3 is active. */
#define CTI_CTIAPPSET_APPSET_3_Activate (1UL) /*!< Generate channel event for channel 3. */

/* Bit 2 : Application trigger event for channel 2. */
#define CTI_CTIAPPSET_APPSET_2_Pos (2UL) /*!< Position of APPSET_2 field. */
#define CTI_CTIAPPSET_APPSET_2_Msk (0x1UL << CTI_CTIAPPSET_APPSET_2_Pos) /*!< Bit mask of APPSET_2 field. */
#define CTI_CTIAPPSET_APPSET_2_Inactive (0UL) /*!< Application trigger 2 is inactive. */
#define CTI_CTIAPPSET_APPSET_2_Active (1UL) /*!< Application trigger 2 is active. */
#define CTI_CTIAPPSET_APPSET_2_Activate (1UL) /*!< Generate channel event for channel 2. */

/* Bit 1 : Application trigger event for channel 1. */
#define CTI_CTIAPPSET_APPSET_1_Pos (1UL) /*!< Position of APPSET_1 field. */
#define CTI_CTIAPPSET_APPSET_1_Msk (0x1UL << CTI_CTIAPPSET_APPSET_1_Pos) /*!< Bit mask of APPSET_1 field. */
#define CTI_CTIAPPSET_APPSET_1_Inactive (0UL) /*!< Application trigger 1 is inactive. */
#define CTI_CTIAPPSET_APPSET_1_Active (1UL) /*!< Application trigger 1 is active. */
#define CTI_CTIAPPSET_APPSET_1_Activate (1UL) /*!< Generate channel event for channel 1. */

/* Bit 0 : Application trigger event for channel 0. */
#define CTI_CTIAPPSET_APPSET_0_Pos (0UL) /*!< Position of APPSET_0 field. */
#define CTI_CTIAPPSET_APPSET_0_Msk (0x1UL << CTI_CTIAPPSET_APPSET_0_Pos) /*!< Bit mask of APPSET_0 field. */
#define CTI_CTIAPPSET_APPSET_0_Inactive (0UL) /*!< Application trigger 0 is inactive. */
#define CTI_CTIAPPSET_APPSET_0_Active (1UL) /*!< Application trigger 0 is active. */
#define CTI_CTIAPPSET_APPSET_0_Activate (1UL) /*!< Generate channel event for channel 0. */

/* Register: CTI_CTIAPPCLEAR */
/* Description: CTI Application Trigger Clear register */

/* Bit 3 : Sets the corresponding bits in the CTIAPPSET to 0. There is one bit of the register for each channel. */
#define CTI_CTIAPPCLEAR_APPCLEAR_3_Pos (3UL) /*!< Position of APPCLEAR_3 field. */
#define CTI_CTIAPPCLEAR_APPCLEAR_3_Msk (0x1UL << CTI_CTIAPPCLEAR_APPCLEAR_3_Pos) /*!< Bit mask of APPCLEAR_3 field. */
#define CTI_CTIAPPCLEAR_APPCLEAR_3_Clear (1UL) /*!< Clears the event for channel 3. */

/* Bit 2 : Sets the corresponding bits in the CTIAPPSET to 0. There is one bit of the register for each channel. */
#define CTI_CTIAPPCLEAR_APPCLEAR_2_Pos (2UL) /*!< Position of APPCLEAR_2 field. */
#define CTI_CTIAPPCLEAR_APPCLEAR_2_Msk (0x1UL << CTI_CTIAPPCLEAR_APPCLEAR_2_Pos) /*!< Bit mask of APPCLEAR_2 field. */
#define CTI_CTIAPPCLEAR_APPCLEAR_2_Clear (1UL) /*!< Clears the event for channel 2. */

/* Bit 1 : Sets the corresponding bits in the CTIAPPSET to 0. There is one bit of the register for each channel. */
#define CTI_CTIAPPCLEAR_APPCLEAR_1_Pos (1UL) /*!< Position of APPCLEAR_1 field. */
#define CTI_CTIAPPCLEAR_APPCLEAR_1_Msk (0x1UL << CTI_CTIAPPCLEAR_APPCLEAR_1_Pos) /*!< Bit mask of APPCLEAR_1 field. */
#define CTI_CTIAPPCLEAR_APPCLEAR_1_Clear (1UL) /*!< Clears the event for channel 1. */

/* Bit 0 : Sets the corresponding bits in the CTIAPPSET to 0. There is one bit of the register for each channel. */
#define CTI_CTIAPPCLEAR_APPCLEAR_0_Pos (0UL) /*!< Position of APPCLEAR_0 field. */
#define CTI_CTIAPPCLEAR_APPCLEAR_0_Msk (0x1UL << CTI_CTIAPPCLEAR_APPCLEAR_0_Pos) /*!< Bit mask of APPCLEAR_0 field. */
#define CTI_CTIAPPCLEAR_APPCLEAR_0_Clear (1UL) /*!< Clears the event for channel 0. */

/* Register: CTI_CTIAPPPULSE */
/* Description: CTI Application Pulse register */

/* Bit 3 : Setting a bit HIGH generates a channel event pulse for the selected channel. There is one bit of the register for each channel. */
#define CTI_CTIAPPPULSE_APPULSE_3_Pos (3UL) /*!< Position of APPULSE_3 field. */
#define CTI_CTIAPPPULSE_APPULSE_3_Msk (0x1UL << CTI_CTIAPPPULSE_APPULSE_3_Pos) /*!< Bit mask of APPULSE_3 field. */
#define CTI_CTIAPPPULSE_APPULSE_3_Generate (1UL) /*!< Generates an event pulse on channel 3. */

/* Bit 2 : Setting a bit HIGH generates a channel event pulse for the selected channel. There is one bit of the register for each channel. */
#define CTI_CTIAPPPULSE_APPULSE_2_Pos (2UL) /*!< Position of APPULSE_2 field. */
#define CTI_CTIAPPPULSE_APPULSE_2_Msk (0x1UL << CTI_CTIAPPPULSE_APPULSE_2_Pos) /*!< Bit mask of APPULSE_2 field. */
#define CTI_CTIAPPPULSE_APPULSE_2_Generate (1UL) /*!< Generates an event pulse on channel 2. */

/* Bit 1 : Setting a bit HIGH generates a channel event pulse for the selected channel. There is one bit of the register for each channel. */
#define CTI_CTIAPPPULSE_APPULSE_1_Pos (1UL) /*!< Position of APPULSE_1 field. */
#define CTI_CTIAPPPULSE_APPULSE_1_Msk (0x1UL << CTI_CTIAPPPULSE_APPULSE_1_Pos) /*!< Bit mask of APPULSE_1 field. */
#define CTI_CTIAPPPULSE_APPULSE_1_Generate (1UL) /*!< Generates an event pulse on channel 1. */

/* Bit 0 : Setting a bit HIGH generates a channel event pulse for the selected channel. There is one bit of the register for each channel. */
#define CTI_CTIAPPPULSE_APPULSE_0_Pos (0UL) /*!< Position of APPULSE_0 field. */
#define CTI_CTIAPPPULSE_APPULSE_0_Msk (0x1UL << CTI_CTIAPPPULSE_APPULSE_0_Pos) /*!< Bit mask of APPULSE_0 field. */
#define CTI_CTIAPPPULSE_APPULSE_0_Generate (1UL) /*!< Generates an event pulse on channel 0. */

/* Register: CTI_CTIINEN */
/* Description: Description collection: CTI Trigger input */

/* Bit 3 : Enables a cross trigger event to channel 3 when a ctitrigin input is activated. */
#define CTI_CTIINEN_TRIGINEN_3_Pos (3UL) /*!< Position of TRIGINEN_3 field. */
#define CTI_CTIINEN_TRIGINEN_3_Msk (0x1UL << CTI_CTIINEN_TRIGINEN_3_Pos) /*!< Bit mask of TRIGINEN_3 field. */
#define CTI_CTIINEN_TRIGINEN_3_Disabled (0UL) /*!< Input trigger n events are ignored by channel 3. */
#define CTI_CTIINEN_TRIGINEN_3_Enabled (1UL) /*!< When an event is received on input trigger n (ctitrigin[n]), generate an event on channel 3. */

/* Bit 2 : Enables a cross trigger event to channel 2 when a ctitrigin input is activated. */
#define CTI_CTIINEN_TRIGINEN_2_Pos (2UL) /*!< Position of TRIGINEN_2 field. */
#define CTI_CTIINEN_TRIGINEN_2_Msk (0x1UL << CTI_CTIINEN_TRIGINEN_2_Pos) /*!< Bit mask of TRIGINEN_2 field. */
#define CTI_CTIINEN_TRIGINEN_2_Disabled (0UL) /*!< Input trigger n events are ignored by channel 2. */
#define CTI_CTIINEN_TRIGINEN_2_Enabled (1UL) /*!< When an event is received on input trigger n (ctitrigin[n]), generate an event on channel 2. */

/* Bit 1 : Enables a cross trigger event to channel 1 when a ctitrigin input is activated. */
#define CTI_CTIINEN_TRIGINEN_1_Pos (1UL) /*!< Position of TRIGINEN_1 field. */
#define CTI_CTIINEN_TRIGINEN_1_Msk (0x1UL << CTI_CTIINEN_TRIGINEN_1_Pos) /*!< Bit mask of TRIGINEN_1 field. */
#define CTI_CTIINEN_TRIGINEN_1_Disabled (0UL) /*!< Input trigger n events are ignored by channel 1. */
#define CTI_CTIINEN_TRIGINEN_1_Enabled (1UL) /*!< When an event is received on input trigger n (ctitrigin[n]), generate an event on channel 1. */

/* Bit 0 : Enables a cross trigger event to channel 0 when a ctitrigin input is activated. */
#define CTI_CTIINEN_TRIGINEN_0_Pos (0UL) /*!< Position of TRIGINEN_0 field. */
#define CTI_CTIINEN_TRIGINEN_0_Msk (0x1UL << CTI_CTIINEN_TRIGINEN_0_Pos) /*!< Bit mask of TRIGINEN_0 field. */
#define CTI_CTIINEN_TRIGINEN_0_Disabled (0UL) /*!< Input trigger n events are ignored by channel 0. */
#define CTI_CTIINEN_TRIGINEN_0_Enabled (1UL) /*!< When an event is received on input trigger n (ctitrigin[n]), generate an event on channel 0. */

/* Register: CTI_CTIOUTEN */
/* Description: Description collection: CTI Trigger output */

/* Bit 3 : Enables a cross trigger event to ctitrigout when channel 3 is activated. */
#define CTI_CTIOUTEN_TRIGOUTEN_3_Pos (3UL) /*!< Position of TRIGOUTEN_3 field. */
#define CTI_CTIOUTEN_TRIGOUTEN_3_Msk (0x1UL << CTI_CTIOUTEN_TRIGOUTEN_3_Pos) /*!< Bit mask of TRIGOUTEN_3 field. */
#define CTI_CTIOUTEN_TRIGOUTEN_3_Disabled (0UL) /*!< Channel 3 is ignored by output trigger n. */
#define CTI_CTIOUTEN_TRIGOUTEN_3_Enabled (1UL) /*!< When an event occurs on channel 3, generate an event on output event n (ctitrigout[n]). */

/* Bit 2 : Enables a cross trigger event to ctitrigout when channel 2 is activated. */
#define CTI_CTIOUTEN_TRIGOUTEN_2_Pos (2UL) /*!< Position of TRIGOUTEN_2 field. */
#define CTI_CTIOUTEN_TRIGOUTEN_2_Msk (0x1UL << CTI_CTIOUTEN_TRIGOUTEN_2_Pos) /*!< Bit mask of TRIGOUTEN_2 field. */
#define CTI_CTIOUTEN_TRIGOUTEN_2_Disabled (0UL) /*!< Channel 2 is ignored by output trigger n. */
#define CTI_CTIOUTEN_TRIGOUTEN_2_Enabled (1UL) /*!< When an event occurs on channel 2, generate an event on output event n (ctitrigout[n]). */

/* Bit 1 : Enables a cross trigger event to ctitrigout when channel 1 is activated. */
#define CTI_CTIOUTEN_TRIGOUTEN_1_Pos (1UL) /*!< Position of TRIGOUTEN_1 field. */
#define CTI_CTIOUTEN_TRIGOUTEN_1_Msk (0x1UL << CTI_CTIOUTEN_TRIGOUTEN_1_Pos) /*!< Bit mask of TRIGOUTEN_1 field. */
#define CTI_CTIOUTEN_TRIGOUTEN_1_Disabled (0UL) /*!< Channel 1 is ignored by output trigger n. */
#define CTI_CTIOUTEN_TRIGOUTEN_1_Enabled (1UL) /*!< When an event occurs on channel 1, generate an event on output event n (ctitrigout[n]). */

/* Bit 0 : Enables a cross trigger event to ctitrigout when channel 0 is activated. */
#define CTI_CTIOUTEN_TRIGOUTEN_0_Pos (0UL) /*!< Position of TRIGOUTEN_0 field. */
#define CTI_CTIOUTEN_TRIGOUTEN_0_Msk (0x1UL << CTI_CTIOUTEN_TRIGOUTEN_0_Pos) /*!< Bit mask of TRIGOUTEN_0 field. */
#define CTI_CTIOUTEN_TRIGOUTEN_0_Disabled (0UL) /*!< Channel 0 is ignored by output trigger n. */
#define CTI_CTIOUTEN_TRIGOUTEN_0_Enabled (1UL) /*!< When an event occurs on channel 0, generate an event on output event n (ctitrigout[n]). */

/* Register: CTI_CTITRIGINSTATUS */
/* Description: CTI Trigger In Status register Because the register provides a view of the raw ctitrigin inputs, the reset value is UNKNOWN. */

/* Bit 7 : N/A */
#define CTI_CTITRIGINSTATUS_UNUSED1_Pos (7UL) /*!< Position of UNUSED1 field. */
#define CTI_CTITRIGINSTATUS_UNUSED1_Msk (0x1UL << CTI_CTITRIGINSTATUS_UNUSED1_Pos) /*!< Bit mask of UNUSED1 field. */
#define CTI_CTITRIGINSTATUS_UNUSED1_Inactive (0UL) /*!< Ctitrigin 7 is inactive. */
#define CTI_CTITRIGINSTATUS_UNUSED1_Active (1UL) /*!< Ctitrigin 7 is active. */

/* Bit 6 : N/A */
#define CTI_CTITRIGINSTATUS_UNUSED0_Pos (6UL) /*!< Position of UNUSED0 field. */
#define CTI_CTITRIGINSTATUS_UNUSED0_Msk (0x1UL << CTI_CTITRIGINSTATUS_UNUSED0_Pos) /*!< Bit mask of UNUSED0 field. */
#define CTI_CTITRIGINSTATUS_UNUSED0_Inactive (0UL) /*!< Ctitrigin 6 is inactive. */
#define CTI_CTITRIGINSTATUS_UNUSED0_Active (1UL) /*!< Ctitrigin 6 is active. */

/* Bit 5 : ETM Event Output 1 */
#define CTI_CTITRIGINSTATUS_ETMEVTOUT1_Pos (5UL) /*!< Position of ETMEVTOUT1 field. */
#define CTI_CTITRIGINSTATUS_ETMEVTOUT1_Msk (0x1UL << CTI_CTITRIGINSTATUS_ETMEVTOUT1_Pos) /*!< Bit mask of ETMEVTOUT1 field. */
#define CTI_CTITRIGINSTATUS_ETMEVTOUT1_Inactive (0UL) /*!< Ctitrigin 5 is inactive. */
#define CTI_CTITRIGINSTATUS_ETMEVTOUT1_Active (1UL) /*!< Ctitrigin 5 is active. */

/* Bit 4 : ETM Event Output 0 */
#define CTI_CTITRIGINSTATUS_ETMEVTOUT0_Pos (4UL) /*!< Position of ETMEVTOUT0 field. */
#define CTI_CTITRIGINSTATUS_ETMEVTOUT0_Msk (0x1UL << CTI_CTITRIGINSTATUS_ETMEVTOUT0_Pos) /*!< Bit mask of ETMEVTOUT0 field. */
#define CTI_CTITRIGINSTATUS_ETMEVTOUT0_Inactive (0UL) /*!< Ctitrigin 4 is inactive. */
#define CTI_CTITRIGINSTATUS_ETMEVTOUT0_Active (1UL) /*!< Ctitrigin 4 is active. */

/* Bit 3 : DWT Comparator Output 2 */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT2_Pos (3UL) /*!< Position of DWTCOMPOUT2 field. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT2_Msk (0x1UL << CTI_CTITRIGINSTATUS_DWTCOMPOUT2_Pos) /*!< Bit mask of DWTCOMPOUT2 field. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT2_Inactive (0UL) /*!< Ctitrigin 3 is inactive. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT2_Active (1UL) /*!< Ctitrigin 3 is active. */

/* Bit 2 : DWT Comparator Output 1 */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT1_Pos (2UL) /*!< Position of DWTCOMPOUT1 field. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT1_Msk (0x1UL << CTI_CTITRIGINSTATUS_DWTCOMPOUT1_Pos) /*!< Bit mask of DWTCOMPOUT1 field. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT1_Inactive (0UL) /*!< Ctitrigin 2 is inactive. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT1_Active (1UL) /*!< Ctitrigin 2 is active. */

/* Bit 1 : DWT Comparator Output 0 */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT0_Pos (1UL) /*!< Position of DWTCOMPOUT0 field. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT0_Msk (0x1UL << CTI_CTITRIGINSTATUS_DWTCOMPOUT0_Pos) /*!< Bit mask of DWTCOMPOUT0 field. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT0_Inactive (0UL) /*!< Ctitrigin 1 is inactive. */
#define CTI_CTITRIGINSTATUS_DWTCOMPOUT0_Active (1UL) /*!< Ctitrigin 1 is active. */

/* Bit 0 : Processor Halted */
#define CTI_CTITRIGINSTATUS_CPUHALTED_Pos (0UL) /*!< Position of CPUHALTED field. */
#define CTI_CTITRIGINSTATUS_CPUHALTED_Msk (0x1UL << CTI_CTITRIGINSTATUS_CPUHALTED_Pos) /*!< Bit mask of CPUHALTED field. */
#define CTI_CTITRIGINSTATUS_CPUHALTED_Inactive (0UL) /*!< Ctitrigin 0 is inactive. */
#define CTI_CTITRIGINSTATUS_CPUHALTED_Active (1UL) /*!< Ctitrigin 0 is active. */

/* Register: CTI_CTITRIGOUTSTATUS */
/* Description: CTI Trigger Out Status register */

/* Bit 7 : ETM Event Input 3 */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN3_Pos (7UL) /*!< Position of ETMEVTIN3 field. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN3_Msk (0x1UL << CTI_CTITRIGOUTSTATUS_ETMEVTIN3_Pos) /*!< Bit mask of ETMEVTIN3 field. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN3_Inactive (0UL) /*!< Ctitrigout 7 is inactive. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN3_Active (1UL) /*!< Ctitrigout 7 is active. */

/* Bit 6 : ETM Event Input 2 */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN2_Pos (6UL) /*!< Position of ETMEVTIN2 field. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN2_Msk (0x1UL << CTI_CTITRIGOUTSTATUS_ETMEVTIN2_Pos) /*!< Bit mask of ETMEVTIN2 field. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN2_Inactive (0UL) /*!< Ctitrigout 6 is inactive. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN2_Active (1UL) /*!< Ctitrigout 6 is active. */

/* Bit 5 : ETM Event Input 1 */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN1_Pos (5UL) /*!< Position of ETMEVTIN1 field. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN1_Msk (0x1UL << CTI_CTITRIGOUTSTATUS_ETMEVTIN1_Pos) /*!< Bit mask of ETMEVTIN1 field. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN1_Inactive (0UL) /*!< Ctitrigout 5 is inactive. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN1_Active (1UL) /*!< Ctitrigout 5 is active. */

/* Bit 4 : ETM Event Input 0 */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN0_Pos (4UL) /*!< Position of ETMEVTIN0 field. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN0_Msk (0x1UL << CTI_CTITRIGOUTSTATUS_ETMEVTIN0_Pos) /*!< Bit mask of ETMEVTIN0 field. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN0_Inactive (0UL) /*!< Ctitrigout 4 is inactive. */
#define CTI_CTITRIGOUTSTATUS_ETMEVTIN0_Active (1UL) /*!< Ctitrigout 4 is active. */

/* Bit 3 : N/A */
#define CTI_CTITRIGOUTSTATUS_UNUSED1_Pos (3UL) /*!< Position of UNUSED1 field. */
#define CTI_CTITRIGOUTSTATUS_UNUSED1_Msk (0x1UL << CTI_CTITRIGOUTSTATUS_UNUSED1_Pos) /*!< Bit mask of UNUSED1 field. */
#define CTI_CTITRIGOUTSTATUS_UNUSED1_Inactive (0UL) /*!< Ctitrigout 3 is inactive. */
#define CTI_CTITRIGOUTSTATUS_UNUSED1_Active (1UL) /*!< Ctitrigout 3 is active. */

/* Bit 2 : N/A */
#define CTI_CTITRIGOUTSTATUS_UNUSED0_Pos (2UL) /*!< Position of UNUSED0 field. */
#define CTI_CTITRIGOUTSTATUS_UNUSED0_Msk (0x1UL << CTI_CTITRIGOUTSTATUS_UNUSED0_Pos) /*!< Bit mask of UNUSED0 field. */
#define CTI_CTITRIGOUTSTATUS_UNUSED0_Inactive (0UL) /*!< Ctitrigout 2 is inactive. */
#define CTI_CTITRIGOUTSTATUS_UNUSED0_Active (1UL) /*!< Ctitrigout 2 is active. */

/* Bit 1 : Processor Restart */
#define CTI_CTITRIGOUTSTATUS_CPURESTART_Pos (1UL) /*!< Position of CPURESTART field. */
#define CTI_CTITRIGOUTSTATUS_CPURESTART_Msk (0x1UL << CTI_CTITRIGOUTSTATUS_CPURESTART_Pos) /*!< Bit mask of CPURESTART field. */
#define CTI_CTITRIGOUTSTATUS_CPURESTART_Inactive (0UL) /*!< Ctitrigout 1 is inactive. */
#define CTI_CTITRIGOUTSTATUS_CPURESTART_Active (1UL) /*!< Ctitrigout 1 is active. */

/* Bit 0 : Processor debug request */
#define CTI_CTITRIGOUTSTATUS_DEBUGREQ_Pos (0UL) /*!< Position of DEBUGREQ field. */
#define CTI_CTITRIGOUTSTATUS_DEBUGREQ_Msk (0x1UL << CTI_CTITRIGOUTSTATUS_DEBUGREQ_Pos) /*!< Bit mask of DEBUGREQ field. */
#define CTI_CTITRIGOUTSTATUS_DEBUGREQ_Inactive (0UL) /*!< Ctitrigout 0 is inactive. */
#define CTI_CTITRIGOUTSTATUS_DEBUGREQ_Active (1UL) /*!< Ctitrigout 0 is active. */

/* Register: CTI_CTICHINSTATUS */
/* Description: CTI Channel In Status register Because the register provides a view of the raw ctichin inputs, the reset value is UNKNOWN. */

/* Bit 3 : Shows the status of the ctitrigin 3 input. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_3_Pos (3UL) /*!< Position of CTICHINSTATUS_3 field. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_3_Msk (0x1UL << CTI_CTICHINSTATUS_CTICHINSTATUS_3_Pos) /*!< Bit mask of CTICHINSTATUS_3 field. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_3_Inactive (0UL) /*!< Ctichin 3 is inactive. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_3_Active (1UL) /*!< Ctichin 3 is active. */

/* Bit 2 : Shows the status of the ctitrigin 2 input. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_2_Pos (2UL) /*!< Position of CTICHINSTATUS_2 field. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_2_Msk (0x1UL << CTI_CTICHINSTATUS_CTICHINSTATUS_2_Pos) /*!< Bit mask of CTICHINSTATUS_2 field. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_2_Inactive (0UL) /*!< Ctichin 2 is inactive. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_2_Active (1UL) /*!< Ctichin 2 is active. */

/* Bit 1 : Shows the status of the ctitrigin 1 input. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_1_Pos (1UL) /*!< Position of CTICHINSTATUS_1 field. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_1_Msk (0x1UL << CTI_CTICHINSTATUS_CTICHINSTATUS_1_Pos) /*!< Bit mask of CTICHINSTATUS_1 field. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_1_Inactive (0UL) /*!< Ctichin 1 is inactive. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_1_Active (1UL) /*!< Ctichin 1 is active. */

/* Bit 0 : Shows the status of the ctitrigin 0 input. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_0_Pos (0UL) /*!< Position of CTICHINSTATUS_0 field. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_0_Msk (0x1UL << CTI_CTICHINSTATUS_CTICHINSTATUS_0_Pos) /*!< Bit mask of CTICHINSTATUS_0 field. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_0_Inactive (0UL) /*!< Ctichin 0 is inactive. */
#define CTI_CTICHINSTATUS_CTICHINSTATUS_0_Active (1UL) /*!< Ctichin 0 is active. */

/* Register: CTI_CTICHOUTSTATUS */
/* Description: CTI Channel Out Status register */

/* Bit 3 : Shows the status of the ctichout 3 output. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_3_Pos (3UL) /*!< Position of CTICHOUTSTATUS_3 field. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_3_Msk (0x1UL << CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_3_Pos) /*!< Bit mask of CTICHOUTSTATUS_3 field. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_3_Inactive (0UL) /*!< Ctichout 3 is inactive. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_3_Active (1UL) /*!< Ctichout 3 is active. */

/* Bit 2 : Shows the status of the ctichout 2 output. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_2_Pos (2UL) /*!< Position of CTICHOUTSTATUS_2 field. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_2_Msk (0x1UL << CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_2_Pos) /*!< Bit mask of CTICHOUTSTATUS_2 field. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_2_Inactive (0UL) /*!< Ctichout 2 is inactive. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_2_Active (1UL) /*!< Ctichout 2 is active. */

/* Bit 1 : Shows the status of the ctichout 1 output. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_1_Pos (1UL) /*!< Position of CTICHOUTSTATUS_1 field. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_1_Msk (0x1UL << CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_1_Pos) /*!< Bit mask of CTICHOUTSTATUS_1 field. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_1_Inactive (0UL) /*!< Ctichout 1 is inactive. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_1_Active (1UL) /*!< Ctichout 1 is active. */

/* Bit 0 : Shows the status of the ctichout 0 output. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_0_Pos (0UL) /*!< Position of CTICHOUTSTATUS_0 field. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_0_Msk (0x1UL << CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_0_Pos) /*!< Bit mask of CTICHOUTSTATUS_0 field. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_0_Inactive (0UL) /*!< Ctichout 0 is inactive. */
#define CTI_CTICHOUTSTATUS_CTICHOUTSTATUS_0_Active (1UL) /*!< Ctichout 0 is active. */

/* Register: CTI_CTIGATE */
/* Description: Enable CTI Channel Gate register */

/* Bit 3 : Enable ctichout3. */
#define CTI_CTIGATE_CTIGATEEN_3_Pos (3UL) /*!< Position of CTIGATEEN_3 field. */
#define CTI_CTIGATE_CTIGATEEN_3_Msk (0x1UL << CTI_CTIGATE_CTIGATEEN_3_Pos) /*!< Bit mask of CTIGATEEN_3 field. */
#define CTI_CTIGATE_CTIGATEEN_3_Disabled (0UL) /*!< Disable ctichout channel 3 propagation. */
#define CTI_CTIGATE_CTIGATEEN_3_Enabled (1UL) /*!< Enable ctichout channel 3 propagation. */

/* Bit 2 : Enable ctichout2. */
#define CTI_CTIGATE_CTIGATEEN_2_Pos (2UL) /*!< Position of CTIGATEEN_2 field. */
#define CTI_CTIGATE_CTIGATEEN_2_Msk (0x1UL << CTI_CTIGATE_CTIGATEEN_2_Pos) /*!< Bit mask of CTIGATEEN_2 field. */
#define CTI_CTIGATE_CTIGATEEN_2_Disabled (0UL) /*!< Disable ctichout channel 2 propagation. */
#define CTI_CTIGATE_CTIGATEEN_2_Enabled (1UL) /*!< Enable ctichout channel 2 propagation. */

/* Bit 1 : Enable ctichout1. */
#define CTI_CTIGATE_CTIGATEEN_1_Pos (1UL) /*!< Position of CTIGATEEN_1 field. */
#define CTI_CTIGATE_CTIGATEEN_1_Msk (0x1UL << CTI_CTIGATE_CTIGATEEN_1_Pos) /*!< Bit mask of CTIGATEEN_1 field. */
#define CTI_CTIGATE_CTIGATEEN_1_Disabled (0UL) /*!< Disable ctichout channel 1 propagation. */
#define CTI_CTIGATE_CTIGATEEN_1_Enabled (1UL) /*!< Enable ctichout channel 1 propagation. */

/* Bit 0 : Enable ctichout0. */
#define CTI_CTIGATE_CTIGATEEN_0_Pos (0UL) /*!< Position of CTIGATEEN_0 field. */
#define CTI_CTIGATE_CTIGATEEN_0_Msk (0x1UL << CTI_CTIGATE_CTIGATEEN_0_Pos) /*!< Bit mask of CTIGATEEN_0 field. */
#define CTI_CTIGATE_CTIGATEEN_0_Disabled (0UL) /*!< Disable ctichout channel 0 propagation. */
#define CTI_CTIGATE_CTIGATEEN_0_Enabled (1UL) /*!< Enable ctichout channel 0 propagation. */

/* Register: CTI_ASICCTL */
/* Description: External Multiplexer Control register */

/* Bits 7..0 : When external multiplexing is implemented for trigger signals, then the number of multiplexed signals on each
                    trigger must be shown in the Device ID Register. This is done using a Verilog define EXTMUXNUM. */
#define CTI_ASICCTL_ASICCTL_Pos (0UL) /*!< Position of ASICCTL field. */
#define CTI_ASICCTL_ASICCTL_Msk (0xFFUL << CTI_ASICCTL_ASICCTL_Pos) /*!< Bit mask of ASICCTL field. */

/* Register: CTI_ITCHINACK */
/* Description: Integration Test Channel Input Acknowledge register */

/* Bit 3 : Sets the value of the ctichinack 3 output */
#define CTI_ITCHINACK_CTCHINACK_3_Pos (3UL) /*!< Position of CTCHINACK_3 field. */
#define CTI_ITCHINACK_CTCHINACK_3_Msk (0x1UL << CTI_ITCHINACK_CTCHINACK_3_Pos) /*!< Bit mask of CTCHINACK_3 field. */

/* Bit 2 : Sets the value of the ctichinack 2 output */
#define CTI_ITCHINACK_CTCHINACK_2_Pos (2UL) /*!< Position of CTCHINACK_2 field. */
#define CTI_ITCHINACK_CTCHINACK_2_Msk (0x1UL << CTI_ITCHINACK_CTCHINACK_2_Pos) /*!< Bit mask of CTCHINACK_2 field. */

/* Bit 1 : Sets the value of the ctichinack 1 output */
#define CTI_ITCHINACK_CTCHINACK_1_Pos (1UL) /*!< Position of CTCHINACK_1 field. */
#define CTI_ITCHINACK_CTCHINACK_1_Msk (0x1UL << CTI_ITCHINACK_CTCHINACK_1_Pos) /*!< Bit mask of CTCHINACK_1 field. */

/* Bit 0 : Sets the value of the ctichinack 0 output */
#define CTI_ITCHINACK_CTCHINACK_0_Pos (0UL) /*!< Position of CTCHINACK_0 field. */
#define CTI_ITCHINACK_CTCHINACK_0_Msk (0x1UL << CTI_ITCHINACK_CTCHINACK_0_Pos) /*!< Bit mask of CTCHINACK_0 field. */

/* Register: CTI_ITTRIGINACK */
/* Description: Integration Test Trigger Input Acknowledge register */

/* Bit 7 : Sets the value of the ctitriginack 7 output */
#define CTI_ITTRIGINACK_CTTRIGINACK_7_Pos (7UL) /*!< Position of CTTRIGINACK_7 field. */
#define CTI_ITTRIGINACK_CTTRIGINACK_7_Msk (0x1UL << CTI_ITTRIGINACK_CTTRIGINACK_7_Pos) /*!< Bit mask of CTTRIGINACK_7 field. */

/* Bit 6 : Sets the value of the ctitriginack 6 output */
#define CTI_ITTRIGINACK_CTTRIGINACK_6_Pos (6UL) /*!< Position of CTTRIGINACK_6 field. */
#define CTI_ITTRIGINACK_CTTRIGINACK_6_Msk (0x1UL << CTI_ITTRIGINACK_CTTRIGINACK_6_Pos) /*!< Bit mask of CTTRIGINACK_6 field. */

/* Bit 5 : Sets the value of the ctitriginack 5 output */
#define CTI_ITTRIGINACK_CTTRIGINACK_5_Pos (5UL) /*!< Position of CTTRIGINACK_5 field. */
#define CTI_ITTRIGINACK_CTTRIGINACK_5_Msk (0x1UL << CTI_ITTRIGINACK_CTTRIGINACK_5_Pos) /*!< Bit mask of CTTRIGINACK_5 field. */

/* Bit 4 : Sets the value of the ctitriginack 4 output */
#define CTI_ITTRIGINACK_CTTRIGINACK_4_Pos (4UL) /*!< Position of CTTRIGINACK_4 field. */
#define CTI_ITTRIGINACK_CTTRIGINACK_4_Msk (0x1UL << CTI_ITTRIGINACK_CTTRIGINACK_4_Pos) /*!< Bit mask of CTTRIGINACK_4 field. */

/* Bit 3 : Sets the value of the ctitriginack 3 output */
#define CTI_ITTRIGINACK_CTTRIGINACK_3_Pos (3UL) /*!< Position of CTTRIGINACK_3 field. */
#define CTI_ITTRIGINACK_CTTRIGINACK_3_Msk (0x1UL << CTI_ITTRIGINACK_CTTRIGINACK_3_Pos) /*!< Bit mask of CTTRIGINACK_3 field. */

/* Bit 2 : Sets the value of the ctitriginack 2 output */
#define CTI_ITTRIGINACK_CTTRIGINACK_2_Pos (2UL) /*!< Position of CTTRIGINACK_2 field. */
#define CTI_ITTRIGINACK_CTTRIGINACK_2_Msk (0x1UL << CTI_ITTRIGINACK_CTTRIGINACK_2_Pos) /*!< Bit mask of CTTRIGINACK_2 field. */

/* Bit 1 : Sets the value of the ctitriginack 1 output */
#define CTI_ITTRIGINACK_CTTRIGINACK_1_Pos (1UL) /*!< Position of CTTRIGINACK_1 field. */
#define CTI_ITTRIGINACK_CTTRIGINACK_1_Msk (0x1UL << CTI_ITTRIGINACK_CTTRIGINACK_1_Pos) /*!< Bit mask of CTTRIGINACK_1 field. */

/* Bit 0 : Sets the value of the ctitriginack 0 output */
#define CTI_ITTRIGINACK_CTTRIGINACK_0_Pos (0UL) /*!< Position of CTTRIGINACK_0 field. */
#define CTI_ITTRIGINACK_CTTRIGINACK_0_Msk (0x1UL << CTI_ITTRIGINACK_CTTRIGINACK_0_Pos) /*!< Bit mask of CTTRIGINACK_0 field. */

/* Register: CTI_ITCHOUT */
/* Description: Integration Test Channel Output register */

/* Bit 3 : Sets the value of the ctichout 3 output */
#define CTI_ITCHOUT_CTCHOUT_3_Pos (3UL) /*!< Position of CTCHOUT_3 field. */
#define CTI_ITCHOUT_CTCHOUT_3_Msk (0x1UL << CTI_ITCHOUT_CTCHOUT_3_Pos) /*!< Bit mask of CTCHOUT_3 field. */

/* Bit 2 : Sets the value of the ctichout 2 output */
#define CTI_ITCHOUT_CTCHOUT_2_Pos (2UL) /*!< Position of CTCHOUT_2 field. */
#define CTI_ITCHOUT_CTCHOUT_2_Msk (0x1UL << CTI_ITCHOUT_CTCHOUT_2_Pos) /*!< Bit mask of CTCHOUT_2 field. */

/* Bit 1 : Sets the value of the ctichout 1 output */
#define CTI_ITCHOUT_CTCHOUT_1_Pos (1UL) /*!< Position of CTCHOUT_1 field. */
#define CTI_ITCHOUT_CTCHOUT_1_Msk (0x1UL << CTI_ITCHOUT_CTCHOUT_1_Pos) /*!< Bit mask of CTCHOUT_1 field. */

/* Bit 0 : Sets the value of the ctichout 0 output */
#define CTI_ITCHOUT_CTCHOUT_0_Pos (0UL) /*!< Position of CTCHOUT_0 field. */
#define CTI_ITCHOUT_CTCHOUT_0_Msk (0x1UL << CTI_ITCHOUT_CTCHOUT_0_Pos) /*!< Bit mask of CTCHOUT_0 field. */

/* Register: CTI_ITTRIGOUT */
/* Description: Integration Test Trigger Output register */

/* Bit 7 : Sets the value of the ctitrigout 7 output */
#define CTI_ITTRIGOUT_CTTRIGOUT_7_Pos (7UL) /*!< Position of CTTRIGOUT_7 field. */
#define CTI_ITTRIGOUT_CTTRIGOUT_7_Msk (0x1UL << CTI_ITTRIGOUT_CTTRIGOUT_7_Pos) /*!< Bit mask of CTTRIGOUT_7 field. */

/* Bit 6 : Sets the value of the ctitrigout 6 output */
#define CTI_ITTRIGOUT_CTTRIGOUT_6_Pos (6UL) /*!< Position of CTTRIGOUT_6 field. */
#define CTI_ITTRIGOUT_CTTRIGOUT_6_Msk (0x1UL << CTI_ITTRIGOUT_CTTRIGOUT_6_Pos) /*!< Bit mask of CTTRIGOUT_6 field. */

/* Bit 5 : Sets the value of the ctitrigout 5 output */
#define CTI_ITTRIGOUT_CTTRIGOUT_5_Pos (5UL) /*!< Position of CTTRIGOUT_5 field. */
#define CTI_ITTRIGOUT_CTTRIGOUT_5_Msk (0x1UL << CTI_ITTRIGOUT_CTTRIGOUT_5_Pos) /*!< Bit mask of CTTRIGOUT_5 field. */

/* Bit 4 : Sets the value of the ctitrigout 4 output */
#define CTI_ITTRIGOUT_CTTRIGOUT_4_Pos (4UL) /*!< Position of CTTRIGOUT_4 field. */
#define CTI_ITTRIGOUT_CTTRIGOUT_4_Msk (0x1UL << CTI_ITTRIGOUT_CTTRIGOUT_4_Pos) /*!< Bit mask of CTTRIGOUT_4 field. */

/* Bit 3 : Sets the value of the ctitrigout 3 output */
#define CTI_ITTRIGOUT_CTTRIGOUT_3_Pos (3UL) /*!< Position of CTTRIGOUT_3 field. */
#define CTI_ITTRIGOUT_CTTRIGOUT_3_Msk (0x1UL << CTI_ITTRIGOUT_CTTRIGOUT_3_Pos) /*!< Bit mask of CTTRIGOUT_3 field. */

/* Bit 2 : Sets the value of the ctitrigout 2 output */
#define CTI_ITTRIGOUT_CTTRIGOUT_2_Pos (2UL) /*!< Position of CTTRIGOUT_2 field. */
#define CTI_ITTRIGOUT_CTTRIGOUT_2_Msk (0x1UL << CTI_ITTRIGOUT_CTTRIGOUT_2_Pos) /*!< Bit mask of CTTRIGOUT_2 field. */

/* Bit 1 : Sets the value of the ctitrigout 1 output */
#define CTI_ITTRIGOUT_CTTRIGOUT_1_Pos (1UL) /*!< Position of CTTRIGOUT_1 field. */
#define CTI_ITTRIGOUT_CTTRIGOUT_1_Msk (0x1UL << CTI_ITTRIGOUT_CTTRIGOUT_1_Pos) /*!< Bit mask of CTTRIGOUT_1 field. */

/* Bit 0 : Sets the value of the ctitrigout 0 output */
#define CTI_ITTRIGOUT_CTTRIGOUT_0_Pos (0UL) /*!< Position of CTTRIGOUT_0 field. */
#define CTI_ITTRIGOUT_CTTRIGOUT_0_Msk (0x1UL << CTI_ITTRIGOUT_CTTRIGOUT_0_Pos) /*!< Bit mask of CTTRIGOUT_0 field. */

/* Register: CTI_ITCHOUTACK */
/* Description: Integration Test Channel Output Acknowledge register */

/* Bit 3 : Reads the value of the ctichoutack 3 input */
#define CTI_ITCHOUTACK_CTCHOUTACK_3_Pos (3UL) /*!< Position of CTCHOUTACK_3 field. */
#define CTI_ITCHOUTACK_CTCHOUTACK_3_Msk (0x1UL << CTI_ITCHOUTACK_CTCHOUTACK_3_Pos) /*!< Bit mask of CTCHOUTACK_3 field. */

/* Bit 2 : Reads the value of the ctichoutack 2 input */
#define CTI_ITCHOUTACK_CTCHOUTACK_2_Pos (2UL) /*!< Position of CTCHOUTACK_2 field. */
#define CTI_ITCHOUTACK_CTCHOUTACK_2_Msk (0x1UL << CTI_ITCHOUTACK_CTCHOUTACK_2_Pos) /*!< Bit mask of CTCHOUTACK_2 field. */

/* Bit 1 : Reads the value of the ctichoutack 1 input */
#define CTI_ITCHOUTACK_CTCHOUTACK_1_Pos (1UL) /*!< Position of CTCHOUTACK_1 field. */
#define CTI_ITCHOUTACK_CTCHOUTACK_1_Msk (0x1UL << CTI_ITCHOUTACK_CTCHOUTACK_1_Pos) /*!< Bit mask of CTCHOUTACK_1 field. */

/* Bit 0 : Reads the value of the ctichoutack 0 input */
#define CTI_ITCHOUTACK_CTCHOUTACK_0_Pos (0UL) /*!< Position of CTCHOUTACK_0 field. */
#define CTI_ITCHOUTACK_CTCHOUTACK_0_Msk (0x1UL << CTI_ITCHOUTACK_CTCHOUTACK_0_Pos) /*!< Bit mask of CTCHOUTACK_0 field. */

/* Register: CTI_ITTRIGOUTACK */
/* Description: Integration Test Trigger Output Acknowledge register */

/* Bit 7 : Reads the value of the ctitrigoutack 7 input */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_7_Pos (7UL) /*!< Position of CTTRIGOUT_7 field. */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_7_Msk (0x1UL << CTI_ITTRIGOUTACK_CTTRIGOUT_7_Pos) /*!< Bit mask of CTTRIGOUT_7 field. */

/* Bit 6 : Reads the value of the ctitrigoutack 6 input */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_6_Pos (6UL) /*!< Position of CTTRIGOUT_6 field. */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_6_Msk (0x1UL << CTI_ITTRIGOUTACK_CTTRIGOUT_6_Pos) /*!< Bit mask of CTTRIGOUT_6 field. */

/* Bit 5 : Reads the value of the ctitrigoutack 5 input */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_5_Pos (5UL) /*!< Position of CTTRIGOUT_5 field. */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_5_Msk (0x1UL << CTI_ITTRIGOUTACK_CTTRIGOUT_5_Pos) /*!< Bit mask of CTTRIGOUT_5 field. */

/* Bit 4 : Reads the value of the ctitrigoutack 4 input */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_4_Pos (4UL) /*!< Position of CTTRIGOUT_4 field. */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_4_Msk (0x1UL << CTI_ITTRIGOUTACK_CTTRIGOUT_4_Pos) /*!< Bit mask of CTTRIGOUT_4 field. */

/* Bit 3 : Reads the value of the ctitrigoutack 3 input */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_3_Pos (3UL) /*!< Position of CTTRIGOUT_3 field. */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_3_Msk (0x1UL << CTI_ITTRIGOUTACK_CTTRIGOUT_3_Pos) /*!< Bit mask of CTTRIGOUT_3 field. */

/* Bit 2 : Reads the value of the ctitrigoutack 2 input */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_2_Pos (2UL) /*!< Position of CTTRIGOUT_2 field. */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_2_Msk (0x1UL << CTI_ITTRIGOUTACK_CTTRIGOUT_2_Pos) /*!< Bit mask of CTTRIGOUT_2 field. */

/* Bit 1 : Reads the value of the ctitrigoutack 1 input */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_1_Pos (1UL) /*!< Position of CTTRIGOUT_1 field. */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_1_Msk (0x1UL << CTI_ITTRIGOUTACK_CTTRIGOUT_1_Pos) /*!< Bit mask of CTTRIGOUT_1 field. */

/* Bit 0 : Reads the value of the ctitrigoutack 0 input */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_0_Pos (0UL) /*!< Position of CTTRIGOUT_0 field. */
#define CTI_ITTRIGOUTACK_CTTRIGOUT_0_Msk (0x1UL << CTI_ITTRIGOUTACK_CTTRIGOUT_0_Pos) /*!< Bit mask of CTTRIGOUT_0 field. */

/* Register: CTI_ITCHIN */
/* Description: Integration Test Channel Input register */

/* Bit 3 : Reads the value of the ctichin 3 input */
#define CTI_ITCHIN_CTCHIN_3_Pos (3UL) /*!< Position of CTCHIN_3 field. */
#define CTI_ITCHIN_CTCHIN_3_Msk (0x1UL << CTI_ITCHIN_CTCHIN_3_Pos) /*!< Bit mask of CTCHIN_3 field. */

/* Bit 2 : Reads the value of the ctichin 2 input */
#define CTI_ITCHIN_CTCHIN_2_Pos (2UL) /*!< Position of CTCHIN_2 field. */
#define CTI_ITCHIN_CTCHIN_2_Msk (0x1UL << CTI_ITCHIN_CTCHIN_2_Pos) /*!< Bit mask of CTCHIN_2 field. */

/* Bit 1 : Reads the value of the ctichin 1 input */
#define CTI_ITCHIN_CTCHIN_1_Pos (1UL) /*!< Position of CTCHIN_1 field. */
#define CTI_ITCHIN_CTCHIN_1_Msk (0x1UL << CTI_ITCHIN_CTCHIN_1_Pos) /*!< Bit mask of CTCHIN_1 field. */

/* Bit 0 : Reads the value of the ctichin 0 input */
#define CTI_ITCHIN_CTCHIN_0_Pos (0UL) /*!< Position of CTCHIN_0 field. */
#define CTI_ITCHIN_CTCHIN_0_Msk (0x1UL << CTI_ITCHIN_CTCHIN_0_Pos) /*!< Bit mask of CTCHIN_0 field. */

/* Register: CTI_ITTRIGIN */
/* Description: Integration Test Trigger input register */

/* Bit 7 : Reads the value of the ctitrigin 7 input */
#define CTI_ITTRIGIN_CTTRIGIN_7_Pos (7UL) /*!< Position of CTTRIGIN_7 field. */
#define CTI_ITTRIGIN_CTTRIGIN_7_Msk (0x1UL << CTI_ITTRIGIN_CTTRIGIN_7_Pos) /*!< Bit mask of CTTRIGIN_7 field. */

/* Bit 6 : Reads the value of the ctitrigin 6 input */
#define CTI_ITTRIGIN_CTTRIGIN_6_Pos (6UL) /*!< Position of CTTRIGIN_6 field. */
#define CTI_ITTRIGIN_CTTRIGIN_6_Msk (0x1UL << CTI_ITTRIGIN_CTTRIGIN_6_Pos) /*!< Bit mask of CTTRIGIN_6 field. */

/* Bit 5 : Reads the value of the ctitrigin 5 input */
#define CTI_ITTRIGIN_CTTRIGIN_5_Pos (5UL) /*!< Position of CTTRIGIN_5 field. */
#define CTI_ITTRIGIN_CTTRIGIN_5_Msk (0x1UL << CTI_ITTRIGIN_CTTRIGIN_5_Pos) /*!< Bit mask of CTTRIGIN_5 field. */

/* Bit 4 : Reads the value of the ctitrigin 4 input */
#define CTI_ITTRIGIN_CTTRIGIN_4_Pos (4UL) /*!< Position of CTTRIGIN_4 field. */
#define CTI_ITTRIGIN_CTTRIGIN_4_Msk (0x1UL << CTI_ITTRIGIN_CTTRIGIN_4_Pos) /*!< Bit mask of CTTRIGIN_4 field. */

/* Bit 3 : Reads the value of the ctitrigin 3 input */
#define CTI_ITTRIGIN_CTTRIGIN_3_Pos (3UL) /*!< Position of CTTRIGIN_3 field. */
#define CTI_ITTRIGIN_CTTRIGIN_3_Msk (0x1UL << CTI_ITTRIGIN_CTTRIGIN_3_Pos) /*!< Bit mask of CTTRIGIN_3 field. */

/* Bit 2 : Reads the value of the ctitrigin 2 input */
#define CTI_ITTRIGIN_CTTRIGIN_2_Pos (2UL) /*!< Position of CTTRIGIN_2 field. */
#define CTI_ITTRIGIN_CTTRIGIN_2_Msk (0x1UL << CTI_ITTRIGIN_CTTRIGIN_2_Pos) /*!< Bit mask of CTTRIGIN_2 field. */

/* Bit 1 : Reads the value of the ctitrigin 1 input */
#define CTI_ITTRIGIN_CTTRIGIN_1_Pos (1UL) /*!< Position of CTTRIGIN_1 field. */
#define CTI_ITTRIGIN_CTTRIGIN_1_Msk (0x1UL << CTI_ITTRIGIN_CTTRIGIN_1_Pos) /*!< Bit mask of CTTRIGIN_1 field. */

/* Bit 0 : Reads the value of the ctitrigin 0 input */
#define CTI_ITTRIGIN_CTTRIGIN_0_Pos (0UL) /*!< Position of CTTRIGIN_0 field. */
#define CTI_ITTRIGIN_CTTRIGIN_0_Msk (0x1UL << CTI_ITTRIGIN_CTTRIGIN_0_Pos) /*!< Bit mask of CTTRIGIN_0 field. */

/* Register: CTI_ITCTRL */
/* Description: Integration Mode Control register */

/* Bit 0 : Integration Mode Enable */
#define CTI_ITCTRL_IME_Pos (0UL) /*!< Position of IME field. */
#define CTI_ITCTRL_IME_Msk (0x1UL << CTI_ITCTRL_IME_Pos) /*!< Bit mask of IME field. */
#define CTI_ITCTRL_IME_Disable (0UL) /*!< Disable integration mode */
#define CTI_ITCTRL_IME_Enable (1UL) /*!< Enable integration mode */

/* Register: CTI_CLAIMSET */
/* Description: Claim Tag Set register */

/* Bit 3 : Determines whether claim bit 3 is implemented */
#define CTI_CLAIMSET_SET_3_Pos (3UL) /*!< Position of SET_3 field. */
#define CTI_CLAIMSET_SET_3_Msk (0x1UL << CTI_CLAIMSET_SET_3_Pos) /*!< Bit mask of SET_3 field. */
#define CTI_CLAIMSET_SET_3_Implemented (1UL) /*!< Claim tag bit 3 is implemented */
#define CTI_CLAIMSET_SET_3_Claim (1UL) /*!< Set claim bit 3 */

/* Bit 2 : Determines whether claim bit 2 is implemented */
#define CTI_CLAIMSET_SET_2_Pos (2UL) /*!< Position of SET_2 field. */
#define CTI_CLAIMSET_SET_2_Msk (0x1UL << CTI_CLAIMSET_SET_2_Pos) /*!< Bit mask of SET_2 field. */
#define CTI_CLAIMSET_SET_2_Implemented (1UL) /*!< Claim tag bit 2 is implemented */
#define CTI_CLAIMSET_SET_2_Claim (1UL) /*!< Set claim bit 2 */

/* Bit 1 : Determines whether claim bit 1 is implemented */
#define CTI_CLAIMSET_SET_1_Pos (1UL) /*!< Position of SET_1 field. */
#define CTI_CLAIMSET_SET_1_Msk (0x1UL << CTI_CLAIMSET_SET_1_Pos) /*!< Bit mask of SET_1 field. */
#define CTI_CLAIMSET_SET_1_Implemented (1UL) /*!< Claim tag bit 1 is implemented */
#define CTI_CLAIMSET_SET_1_Claim (1UL) /*!< Set claim bit 1 */

/* Bit 0 : Determines whether claim bit 0 is implemented */
#define CTI_CLAIMSET_SET_0_Pos (0UL) /*!< Position of SET_0 field. */
#define CTI_CLAIMSET_SET_0_Msk (0x1UL << CTI_CLAIMSET_SET_0_Pos) /*!< Bit mask of SET_0 field. */
#define CTI_CLAIMSET_SET_0_Implemented (1UL) /*!< Claim tag bit 0 is implemented */
#define CTI_CLAIMSET_SET_0_Claim (1UL) /*!< Set claim bit 0 */

/* Register: CTI_CLAIMCLR */
/* Description: Claim Tag Clear register */

/* Bit 3 : Determines whether claim bit 3 is implemented */
#define CTI_CLAIMCLR_CLR_3_Pos (3UL) /*!< Position of CLR_3 field. */
#define CTI_CLAIMCLR_CLR_3_Msk (0x1UL << CTI_CLAIMCLR_CLR_3_Pos) /*!< Bit mask of CLR_3 field. */
#define CTI_CLAIMCLR_CLR_3_Unclaimed (0UL) /*!< Claim tag bit 3 is not set */
#define CTI_CLAIMCLR_CLR_3_Claimed (1UL) /*!< Claim tag bit 3 is set */
#define CTI_CLAIMCLR_CLR_3_Unclaim (1UL) /*!< Clear bit 3 of the claim tag */

/* Bit 2 : Determines whether claim bit 2 is implemented */
#define CTI_CLAIMCLR_CLR_2_Pos (2UL) /*!< Position of CLR_2 field. */
#define CTI_CLAIMCLR_CLR_2_Msk (0x1UL << CTI_CLAIMCLR_CLR_2_Pos) /*!< Bit mask of CLR_2 field. */
#define CTI_CLAIMCLR_CLR_2_Unclaimed (0UL) /*!< Claim tag bit 2 is not set */
#define CTI_CLAIMCLR_CLR_2_Claimed (1UL) /*!< Claim tag bit 2 is set */
#define CTI_CLAIMCLR_CLR_2_Unclaim (1UL) /*!< Clear bit 2 of the claim tag */

/* Bit 1 : Determines whether claim bit 1 is implemented */
#define CTI_CLAIMCLR_CLR_1_Pos (1UL) /*!< Position of CLR_1 field. */
#define CTI_CLAIMCLR_CLR_1_Msk (0x1UL << CTI_CLAIMCLR_CLR_1_Pos) /*!< Bit mask of CLR_1 field. */
#define CTI_CLAIMCLR_CLR_1_Unclaimed (0UL) /*!< Claim tag bit 1 is not set */
#define CTI_CLAIMCLR_CLR_1_Claimed (1UL) /*!< Claim tag bit 1 is set */
#define CTI_CLAIMCLR_CLR_1_Unclaim (1UL) /*!< Clear bit 1 of the claim tag */

/* Bit 0 : Determines whether claim bit 0 is implemented */
#define CTI_CLAIMCLR_CLR_0_Pos (0UL) /*!< Position of CLR_0 field. */
#define CTI_CLAIMCLR_CLR_0_Msk (0x1UL << CTI_CLAIMCLR_CLR_0_Pos) /*!< Bit mask of CLR_0 field. */
#define CTI_CLAIMCLR_CLR_0_Unclaimed (0UL) /*!< Claim tag bit 0 is not set */
#define CTI_CLAIMCLR_CLR_0_Claimed (1UL) /*!< Claim tag bit 0 is set */
#define CTI_CLAIMCLR_CLR_0_Unclaim (1UL) /*!< Clear bit 0 of the claim tag */

/* Register: CTI_LAR */
/* Description: Lock Address Register */

/* Bits 31..0 : Software lock key value */
#define CTI_LAR_KEY_Pos (0UL) /*!< Position of KEY field. */
#define CTI_LAR_KEY_Msk (0xFFFFFFFFUL << CTI_LAR_KEY_Pos) /*!< Bit mask of KEY field. */
#define CTI_LAR_KEY_Clear (0xC5ACCE55UL) /*!< Clear the software lock */

/* Register: CTI_LSR */
/* Description: Lock Status Register */

/* Bit 2 : Register size indicator. Always 0. Indicates that the LAR is implemented as 32-bit. */
#define CTI_LSR_NTT_Pos (2UL) /*!< Position of NTT field. */
#define CTI_LSR_NTT_Msk (0x1UL << CTI_LSR_NTT_Pos) /*!< Bit mask of NTT field. */

/* Bit 1 : Software Lock Status. Returns the present lock status of the device, from the current interface */
#define CTI_LSR_SLK_Pos (1UL) /*!< Position of SLK field. */
#define CTI_LSR_SLK_Msk (0x1UL << CTI_LSR_SLK_Pos) /*!< Bit mask of SLK field. */
#define CTI_LSR_SLK_Unlocked (0UL) /*!< Indicates that write operations are permitted from this interface */
#define CTI_LSR_SLK_Locked (1UL) /*!< Indicates that write operations are not permitted from this interface. Read operations are permitted */

/* Bit 0 : Software Lock Implemented. Indicates that a lock control mechanism is present from this interface */
#define CTI_LSR_SLI_Pos (0UL) /*!< Position of SLI field. */
#define CTI_LSR_SLI_Msk (0x1UL << CTI_LSR_SLI_Pos) /*!< Bit mask of SLI field. */
#define CTI_LSR_SLI_Absent (0UL) /*!< Indicates that a lock control mechanism is not present from this interface. Write operations to the LAR are ignored */
#define CTI_LSR_SLI_Present (1UL) /*!< Indicates that a lock control mechanism present from this interface */

/* Register: CTI_AUTHSTATUS */
/* Description: Authentication Status Register */

/* Bits 7..6 : Always 0b00. The security level for Secure non-invasive debug is not implemented or is controlled elsewhere */
#define CTI_AUTHSTATUS_SNID_Pos (6UL) /*!< Position of SNID field. */
#define CTI_AUTHSTATUS_SNID_Msk (0x3UL << CTI_AUTHSTATUS_SNID_Pos) /*!< Bit mask of SNID field. */

/* Bits 5..4 : Always 0b00. Secure invasive debug is not implemented or is controlled elsewhere */
#define CTI_AUTHSTATUS_SID_Pos (4UL) /*!< Position of SID field. */
#define CTI_AUTHSTATUS_SID_Msk (0x3UL << CTI_AUTHSTATUS_SID_Pos) /*!< Bit mask of SID field. */

/* Bits 3..2 : Indicates the security level for Non-secure non-invasive debug */
#define CTI_AUTHSTATUS_NSNID_Pos (2UL) /*!< Position of NSNID field. */
#define CTI_AUTHSTATUS_NSNID_Msk (0x3UL << CTI_AUTHSTATUS_NSNID_Pos) /*!< Bit mask of NSNID field. */
#define CTI_AUTHSTATUS_NSNID_Disabled (0b10UL) /*!< Non-secure non-invasive debug disabled */
#define CTI_AUTHSTATUS_NSNID_Enabled (0b11UL) /*!< Non-secure non-invasive debug enabled */

/* Bits 1..0 : Indicates the security level for Non-secure invasive debug */
#define CTI_AUTHSTATUS_NSID_Pos (0UL) /*!< Position of NSID field. */
#define CTI_AUTHSTATUS_NSID_Msk (0x3UL << CTI_AUTHSTATUS_NSID_Pos) /*!< Bit mask of NSID field. */
#define CTI_AUTHSTATUS_NSID_Disabled (0b10UL) /*!< Non-secure invasive debug disabled */
#define CTI_AUTHSTATUS_NSID_Enabled (0b11UL) /*!< Non-secure invasive debug enabled */

/* Register: CTI_DEVARCH */
/* Description: Device Architecture register */

/* Bit 0 : Contains the CTI device architecture. */
#define CTI_DEVARCH_Architecture_Pos (0UL) /*!< Position of Architecture field. */
#define CTI_DEVARCH_Architecture_Msk (0x1UL << CTI_DEVARCH_Architecture_Pos) /*!< Bit mask of Architecture field. */

/* Register: CTI_DEVID */
/* Description: Device Configuration register */

/* Bits 19..16 : Number of ECT channels available. */
#define CTI_DEVID_NUMCH_Pos (16UL) /*!< Position of NUMCH field. */
#define CTI_DEVID_NUMCH_Msk (0xFUL << CTI_DEVID_NUMCH_Pos) /*!< Bit mask of NUMCH field. */

/* Bits 15..8 : Number of ECT triggers available. */
#define CTI_DEVID_NUMTRIG_Pos (8UL) /*!< Position of NUMTRIG field. */
#define CTI_DEVID_NUMTRIG_Msk (0xFFUL << CTI_DEVID_NUMTRIG_Pos) /*!< Bit mask of NUMTRIG field. */

/* Bits 4..0 : Indicates the number of multiplexers available on Trigger Inputs and Trigger Outputs that are using asicctl.
                    The default value of 0b00000 indicates that no multiplexing is present. This value of this bit depends on the Verilog define EXTMUXNUM that you must change accordingly. */
#define CTI_DEVID_EXTMUXNUM_Pos (0UL) /*!< Position of EXTMUXNUM field. */
#define CTI_DEVID_EXTMUXNUM_Msk (0x1FUL << CTI_DEVID_EXTMUXNUM_Pos) /*!< Bit mask of EXTMUXNUM field. */

/* Register: CTI_DEVTYPE */
/* Description: Device Type Identifier register */

/* Bits 7..4 : Sub-classification of the type of the debug component as specified in the ARM Architecture Specification within
                    the major classification as specified in the MAJOR field. */
#define CTI_DEVTYPE_SUB_Pos (4UL) /*!< Position of SUB field. */
#define CTI_DEVTYPE_SUB_Msk (0xFUL << CTI_DEVTYPE_SUB_Pos) /*!< Bit mask of SUB field. */
#define CTI_DEVTYPE_SUB_Crosstrigger (0b0001UL) /*!< Indicates that this component is a sub-triggering component. */

/* Bits 3..0 : Major classification of the type of the debug component as specified in the ARM Architecture Specification for this
                    debug and trace component. */
#define CTI_DEVTYPE_MAJOR_Pos (0UL) /*!< Position of MAJOR field. */
#define CTI_DEVTYPE_MAJOR_Msk (0xFUL << CTI_DEVTYPE_MAJOR_Pos) /*!< Bit mask of MAJOR field. */
#define CTI_DEVTYPE_MAJOR_Controller (0b0100UL) /*!< Indicates that this component allows a debugger to control other components in a CoreSight SoC-400 system. */

/* Register: CTI_PIDR4 */
/* Description: Peripheral ID4 Register */

/* Bits 7..4 : Always 0b0000. Indicates that the device only occupies 4KB of memory. */
#define CTI_PIDR4_SIZE_Pos (4UL) /*!< Position of SIZE field. */
#define CTI_PIDR4_SIZE_Msk (0xFUL << CTI_PIDR4_SIZE_Pos) /*!< Bit mask of SIZE field. */

/* Bits 3..0 : Together, PIDR1.DES_0, PIDR2.DES_1, and PIDR4.DES_2 identify the designer of the component. */
#define CTI_PIDR4_DES_2_Pos (0UL) /*!< Position of DES_2 field. */
#define CTI_PIDR4_DES_2_Msk (0xFUL << CTI_PIDR4_DES_2_Pos) /*!< Bit mask of DES_2 field. */
#define CTI_PIDR4_DES_2_Code (0b0100UL) /*!< JEDEC continuation code */

/* Register: CTI_PIDR0 */
/* Description: Peripheral ID0 Register */

/* Bits 7..0 : Bits[7:0] of the 12-bit part number of the component. The designer of the component assigns this part number. */
#define CTI_PIDR0_PART_0_Pos (0UL) /*!< Position of PART_0 field. */
#define CTI_PIDR0_PART_0_Msk (0xFFUL << CTI_PIDR0_PART_0_Pos) /*!< Bit mask of PART_0 field. */
#define CTI_PIDR0_PART_0_PartnumberL (0x21UL) /*!< Indicates bits[7:0] of the part number of the component. */

/* Register: CTI_PIDR1 */
/* Description: Peripheral ID1 Register */

/* Bits 7..4 : Together, PIDR1.DES_0, PIDR2.DES_1, and PIDR4.DES_2 identify the designer of the component. */
#define CTI_PIDR1_DES_0_Pos (4UL) /*!< Position of DES_0 field. */
#define CTI_PIDR1_DES_0_Msk (0xFUL << CTI_PIDR1_DES_0_Pos) /*!< Bit mask of DES_0 field. */
#define CTI_PIDR1_DES_0_Arm (0b1011UL) /*!< ARM. Bits[3:0] of the JEDEC JEP106 Identity Code */

/* Bits 3..0 : Bits[11:8] of the 12-bit part number of the component. The designer of the component assigns this part number. */
#define CTI_PIDR1_PART_1_Pos (0UL) /*!< Position of PART_1 field. */
#define CTI_PIDR1_PART_1_Msk (0xFUL << CTI_PIDR1_PART_1_Pos) /*!< Bit mask of PART_1 field. */
#define CTI_PIDR1_PART_1_PartnumberH (0b1101UL) /*!< Indicates bits[11:8] of the part number of the component. */

/* Register: CTI_PIDR2 */
/* Description: Peripheral ID2 Register */

/* Bits 7..4 : Peripheral revision */
#define CTI_PIDR2_REVISION_Pos (4UL) /*!< Position of REVISION field. */
#define CTI_PIDR2_REVISION_Msk (0xFUL << CTI_PIDR2_REVISION_Pos) /*!< Bit mask of REVISION field. */
#define CTI_PIDR2_REVISION_Rev0p0 (0b0000UL) /*!< This device is at r0p0 */

/* Bit 3 : Always 1. Indicates that the JEDEC-assigned designer ID is used. */
#define CTI_PIDR2_JEDEC_Pos (3UL) /*!< Position of JEDEC field. */
#define CTI_PIDR2_JEDEC_Msk (0x1UL << CTI_PIDR2_JEDEC_Pos) /*!< Bit mask of JEDEC field. */

/* Bits 2..0 : Together, PIDR1.DES_0, PIDR2.DES_1, and PIDR4.DES_2 identify the designer of the component. */
#define CTI_PIDR2_DES_1_Pos (0UL) /*!< Position of DES_1 field. */
#define CTI_PIDR2_DES_1_Msk (0x7UL << CTI_PIDR2_DES_1_Pos) /*!< Bit mask of DES_1 field. */
#define CTI_PIDR2_DES_1_Arm (0b011UL) /*!< ARM. Bits[6:4] of the JEDEC JEP106 Identity Code */

/* Register: CTI_PIDR3 */
/* Description: Peripheral ID3 Register */

/* Bits 7..4 : Indicates minor errata fixes specific to the revision of the component being used, for example metal fixes after
                    implementation. In most cases, this field is 0b0000. ARM recommends that the component designers ensure that a
                    metal fix can change this field if required, for example, by driving it from registers that reset to 0b0000. */
#define CTI_PIDR3_REVAND_Pos (4UL) /*!< Position of REVAND field. */
#define CTI_PIDR3_REVAND_Msk (0xFUL << CTI_PIDR3_REVAND_Pos) /*!< Bit mask of REVAND field. */
#define CTI_PIDR3_REVAND_NoErrata (0b000UL) /*!< Indicates that there are no errata fixes to this component. */

/* Bits 3..0 : Customer Modified. Indicates whether the customer has modified the behavior of the component. In most cases,
                    this field is 0b0000. Customers change this value when they make authorized modifications to this component. */
#define CTI_PIDR3_CMOD_Pos (0UL) /*!< Position of CMOD field. */
#define CTI_PIDR3_CMOD_Msk (0xFUL << CTI_PIDR3_CMOD_Pos) /*!< Bit mask of CMOD field. */
#define CTI_PIDR3_CMOD_Unmodified (0b000UL) /*!< Indicates that the customer has not modified this component. */

/* Register: CTI_CIDR0 */
/* Description: Component ID0 Register */

/* Bits 7..0 : Preamble[0]. Contains bits[7:0] of the component identification code. */
#define CTI_CIDR0_PRMBL_0_Pos (0UL) /*!< Position of PRMBL_0 field. */
#define CTI_CIDR0_PRMBL_0_Msk (0xFFUL << CTI_CIDR0_PRMBL_0_Pos) /*!< Bit mask of PRMBL_0 field. */
#define CTI_CIDR0_PRMBL_0_Value (0x0DUL) /*!< Bits[7:0] of the identification code. */

/* Register: CTI_CIDR1 */
/* Description: Component ID1 Register */

/* Bits 7..4 : Class of the component, for example, whether the component is a ROM table or a generic CoreSight component.
                    Contains bits[15:12] of the component identification code */
#define CTI_CIDR1_CLASS_Pos (4UL) /*!< Position of CLASS field. */
#define CTI_CIDR1_CLASS_Msk (0xFUL << CTI_CIDR1_CLASS_Pos) /*!< Bit mask of CLASS field. */
#define CTI_CIDR1_CLASS_Coresight (0b1001UL) /*!< Indicates that the component is a CoreSight component. */

/* Bits 3..0 : Preamble[1]. Contains bits[11:8] of the component identification code. */
#define CTI_CIDR1_PRMBL_1_Pos (0UL) /*!< Position of PRMBL_1 field. */
#define CTI_CIDR1_PRMBL_1_Msk (0xFUL << CTI_CIDR1_PRMBL_1_Pos) /*!< Bit mask of PRMBL_1 field. */
#define CTI_CIDR1_PRMBL_1_Value (0b0000UL) /*!< Bits[11:8] of the identification code. */

/* Register: CTI_CIDR2 */
/* Description: Component ID2 Register */

/* Bits 7..0 : Preamble[2]. Contains bits[23:16] of the component identification code. */
#define CTI_CIDR2_PRMBL_2_Pos (0UL) /*!< Position of PRMBL_2 field. */
#define CTI_CIDR2_PRMBL_2_Msk (0xFFUL << CTI_CIDR2_PRMBL_2_Pos) /*!< Bit mask of PRMBL_2 field. */
#define CTI_CIDR2_PRMBL_2_Value (0x05UL) /*!< Bits[23:16] of the identification code. */

/* Register: CTI_CIDR3 */
/* Description: Component ID3 Register */

/* Bits 7..0 : Preamble[3]. Contains bits[31:24] of the component identification code. */
#define CTI_CIDR3_PRMBL_3_Pos (0UL) /*!< Position of PRMBL_3 field. */
#define CTI_CIDR3_PRMBL_3_Msk (0xFFUL << CTI_CIDR3_PRMBL_3_Pos) /*!< Bit mask of PRMBL_3 field. */
#define CTI_CIDR3_PRMBL_3_Value (0xB1UL) /*!< Bits[31:24] of the identification code. */


/* Peripheral: CTRLAPPERI */
/* Description: Control access port 0 */

/* Register: CTRLAPPERI_MAILBOX_RXDATA */
/* Description: Data sent from the debugger to the CPU. */

/* Bits 31..0 : Data received from debugger */
#define CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Pos (0UL) /*!< Position of RXDATA field. */
#define CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Msk (0xFFFFFFFFUL << CTRLAPPERI_MAILBOX_RXDATA_RXDATA_Pos) /*!< Bit mask of RXDATA field. */

/* Register: CTRLAPPERI_MAILBOX_RXSTATUS */
/* Description: This register shows a status that indicates if data sent from the debugger to the CPU has been read. */

/* Bit 0 : Status of data in register RXDATA */
#define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Pos (0UL) /*!< Position of RXSTATUS field. */
#define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Msk (0x1UL << CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_Pos) /*!< Bit mask of RXSTATUS field. */
#define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_NoDataPending (0UL) /*!< No data pending in register RXDATA */
#define CTRLAPPERI_MAILBOX_RXSTATUS_RXSTATUS_DataPending (1UL) /*!< Data pending in register RXDATA */

/* Register: CTRLAPPERI_MAILBOX_TXDATA */
/* Description: Data sent from the CPU to the debugger. */

/* Bits 31..0 : Data sent to debugger */
#define CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Pos (0UL) /*!< Position of TXDATA field. */
#define CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Msk (0xFFFFFFFFUL << CTRLAPPERI_MAILBOX_TXDATA_TXDATA_Pos) /*!< Bit mask of TXDATA field. */

/* Register: CTRLAPPERI_MAILBOX_TXSTATUS */
/* Description: This register shows a status that indicates if the data sent from the CPU to the debugger has been read. */

/* Bit 0 : Status of data in register TXDATA */
#define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Pos (0UL) /*!< Position of TXSTATUS field. */
#define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Msk (0x1UL << CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_Pos) /*!< Bit mask of TXSTATUS field. */
#define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_NoDataPending (0UL) /*!< No data pending in register TXDATA */
#define CTRLAPPERI_MAILBOX_TXSTATUS_TXSTATUS_DataPending (1UL) /*!< Data pending in register TXDATA */

/* Register: CTRLAPPERI_ERASEPROTECT_LOCK */
/* Description: This register locks the ERASEPROTECT.DISABLE register from being written until next reset. */

/* Bit 0 : Lock ERASEPROTECT.DISABLE register from being written until next reset */
#define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Pos (0UL) /*!< Position of LOCK field. */
#define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Msk (0x1UL << CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Unlocked (0UL) /*!< Register ERASEPROTECT.DISABLE is writeable */
#define CTRLAPPERI_ERASEPROTECT_LOCK_LOCK_Locked (1UL) /*!< Register ERASEPROTECT.DISABLE is read-only */

/* Register: CTRLAPPERI_ERASEPROTECT_DISABLE */
/* Description: This register disables the ERASEPROTECT register and performs an  ERASEALL operation. */

/* Bits 31..0 : The ERASEALL sequence is initiated if the value of the KEY fields are non-zero and the KEY fields match on both the CPU and debugger sides. */
#define CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Pos (0UL) /*!< Position of KEY field. */
#define CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Msk (0xFFFFFFFFUL << CTRLAPPERI_ERASEPROTECT_DISABLE_KEY_Pos) /*!< Bit mask of KEY field. */

/* Register: CTRLAPPERI_APPROTECT_LOCK */
/* Description: This register locks the APPROTECT.DISABLE register from being written to until next reset. */

/* Bit 0 : Lock the APPROTECT.DISABLE register from being written to until next reset */
#define CTRLAPPERI_APPROTECT_LOCK_LOCK_Pos (0UL) /*!< Position of LOCK field. */
#define CTRLAPPERI_APPROTECT_LOCK_LOCK_Msk (0x1UL << CTRLAPPERI_APPROTECT_LOCK_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define CTRLAPPERI_APPROTECT_LOCK_LOCK_Unlocked (0UL) /*!< Register APPROTECT.DISABLE is writeable */
#define CTRLAPPERI_APPROTECT_LOCK_LOCK_Locked (1UL) /*!< Register APPROTECT.DISABLE is read-only */

/* Register: CTRLAPPERI_APPROTECT_DISABLE */
/* Description: This register disables the APPROTECT register and enables debug access to non-secure mode. */

/* Bits 31..0 : Disable APPROTECT and enable debug access to non-secure mode until the next pin reset if the KEY fields match. The current APPROTECT value as configured from UICR is bypassed if the value of the KEY fields are non-zero and the KEY fields match on both the CPU and debugger sides. */
#define CTRLAPPERI_APPROTECT_DISABLE_KEY_Pos (0UL) /*!< Position of KEY field. */
#define CTRLAPPERI_APPROTECT_DISABLE_KEY_Msk (0xFFFFFFFFUL << CTRLAPPERI_APPROTECT_DISABLE_KEY_Pos) /*!< Bit mask of KEY field. */

/* Register: CTRLAPPERI_SECUREAPPROTECT_LOCK */
/* Description: This register locks the SECUREAPPROTECT.DISABLE register from being written until next reset. */

/* Bit 0 : Lock register SECUREAPPROTECT.DISABLE from being written until next reset */
#define CTRLAPPERI_SECUREAPPROTECT_LOCK_LOCK_Pos (0UL) /*!< Position of LOCK field. */
#define CTRLAPPERI_SECUREAPPROTECT_LOCK_LOCK_Msk (0x1UL << CTRLAPPERI_SECUREAPPROTECT_LOCK_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define CTRLAPPERI_SECUREAPPROTECT_LOCK_LOCK_Unlocked (0UL) /*!< Register SECUREAPPROTECT.DISABLE is writeable */
#define CTRLAPPERI_SECUREAPPROTECT_LOCK_LOCK_Locked (1UL) /*!< Register SECUREAPPROTECT.DISABLE is read-only */

/* Register: CTRLAPPERI_SECUREAPPROTECT_DISABLE */
/* Description: This register disables the SECUREAPPROTECT register and enables debug access to secure mode. */

/* Bits 31..0 : Disable SECUREAPPROTECT and enable debug of secure mode until the next pin reset if the KEY fields match. The current SECUREAPPROTECT value as configured from UICR is bypassed if the value of the KEY fields are non-zero and the KEY fields match on both the CPU and debugger sides. */
#define CTRLAPPERI_SECUREAPPROTECT_DISABLE_KEY_Pos (0UL) /*!< Position of KEY field. */
#define CTRLAPPERI_SECUREAPPROTECT_DISABLE_KEY_Msk (0xFFFFFFFFUL << CTRLAPPERI_SECUREAPPROTECT_DISABLE_KEY_Pos) /*!< Bit mask of KEY field. */

/* Register: CTRLAPPERI_STATUS */
/* Description: Status bits for CTRL-AP peripheral */

/* Bit 2 : Status bit for device debug interface mode */
#define CTRLAPPERI_STATUS_DBGIFACEMODE_Pos (2UL) /*!< Position of DBGIFACEMODE field. */
#define CTRLAPPERI_STATUS_DBGIFACEMODE_Msk (0x1UL << CTRLAPPERI_STATUS_DBGIFACEMODE_Pos) /*!< Bit mask of DBGIFACEMODE field. */
#define CTRLAPPERI_STATUS_DBGIFACEMODE_Disabled (0UL) /*!< No debugger attached */
#define CTRLAPPERI_STATUS_DBGIFACEMODE_Enabled (1UL) /*!< Debugger is attached and device is in debug interface mode */

/* Bit 1 : Status bit for access port protection in secure mode */
#define CTRLAPPERI_STATUS_SECUREAPPROTECT_Pos (1UL) /*!< Position of SECUREAPPROTECT field. */
#define CTRLAPPERI_STATUS_SECUREAPPROTECT_Msk (0x1UL << CTRLAPPERI_STATUS_SECUREAPPROTECT_Pos) /*!< Bit mask of SECUREAPPROTECT field. */
#define CTRLAPPERI_STATUS_SECUREAPPROTECT_Disabled (0UL) /*!< Secure mode access port protection is currently disabled */
#define CTRLAPPERI_STATUS_SECUREAPPROTECT_Enabled (1UL) /*!< Secure mode access port protection is currently enabled */

/* Bit 0 : Status bit for access port protection in non-secure mode */
#define CTRLAPPERI_STATUS_APPROTECT_Pos (0UL) /*!< Position of APPROTECT field. */
#define CTRLAPPERI_STATUS_APPROTECT_Msk (0x1UL << CTRLAPPERI_STATUS_APPROTECT_Pos) /*!< Bit mask of APPROTECT field. */
#define CTRLAPPERI_STATUS_APPROTECT_Disabled (0UL) /*!< Non-secure mode access port protection is currently disabled */
#define CTRLAPPERI_STATUS_APPROTECT_Enabled (1UL) /*!< Non-secure mode access port protection is currently enabled */


/* Peripheral: DCNF */
/* Description: Domain configuration management 0 */

/* Register: DCNF_CPUID */
/* Description: CPU ID of this subsystem */

/* Bits 7..0 : CPU ID */
#define DCNF_CPUID_CPUID_Pos (0UL) /*!< Position of CPUID field. */
#define DCNF_CPUID_CPUID_Msk (0xFFUL << DCNF_CPUID_CPUID_Pos) /*!< Bit mask of CPUID field. */

/* Register: DCNF_EXTPERI_PROTECT */
/* Description: Description cluster: Control access for master connected to AMLI master port EXTPERI[n] */

/* Bit 0 : Control access to slave 0 of master EXTPERI[n] */
#define DCNF_EXTPERI_PROTECT_SLAVE0_Pos (0UL) /*!< Position of SLAVE0 field. */
#define DCNF_EXTPERI_PROTECT_SLAVE0_Msk (0x1UL << DCNF_EXTPERI_PROTECT_SLAVE0_Pos) /*!< Bit mask of SLAVE0 field. */
#define DCNF_EXTPERI_PROTECT_SLAVE0_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTPERI_PROTECT_SLAVE0_Blocked (1UL) /*!< Access to slave is blocked */

/* Register: DCNF_EXTRAM_PROTECT */
/* Description: Description cluster: Control access from master connected to AMLI master port EXTRAM[n] */

/* Bit 7 : Control access to slave 7 of master EXTRAM[n] */
#define DCNF_EXTRAM_PROTECT_SLAVE7_Pos (7UL) /*!< Position of SLAVE7 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE7_Msk (0x1UL << DCNF_EXTRAM_PROTECT_SLAVE7_Pos) /*!< Bit mask of SLAVE7 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE7_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTRAM_PROTECT_SLAVE7_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 6 : Control access to slave 6 of master EXTRAM[n] */
#define DCNF_EXTRAM_PROTECT_SLAVE6_Pos (6UL) /*!< Position of SLAVE6 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE6_Msk (0x1UL << DCNF_EXTRAM_PROTECT_SLAVE6_Pos) /*!< Bit mask of SLAVE6 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE6_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTRAM_PROTECT_SLAVE6_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 5 : Control access to slave 5 of master EXTRAM[n] */
#define DCNF_EXTRAM_PROTECT_SLAVE5_Pos (5UL) /*!< Position of SLAVE5 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE5_Msk (0x1UL << DCNF_EXTRAM_PROTECT_SLAVE5_Pos) /*!< Bit mask of SLAVE5 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE5_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTRAM_PROTECT_SLAVE5_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 4 : Control access to slave 4 of master EXTRAM[n] */
#define DCNF_EXTRAM_PROTECT_SLAVE4_Pos (4UL) /*!< Position of SLAVE4 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE4_Msk (0x1UL << DCNF_EXTRAM_PROTECT_SLAVE4_Pos) /*!< Bit mask of SLAVE4 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE4_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTRAM_PROTECT_SLAVE4_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 3 : Control access to slave 3 of master EXTRAM[n] */
#define DCNF_EXTRAM_PROTECT_SLAVE3_Pos (3UL) /*!< Position of SLAVE3 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE3_Msk (0x1UL << DCNF_EXTRAM_PROTECT_SLAVE3_Pos) /*!< Bit mask of SLAVE3 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE3_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTRAM_PROTECT_SLAVE3_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 2 : Control access to slave 2 of master EXTRAM[n] */
#define DCNF_EXTRAM_PROTECT_SLAVE2_Pos (2UL) /*!< Position of SLAVE2 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE2_Msk (0x1UL << DCNF_EXTRAM_PROTECT_SLAVE2_Pos) /*!< Bit mask of SLAVE2 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE2_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTRAM_PROTECT_SLAVE2_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 1 : Control access to slave 1 of master EXTRAM[n] */
#define DCNF_EXTRAM_PROTECT_SLAVE1_Pos (1UL) /*!< Position of SLAVE1 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE1_Msk (0x1UL << DCNF_EXTRAM_PROTECT_SLAVE1_Pos) /*!< Bit mask of SLAVE1 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE1_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTRAM_PROTECT_SLAVE1_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 0 : Control access to slave 0 of master EXTRAM[n] */
#define DCNF_EXTRAM_PROTECT_SLAVE0_Pos (0UL) /*!< Position of SLAVE0 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE0_Msk (0x1UL << DCNF_EXTRAM_PROTECT_SLAVE0_Pos) /*!< Bit mask of SLAVE0 field. */
#define DCNF_EXTRAM_PROTECT_SLAVE0_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTRAM_PROTECT_SLAVE0_Blocked (1UL) /*!< Access to slave is blocked */

/* Register: DCNF_EXTCODE_PROTECT */
/* Description: Description cluster: Control access from master connected to AMLI master port EXTCODE[n] */

/* Bit 0 : Control access to slave 0 of master EXTCODE[n] */
#define DCNF_EXTCODE_PROTECT_SLAVE0_Pos (0UL) /*!< Position of SLAVE0 field. */
#define DCNF_EXTCODE_PROTECT_SLAVE0_Msk (0x1UL << DCNF_EXTCODE_PROTECT_SLAVE0_Pos) /*!< Bit mask of SLAVE0 field. */
#define DCNF_EXTCODE_PROTECT_SLAVE0_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODE_PROTECT_SLAVE0_Blocked (1UL) /*!< Access to slave is blocked */

/* Register: DCNF_EXTCODESYNC_PROTECT */
/* Description: Description cluster: Control access from master connected to AMLI master port EXTCODESYNC[n] */

/* Bit 7 : Control access to slave 7 of master EXTCODESYNC[n] */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE7_Pos (7UL) /*!< Position of SLAVE7 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE7_Msk (0x1UL << DCNF_EXTCODESYNC_PROTECT_SLAVE7_Pos) /*!< Bit mask of SLAVE7 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE7_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE7_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 6 : Control access to slave 6 of master EXTCODESYNC[n] */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE6_Pos (6UL) /*!< Position of SLAVE6 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE6_Msk (0x1UL << DCNF_EXTCODESYNC_PROTECT_SLAVE6_Pos) /*!< Bit mask of SLAVE6 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE6_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE6_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 5 : Control access to slave 5 of master EXTCODESYNC[n] */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE5_Pos (5UL) /*!< Position of SLAVE5 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE5_Msk (0x1UL << DCNF_EXTCODESYNC_PROTECT_SLAVE5_Pos) /*!< Bit mask of SLAVE5 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE5_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE5_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 4 : Control access to slave 4 of master EXTCODESYNC[n] */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE4_Pos (4UL) /*!< Position of SLAVE4 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE4_Msk (0x1UL << DCNF_EXTCODESYNC_PROTECT_SLAVE4_Pos) /*!< Bit mask of SLAVE4 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE4_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE4_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 3 : Control access to slave 3 of master EXTCODESYNC[n] */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE3_Pos (3UL) /*!< Position of SLAVE3 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE3_Msk (0x1UL << DCNF_EXTCODESYNC_PROTECT_SLAVE3_Pos) /*!< Bit mask of SLAVE3 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE3_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE3_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 2 : Control access to slave 2 of master EXTCODESYNC[n] */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE2_Pos (2UL) /*!< Position of SLAVE2 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE2_Msk (0x1UL << DCNF_EXTCODESYNC_PROTECT_SLAVE2_Pos) /*!< Bit mask of SLAVE2 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE2_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE2_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 1 : Control access to slave 1 of master EXTCODESYNC[n] */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE1_Pos (1UL) /*!< Position of SLAVE1 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE1_Msk (0x1UL << DCNF_EXTCODESYNC_PROTECT_SLAVE1_Pos) /*!< Bit mask of SLAVE1 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE1_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE1_Blocked (1UL) /*!< Access to slave is blocked */

/* Bit 0 : Control access to slave 0 of master EXTCODESYNC[n] */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE0_Pos (0UL) /*!< Position of SLAVE0 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE0_Msk (0x1UL << DCNF_EXTCODESYNC_PROTECT_SLAVE0_Pos) /*!< Bit mask of SLAVE0 field. */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE0_Allowed (0UL) /*!< Access to slave is allowed */
#define DCNF_EXTCODESYNC_PROTECT_SLAVE0_Blocked (1UL) /*!< Access to slave is blocked */

/* Register: DCNF_FPGAINFO_SVNREVISION */
/* Description: SVN revision */

/* Bits 31..0 : SVN revision */
#define DCNF_FPGAINFO_SVNREVISION_SVNREVISION_Pos (0UL) /*!< Position of SVNREVISION field. */
#define DCNF_FPGAINFO_SVNREVISION_SVNREVISION_Msk (0xFFFFFFFFUL << DCNF_FPGAINFO_SVNREVISION_SVNREVISION_Pos) /*!< Bit mask of SVNREVISION field. */

/* Register: DCNF_FPGAINFO_OFFICIAL */
/* Description: Official release */

/* Bit 0 : Official release */
#define DCNF_FPGAINFO_OFFICIAL_OFFICIAL_Pos (0UL) /*!< Position of OFFICIAL field. */
#define DCNF_FPGAINFO_OFFICIAL_OFFICIAL_Msk (0x1UL << DCNF_FPGAINFO_OFFICIAL_OFFICIAL_Pos) /*!< Bit mask of OFFICIAL field. */
#define DCNF_FPGAINFO_OFFICIAL_OFFICIAL_NotOfficial (0UL) /*!< Not official */
#define DCNF_FPGAINFO_OFFICIAL_OFFICIAL_Official (1UL) /*!< Official */

/* Register: DCNF_FPGAINFO_RELEASEID */
/* Description: Description collection: Release ID string */

/* Bits 7..0 : Release ID string byte */
#define DCNF_FPGAINFO_RELEASEID_BYTE_Pos (0UL) /*!< Position of BYTE field. */
#define DCNF_FPGAINFO_RELEASEID_BYTE_Msk (0xFFUL << DCNF_FPGAINFO_RELEASEID_BYTE_Pos) /*!< Bit mask of BYTE field. */

/* Register: DCNF_FPGAINFO_JOBNUMBER */
/* Description: Jenkins job number */

/* Bits 31..0 : Jenkins job number */
#define DCNF_FPGAINFO_JOBNUMBER_JOBNUMBER_Pos (0UL) /*!< Position of JOBNUMBER field. */
#define DCNF_FPGAINFO_JOBNUMBER_JOBNUMBER_Msk (0xFFFFFFFFUL << DCNF_FPGAINFO_JOBNUMBER_JOBNUMBER_Pos) /*!< Bit mask of JOBNUMBER field. */

/* Register: DCNF_AMLICLOCKDELAY */
/* Description: Trim value for AMLI clock delay */

/* Bits 5..0 : Trim value for AMLI clock delay */
#define DCNF_AMLICLOCKDELAY_AMLICLOCKDELAY_Pos (0UL) /*!< Position of AMLICLOCKDELAY field. */
#define DCNF_AMLICLOCKDELAY_AMLICLOCKDELAY_Msk (0x3FUL << DCNF_AMLICLOCKDELAY_AMLICLOCKDELAY_Pos) /*!< Bit mask of AMLICLOCKDELAY field. */


/* Peripheral: DPPIC */
/* Description: Distributed programmable peripheral interconnect controller 0 */

/* Register: DPPIC_TASKS_CHG_EN */
/* Description: Description cluster: Enable channel group n */

/* Bit 0 : Enable channel group n */
#define DPPIC_TASKS_CHG_EN_EN_Pos (0UL) /*!< Position of EN field. */
#define DPPIC_TASKS_CHG_EN_EN_Msk (0x1UL << DPPIC_TASKS_CHG_EN_EN_Pos) /*!< Bit mask of EN field. */
#define DPPIC_TASKS_CHG_EN_EN_Trigger (1UL) /*!< Trigger task */

/* Register: DPPIC_TASKS_CHG_DIS */
/* Description: Description cluster: Disable channel group n */

/* Bit 0 : Disable channel group n */
#define DPPIC_TASKS_CHG_DIS_DIS_Pos (0UL) /*!< Position of DIS field. */
#define DPPIC_TASKS_CHG_DIS_DIS_Msk (0x1UL << DPPIC_TASKS_CHG_DIS_DIS_Pos) /*!< Bit mask of DIS field. */
#define DPPIC_TASKS_CHG_DIS_DIS_Trigger (1UL) /*!< Trigger task */

/* Register: DPPIC_SUBSCRIBE_CHG_EN */
/* Description: Description cluster: Subscribe configuration for task CHG[n].EN */

/* Bit 31 :   */
#define DPPIC_SUBSCRIBE_CHG_EN_EN_Pos (31UL) /*!< Position of EN field. */
#define DPPIC_SUBSCRIBE_CHG_EN_EN_Msk (0x1UL << DPPIC_SUBSCRIBE_CHG_EN_EN_Pos) /*!< Bit mask of EN field. */
#define DPPIC_SUBSCRIBE_CHG_EN_EN_Disabled (0UL) /*!< Disable subscription */
#define DPPIC_SUBSCRIBE_CHG_EN_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CHG[n].EN will subscribe to */
#define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Msk (0xFFUL << DPPIC_SUBSCRIBE_CHG_EN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: DPPIC_SUBSCRIBE_CHG_DIS */
/* Description: Description cluster: Subscribe configuration for task CHG[n].DIS */

/* Bit 31 :   */
#define DPPIC_SUBSCRIBE_CHG_DIS_EN_Pos (31UL) /*!< Position of EN field. */
#define DPPIC_SUBSCRIBE_CHG_DIS_EN_Msk (0x1UL << DPPIC_SUBSCRIBE_CHG_DIS_EN_Pos) /*!< Bit mask of EN field. */
#define DPPIC_SUBSCRIBE_CHG_DIS_EN_Disabled (0UL) /*!< Disable subscription */
#define DPPIC_SUBSCRIBE_CHG_DIS_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CHG[n].DIS will subscribe to */
#define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Msk (0xFFUL << DPPIC_SUBSCRIBE_CHG_DIS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: DPPIC_CHEN */
/* Description: Channel enable register */

/* Bit 31 : Enable or disable channel 31 */
#define DPPIC_CHEN_CH31_Pos (31UL) /*!< Position of CH31 field. */
#define DPPIC_CHEN_CH31_Msk (0x1UL << DPPIC_CHEN_CH31_Pos) /*!< Bit mask of CH31 field. */
#define DPPIC_CHEN_CH31_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH31_Enabled (1UL) /*!< Enable channel */

/* Bit 30 : Enable or disable channel 30 */
#define DPPIC_CHEN_CH30_Pos (30UL) /*!< Position of CH30 field. */
#define DPPIC_CHEN_CH30_Msk (0x1UL << DPPIC_CHEN_CH30_Pos) /*!< Bit mask of CH30 field. */
#define DPPIC_CHEN_CH30_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH30_Enabled (1UL) /*!< Enable channel */

/* Bit 29 : Enable or disable channel 29 */
#define DPPIC_CHEN_CH29_Pos (29UL) /*!< Position of CH29 field. */
#define DPPIC_CHEN_CH29_Msk (0x1UL << DPPIC_CHEN_CH29_Pos) /*!< Bit mask of CH29 field. */
#define DPPIC_CHEN_CH29_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH29_Enabled (1UL) /*!< Enable channel */

/* Bit 28 : Enable or disable channel 28 */
#define DPPIC_CHEN_CH28_Pos (28UL) /*!< Position of CH28 field. */
#define DPPIC_CHEN_CH28_Msk (0x1UL << DPPIC_CHEN_CH28_Pos) /*!< Bit mask of CH28 field. */
#define DPPIC_CHEN_CH28_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH28_Enabled (1UL) /*!< Enable channel */

/* Bit 27 : Enable or disable channel 27 */
#define DPPIC_CHEN_CH27_Pos (27UL) /*!< Position of CH27 field. */
#define DPPIC_CHEN_CH27_Msk (0x1UL << DPPIC_CHEN_CH27_Pos) /*!< Bit mask of CH27 field. */
#define DPPIC_CHEN_CH27_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH27_Enabled (1UL) /*!< Enable channel */

/* Bit 26 : Enable or disable channel 26 */
#define DPPIC_CHEN_CH26_Pos (26UL) /*!< Position of CH26 field. */
#define DPPIC_CHEN_CH26_Msk (0x1UL << DPPIC_CHEN_CH26_Pos) /*!< Bit mask of CH26 field. */
#define DPPIC_CHEN_CH26_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH26_Enabled (1UL) /*!< Enable channel */

/* Bit 25 : Enable or disable channel 25 */
#define DPPIC_CHEN_CH25_Pos (25UL) /*!< Position of CH25 field. */
#define DPPIC_CHEN_CH25_Msk (0x1UL << DPPIC_CHEN_CH25_Pos) /*!< Bit mask of CH25 field. */
#define DPPIC_CHEN_CH25_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH25_Enabled (1UL) /*!< Enable channel */

/* Bit 24 : Enable or disable channel 24 */
#define DPPIC_CHEN_CH24_Pos (24UL) /*!< Position of CH24 field. */
#define DPPIC_CHEN_CH24_Msk (0x1UL << DPPIC_CHEN_CH24_Pos) /*!< Bit mask of CH24 field. */
#define DPPIC_CHEN_CH24_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH24_Enabled (1UL) /*!< Enable channel */

/* Bit 23 : Enable or disable channel 23 */
#define DPPIC_CHEN_CH23_Pos (23UL) /*!< Position of CH23 field. */
#define DPPIC_CHEN_CH23_Msk (0x1UL << DPPIC_CHEN_CH23_Pos) /*!< Bit mask of CH23 field. */
#define DPPIC_CHEN_CH23_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH23_Enabled (1UL) /*!< Enable channel */

/* Bit 22 : Enable or disable channel 22 */
#define DPPIC_CHEN_CH22_Pos (22UL) /*!< Position of CH22 field. */
#define DPPIC_CHEN_CH22_Msk (0x1UL << DPPIC_CHEN_CH22_Pos) /*!< Bit mask of CH22 field. */
#define DPPIC_CHEN_CH22_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH22_Enabled (1UL) /*!< Enable channel */

/* Bit 21 : Enable or disable channel 21 */
#define DPPIC_CHEN_CH21_Pos (21UL) /*!< Position of CH21 field. */
#define DPPIC_CHEN_CH21_Msk (0x1UL << DPPIC_CHEN_CH21_Pos) /*!< Bit mask of CH21 field. */
#define DPPIC_CHEN_CH21_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH21_Enabled (1UL) /*!< Enable channel */

/* Bit 20 : Enable or disable channel 20 */
#define DPPIC_CHEN_CH20_Pos (20UL) /*!< Position of CH20 field. */
#define DPPIC_CHEN_CH20_Msk (0x1UL << DPPIC_CHEN_CH20_Pos) /*!< Bit mask of CH20 field. */
#define DPPIC_CHEN_CH20_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH20_Enabled (1UL) /*!< Enable channel */

/* Bit 19 : Enable or disable channel 19 */
#define DPPIC_CHEN_CH19_Pos (19UL) /*!< Position of CH19 field. */
#define DPPIC_CHEN_CH19_Msk (0x1UL << DPPIC_CHEN_CH19_Pos) /*!< Bit mask of CH19 field. */
#define DPPIC_CHEN_CH19_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH19_Enabled (1UL) /*!< Enable channel */

/* Bit 18 : Enable or disable channel 18 */
#define DPPIC_CHEN_CH18_Pos (18UL) /*!< Position of CH18 field. */
#define DPPIC_CHEN_CH18_Msk (0x1UL << DPPIC_CHEN_CH18_Pos) /*!< Bit mask of CH18 field. */
#define DPPIC_CHEN_CH18_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH18_Enabled (1UL) /*!< Enable channel */

/* Bit 17 : Enable or disable channel 17 */
#define DPPIC_CHEN_CH17_Pos (17UL) /*!< Position of CH17 field. */
#define DPPIC_CHEN_CH17_Msk (0x1UL << DPPIC_CHEN_CH17_Pos) /*!< Bit mask of CH17 field. */
#define DPPIC_CHEN_CH17_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH17_Enabled (1UL) /*!< Enable channel */

/* Bit 16 : Enable or disable channel 16 */
#define DPPIC_CHEN_CH16_Pos (16UL) /*!< Position of CH16 field. */
#define DPPIC_CHEN_CH16_Msk (0x1UL << DPPIC_CHEN_CH16_Pos) /*!< Bit mask of CH16 field. */
#define DPPIC_CHEN_CH16_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH16_Enabled (1UL) /*!< Enable channel */

/* Bit 15 : Enable or disable channel 15 */
#define DPPIC_CHEN_CH15_Pos (15UL) /*!< Position of CH15 field. */
#define DPPIC_CHEN_CH15_Msk (0x1UL << DPPIC_CHEN_CH15_Pos) /*!< Bit mask of CH15 field. */
#define DPPIC_CHEN_CH15_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH15_Enabled (1UL) /*!< Enable channel */

/* Bit 14 : Enable or disable channel 14 */
#define DPPIC_CHEN_CH14_Pos (14UL) /*!< Position of CH14 field. */
#define DPPIC_CHEN_CH14_Msk (0x1UL << DPPIC_CHEN_CH14_Pos) /*!< Bit mask of CH14 field. */
#define DPPIC_CHEN_CH14_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH14_Enabled (1UL) /*!< Enable channel */

/* Bit 13 : Enable or disable channel 13 */
#define DPPIC_CHEN_CH13_Pos (13UL) /*!< Position of CH13 field. */
#define DPPIC_CHEN_CH13_Msk (0x1UL << DPPIC_CHEN_CH13_Pos) /*!< Bit mask of CH13 field. */
#define DPPIC_CHEN_CH13_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH13_Enabled (1UL) /*!< Enable channel */

/* Bit 12 : Enable or disable channel 12 */
#define DPPIC_CHEN_CH12_Pos (12UL) /*!< Position of CH12 field. */
#define DPPIC_CHEN_CH12_Msk (0x1UL << DPPIC_CHEN_CH12_Pos) /*!< Bit mask of CH12 field. */
#define DPPIC_CHEN_CH12_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH12_Enabled (1UL) /*!< Enable channel */

/* Bit 11 : Enable or disable channel 11 */
#define DPPIC_CHEN_CH11_Pos (11UL) /*!< Position of CH11 field. */
#define DPPIC_CHEN_CH11_Msk (0x1UL << DPPIC_CHEN_CH11_Pos) /*!< Bit mask of CH11 field. */
#define DPPIC_CHEN_CH11_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH11_Enabled (1UL) /*!< Enable channel */

/* Bit 10 : Enable or disable channel 10 */
#define DPPIC_CHEN_CH10_Pos (10UL) /*!< Position of CH10 field. */
#define DPPIC_CHEN_CH10_Msk (0x1UL << DPPIC_CHEN_CH10_Pos) /*!< Bit mask of CH10 field. */
#define DPPIC_CHEN_CH10_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH10_Enabled (1UL) /*!< Enable channel */

/* Bit 9 : Enable or disable channel 9 */
#define DPPIC_CHEN_CH9_Pos (9UL) /*!< Position of CH9 field. */
#define DPPIC_CHEN_CH9_Msk (0x1UL << DPPIC_CHEN_CH9_Pos) /*!< Bit mask of CH9 field. */
#define DPPIC_CHEN_CH9_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH9_Enabled (1UL) /*!< Enable channel */

/* Bit 8 : Enable or disable channel 8 */
#define DPPIC_CHEN_CH8_Pos (8UL) /*!< Position of CH8 field. */
#define DPPIC_CHEN_CH8_Msk (0x1UL << DPPIC_CHEN_CH8_Pos) /*!< Bit mask of CH8 field. */
#define DPPIC_CHEN_CH8_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH8_Enabled (1UL) /*!< Enable channel */

/* Bit 7 : Enable or disable channel 7 */
#define DPPIC_CHEN_CH7_Pos (7UL) /*!< Position of CH7 field. */
#define DPPIC_CHEN_CH7_Msk (0x1UL << DPPIC_CHEN_CH7_Pos) /*!< Bit mask of CH7 field. */
#define DPPIC_CHEN_CH7_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH7_Enabled (1UL) /*!< Enable channel */

/* Bit 6 : Enable or disable channel 6 */
#define DPPIC_CHEN_CH6_Pos (6UL) /*!< Position of CH6 field. */
#define DPPIC_CHEN_CH6_Msk (0x1UL << DPPIC_CHEN_CH6_Pos) /*!< Bit mask of CH6 field. */
#define DPPIC_CHEN_CH6_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH6_Enabled (1UL) /*!< Enable channel */

/* Bit 5 : Enable or disable channel 5 */
#define DPPIC_CHEN_CH5_Pos (5UL) /*!< Position of CH5 field. */
#define DPPIC_CHEN_CH5_Msk (0x1UL << DPPIC_CHEN_CH5_Pos) /*!< Bit mask of CH5 field. */
#define DPPIC_CHEN_CH5_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH5_Enabled (1UL) /*!< Enable channel */

/* Bit 4 : Enable or disable channel 4 */
#define DPPIC_CHEN_CH4_Pos (4UL) /*!< Position of CH4 field. */
#define DPPIC_CHEN_CH4_Msk (0x1UL << DPPIC_CHEN_CH4_Pos) /*!< Bit mask of CH4 field. */
#define DPPIC_CHEN_CH4_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH4_Enabled (1UL) /*!< Enable channel */

/* Bit 3 : Enable or disable channel 3 */
#define DPPIC_CHEN_CH3_Pos (3UL) /*!< Position of CH3 field. */
#define DPPIC_CHEN_CH3_Msk (0x1UL << DPPIC_CHEN_CH3_Pos) /*!< Bit mask of CH3 field. */
#define DPPIC_CHEN_CH3_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH3_Enabled (1UL) /*!< Enable channel */

/* Bit 2 : Enable or disable channel 2 */
#define DPPIC_CHEN_CH2_Pos (2UL) /*!< Position of CH2 field. */
#define DPPIC_CHEN_CH2_Msk (0x1UL << DPPIC_CHEN_CH2_Pos) /*!< Bit mask of CH2 field. */
#define DPPIC_CHEN_CH2_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH2_Enabled (1UL) /*!< Enable channel */

/* Bit 1 : Enable or disable channel 1 */
#define DPPIC_CHEN_CH1_Pos (1UL) /*!< Position of CH1 field. */
#define DPPIC_CHEN_CH1_Msk (0x1UL << DPPIC_CHEN_CH1_Pos) /*!< Bit mask of CH1 field. */
#define DPPIC_CHEN_CH1_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH1_Enabled (1UL) /*!< Enable channel */

/* Bit 0 : Enable or disable channel 0 */
#define DPPIC_CHEN_CH0_Pos (0UL) /*!< Position of CH0 field. */
#define DPPIC_CHEN_CH0_Msk (0x1UL << DPPIC_CHEN_CH0_Pos) /*!< Bit mask of CH0 field. */
#define DPPIC_CHEN_CH0_Disabled (0UL) /*!< Disable channel */
#define DPPIC_CHEN_CH0_Enabled (1UL) /*!< Enable channel */

/* Register: DPPIC_CHENSET */
/* Description: Channel enable set register */

/* Bit 31 : Channel 31 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH31_Pos (31UL) /*!< Position of CH31 field. */
#define DPPIC_CHENSET_CH31_Msk (0x1UL << DPPIC_CHENSET_CH31_Pos) /*!< Bit mask of CH31 field. */
#define DPPIC_CHENSET_CH31_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH31_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH31_Set (1UL) /*!< Write: Enable channel */

/* Bit 30 : Channel 30 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH30_Pos (30UL) /*!< Position of CH30 field. */
#define DPPIC_CHENSET_CH30_Msk (0x1UL << DPPIC_CHENSET_CH30_Pos) /*!< Bit mask of CH30 field. */
#define DPPIC_CHENSET_CH30_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH30_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH30_Set (1UL) /*!< Write: Enable channel */

/* Bit 29 : Channel 29 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH29_Pos (29UL) /*!< Position of CH29 field. */
#define DPPIC_CHENSET_CH29_Msk (0x1UL << DPPIC_CHENSET_CH29_Pos) /*!< Bit mask of CH29 field. */
#define DPPIC_CHENSET_CH29_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH29_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH29_Set (1UL) /*!< Write: Enable channel */

/* Bit 28 : Channel 28 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH28_Pos (28UL) /*!< Position of CH28 field. */
#define DPPIC_CHENSET_CH28_Msk (0x1UL << DPPIC_CHENSET_CH28_Pos) /*!< Bit mask of CH28 field. */
#define DPPIC_CHENSET_CH28_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH28_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH28_Set (1UL) /*!< Write: Enable channel */

/* Bit 27 : Channel 27 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH27_Pos (27UL) /*!< Position of CH27 field. */
#define DPPIC_CHENSET_CH27_Msk (0x1UL << DPPIC_CHENSET_CH27_Pos) /*!< Bit mask of CH27 field. */
#define DPPIC_CHENSET_CH27_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH27_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH27_Set (1UL) /*!< Write: Enable channel */

/* Bit 26 : Channel 26 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH26_Pos (26UL) /*!< Position of CH26 field. */
#define DPPIC_CHENSET_CH26_Msk (0x1UL << DPPIC_CHENSET_CH26_Pos) /*!< Bit mask of CH26 field. */
#define DPPIC_CHENSET_CH26_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH26_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH26_Set (1UL) /*!< Write: Enable channel */

/* Bit 25 : Channel 25 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH25_Pos (25UL) /*!< Position of CH25 field. */
#define DPPIC_CHENSET_CH25_Msk (0x1UL << DPPIC_CHENSET_CH25_Pos) /*!< Bit mask of CH25 field. */
#define DPPIC_CHENSET_CH25_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH25_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH25_Set (1UL) /*!< Write: Enable channel */

/* Bit 24 : Channel 24 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH24_Pos (24UL) /*!< Position of CH24 field. */
#define DPPIC_CHENSET_CH24_Msk (0x1UL << DPPIC_CHENSET_CH24_Pos) /*!< Bit mask of CH24 field. */
#define DPPIC_CHENSET_CH24_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH24_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH24_Set (1UL) /*!< Write: Enable channel */

/* Bit 23 : Channel 23 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH23_Pos (23UL) /*!< Position of CH23 field. */
#define DPPIC_CHENSET_CH23_Msk (0x1UL << DPPIC_CHENSET_CH23_Pos) /*!< Bit mask of CH23 field. */
#define DPPIC_CHENSET_CH23_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH23_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH23_Set (1UL) /*!< Write: Enable channel */

/* Bit 22 : Channel 22 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH22_Pos (22UL) /*!< Position of CH22 field. */
#define DPPIC_CHENSET_CH22_Msk (0x1UL << DPPIC_CHENSET_CH22_Pos) /*!< Bit mask of CH22 field. */
#define DPPIC_CHENSET_CH22_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH22_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH22_Set (1UL) /*!< Write: Enable channel */

/* Bit 21 : Channel 21 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH21_Pos (21UL) /*!< Position of CH21 field. */
#define DPPIC_CHENSET_CH21_Msk (0x1UL << DPPIC_CHENSET_CH21_Pos) /*!< Bit mask of CH21 field. */
#define DPPIC_CHENSET_CH21_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH21_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH21_Set (1UL) /*!< Write: Enable channel */

/* Bit 20 : Channel 20 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH20_Pos (20UL) /*!< Position of CH20 field. */
#define DPPIC_CHENSET_CH20_Msk (0x1UL << DPPIC_CHENSET_CH20_Pos) /*!< Bit mask of CH20 field. */
#define DPPIC_CHENSET_CH20_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH20_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH20_Set (1UL) /*!< Write: Enable channel */

/* Bit 19 : Channel 19 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH19_Pos (19UL) /*!< Position of CH19 field. */
#define DPPIC_CHENSET_CH19_Msk (0x1UL << DPPIC_CHENSET_CH19_Pos) /*!< Bit mask of CH19 field. */
#define DPPIC_CHENSET_CH19_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH19_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH19_Set (1UL) /*!< Write: Enable channel */

/* Bit 18 : Channel 18 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH18_Pos (18UL) /*!< Position of CH18 field. */
#define DPPIC_CHENSET_CH18_Msk (0x1UL << DPPIC_CHENSET_CH18_Pos) /*!< Bit mask of CH18 field. */
#define DPPIC_CHENSET_CH18_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH18_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH18_Set (1UL) /*!< Write: Enable channel */

/* Bit 17 : Channel 17 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH17_Pos (17UL) /*!< Position of CH17 field. */
#define DPPIC_CHENSET_CH17_Msk (0x1UL << DPPIC_CHENSET_CH17_Pos) /*!< Bit mask of CH17 field. */
#define DPPIC_CHENSET_CH17_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH17_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH17_Set (1UL) /*!< Write: Enable channel */

/* Bit 16 : Channel 16 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH16_Pos (16UL) /*!< Position of CH16 field. */
#define DPPIC_CHENSET_CH16_Msk (0x1UL << DPPIC_CHENSET_CH16_Pos) /*!< Bit mask of CH16 field. */
#define DPPIC_CHENSET_CH16_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH16_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH16_Set (1UL) /*!< Write: Enable channel */

/* Bit 15 : Channel 15 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH15_Pos (15UL) /*!< Position of CH15 field. */
#define DPPIC_CHENSET_CH15_Msk (0x1UL << DPPIC_CHENSET_CH15_Pos) /*!< Bit mask of CH15 field. */
#define DPPIC_CHENSET_CH15_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH15_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH15_Set (1UL) /*!< Write: Enable channel */

/* Bit 14 : Channel 14 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH14_Pos (14UL) /*!< Position of CH14 field. */
#define DPPIC_CHENSET_CH14_Msk (0x1UL << DPPIC_CHENSET_CH14_Pos) /*!< Bit mask of CH14 field. */
#define DPPIC_CHENSET_CH14_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH14_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH14_Set (1UL) /*!< Write: Enable channel */

/* Bit 13 : Channel 13 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH13_Pos (13UL) /*!< Position of CH13 field. */
#define DPPIC_CHENSET_CH13_Msk (0x1UL << DPPIC_CHENSET_CH13_Pos) /*!< Bit mask of CH13 field. */
#define DPPIC_CHENSET_CH13_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH13_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH13_Set (1UL) /*!< Write: Enable channel */

/* Bit 12 : Channel 12 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH12_Pos (12UL) /*!< Position of CH12 field. */
#define DPPIC_CHENSET_CH12_Msk (0x1UL << DPPIC_CHENSET_CH12_Pos) /*!< Bit mask of CH12 field. */
#define DPPIC_CHENSET_CH12_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH12_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH12_Set (1UL) /*!< Write: Enable channel */

/* Bit 11 : Channel 11 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH11_Pos (11UL) /*!< Position of CH11 field. */
#define DPPIC_CHENSET_CH11_Msk (0x1UL << DPPIC_CHENSET_CH11_Pos) /*!< Bit mask of CH11 field. */
#define DPPIC_CHENSET_CH11_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH11_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH11_Set (1UL) /*!< Write: Enable channel */

/* Bit 10 : Channel 10 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH10_Pos (10UL) /*!< Position of CH10 field. */
#define DPPIC_CHENSET_CH10_Msk (0x1UL << DPPIC_CHENSET_CH10_Pos) /*!< Bit mask of CH10 field. */
#define DPPIC_CHENSET_CH10_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH10_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH10_Set (1UL) /*!< Write: Enable channel */

/* Bit 9 : Channel 9 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH9_Pos (9UL) /*!< Position of CH9 field. */
#define DPPIC_CHENSET_CH9_Msk (0x1UL << DPPIC_CHENSET_CH9_Pos) /*!< Bit mask of CH9 field. */
#define DPPIC_CHENSET_CH9_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH9_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH9_Set (1UL) /*!< Write: Enable channel */

/* Bit 8 : Channel 8 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH8_Pos (8UL) /*!< Position of CH8 field. */
#define DPPIC_CHENSET_CH8_Msk (0x1UL << DPPIC_CHENSET_CH8_Pos) /*!< Bit mask of CH8 field. */
#define DPPIC_CHENSET_CH8_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH8_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH8_Set (1UL) /*!< Write: Enable channel */

/* Bit 7 : Channel 7 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH7_Pos (7UL) /*!< Position of CH7 field. */
#define DPPIC_CHENSET_CH7_Msk (0x1UL << DPPIC_CHENSET_CH7_Pos) /*!< Bit mask of CH7 field. */
#define DPPIC_CHENSET_CH7_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH7_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH7_Set (1UL) /*!< Write: Enable channel */

/* Bit 6 : Channel 6 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH6_Pos (6UL) /*!< Position of CH6 field. */
#define DPPIC_CHENSET_CH6_Msk (0x1UL << DPPIC_CHENSET_CH6_Pos) /*!< Bit mask of CH6 field. */
#define DPPIC_CHENSET_CH6_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH6_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH6_Set (1UL) /*!< Write: Enable channel */

/* Bit 5 : Channel 5 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH5_Pos (5UL) /*!< Position of CH5 field. */
#define DPPIC_CHENSET_CH5_Msk (0x1UL << DPPIC_CHENSET_CH5_Pos) /*!< Bit mask of CH5 field. */
#define DPPIC_CHENSET_CH5_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH5_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH5_Set (1UL) /*!< Write: Enable channel */

/* Bit 4 : Channel 4 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH4_Pos (4UL) /*!< Position of CH4 field. */
#define DPPIC_CHENSET_CH4_Msk (0x1UL << DPPIC_CHENSET_CH4_Pos) /*!< Bit mask of CH4 field. */
#define DPPIC_CHENSET_CH4_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH4_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH4_Set (1UL) /*!< Write: Enable channel */

/* Bit 3 : Channel 3 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH3_Pos (3UL) /*!< Position of CH3 field. */
#define DPPIC_CHENSET_CH3_Msk (0x1UL << DPPIC_CHENSET_CH3_Pos) /*!< Bit mask of CH3 field. */
#define DPPIC_CHENSET_CH3_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH3_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH3_Set (1UL) /*!< Write: Enable channel */

/* Bit 2 : Channel 2 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH2_Pos (2UL) /*!< Position of CH2 field. */
#define DPPIC_CHENSET_CH2_Msk (0x1UL << DPPIC_CHENSET_CH2_Pos) /*!< Bit mask of CH2 field. */
#define DPPIC_CHENSET_CH2_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH2_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH2_Set (1UL) /*!< Write: Enable channel */

/* Bit 1 : Channel 1 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH1_Pos (1UL) /*!< Position of CH1 field. */
#define DPPIC_CHENSET_CH1_Msk (0x1UL << DPPIC_CHENSET_CH1_Pos) /*!< Bit mask of CH1 field. */
#define DPPIC_CHENSET_CH1_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH1_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH1_Set (1UL) /*!< Write: Enable channel */

/* Bit 0 : Channel 0 enable set register. Writing 0 has no effect. */
#define DPPIC_CHENSET_CH0_Pos (0UL) /*!< Position of CH0 field. */
#define DPPIC_CHENSET_CH0_Msk (0x1UL << DPPIC_CHENSET_CH0_Pos) /*!< Bit mask of CH0 field. */
#define DPPIC_CHENSET_CH0_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENSET_CH0_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENSET_CH0_Set (1UL) /*!< Write: Enable channel */

/* Register: DPPIC_CHENCLR */
/* Description: Channel enable clear register */

/* Bit 31 : Channel 31 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH31_Pos (31UL) /*!< Position of CH31 field. */
#define DPPIC_CHENCLR_CH31_Msk (0x1UL << DPPIC_CHENCLR_CH31_Pos) /*!< Bit mask of CH31 field. */
#define DPPIC_CHENCLR_CH31_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH31_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH31_Clear (1UL) /*!< Write: Disable channel */

/* Bit 30 : Channel 30 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH30_Pos (30UL) /*!< Position of CH30 field. */
#define DPPIC_CHENCLR_CH30_Msk (0x1UL << DPPIC_CHENCLR_CH30_Pos) /*!< Bit mask of CH30 field. */
#define DPPIC_CHENCLR_CH30_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH30_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH30_Clear (1UL) /*!< Write: Disable channel */

/* Bit 29 : Channel 29 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH29_Pos (29UL) /*!< Position of CH29 field. */
#define DPPIC_CHENCLR_CH29_Msk (0x1UL << DPPIC_CHENCLR_CH29_Pos) /*!< Bit mask of CH29 field. */
#define DPPIC_CHENCLR_CH29_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH29_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH29_Clear (1UL) /*!< Write: Disable channel */

/* Bit 28 : Channel 28 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH28_Pos (28UL) /*!< Position of CH28 field. */
#define DPPIC_CHENCLR_CH28_Msk (0x1UL << DPPIC_CHENCLR_CH28_Pos) /*!< Bit mask of CH28 field. */
#define DPPIC_CHENCLR_CH28_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH28_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH28_Clear (1UL) /*!< Write: Disable channel */

/* Bit 27 : Channel 27 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH27_Pos (27UL) /*!< Position of CH27 field. */
#define DPPIC_CHENCLR_CH27_Msk (0x1UL << DPPIC_CHENCLR_CH27_Pos) /*!< Bit mask of CH27 field. */
#define DPPIC_CHENCLR_CH27_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH27_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH27_Clear (1UL) /*!< Write: Disable channel */

/* Bit 26 : Channel 26 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH26_Pos (26UL) /*!< Position of CH26 field. */
#define DPPIC_CHENCLR_CH26_Msk (0x1UL << DPPIC_CHENCLR_CH26_Pos) /*!< Bit mask of CH26 field. */
#define DPPIC_CHENCLR_CH26_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH26_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH26_Clear (1UL) /*!< Write: Disable channel */

/* Bit 25 : Channel 25 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH25_Pos (25UL) /*!< Position of CH25 field. */
#define DPPIC_CHENCLR_CH25_Msk (0x1UL << DPPIC_CHENCLR_CH25_Pos) /*!< Bit mask of CH25 field. */
#define DPPIC_CHENCLR_CH25_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH25_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH25_Clear (1UL) /*!< Write: Disable channel */

/* Bit 24 : Channel 24 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH24_Pos (24UL) /*!< Position of CH24 field. */
#define DPPIC_CHENCLR_CH24_Msk (0x1UL << DPPIC_CHENCLR_CH24_Pos) /*!< Bit mask of CH24 field. */
#define DPPIC_CHENCLR_CH24_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH24_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH24_Clear (1UL) /*!< Write: Disable channel */

/* Bit 23 : Channel 23 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH23_Pos (23UL) /*!< Position of CH23 field. */
#define DPPIC_CHENCLR_CH23_Msk (0x1UL << DPPIC_CHENCLR_CH23_Pos) /*!< Bit mask of CH23 field. */
#define DPPIC_CHENCLR_CH23_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH23_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH23_Clear (1UL) /*!< Write: Disable channel */

/* Bit 22 : Channel 22 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH22_Pos (22UL) /*!< Position of CH22 field. */
#define DPPIC_CHENCLR_CH22_Msk (0x1UL << DPPIC_CHENCLR_CH22_Pos) /*!< Bit mask of CH22 field. */
#define DPPIC_CHENCLR_CH22_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH22_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH22_Clear (1UL) /*!< Write: Disable channel */

/* Bit 21 : Channel 21 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH21_Pos (21UL) /*!< Position of CH21 field. */
#define DPPIC_CHENCLR_CH21_Msk (0x1UL << DPPIC_CHENCLR_CH21_Pos) /*!< Bit mask of CH21 field. */
#define DPPIC_CHENCLR_CH21_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH21_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH21_Clear (1UL) /*!< Write: Disable channel */

/* Bit 20 : Channel 20 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH20_Pos (20UL) /*!< Position of CH20 field. */
#define DPPIC_CHENCLR_CH20_Msk (0x1UL << DPPIC_CHENCLR_CH20_Pos) /*!< Bit mask of CH20 field. */
#define DPPIC_CHENCLR_CH20_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH20_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH20_Clear (1UL) /*!< Write: Disable channel */

/* Bit 19 : Channel 19 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH19_Pos (19UL) /*!< Position of CH19 field. */
#define DPPIC_CHENCLR_CH19_Msk (0x1UL << DPPIC_CHENCLR_CH19_Pos) /*!< Bit mask of CH19 field. */
#define DPPIC_CHENCLR_CH19_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH19_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH19_Clear (1UL) /*!< Write: Disable channel */

/* Bit 18 : Channel 18 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH18_Pos (18UL) /*!< Position of CH18 field. */
#define DPPIC_CHENCLR_CH18_Msk (0x1UL << DPPIC_CHENCLR_CH18_Pos) /*!< Bit mask of CH18 field. */
#define DPPIC_CHENCLR_CH18_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH18_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH18_Clear (1UL) /*!< Write: Disable channel */

/* Bit 17 : Channel 17 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH17_Pos (17UL) /*!< Position of CH17 field. */
#define DPPIC_CHENCLR_CH17_Msk (0x1UL << DPPIC_CHENCLR_CH17_Pos) /*!< Bit mask of CH17 field. */
#define DPPIC_CHENCLR_CH17_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH17_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH17_Clear (1UL) /*!< Write: Disable channel */

/* Bit 16 : Channel 16 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH16_Pos (16UL) /*!< Position of CH16 field. */
#define DPPIC_CHENCLR_CH16_Msk (0x1UL << DPPIC_CHENCLR_CH16_Pos) /*!< Bit mask of CH16 field. */
#define DPPIC_CHENCLR_CH16_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH16_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH16_Clear (1UL) /*!< Write: Disable channel */

/* Bit 15 : Channel 15 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH15_Pos (15UL) /*!< Position of CH15 field. */
#define DPPIC_CHENCLR_CH15_Msk (0x1UL << DPPIC_CHENCLR_CH15_Pos) /*!< Bit mask of CH15 field. */
#define DPPIC_CHENCLR_CH15_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH15_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH15_Clear (1UL) /*!< Write: Disable channel */

/* Bit 14 : Channel 14 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH14_Pos (14UL) /*!< Position of CH14 field. */
#define DPPIC_CHENCLR_CH14_Msk (0x1UL << DPPIC_CHENCLR_CH14_Pos) /*!< Bit mask of CH14 field. */
#define DPPIC_CHENCLR_CH14_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH14_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH14_Clear (1UL) /*!< Write: Disable channel */

/* Bit 13 : Channel 13 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH13_Pos (13UL) /*!< Position of CH13 field. */
#define DPPIC_CHENCLR_CH13_Msk (0x1UL << DPPIC_CHENCLR_CH13_Pos) /*!< Bit mask of CH13 field. */
#define DPPIC_CHENCLR_CH13_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH13_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH13_Clear (1UL) /*!< Write: Disable channel */

/* Bit 12 : Channel 12 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH12_Pos (12UL) /*!< Position of CH12 field. */
#define DPPIC_CHENCLR_CH12_Msk (0x1UL << DPPIC_CHENCLR_CH12_Pos) /*!< Bit mask of CH12 field. */
#define DPPIC_CHENCLR_CH12_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH12_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH12_Clear (1UL) /*!< Write: Disable channel */

/* Bit 11 : Channel 11 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH11_Pos (11UL) /*!< Position of CH11 field. */
#define DPPIC_CHENCLR_CH11_Msk (0x1UL << DPPIC_CHENCLR_CH11_Pos) /*!< Bit mask of CH11 field. */
#define DPPIC_CHENCLR_CH11_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH11_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH11_Clear (1UL) /*!< Write: Disable channel */

/* Bit 10 : Channel 10 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH10_Pos (10UL) /*!< Position of CH10 field. */
#define DPPIC_CHENCLR_CH10_Msk (0x1UL << DPPIC_CHENCLR_CH10_Pos) /*!< Bit mask of CH10 field. */
#define DPPIC_CHENCLR_CH10_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH10_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH10_Clear (1UL) /*!< Write: Disable channel */

/* Bit 9 : Channel 9 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH9_Pos (9UL) /*!< Position of CH9 field. */
#define DPPIC_CHENCLR_CH9_Msk (0x1UL << DPPIC_CHENCLR_CH9_Pos) /*!< Bit mask of CH9 field. */
#define DPPIC_CHENCLR_CH9_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH9_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH9_Clear (1UL) /*!< Write: Disable channel */

/* Bit 8 : Channel 8 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH8_Pos (8UL) /*!< Position of CH8 field. */
#define DPPIC_CHENCLR_CH8_Msk (0x1UL << DPPIC_CHENCLR_CH8_Pos) /*!< Bit mask of CH8 field. */
#define DPPIC_CHENCLR_CH8_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH8_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH8_Clear (1UL) /*!< Write: Disable channel */

/* Bit 7 : Channel 7 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH7_Pos (7UL) /*!< Position of CH7 field. */
#define DPPIC_CHENCLR_CH7_Msk (0x1UL << DPPIC_CHENCLR_CH7_Pos) /*!< Bit mask of CH7 field. */
#define DPPIC_CHENCLR_CH7_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH7_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH7_Clear (1UL) /*!< Write: Disable channel */

/* Bit 6 : Channel 6 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH6_Pos (6UL) /*!< Position of CH6 field. */
#define DPPIC_CHENCLR_CH6_Msk (0x1UL << DPPIC_CHENCLR_CH6_Pos) /*!< Bit mask of CH6 field. */
#define DPPIC_CHENCLR_CH6_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH6_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH6_Clear (1UL) /*!< Write: Disable channel */

/* Bit 5 : Channel 5 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH5_Pos (5UL) /*!< Position of CH5 field. */
#define DPPIC_CHENCLR_CH5_Msk (0x1UL << DPPIC_CHENCLR_CH5_Pos) /*!< Bit mask of CH5 field. */
#define DPPIC_CHENCLR_CH5_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH5_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH5_Clear (1UL) /*!< Write: Disable channel */

/* Bit 4 : Channel 4 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH4_Pos (4UL) /*!< Position of CH4 field. */
#define DPPIC_CHENCLR_CH4_Msk (0x1UL << DPPIC_CHENCLR_CH4_Pos) /*!< Bit mask of CH4 field. */
#define DPPIC_CHENCLR_CH4_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH4_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH4_Clear (1UL) /*!< Write: Disable channel */

/* Bit 3 : Channel 3 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH3_Pos (3UL) /*!< Position of CH3 field. */
#define DPPIC_CHENCLR_CH3_Msk (0x1UL << DPPIC_CHENCLR_CH3_Pos) /*!< Bit mask of CH3 field. */
#define DPPIC_CHENCLR_CH3_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH3_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH3_Clear (1UL) /*!< Write: Disable channel */

/* Bit 2 : Channel 2 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH2_Pos (2UL) /*!< Position of CH2 field. */
#define DPPIC_CHENCLR_CH2_Msk (0x1UL << DPPIC_CHENCLR_CH2_Pos) /*!< Bit mask of CH2 field. */
#define DPPIC_CHENCLR_CH2_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH2_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH2_Clear (1UL) /*!< Write: Disable channel */

/* Bit 1 : Channel 1 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH1_Pos (1UL) /*!< Position of CH1 field. */
#define DPPIC_CHENCLR_CH1_Msk (0x1UL << DPPIC_CHENCLR_CH1_Pos) /*!< Bit mask of CH1 field. */
#define DPPIC_CHENCLR_CH1_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH1_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH1_Clear (1UL) /*!< Write: Disable channel */

/* Bit 0 : Channel 0 enable clear register.  Writing 0 has no effect. */
#define DPPIC_CHENCLR_CH0_Pos (0UL) /*!< Position of CH0 field. */
#define DPPIC_CHENCLR_CH0_Msk (0x1UL << DPPIC_CHENCLR_CH0_Pos) /*!< Bit mask of CH0 field. */
#define DPPIC_CHENCLR_CH0_Disabled (0UL) /*!< Read: Channel disabled */
#define DPPIC_CHENCLR_CH0_Enabled (1UL) /*!< Read: Channel enabled */
#define DPPIC_CHENCLR_CH0_Clear (1UL) /*!< Write: Disable channel */

/* Register: DPPIC_CHG */
/* Description: Description collection: Channel group n Note: Writes to this register are ignored if either SUBSCRIBE_CHG[n].EN or SUBSCRIBE_CHG[n].DIS is enabled */

/* Bit 31 : Include or exclude channel 31 */
#define DPPIC_CHG_CH31_Pos (31UL) /*!< Position of CH31 field. */
#define DPPIC_CHG_CH31_Msk (0x1UL << DPPIC_CHG_CH31_Pos) /*!< Bit mask of CH31 field. */
#define DPPIC_CHG_CH31_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH31_Included (1UL) /*!< Include */

/* Bit 30 : Include or exclude channel 30 */
#define DPPIC_CHG_CH30_Pos (30UL) /*!< Position of CH30 field. */
#define DPPIC_CHG_CH30_Msk (0x1UL << DPPIC_CHG_CH30_Pos) /*!< Bit mask of CH30 field. */
#define DPPIC_CHG_CH30_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH30_Included (1UL) /*!< Include */

/* Bit 29 : Include or exclude channel 29 */
#define DPPIC_CHG_CH29_Pos (29UL) /*!< Position of CH29 field. */
#define DPPIC_CHG_CH29_Msk (0x1UL << DPPIC_CHG_CH29_Pos) /*!< Bit mask of CH29 field. */
#define DPPIC_CHG_CH29_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH29_Included (1UL) /*!< Include */

/* Bit 28 : Include or exclude channel 28 */
#define DPPIC_CHG_CH28_Pos (28UL) /*!< Position of CH28 field. */
#define DPPIC_CHG_CH28_Msk (0x1UL << DPPIC_CHG_CH28_Pos) /*!< Bit mask of CH28 field. */
#define DPPIC_CHG_CH28_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH28_Included (1UL) /*!< Include */

/* Bit 27 : Include or exclude channel 27 */
#define DPPIC_CHG_CH27_Pos (27UL) /*!< Position of CH27 field. */
#define DPPIC_CHG_CH27_Msk (0x1UL << DPPIC_CHG_CH27_Pos) /*!< Bit mask of CH27 field. */
#define DPPIC_CHG_CH27_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH27_Included (1UL) /*!< Include */

/* Bit 26 : Include or exclude channel 26 */
#define DPPIC_CHG_CH26_Pos (26UL) /*!< Position of CH26 field. */
#define DPPIC_CHG_CH26_Msk (0x1UL << DPPIC_CHG_CH26_Pos) /*!< Bit mask of CH26 field. */
#define DPPIC_CHG_CH26_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH26_Included (1UL) /*!< Include */

/* Bit 25 : Include or exclude channel 25 */
#define DPPIC_CHG_CH25_Pos (25UL) /*!< Position of CH25 field. */
#define DPPIC_CHG_CH25_Msk (0x1UL << DPPIC_CHG_CH25_Pos) /*!< Bit mask of CH25 field. */
#define DPPIC_CHG_CH25_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH25_Included (1UL) /*!< Include */

/* Bit 24 : Include or exclude channel 24 */
#define DPPIC_CHG_CH24_Pos (24UL) /*!< Position of CH24 field. */
#define DPPIC_CHG_CH24_Msk (0x1UL << DPPIC_CHG_CH24_Pos) /*!< Bit mask of CH24 field. */
#define DPPIC_CHG_CH24_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH24_Included (1UL) /*!< Include */

/* Bit 23 : Include or exclude channel 23 */
#define DPPIC_CHG_CH23_Pos (23UL) /*!< Position of CH23 field. */
#define DPPIC_CHG_CH23_Msk (0x1UL << DPPIC_CHG_CH23_Pos) /*!< Bit mask of CH23 field. */
#define DPPIC_CHG_CH23_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH23_Included (1UL) /*!< Include */

/* Bit 22 : Include or exclude channel 22 */
#define DPPIC_CHG_CH22_Pos (22UL) /*!< Position of CH22 field. */
#define DPPIC_CHG_CH22_Msk (0x1UL << DPPIC_CHG_CH22_Pos) /*!< Bit mask of CH22 field. */
#define DPPIC_CHG_CH22_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH22_Included (1UL) /*!< Include */

/* Bit 21 : Include or exclude channel 21 */
#define DPPIC_CHG_CH21_Pos (21UL) /*!< Position of CH21 field. */
#define DPPIC_CHG_CH21_Msk (0x1UL << DPPIC_CHG_CH21_Pos) /*!< Bit mask of CH21 field. */
#define DPPIC_CHG_CH21_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH21_Included (1UL) /*!< Include */

/* Bit 20 : Include or exclude channel 20 */
#define DPPIC_CHG_CH20_Pos (20UL) /*!< Position of CH20 field. */
#define DPPIC_CHG_CH20_Msk (0x1UL << DPPIC_CHG_CH20_Pos) /*!< Bit mask of CH20 field. */
#define DPPIC_CHG_CH20_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH20_Included (1UL) /*!< Include */

/* Bit 19 : Include or exclude channel 19 */
#define DPPIC_CHG_CH19_Pos (19UL) /*!< Position of CH19 field. */
#define DPPIC_CHG_CH19_Msk (0x1UL << DPPIC_CHG_CH19_Pos) /*!< Bit mask of CH19 field. */
#define DPPIC_CHG_CH19_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH19_Included (1UL) /*!< Include */

/* Bit 18 : Include or exclude channel 18 */
#define DPPIC_CHG_CH18_Pos (18UL) /*!< Position of CH18 field. */
#define DPPIC_CHG_CH18_Msk (0x1UL << DPPIC_CHG_CH18_Pos) /*!< Bit mask of CH18 field. */
#define DPPIC_CHG_CH18_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH18_Included (1UL) /*!< Include */

/* Bit 17 : Include or exclude channel 17 */
#define DPPIC_CHG_CH17_Pos (17UL) /*!< Position of CH17 field. */
#define DPPIC_CHG_CH17_Msk (0x1UL << DPPIC_CHG_CH17_Pos) /*!< Bit mask of CH17 field. */
#define DPPIC_CHG_CH17_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH17_Included (1UL) /*!< Include */

/* Bit 16 : Include or exclude channel 16 */
#define DPPIC_CHG_CH16_Pos (16UL) /*!< Position of CH16 field. */
#define DPPIC_CHG_CH16_Msk (0x1UL << DPPIC_CHG_CH16_Pos) /*!< Bit mask of CH16 field. */
#define DPPIC_CHG_CH16_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH16_Included (1UL) /*!< Include */

/* Bit 15 : Include or exclude channel 15 */
#define DPPIC_CHG_CH15_Pos (15UL) /*!< Position of CH15 field. */
#define DPPIC_CHG_CH15_Msk (0x1UL << DPPIC_CHG_CH15_Pos) /*!< Bit mask of CH15 field. */
#define DPPIC_CHG_CH15_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH15_Included (1UL) /*!< Include */

/* Bit 14 : Include or exclude channel 14 */
#define DPPIC_CHG_CH14_Pos (14UL) /*!< Position of CH14 field. */
#define DPPIC_CHG_CH14_Msk (0x1UL << DPPIC_CHG_CH14_Pos) /*!< Bit mask of CH14 field. */
#define DPPIC_CHG_CH14_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH14_Included (1UL) /*!< Include */

/* Bit 13 : Include or exclude channel 13 */
#define DPPIC_CHG_CH13_Pos (13UL) /*!< Position of CH13 field. */
#define DPPIC_CHG_CH13_Msk (0x1UL << DPPIC_CHG_CH13_Pos) /*!< Bit mask of CH13 field. */
#define DPPIC_CHG_CH13_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH13_Included (1UL) /*!< Include */

/* Bit 12 : Include or exclude channel 12 */
#define DPPIC_CHG_CH12_Pos (12UL) /*!< Position of CH12 field. */
#define DPPIC_CHG_CH12_Msk (0x1UL << DPPIC_CHG_CH12_Pos) /*!< Bit mask of CH12 field. */
#define DPPIC_CHG_CH12_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH12_Included (1UL) /*!< Include */

/* Bit 11 : Include or exclude channel 11 */
#define DPPIC_CHG_CH11_Pos (11UL) /*!< Position of CH11 field. */
#define DPPIC_CHG_CH11_Msk (0x1UL << DPPIC_CHG_CH11_Pos) /*!< Bit mask of CH11 field. */
#define DPPIC_CHG_CH11_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH11_Included (1UL) /*!< Include */

/* Bit 10 : Include or exclude channel 10 */
#define DPPIC_CHG_CH10_Pos (10UL) /*!< Position of CH10 field. */
#define DPPIC_CHG_CH10_Msk (0x1UL << DPPIC_CHG_CH10_Pos) /*!< Bit mask of CH10 field. */
#define DPPIC_CHG_CH10_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH10_Included (1UL) /*!< Include */

/* Bit 9 : Include or exclude channel 9 */
#define DPPIC_CHG_CH9_Pos (9UL) /*!< Position of CH9 field. */
#define DPPIC_CHG_CH9_Msk (0x1UL << DPPIC_CHG_CH9_Pos) /*!< Bit mask of CH9 field. */
#define DPPIC_CHG_CH9_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH9_Included (1UL) /*!< Include */

/* Bit 8 : Include or exclude channel 8 */
#define DPPIC_CHG_CH8_Pos (8UL) /*!< Position of CH8 field. */
#define DPPIC_CHG_CH8_Msk (0x1UL << DPPIC_CHG_CH8_Pos) /*!< Bit mask of CH8 field. */
#define DPPIC_CHG_CH8_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH8_Included (1UL) /*!< Include */

/* Bit 7 : Include or exclude channel 7 */
#define DPPIC_CHG_CH7_Pos (7UL) /*!< Position of CH7 field. */
#define DPPIC_CHG_CH7_Msk (0x1UL << DPPIC_CHG_CH7_Pos) /*!< Bit mask of CH7 field. */
#define DPPIC_CHG_CH7_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH7_Included (1UL) /*!< Include */

/* Bit 6 : Include or exclude channel 6 */
#define DPPIC_CHG_CH6_Pos (6UL) /*!< Position of CH6 field. */
#define DPPIC_CHG_CH6_Msk (0x1UL << DPPIC_CHG_CH6_Pos) /*!< Bit mask of CH6 field. */
#define DPPIC_CHG_CH6_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH6_Included (1UL) /*!< Include */

/* Bit 5 : Include or exclude channel 5 */
#define DPPIC_CHG_CH5_Pos (5UL) /*!< Position of CH5 field. */
#define DPPIC_CHG_CH5_Msk (0x1UL << DPPIC_CHG_CH5_Pos) /*!< Bit mask of CH5 field. */
#define DPPIC_CHG_CH5_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH5_Included (1UL) /*!< Include */

/* Bit 4 : Include or exclude channel 4 */
#define DPPIC_CHG_CH4_Pos (4UL) /*!< Position of CH4 field. */
#define DPPIC_CHG_CH4_Msk (0x1UL << DPPIC_CHG_CH4_Pos) /*!< Bit mask of CH4 field. */
#define DPPIC_CHG_CH4_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH4_Included (1UL) /*!< Include */

/* Bit 3 : Include or exclude channel 3 */
#define DPPIC_CHG_CH3_Pos (3UL) /*!< Position of CH3 field. */
#define DPPIC_CHG_CH3_Msk (0x1UL << DPPIC_CHG_CH3_Pos) /*!< Bit mask of CH3 field. */
#define DPPIC_CHG_CH3_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH3_Included (1UL) /*!< Include */

/* Bit 2 : Include or exclude channel 2 */
#define DPPIC_CHG_CH2_Pos (2UL) /*!< Position of CH2 field. */
#define DPPIC_CHG_CH2_Msk (0x1UL << DPPIC_CHG_CH2_Pos) /*!< Bit mask of CH2 field. */
#define DPPIC_CHG_CH2_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH2_Included (1UL) /*!< Include */

/* Bit 1 : Include or exclude channel 1 */
#define DPPIC_CHG_CH1_Pos (1UL) /*!< Position of CH1 field. */
#define DPPIC_CHG_CH1_Msk (0x1UL << DPPIC_CHG_CH1_Pos) /*!< Bit mask of CH1 field. */
#define DPPIC_CHG_CH1_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH1_Included (1UL) /*!< Include */

/* Bit 0 : Include or exclude channel 0 */
#define DPPIC_CHG_CH0_Pos (0UL) /*!< Position of CH0 field. */
#define DPPIC_CHG_CH0_Msk (0x1UL << DPPIC_CHG_CH0_Pos) /*!< Bit mask of CH0 field. */
#define DPPIC_CHG_CH0_Excluded (0UL) /*!< Exclude */
#define DPPIC_CHG_CH0_Included (1UL) /*!< Include */


/* Peripheral: EGU */
/* Description: Event generator unit 0 */

/* Register: EGU_TASKS_TRIGGER */
/* Description: Description collection: Trigger n for triggering the corresponding TRIGGERED[n] event */

/* Bit 0 : Trigger n for triggering the corresponding TRIGGERED[n] event */
#define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos (0UL) /*!< Position of TASKS_TRIGGER field. */
#define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Msk (0x1UL << EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos) /*!< Bit mask of TASKS_TRIGGER field. */
#define EGU_TASKS_TRIGGER_TASKS_TRIGGER_Trigger (1UL) /*!< Trigger task */

/* Register: EGU_SUBSCRIBE_TRIGGER */
/* Description: Description collection: Subscribe configuration for task TRIGGER[n] */

/* Bit 31 :   */
#define EGU_SUBSCRIBE_TRIGGER_EN_Pos (31UL) /*!< Position of EN field. */
#define EGU_SUBSCRIBE_TRIGGER_EN_Msk (0x1UL << EGU_SUBSCRIBE_TRIGGER_EN_Pos) /*!< Bit mask of EN field. */
#define EGU_SUBSCRIBE_TRIGGER_EN_Disabled (0UL) /*!< Disable subscription */
#define EGU_SUBSCRIBE_TRIGGER_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task TRIGGER[n] will subscribe to */
#define EGU_SUBSCRIBE_TRIGGER_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define EGU_SUBSCRIBE_TRIGGER_CHIDX_Msk (0xFFUL << EGU_SUBSCRIBE_TRIGGER_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: EGU_EVENTS_TRIGGERED */
/* Description: Description collection: Event number n generated by triggering the corresponding TRIGGER[n] task */

/* Bit 0 : Event number n generated by triggering the corresponding TRIGGER[n] task */
#define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos (0UL) /*!< Position of EVENTS_TRIGGERED field. */
#define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk (0x1UL << EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos) /*!< Bit mask of EVENTS_TRIGGERED field. */
#define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated (0UL) /*!< Event not generated */
#define EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated (1UL) /*!< Event generated */

/* Register: EGU_PUBLISH_TRIGGERED */
/* Description: Description collection: Publish configuration for event TRIGGERED[n] */

/* Bit 31 :   */
#define EGU_PUBLISH_TRIGGERED_EN_Pos (31UL) /*!< Position of EN field. */
#define EGU_PUBLISH_TRIGGERED_EN_Msk (0x1UL << EGU_PUBLISH_TRIGGERED_EN_Pos) /*!< Bit mask of EN field. */
#define EGU_PUBLISH_TRIGGERED_EN_Disabled (0UL) /*!< Disable publishing */
#define EGU_PUBLISH_TRIGGERED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TRIGGERED[n] will publish to. */
#define EGU_PUBLISH_TRIGGERED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define EGU_PUBLISH_TRIGGERED_CHIDX_Msk (0xFFUL << EGU_PUBLISH_TRIGGERED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: EGU_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 15 : Enable or disable interrupt for event TRIGGERED[15] */
#define EGU_INTEN_TRIGGERED15_Pos (15UL) /*!< Position of TRIGGERED15 field. */
#define EGU_INTEN_TRIGGERED15_Msk (0x1UL << EGU_INTEN_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field. */
#define EGU_INTEN_TRIGGERED15_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED15_Enabled (1UL) /*!< Enable */

/* Bit 14 : Enable or disable interrupt for event TRIGGERED[14] */
#define EGU_INTEN_TRIGGERED14_Pos (14UL) /*!< Position of TRIGGERED14 field. */
#define EGU_INTEN_TRIGGERED14_Msk (0x1UL << EGU_INTEN_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field. */
#define EGU_INTEN_TRIGGERED14_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED14_Enabled (1UL) /*!< Enable */

/* Bit 13 : Enable or disable interrupt for event TRIGGERED[13] */
#define EGU_INTEN_TRIGGERED13_Pos (13UL) /*!< Position of TRIGGERED13 field. */
#define EGU_INTEN_TRIGGERED13_Msk (0x1UL << EGU_INTEN_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field. */
#define EGU_INTEN_TRIGGERED13_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED13_Enabled (1UL) /*!< Enable */

/* Bit 12 : Enable or disable interrupt for event TRIGGERED[12] */
#define EGU_INTEN_TRIGGERED12_Pos (12UL) /*!< Position of TRIGGERED12 field. */
#define EGU_INTEN_TRIGGERED12_Msk (0x1UL << EGU_INTEN_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field. */
#define EGU_INTEN_TRIGGERED12_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED12_Enabled (1UL) /*!< Enable */

/* Bit 11 : Enable or disable interrupt for event TRIGGERED[11] */
#define EGU_INTEN_TRIGGERED11_Pos (11UL) /*!< Position of TRIGGERED11 field. */
#define EGU_INTEN_TRIGGERED11_Msk (0x1UL << EGU_INTEN_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field. */
#define EGU_INTEN_TRIGGERED11_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED11_Enabled (1UL) /*!< Enable */

/* Bit 10 : Enable or disable interrupt for event TRIGGERED[10] */
#define EGU_INTEN_TRIGGERED10_Pos (10UL) /*!< Position of TRIGGERED10 field. */
#define EGU_INTEN_TRIGGERED10_Msk (0x1UL << EGU_INTEN_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field. */
#define EGU_INTEN_TRIGGERED10_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED10_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event TRIGGERED[9] */
#define EGU_INTEN_TRIGGERED9_Pos (9UL) /*!< Position of TRIGGERED9 field. */
#define EGU_INTEN_TRIGGERED9_Msk (0x1UL << EGU_INTEN_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field. */
#define EGU_INTEN_TRIGGERED9_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED9_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event TRIGGERED[8] */
#define EGU_INTEN_TRIGGERED8_Pos (8UL) /*!< Position of TRIGGERED8 field. */
#define EGU_INTEN_TRIGGERED8_Msk (0x1UL << EGU_INTEN_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field. */
#define EGU_INTEN_TRIGGERED8_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED8_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event TRIGGERED[7] */
#define EGU_INTEN_TRIGGERED7_Pos (7UL) /*!< Position of TRIGGERED7 field. */
#define EGU_INTEN_TRIGGERED7_Msk (0x1UL << EGU_INTEN_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field. */
#define EGU_INTEN_TRIGGERED7_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED7_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event TRIGGERED[6] */
#define EGU_INTEN_TRIGGERED6_Pos (6UL) /*!< Position of TRIGGERED6 field. */
#define EGU_INTEN_TRIGGERED6_Msk (0x1UL << EGU_INTEN_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field. */
#define EGU_INTEN_TRIGGERED6_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED6_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event TRIGGERED[5] */
#define EGU_INTEN_TRIGGERED5_Pos (5UL) /*!< Position of TRIGGERED5 field. */
#define EGU_INTEN_TRIGGERED5_Msk (0x1UL << EGU_INTEN_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field. */
#define EGU_INTEN_TRIGGERED5_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED5_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event TRIGGERED[4] */
#define EGU_INTEN_TRIGGERED4_Pos (4UL) /*!< Position of TRIGGERED4 field. */
#define EGU_INTEN_TRIGGERED4_Msk (0x1UL << EGU_INTEN_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field. */
#define EGU_INTEN_TRIGGERED4_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED4_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event TRIGGERED[3] */
#define EGU_INTEN_TRIGGERED3_Pos (3UL) /*!< Position of TRIGGERED3 field. */
#define EGU_INTEN_TRIGGERED3_Msk (0x1UL << EGU_INTEN_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field. */
#define EGU_INTEN_TRIGGERED3_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED3_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event TRIGGERED[2] */
#define EGU_INTEN_TRIGGERED2_Pos (2UL) /*!< Position of TRIGGERED2 field. */
#define EGU_INTEN_TRIGGERED2_Msk (0x1UL << EGU_INTEN_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field. */
#define EGU_INTEN_TRIGGERED2_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED2_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event TRIGGERED[1] */
#define EGU_INTEN_TRIGGERED1_Pos (1UL) /*!< Position of TRIGGERED1 field. */
#define EGU_INTEN_TRIGGERED1_Msk (0x1UL << EGU_INTEN_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field. */
#define EGU_INTEN_TRIGGERED1_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED1_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event TRIGGERED[0] */
#define EGU_INTEN_TRIGGERED0_Pos (0UL) /*!< Position of TRIGGERED0 field. */
#define EGU_INTEN_TRIGGERED0_Msk (0x1UL << EGU_INTEN_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field. */
#define EGU_INTEN_TRIGGERED0_Disabled (0UL) /*!< Disable */
#define EGU_INTEN_TRIGGERED0_Enabled (1UL) /*!< Enable */

/* Register: EGU_INTENSET */
/* Description: Enable interrupt */

/* Bit 15 : Write '1' to enable interrupt for event TRIGGERED[15] */
#define EGU_INTENSET_TRIGGERED15_Pos (15UL) /*!< Position of TRIGGERED15 field. */
#define EGU_INTENSET_TRIGGERED15_Msk (0x1UL << EGU_INTENSET_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field. */
#define EGU_INTENSET_TRIGGERED15_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED15_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED15_Set (1UL) /*!< Enable */

/* Bit 14 : Write '1' to enable interrupt for event TRIGGERED[14] */
#define EGU_INTENSET_TRIGGERED14_Pos (14UL) /*!< Position of TRIGGERED14 field. */
#define EGU_INTENSET_TRIGGERED14_Msk (0x1UL << EGU_INTENSET_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field. */
#define EGU_INTENSET_TRIGGERED14_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED14_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED14_Set (1UL) /*!< Enable */

/* Bit 13 : Write '1' to enable interrupt for event TRIGGERED[13] */
#define EGU_INTENSET_TRIGGERED13_Pos (13UL) /*!< Position of TRIGGERED13 field. */
#define EGU_INTENSET_TRIGGERED13_Msk (0x1UL << EGU_INTENSET_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field. */
#define EGU_INTENSET_TRIGGERED13_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED13_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED13_Set (1UL) /*!< Enable */

/* Bit 12 : Write '1' to enable interrupt for event TRIGGERED[12] */
#define EGU_INTENSET_TRIGGERED12_Pos (12UL) /*!< Position of TRIGGERED12 field. */
#define EGU_INTENSET_TRIGGERED12_Msk (0x1UL << EGU_INTENSET_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field. */
#define EGU_INTENSET_TRIGGERED12_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED12_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED12_Set (1UL) /*!< Enable */

/* Bit 11 : Write '1' to enable interrupt for event TRIGGERED[11] */
#define EGU_INTENSET_TRIGGERED11_Pos (11UL) /*!< Position of TRIGGERED11 field. */
#define EGU_INTENSET_TRIGGERED11_Msk (0x1UL << EGU_INTENSET_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field. */
#define EGU_INTENSET_TRIGGERED11_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED11_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED11_Set (1UL) /*!< Enable */

/* Bit 10 : Write '1' to enable interrupt for event TRIGGERED[10] */
#define EGU_INTENSET_TRIGGERED10_Pos (10UL) /*!< Position of TRIGGERED10 field. */
#define EGU_INTENSET_TRIGGERED10_Msk (0x1UL << EGU_INTENSET_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field. */
#define EGU_INTENSET_TRIGGERED10_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED10_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED10_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event TRIGGERED[9] */
#define EGU_INTENSET_TRIGGERED9_Pos (9UL) /*!< Position of TRIGGERED9 field. */
#define EGU_INTENSET_TRIGGERED9_Msk (0x1UL << EGU_INTENSET_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field. */
#define EGU_INTENSET_TRIGGERED9_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED9_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED9_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event TRIGGERED[8] */
#define EGU_INTENSET_TRIGGERED8_Pos (8UL) /*!< Position of TRIGGERED8 field. */
#define EGU_INTENSET_TRIGGERED8_Msk (0x1UL << EGU_INTENSET_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field. */
#define EGU_INTENSET_TRIGGERED8_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED8_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED8_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event TRIGGERED[7] */
#define EGU_INTENSET_TRIGGERED7_Pos (7UL) /*!< Position of TRIGGERED7 field. */
#define EGU_INTENSET_TRIGGERED7_Msk (0x1UL << EGU_INTENSET_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field. */
#define EGU_INTENSET_TRIGGERED7_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED7_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED7_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event TRIGGERED[6] */
#define EGU_INTENSET_TRIGGERED6_Pos (6UL) /*!< Position of TRIGGERED6 field. */
#define EGU_INTENSET_TRIGGERED6_Msk (0x1UL << EGU_INTENSET_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field. */
#define EGU_INTENSET_TRIGGERED6_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED6_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED6_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event TRIGGERED[5] */
#define EGU_INTENSET_TRIGGERED5_Pos (5UL) /*!< Position of TRIGGERED5 field. */
#define EGU_INTENSET_TRIGGERED5_Msk (0x1UL << EGU_INTENSET_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field. */
#define EGU_INTENSET_TRIGGERED5_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED5_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED5_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event TRIGGERED[4] */
#define EGU_INTENSET_TRIGGERED4_Pos (4UL) /*!< Position of TRIGGERED4 field. */
#define EGU_INTENSET_TRIGGERED4_Msk (0x1UL << EGU_INTENSET_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field. */
#define EGU_INTENSET_TRIGGERED4_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED4_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED4_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event TRIGGERED[3] */
#define EGU_INTENSET_TRIGGERED3_Pos (3UL) /*!< Position of TRIGGERED3 field. */
#define EGU_INTENSET_TRIGGERED3_Msk (0x1UL << EGU_INTENSET_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field. */
#define EGU_INTENSET_TRIGGERED3_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED3_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED3_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event TRIGGERED[2] */
#define EGU_INTENSET_TRIGGERED2_Pos (2UL) /*!< Position of TRIGGERED2 field. */
#define EGU_INTENSET_TRIGGERED2_Msk (0x1UL << EGU_INTENSET_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field. */
#define EGU_INTENSET_TRIGGERED2_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED2_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED2_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event TRIGGERED[1] */
#define EGU_INTENSET_TRIGGERED1_Pos (1UL) /*!< Position of TRIGGERED1 field. */
#define EGU_INTENSET_TRIGGERED1_Msk (0x1UL << EGU_INTENSET_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field. */
#define EGU_INTENSET_TRIGGERED1_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED1_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED1_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event TRIGGERED[0] */
#define EGU_INTENSET_TRIGGERED0_Pos (0UL) /*!< Position of TRIGGERED0 field. */
#define EGU_INTENSET_TRIGGERED0_Msk (0x1UL << EGU_INTENSET_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field. */
#define EGU_INTENSET_TRIGGERED0_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENSET_TRIGGERED0_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENSET_TRIGGERED0_Set (1UL) /*!< Enable */

/* Register: EGU_INTENCLR */
/* Description: Disable interrupt */

/* Bit 15 : Write '1' to disable interrupt for event TRIGGERED[15] */
#define EGU_INTENCLR_TRIGGERED15_Pos (15UL) /*!< Position of TRIGGERED15 field. */
#define EGU_INTENCLR_TRIGGERED15_Msk (0x1UL << EGU_INTENCLR_TRIGGERED15_Pos) /*!< Bit mask of TRIGGERED15 field. */
#define EGU_INTENCLR_TRIGGERED15_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED15_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED15_Clear (1UL) /*!< Disable */

/* Bit 14 : Write '1' to disable interrupt for event TRIGGERED[14] */
#define EGU_INTENCLR_TRIGGERED14_Pos (14UL) /*!< Position of TRIGGERED14 field. */
#define EGU_INTENCLR_TRIGGERED14_Msk (0x1UL << EGU_INTENCLR_TRIGGERED14_Pos) /*!< Bit mask of TRIGGERED14 field. */
#define EGU_INTENCLR_TRIGGERED14_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED14_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED14_Clear (1UL) /*!< Disable */

/* Bit 13 : Write '1' to disable interrupt for event TRIGGERED[13] */
#define EGU_INTENCLR_TRIGGERED13_Pos (13UL) /*!< Position of TRIGGERED13 field. */
#define EGU_INTENCLR_TRIGGERED13_Msk (0x1UL << EGU_INTENCLR_TRIGGERED13_Pos) /*!< Bit mask of TRIGGERED13 field. */
#define EGU_INTENCLR_TRIGGERED13_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED13_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED13_Clear (1UL) /*!< Disable */

/* Bit 12 : Write '1' to disable interrupt for event TRIGGERED[12] */
#define EGU_INTENCLR_TRIGGERED12_Pos (12UL) /*!< Position of TRIGGERED12 field. */
#define EGU_INTENCLR_TRIGGERED12_Msk (0x1UL << EGU_INTENCLR_TRIGGERED12_Pos) /*!< Bit mask of TRIGGERED12 field. */
#define EGU_INTENCLR_TRIGGERED12_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED12_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED12_Clear (1UL) /*!< Disable */

/* Bit 11 : Write '1' to disable interrupt for event TRIGGERED[11] */
#define EGU_INTENCLR_TRIGGERED11_Pos (11UL) /*!< Position of TRIGGERED11 field. */
#define EGU_INTENCLR_TRIGGERED11_Msk (0x1UL << EGU_INTENCLR_TRIGGERED11_Pos) /*!< Bit mask of TRIGGERED11 field. */
#define EGU_INTENCLR_TRIGGERED11_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED11_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED11_Clear (1UL) /*!< Disable */

/* Bit 10 : Write '1' to disable interrupt for event TRIGGERED[10] */
#define EGU_INTENCLR_TRIGGERED10_Pos (10UL) /*!< Position of TRIGGERED10 field. */
#define EGU_INTENCLR_TRIGGERED10_Msk (0x1UL << EGU_INTENCLR_TRIGGERED10_Pos) /*!< Bit mask of TRIGGERED10 field. */
#define EGU_INTENCLR_TRIGGERED10_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED10_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED10_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event TRIGGERED[9] */
#define EGU_INTENCLR_TRIGGERED9_Pos (9UL) /*!< Position of TRIGGERED9 field. */
#define EGU_INTENCLR_TRIGGERED9_Msk (0x1UL << EGU_INTENCLR_TRIGGERED9_Pos) /*!< Bit mask of TRIGGERED9 field. */
#define EGU_INTENCLR_TRIGGERED9_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED9_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED9_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event TRIGGERED[8] */
#define EGU_INTENCLR_TRIGGERED8_Pos (8UL) /*!< Position of TRIGGERED8 field. */
#define EGU_INTENCLR_TRIGGERED8_Msk (0x1UL << EGU_INTENCLR_TRIGGERED8_Pos) /*!< Bit mask of TRIGGERED8 field. */
#define EGU_INTENCLR_TRIGGERED8_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED8_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED8_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event TRIGGERED[7] */
#define EGU_INTENCLR_TRIGGERED7_Pos (7UL) /*!< Position of TRIGGERED7 field. */
#define EGU_INTENCLR_TRIGGERED7_Msk (0x1UL << EGU_INTENCLR_TRIGGERED7_Pos) /*!< Bit mask of TRIGGERED7 field. */
#define EGU_INTENCLR_TRIGGERED7_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED7_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED7_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event TRIGGERED[6] */
#define EGU_INTENCLR_TRIGGERED6_Pos (6UL) /*!< Position of TRIGGERED6 field. */
#define EGU_INTENCLR_TRIGGERED6_Msk (0x1UL << EGU_INTENCLR_TRIGGERED6_Pos) /*!< Bit mask of TRIGGERED6 field. */
#define EGU_INTENCLR_TRIGGERED6_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED6_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED6_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event TRIGGERED[5] */
#define EGU_INTENCLR_TRIGGERED5_Pos (5UL) /*!< Position of TRIGGERED5 field. */
#define EGU_INTENCLR_TRIGGERED5_Msk (0x1UL << EGU_INTENCLR_TRIGGERED5_Pos) /*!< Bit mask of TRIGGERED5 field. */
#define EGU_INTENCLR_TRIGGERED5_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED5_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED5_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event TRIGGERED[4] */
#define EGU_INTENCLR_TRIGGERED4_Pos (4UL) /*!< Position of TRIGGERED4 field. */
#define EGU_INTENCLR_TRIGGERED4_Msk (0x1UL << EGU_INTENCLR_TRIGGERED4_Pos) /*!< Bit mask of TRIGGERED4 field. */
#define EGU_INTENCLR_TRIGGERED4_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED4_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED4_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event TRIGGERED[3] */
#define EGU_INTENCLR_TRIGGERED3_Pos (3UL) /*!< Position of TRIGGERED3 field. */
#define EGU_INTENCLR_TRIGGERED3_Msk (0x1UL << EGU_INTENCLR_TRIGGERED3_Pos) /*!< Bit mask of TRIGGERED3 field. */
#define EGU_INTENCLR_TRIGGERED3_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED3_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED3_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event TRIGGERED[2] */
#define EGU_INTENCLR_TRIGGERED2_Pos (2UL) /*!< Position of TRIGGERED2 field. */
#define EGU_INTENCLR_TRIGGERED2_Msk (0x1UL << EGU_INTENCLR_TRIGGERED2_Pos) /*!< Bit mask of TRIGGERED2 field. */
#define EGU_INTENCLR_TRIGGERED2_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED2_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED2_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event TRIGGERED[1] */
#define EGU_INTENCLR_TRIGGERED1_Pos (1UL) /*!< Position of TRIGGERED1 field. */
#define EGU_INTENCLR_TRIGGERED1_Msk (0x1UL << EGU_INTENCLR_TRIGGERED1_Pos) /*!< Bit mask of TRIGGERED1 field. */
#define EGU_INTENCLR_TRIGGERED1_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED1_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED1_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event TRIGGERED[0] */
#define EGU_INTENCLR_TRIGGERED0_Pos (0UL) /*!< Position of TRIGGERED0 field. */
#define EGU_INTENCLR_TRIGGERED0_Msk (0x1UL << EGU_INTENCLR_TRIGGERED0_Pos) /*!< Bit mask of TRIGGERED0 field. */
#define EGU_INTENCLR_TRIGGERED0_Disabled (0UL) /*!< Read: Disabled */
#define EGU_INTENCLR_TRIGGERED0_Enabled (1UL) /*!< Read: Enabled */
#define EGU_INTENCLR_TRIGGERED0_Clear (1UL) /*!< Disable */


/* Peripheral: FICR */
/* Description: Factory Information Configuration Registers */

/* Register: FICR_CHIPCONF00 */
/* Description: Miscellaneous analog configuration. Will be set during production test. */

/* Bit 26 : Disable synchronizer on calibration clock request from Rc32kiGenerator. */
#define FICR_CHIPCONF00_RC32KICLOCKSYNCDISABLE_Pos (26UL) /*!< Position of RC32KICLOCKSYNCDISABLE field. */
#define FICR_CHIPCONF00_RC32KICLOCKSYNCDISABLE_Msk (0x1UL << FICR_CHIPCONF00_RC32KICLOCKSYNCDISABLE_Pos) /*!< Bit mask of RC32KICLOCKSYNCDISABLE field. */

/* Bit 25 :   */
#define FICR_CHIPCONF00_DISABLEIGNOREANAREADY_Pos (25UL) /*!< Position of DISABLEIGNOREANAREADY field. */
#define FICR_CHIPCONF00_DISABLEIGNOREANAREADY_Msk (0x1UL << FICR_CHIPCONF00_DISABLEIGNOREANAREADY_Pos) /*!< Bit mask of DISABLEIGNOREANAREADY field. */

/* Bit 24 :   */
#define FICR_CHIPCONF00_DISABLEREGULATORCLOCKFORCING_Pos (24UL) /*!< Position of DISABLEREGULATORCLOCKFORCING field. */
#define FICR_CHIPCONF00_DISABLEREGULATORCLOCKFORCING_Msk (0x1UL << FICR_CHIPCONF00_DISABLEREGULATORCLOCKFORCING_Pos) /*!< Bit mask of DISABLEREGULATORCLOCKFORCING field. */

/* Bits 22..19 : Trimming for the XOC32KI oscillator when used in constant current mode */
#define FICR_CHIPCONF00_XOSC32KICONSTCURR_Pos (19UL) /*!< Position of XOSC32KICONSTCURR field. */
#define FICR_CHIPCONF00_XOSC32KICONSTCURR_Msk (0xFUL << FICR_CHIPCONF00_XOSC32KICONSTCURR_Pos) /*!< Bit mask of XOSC32KICONSTCURR field. */

/* Bits 18..16 : On-chip capacitance trimming for the XOC32KI oscillator */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_Pos (16UL) /*!< Position of XOSC32KIINTCAPTRIM field. */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_Msk (0x7UL << FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_Pos) /*!< Bit mask of XOSC32KIINTCAPTRIM field. */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_TRIM0 (0UL) /*!< 0 percent */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_TRIM12P5 (1UL) /*!< +12.5 percent */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_TRIM25 (2UL) /*!< +25 percent */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_NA0 (3UL) /*!< Forbidden */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_NA1 (4UL) /*!< Forbidden */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_NA2 (5UL) /*!< Forbidden */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_TRIMM25 (6UL) /*!< -25 percent */
#define FICR_CHIPCONF00_XOSC32KIINTCAPTRIM_TRIMM12P5 (7UL) /*!< -12.5 percent */

/* Bits 11..7 : HFCLK ring oscillator trim codes. Previous name: HFROSCTRIM. */
#define FICR_CHIPCONF00_PLL_CALIB_ROSC_Pos (7UL) /*!< Position of PLL_CALIB_ROSC field. */
#define FICR_CHIPCONF00_PLL_CALIB_ROSC_Msk (0x1FUL << FICR_CHIPCONF00_PLL_CALIB_ROSC_Pos) /*!< Bit mask of PLL_CALIB_ROSC field. */

/* Bits 6..4 : Output voltage fine trimming (infoPage_usbPwrRegTrim) */
#define FICR_CHIPCONF00_VREGUSBTRIM0V9_Pos (4UL) /*!< Position of VREGUSBTRIM0V9 field. */
#define FICR_CHIPCONF00_VREGUSBTRIM0V9_Msk (0x7UL << FICR_CHIPCONF00_VREGUSBTRIM0V9_Pos) /*!< Bit mask of VREGUSBTRIM0V9 field. */

/* Bit 2 : Enable clock gate in clock purifier. Should always be 1. */
#define FICR_CHIPCONF00_CKPUREEN_Pos (2UL) /*!< Position of CKPUREEN field. */
#define FICR_CHIPCONF00_CKPUREEN_Msk (0x1UL << FICR_CHIPCONF00_CKPUREEN_Pos) /*!< Bit mask of CKPUREEN field. */

/* Bits 1..0 : Spare configuration signals (infoPage_usbPwrRegCfg) */
#define FICR_CHIPCONF00_VREGUSBCFG0V9_Pos (0UL) /*!< Position of VREGUSBCFG0V9 field. */
#define FICR_CHIPCONF00_VREGUSBCFG0V9_Msk (0x3UL << FICR_CHIPCONF00_VREGUSBCFG0V9_Pos) /*!< Bit mask of VREGUSBCFG0V9 field. */

/* Register: FICR_CHIPCONF01 */
/* Description: Miscellaneous analog configuration. Will be set during production test. */

/* Bit 25 : Voltage requirement for HFCLK192M running at 48 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK48_Pos (25UL) /*!< Position of ICRVREQ_HFCLK192M_CK48 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK48_Msk (0x1UL << FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK48_Pos) /*!< Bit mask of ICRVREQ_HFCLK192M_CK48 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK48_NoHv (0UL) /*!< Do not request HV for 48 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK48_ReqHv (1UL) /*!< Request HV for 48 MHz */

/* Bit 24 : Voltage requirement for HFCLK192M running at 96 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK96_Pos (24UL) /*!< Position of ICRVREQ_HFCLK192M_CK96 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK96_Msk (0x1UL << FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK96_Pos) /*!< Bit mask of ICRVREQ_HFCLK192M_CK96 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK96_NoHv (0UL) /*!< Do not request HV for 96 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK96_ReqHv (1UL) /*!< Request HV for 96 MHz */

/* Bit 23 : Voltage requirement for HFCLK192M running at 192 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK192_Pos (23UL) /*!< Position of ICRVREQ_HFCLK192M_CK192 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK192_Msk (0x1UL << FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK192_Pos) /*!< Bit mask of ICRVREQ_HFCLK192M_CK192 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK192_NoHv (0UL) /*!< Do not request HV for 192 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK192M_CK192_ReqHv (1UL) /*!< Request HV for 192 MHz */

/* Bit 22 : Voltage requirement for HFCLK128M running at 32 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK32_Pos (22UL) /*!< Position of ICRVREQ_HFCLK128M_CK32 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK32_Msk (0x1UL << FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK32_Pos) /*!< Bit mask of ICRVREQ_HFCLK128M_CK32 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK32_NoHv (0UL) /*!< Do not request HV for 32 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK32_ReqHv (1UL) /*!< Request HV for 32 MHz */

/* Bit 21 : Voltage requirement for HFCLK128M running at 64 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK64_Pos (21UL) /*!< Position of ICRVREQ_HFCLK128M_CK64 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK64_Msk (0x1UL << FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK64_Pos) /*!< Bit mask of ICRVREQ_HFCLK128M_CK64 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK64_NoHv (0UL) /*!< Do not request HV for 64 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK64_ReqHv (1UL) /*!< Request HV for 64 MHz */

/* Bit 20 : Voltage requirement for HFCLK128M running at 128 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK128_Pos (20UL) /*!< Position of ICRVREQ_HFCLK128M_CK128 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK128_Msk (0x1UL << FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK128_Pos) /*!< Bit mask of ICRVREQ_HFCLK128M_CK128 field. */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK128_NoHv (0UL) /*!< Do not request HV for 128 MHz */
#define FICR_CHIPCONF01_ICRVREQ_HFCLK128M_CK128_ReqHv (1UL) /*!< Request HV for 128 MHz */

/* Bits 17..16 : Override value for HFCLKCTRL */
#define FICR_CHIPCONF01_HFCLKDIV_Pos (16UL) /*!< Position of HFCLKDIV field. */
#define FICR_CHIPCONF01_HFCLKDIV_Msk (0x3UL << FICR_CHIPCONF01_HFCLKDIV_Pos) /*!< Bit mask of HFCLKDIV field. */
#define FICR_CHIPCONF01_HFCLKDIV_Div1 (0UL) /*!< HFCLK divided by 1 */
#define FICR_CHIPCONF01_HFCLKDIV_Div2 (1UL) /*!< HFCLK divided by 2 */
#define FICR_CHIPCONF01_HFCLKDIV_Div4 (2UL) /*!< HFCLK divided by 4 */

/* Bits 7..0 : Disable glitch-filter on clock sources powerup and standby lines */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_Pos (0UL) /*!< Position of CLOCKREQFILTERDISABLE field. */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_Msk (0xFFUL << FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_Pos) /*!< Bit mask of CLOCKREQFILTERDISABLE field. */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_XOSC32M (0x1UL) /*!< Disable glitch-filter on powerUp- and standby lines to XOSC32M */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_32ki (0x2UL) /*!< Disable glitch-filter on powerUp line to Rosc/Xosc/Synth used in clock system A (32ki) */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_64M (0x4UL) /*!< Disable glitch-filter on powerUp line to PLL used in clock system B (64M) */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_96M (0x8UL) /*!< Disable glitch-filter on powerUp line to PLL used in clock system C (96M) */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_176M128M (0x10UL) /*!< Disable glitch-filter on powerUp line to PLL used in clock system D (176M/128M) */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_MCPLL (0x20UL) /*!< Disable glitch-filter on powerUp line to PLL used in clock system E (MCPLL) */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_192M (0x40UL) /*!< Disable glitch-filter on powerUp line to PLL used in clock system F (192M) */
#define FICR_CHIPCONF01_CLOCKREQFILTERDISABLE_12M (0x80UL) /*!< Disable glitch-filter on powerUp line to PLL used in clock system G (12M) */

/* Register: FICR_CHIPCONF02 */
/* Description: Miscellaneous analog configuration. Will be set during production test. */

/* Bits 23..20 : Wait-states in high-voltage VFS mode (excluding the cache controller) for I-Code flash access, D-Code has one more wait-state. */
#define FICR_CHIPCONF02_WSHV_Pos (20UL) /*!< Position of WSHV field. */
#define FICR_CHIPCONF02_WSHV_Msk (0xFUL << FICR_CHIPCONF02_WSHV_Pos) /*!< Bit mask of WSHV field. */
#define FICR_CHIPCONF02_WSHV_1WS (1UL) /*!< 1 wait-state in total for I-Code (2 for D-Code) */
#define FICR_CHIPCONF02_WSHV_2WS (2UL) /*!< 2 wait-state in total for I-Code (3 for D-Code) */
#define FICR_CHIPCONF02_WSHV_3WS (3UL) /*!< 3 wait-state in total for I-Code (4 for D-Code) */
#define FICR_CHIPCONF02_WSHV_4WS (4UL) /*!< 4 wait-state in total for I-Code (5 for D-Code) */
#define FICR_CHIPCONF02_WSHV_5WS (5UL) /*!< 5 wait-state in total for I-Code (6 for D-Code) */
#define FICR_CHIPCONF02_WSHV_6WS (6UL) /*!< 6 wait-state in total for I-Code (7 for D-Code) */
#define FICR_CHIPCONF02_WSHV_7WS (7UL) /*!< 7 wait-state in total for I-Code (8 for D-Code) */
#define FICR_CHIPCONF02_WSHV_8WS (8UL) /*!< 8 wait-state in total for I-Code (9 for D-Code) */
#define FICR_CHIPCONF02_WSHV_9WS (9UL) /*!< 9 wait-state in total for I-Code (10 for D-Code) */
#define FICR_CHIPCONF02_WSHV_10WS (10UL) /*!< 10 wait-state in total for I-Code (11 for D-Code) */
#define FICR_CHIPCONF02_WSHV_11WS (11UL) /*!< 11 wait-state in total for I-Code (12 for D-Code) */
#define FICR_CHIPCONF02_WSHV_12WS (12UL) /*!< 12 wait-state in total for I-Code (13 for D-Code) */
#define FICR_CHIPCONF02_WSHV_13WS (13UL) /*!< 13 wait-state in total for I-Code (14 for D-Code) */
#define FICR_CHIPCONF02_WSHV_14WS (14UL) /*!< 14 wait-state in total for I-Code (15 for D-Code) */
#define FICR_CHIPCONF02_WSHV_15WS (15UL) /*!< 15 wait-state in total for I-Code (16 for D-Code) */

/* Bits 19..16 : Wait-states (excluding the cache controller) for I-Code flash access, D-Code has one more wait-state. */
#define FICR_CHIPCONF02_WS_Pos (16UL) /*!< Position of WS field. */
#define FICR_CHIPCONF02_WS_Msk (0xFUL << FICR_CHIPCONF02_WS_Pos) /*!< Bit mask of WS field. */
#define FICR_CHIPCONF02_WS_1WS (1UL) /*!< 1 wait-state in total for I-Code (2 for D-Code) */
#define FICR_CHIPCONF02_WS_2WS (2UL) /*!< 2 wait-state in total for I-Code (3 for D-Code) */
#define FICR_CHIPCONF02_WS_3WS (3UL) /*!< 3 wait-state in total for I-Code (4 for D-Code) */
#define FICR_CHIPCONF02_WS_4WS (4UL) /*!< 4 wait-state in total for I-Code (5 for D-Code) */
#define FICR_CHIPCONF02_WS_5WS (5UL) /*!< 5 wait-state in total for I-Code (6 for D-Code) */
#define FICR_CHIPCONF02_WS_6WS (6UL) /*!< 6 wait-state in total for I-Code (7 for D-Code) */
#define FICR_CHIPCONF02_WS_7WS (7UL) /*!< 7 wait-state in total for I-Code (8 for D-Code) */
#define FICR_CHIPCONF02_WS_8WS (8UL) /*!< 8 wait-state in total for I-Code (9 for D-Code) */
#define FICR_CHIPCONF02_WS_9WS (9UL) /*!< 9 wait-state in total for I-Code (10 for D-Code) */
#define FICR_CHIPCONF02_WS_10WS (10UL) /*!< 10 wait-state in total for I-Code (11 for D-Code) */
#define FICR_CHIPCONF02_WS_11WS (11UL) /*!< 11 wait-state in total for I-Code (12 for D-Code) */
#define FICR_CHIPCONF02_WS_12WS (12UL) /*!< 12 wait-state in total for I-Code (13 for D-Code) */
#define FICR_CHIPCONF02_WS_13WS (13UL) /*!< 13 wait-state in total for I-Code (14 for D-Code) */
#define FICR_CHIPCONF02_WS_14WS (14UL) /*!< 14 wait-state in total for I-Code (15 for D-Code) */
#define FICR_CHIPCONF02_WS_15WS (15UL) /*!< 15 wait-state in total for I-Code (16 for D-Code) */

/* Bits 15..11 : number of cycles before Information Configuration Registers can be read */
#define FICR_CHIPCONF02_IFCREADDELAY_Pos (11UL) /*!< Position of IFCREADDELAY field. */
#define FICR_CHIPCONF02_IFCREADDELAY_Msk (0x1FUL << FICR_CHIPCONF02_IFCREADDELAY_Pos) /*!< Bit mask of IFCREADDELAY field. */

/* Bits 7..0 : Number of successful FLASHPWRUPn read cycles when powering up flash. After chip power up, the NVMC controller reads FLASHPWRUPn for 7 us. */
#define FICR_CHIPCONF02_FLASHPWRUPCNT_Pos (0UL) /*!< Position of FLASHPWRUPCNT field. */
#define FICR_CHIPCONF02_FLASHPWRUPCNT_Msk (0xFFUL << FICR_CHIPCONF02_FLASHPWRUPCNT_Pos) /*!< Bit mask of FLASHPWRUPCNT field. */

/* Register: FICR_CHIPCONF03 */
/* Description: Miscellaneous analog configuration. Will be set during production test. */

/* Bits 31..16 : Programmable timer value for PFM ICMP trigger timer. Activate PWM mode for (PFM_ICMP_TIMER_LOAD_VALUE*62.5ns) when ICMP triggers. Default: 1ms. */
#define FICR_CHIPCONF03_VMAINBUCKPFMICMPCOUNT_Pos (16UL) /*!< Position of VMAINBUCKPFMICMPCOUNT field. */
#define FICR_CHIPCONF03_VMAINBUCKPFMICMPCOUNT_Msk (0xFFFFUL << FICR_CHIPCONF03_VMAINBUCKPFMICMPCOUNT_Pos) /*!< Bit mask of VMAINBUCKPFMICMPCOUNT field. */

/* Bits 12..8 : Calibrate internal bandgap reference in COMP */
#define FICR_CHIPCONF03_COMPREFTRIM_Pos (8UL) /*!< Position of COMPREFTRIM field. */
#define FICR_CHIPCONF03_COMPREFTRIM_Msk (0x1FUL << FICR_CHIPCONF03_COMPREFTRIM_Pos) /*!< Bit mask of COMPREFTRIM field. */

/* Bits 5..0 : Debug signals for BUCK_VCORE_LP. Default = 0b000000 [0] = 1: Power off P_DCC_LP pad if PWM mode is active [2:1] = 10: Divide 8MHz clock by 2 [2:1] = 11: Divide 8MHz clock by 4 [3] = 1: Disable BUCK_DVDD_ICMP_0V9 (= 0) [5:4] = Reserved */
#define FICR_CHIPCONF03_VMAINBUCKDEBUG_Pos (0UL) /*!< Position of VMAINBUCKDEBUG field. */
#define FICR_CHIPCONF03_VMAINBUCKDEBUG_Msk (0x3FUL << FICR_CHIPCONF03_VMAINBUCKDEBUG_Pos) /*!< Bit mask of VMAINBUCKDEBUG field. */

/* Register: FICR_CHIPCONF04 */
/* Description: Configuration for VREGMAIN. Will be set during production test. */

/* Bits 29..28 : VREGMAIN BUCK output voltage calibration Selects output voltage from DVDD BUCK and LDO: Buck PWM/PFM mode: 11: 1.20 (Default) 10: 1.10 01: 1.00 00: 0.95 LDO mode: 1x: 1.20V nominal output (Default) 0x: 1.05V nominal output */
#define FICR_CHIPCONF04_VMAINVOUTHIGH_Pos (28UL) /*!< Position of VMAINVOUTHIGH field. */
#define FICR_CHIPCONF04_VMAINVOUTHIGH_Msk (0x3UL << FICR_CHIPCONF04_VMAINVOUTHIGH_Pos) /*!< Bit mask of VMAINVOUTHIGH field. */

/* Bits 27..23 : Calibration of BUCK_LP_PWM Calibration of BUCK_LP_PWM in twos complement form 0b01111 - Max output voltage. 0b00000 - Default (1.00V@25mA typical). 0b10000 - Min output voltage */
#define FICR_CHIPCONF04_VMAINBUCKPWMCAL_Pos (23UL) /*!< Position of VMAINBUCKPWMCAL field. */
#define FICR_CHIPCONF04_VMAINBUCKPWMCAL_Msk (0x1FUL << FICR_CHIPCONF04_VMAINBUCKPWMCAL_Pos) /*!< Bit mask of VMAINBUCKPWMCAL field. */

/* Bits 22..16 : Power consumption threshold for ULP-&gt;LDO switch */
#define FICR_CHIPCONF04_VMAINTHRESHOLD_Pos (16UL) /*!< Position of VMAINTHRESHOLD field. */
#define FICR_CHIPCONF04_VMAINTHRESHOLD_Msk (0x7FUL << FICR_CHIPCONF04_VMAINTHRESHOLD_Pos) /*!< Bit mask of VMAINTHRESHOLD field. */

/* Bit 15 : Backdoor to disable the PFM mode, only using the PWM. 1: PWM mode will always be selected if VMAINDCDCEN=1. 0: Normal switching between PFM and PWM modes */
#define FICR_CHIPCONF04_VMAINDISABLEPFM_Pos (15UL) /*!< Position of VMAINDISABLEPFM field. */
#define FICR_CHIPCONF04_VMAINDISABLEPFM_Msk (0x1UL << FICR_CHIPCONF04_VMAINDISABLEPFM_Pos) /*!< Bit mask of VMAINDISABLEPFM field. */

/* Bit 14 : DVDD0V9 LDO mode */
#define FICR_CHIPCONF04_VMAINULPNMOS_Pos (14UL) /*!< Position of VMAINULPNMOS field. */
#define FICR_CHIPCONF04_VMAINULPNMOS_Msk (0x1UL << FICR_CHIPCONF04_VMAINULPNMOS_Pos) /*!< Bit mask of VMAINULPNMOS field. */
#define FICR_CHIPCONF04_VMAINULPNMOS_Rail2Rail (0UL) /*!< Rail2rail input stage in LDO */
#define FICR_CHIPCONF04_VMAINULPNMOS_NMOS (1UL) /*!< NMOS only input stage in LDO (default) */

/* Bits 13..12 : Max coil current limit calibration. */
#define FICR_CHIPCONF04_VMAINBUCKMAXILIMCAL_Pos (12UL) /*!< Position of VMAINBUCKMAXILIMCAL field. */
#define FICR_CHIPCONF04_VMAINBUCKMAXILIMCAL_Msk (0x3UL << FICR_CHIPCONF04_VMAINBUCKMAXILIMCAL_Pos) /*!< Bit mask of VMAINBUCKMAXILIMCAL field. */
#define FICR_CHIPCONF04_VMAINBUCKMAXILIMCAL_40MA (0UL) /*!< 40 mA */
#define FICR_CHIPCONF04_VMAINBUCKMAXILIMCAL_56MA (1UL) /*!< 56 mA */
#define FICR_CHIPCONF04_VMAINBUCKMAXILIMCAL_70MA (2UL) /*!< 70 mA */
#define FICR_CHIPCONF04_VMAINBUCKMAXILIMCAL_100MA (3UL) /*!< 100 mA */

/* Bits 9..8 : Setting load current threshold for ICMP_0V9 in PFM mode, twos complement */
#define FICR_CHIPCONF04_VMAINBUCKPFMICMPCAL_Pos (8UL) /*!< Position of VMAINBUCKPFMICMPCAL field. */
#define FICR_CHIPCONF04_VMAINBUCKPFMICMPCAL_Msk (0x3UL << FICR_CHIPCONF04_VMAINBUCKPFMICMPCAL_Pos) /*!< Bit mask of VMAINBUCKPFMICMPCAL field. */
#define FICR_CHIPCONF04_VMAINBUCKPFMICMPCAL_16MA (0UL) /*!< 16 mA */
#define FICR_CHIPCONF04_VMAINBUCKPFMICMPCAL_20MA (1UL) /*!< &gt;20 mA */
#define FICR_CHIPCONF04_VMAINBUCKPFMICMPCAL_9MA (2UL) /*!< 9 mA */
#define FICR_CHIPCONF04_VMAINBUCKPFMICMPCAL_11MA (3UL) /*!< 11 mA */

/* Bit 7 : Backdoor to avoid ULP mode. 1: Avoids ULP mode. By also setting VMAINDCDCEN=1 and VMAINDISABLEPFM=0, PFM mode will be used as the lowest power regulator state. 0: Dvdd FSM will enter ULP mode if no power requests are present. */
#define FICR_CHIPCONF04_VMAINAVOIDULP_Pos (7UL) /*!< Position of VMAINAVOIDULP field. */
#define FICR_CHIPCONF04_VMAINAVOIDULP_Msk (0x1UL << FICR_CHIPCONF04_VMAINAVOIDULP_Pos) /*!< Bit mask of VMAINAVOIDULP field. */

/* Bits 6..4 : REGANA regulator output voltage calibration, twos complement, step size 2 percent */
#define FICR_CHIPCONF04_VMAINLDOCAL_Pos (4UL) /*!< Position of VMAINLDOCAL field. */
#define FICR_CHIPCONF04_VMAINLDOCAL_Msk (0x7UL << FICR_CHIPCONF04_VMAINLDOCAL_Pos) /*!< Bit mask of VMAINLDOCAL field. */
#define FICR_CHIPCONF04_VMAINLDOCAL_DEF (0UL) /*!< Default voltage */
#define FICR_CHIPCONF04_VMAINLDOCAL_MAX (3UL) /*!< Max voltage */
#define FICR_CHIPCONF04_VMAINLDOCAL_MIN (4UL) /*!< Min voltage */

/* Bits 1..0 : Selects output voltage from DVDD BUCK and LDO: Buck PWM/PFM mode: 11: 1.20 10: 1.10 01: 1.00 00: 0.95 (Default) LDO mode: 1x: 1.26V nominal output 0x: 1.10V nominal output (Default) Note: This is overridden by VOUTREQH when VREQH is requested by VFS */
#define FICR_CHIPCONF04_VMAINVOUT_Pos (0UL) /*!< Position of VMAINVOUT field. */
#define FICR_CHIPCONF04_VMAINVOUT_Msk (0x3UL << FICR_CHIPCONF04_VMAINVOUT_Pos) /*!< Bit mask of VMAINVOUT field. */

/* Register: FICR_CHIPCONF05 */
/* Description: Configuration for VREGANA. Will be set during production test. */

/* Bits 25..24 : Spare digital signals */
#define FICR_CHIPCONF05_VCORECTRL_Pos (24UL) /*!< Position of VCORECTRL field. */
#define FICR_CHIPCONF05_VCORECTRL_Msk (0x3UL << FICR_CHIPCONF05_VCORECTRL_Pos) /*!< Bit mask of VCORECTRL field. */

/* Bits 18..17 : Output voltage calibration. 0: switched with internal oscillator (default). 1: switched with CLK2K input 2: force always on. 3: force off (PWRUPs must be 0 otherwise default). */
#define FICR_CHIPCONF05_ULPRESCTRL_Pos (17UL) /*!< Position of ULPRESCTRL field. */
#define FICR_CHIPCONF05_ULPRESCTRL_Msk (0x3UL << FICR_CHIPCONF05_ULPRESCTRL_Pos) /*!< Bit mask of ULPRESCTRL field. */

/* Bits 16..13 : Calibration of BUCK_LP_PFM, twos complement form 0b0111 - Max output voltage 0b0000 - Default output voltage (see VREG_DVDD_VOLT_0V9[1:0]) 0b1000 - Min output voltage */
#define FICR_CHIPCONF05_VMAINBUCKPFMCAL_Pos (13UL) /*!< Position of VMAINBUCKPFMCAL field. */
#define FICR_CHIPCONF05_VMAINBUCKPFMCAL_Msk (0xFUL << FICR_CHIPCONF05_VMAINBUCKPFMCAL_Pos) /*!< Bit mask of VMAINBUCKPFMCAL field. */

/* Bit 8 : AVDD1V3 LDO mode */
#define FICR_CHIPCONF05_VANAULPNMOS_Pos (8UL) /*!< Position of VANAULPNMOS field. */
#define FICR_CHIPCONF05_VANAULPNMOS_Msk (0x1UL << FICR_CHIPCONF05_VANAULPNMOS_Pos) /*!< Bit mask of VANAULPNMOS field. */
#define FICR_CHIPCONF05_VANAULPNMOS_Rail2Rail (0UL) /*!< Rail2rail input stage in LDO */
#define FICR_CHIPCONF05_VANAULPNMOS_NMOS (1UL) /*!< NMOS only input stage in LDO (default) */

/* Bits 7..3 : VREGANA ULP Output voltage calibration */
#define FICR_CHIPCONF05_VANAULPCAL_Pos (3UL) /*!< Position of VANAULPCAL field. */
#define FICR_CHIPCONF05_VANAULPCAL_Msk (0x1FUL << FICR_CHIPCONF05_VANAULPCAL_Pos) /*!< Bit mask of VANAULPCAL field. */
#define FICR_CHIPCONF05_VANAULPCAL_DEF (0UL) /*!< Default voltage */
#define FICR_CHIPCONF05_VANAULPCAL_MAX (7UL) /*!< Max voltage */
#define FICR_CHIPCONF05_VANAULPCAL_MIN (8UL) /*!< Min voltage */

/* Bits 2..0 : VREGANA regulator output voltage calibration, twos complement, step size 2 percent */
#define FICR_CHIPCONF05_VANALDOCAL_Pos (0UL) /*!< Position of VANALDOCAL field. */
#define FICR_CHIPCONF05_VANALDOCAL_Msk (0x7UL << FICR_CHIPCONF05_VANALDOCAL_Pos) /*!< Bit mask of VANALDOCAL field. */
#define FICR_CHIPCONF05_VANALDOCAL_DEF (0UL) /*!< Default voltage */
#define FICR_CHIPCONF05_VANALDOCAL_MAX (3UL) /*!< Max voltage */
#define FICR_CHIPCONF05_VANALDOCAL_MIN (4UL) /*!< Min voltage */

/* Register: FICR_CHIPCONF06 */
/* Description: Configuration for VREGRADIO and VREGNETWORK. Will be set during production test. */

/* Bit 31 : Avoid ULP mode */
#define FICR_CHIPCONF06_VRADIOAVOIDULP_Pos (31UL) /*!< Position of VRADIOAVOIDULP field. */
#define FICR_CHIPCONF06_VRADIOAVOIDULP_Msk (0x1UL << FICR_CHIPCONF06_VRADIOAVOIDULP_Pos) /*!< Bit mask of VRADIOAVOIDULP field. */
#define FICR_CHIPCONF06_VRADIOAVOIDULP_Default (0UL) /*!< Use default behavior */
#define FICR_CHIPCONF06_VRADIOAVOIDULP_AvoidUlp (1UL) /*!< Avoid using ULP */

/* Bit 30 : Control the output voltage for VREGNETWORK (DVDD_0V9) */
#define FICR_CHIPCONF06_VNETWORKULPALWAYSHIGH_Pos (30UL) /*!< Position of VNETWORKULPALWAYSHIGH field. */
#define FICR_CHIPCONF06_VNETWORKULPALWAYSHIGH_Msk (0x1UL << FICR_CHIPCONF06_VNETWORKULPALWAYSHIGH_Pos) /*!< Bit mask of VNETWORKULPALWAYSHIGH field. */

/* Bits 29..26 : Control the output voltage for VREGNETWORK (DVDD_0V9) */
#define FICR_CHIPCONF06_VNETWORKVOUT_Pos (26UL) /*!< Position of VNETWORKVOUT field. */
#define FICR_CHIPCONF06_VNETWORKVOUT_Msk (0xFUL << FICR_CHIPCONF06_VNETWORKVOUT_Pos) /*!< Bit mask of VNETWORKVOUT field. */

/* Bits 25..21 : TBD */
#define FICR_CHIPCONF06_VRADIOBUCKCALPWM_Pos (21UL) /*!< Position of VRADIOBUCKCALPWM field. */
#define FICR_CHIPCONF06_VRADIOBUCKCALPWM_Msk (0x1FUL << FICR_CHIPCONF06_VRADIOBUCKCALPWM_Pos) /*!< Bit mask of VRADIOBUCKCALPWM field. */

/* Bits 20..18 : TBD */
#define FICR_CHIPCONF06_VRADIOBUCKCALPFMICMP_Pos (18UL) /*!< Position of VRADIOBUCKCALPFMICMP field. */
#define FICR_CHIPCONF06_VRADIOBUCKCALPFMICMP_Msk (0x7UL << FICR_CHIPCONF06_VRADIOBUCKCALPFMICMP_Pos) /*!< Bit mask of VRADIOBUCKCALPFMICMP field. */

/* Bits 17..14 : TBD */
#define FICR_CHIPCONF06_VRADIOBUCKCALPFM_Pos (14UL) /*!< Position of VRADIOBUCKCALPFM field. */
#define FICR_CHIPCONF06_VRADIOBUCKCALPFM_Msk (0xFUL << FICR_CHIPCONF06_VRADIOBUCKCALPFM_Pos) /*!< Bit mask of VRADIOBUCKCALPFM field. */

/* Bits 13..12 : TBD */
#define FICR_CHIPCONF06_VRADIOBUCKCALMAXILIM_Pos (12UL) /*!< Position of VRADIOBUCKCALMAXILIM field. */
#define FICR_CHIPCONF06_VRADIOBUCKCALMAXILIM_Msk (0x3UL << FICR_CHIPCONF06_VRADIOBUCKCALMAXILIM_Pos) /*!< Bit mask of VRADIOBUCKCALMAXILIM field. */

/* Bit 11 : Force VREGRADIO ULP regulators to be always on */
#define FICR_CHIPCONF06_VRADIOULPALWAYSON_Pos (11UL) /*!< Position of VRADIOULPALWAYSON field. */
#define FICR_CHIPCONF06_VRADIOULPALWAYSON_Msk (0x1UL << FICR_CHIPCONF06_VRADIOULPALWAYSON_Pos) /*!< Bit mask of VRADIOULPALWAYSON field. */

/* Bits 10..4 : TBD for VREGRADIO (AVDD_1V3) */
#define FICR_CHIPCONF06_VRADIOTHRESHOLD_Pos (4UL) /*!< Position of VRADIOTHRESHOLD field. */
#define FICR_CHIPCONF06_VRADIOTHRESHOLD_Msk (0x7FUL << FICR_CHIPCONF06_VRADIOTHRESHOLD_Pos) /*!< Bit mask of VRADIOTHRESHOLD field. */

/* Bits 3..2 : Control the TBD for VREGRADIO (AVDD_1V3) */
#define FICR_CHIPCONF06_VRADIOVOUTHIGH_Pos (2UL) /*!< Position of VRADIOVOUTHIGH field. */
#define FICR_CHIPCONF06_VRADIOVOUTHIGH_Msk (0x3UL << FICR_CHIPCONF06_VRADIOVOUTHIGH_Pos) /*!< Bit mask of VRADIOVOUTHIGH field. */

/* Bits 1..0 : Control the output voltage for VREGRADIO (AVDD_1V3) */
#define FICR_CHIPCONF06_VRADIOVOUT_Pos (0UL) /*!< Position of VRADIOVOUT field. */
#define FICR_CHIPCONF06_VRADIOVOUT_Msk (0x3UL << FICR_CHIPCONF06_VRADIOVOUT_Pos) /*!< Bit mask of VRADIOVOUT field. */

/* Register: FICR_CHIPCONF07 */
/* Description: ICMP timer configuration for VREGRADIO and VREGNETWORK. Will be set during production test. */

/* Bits 31..16 : Control the stay-alive time for the VNETWORK current comparator (DVDD_0V9) */
#define FICR_CHIPCONF07_VNETWORKICMPTIMER_Pos (16UL) /*!< Position of VNETWORKICMPTIMER field. */
#define FICR_CHIPCONF07_VNETWORKICMPTIMER_Msk (0xFFFFUL << FICR_CHIPCONF07_VNETWORKICMPTIMER_Pos) /*!< Bit mask of VNETWORKICMPTIMER field. */

/* Bits 15..0 : Control the stay-alive time for the VRADIO PFM current comparator */
#define FICR_CHIPCONF07_VRADIOPFMICMPTIMER_Pos (0UL) /*!< Position of VRADIOPFMICMPTIMER field. */
#define FICR_CHIPCONF07_VRADIOPFMICMPTIMER_Msk (0xFFFFUL << FICR_CHIPCONF07_VRADIOPFMICMPTIMER_Pos) /*!< Bit mask of VRADIOPFMICMPTIMER field. */

/* Register: FICR_CHIPCONF08 */
/* Description: Configuration for VREGH. Will be set during production test. */

/* Bits 31..28 : Trimming of ULP reference bias current and bandgap voltage */
#define FICR_CHIPCONF08_VREGHULPTRIMCVREF_Pos (28UL) /*!< Position of VREGHULPTRIMCVREF field. */
#define FICR_CHIPCONF08_VREGHULPTRIMCVREF_Msk (0xFUL << FICR_CHIPCONF08_VREGHULPTRIMCVREF_Pos) /*!< Bit mask of VREGHULPTRIMCVREF field. */

/* Bits 27..22 : Trimmed value for refresh mode counter for automatic mode change to ULP */
#define FICR_CHIPCONF08_VREGHRFSHTRIMULP_Pos (22UL) /*!< Position of VREGHRFSHTRIMULP field. */
#define FICR_CHIPCONF08_VREGHRFSHTRIMULP_Msk (0x3FUL << FICR_CHIPCONF08_VREGHRFSHTRIMULP_Pos) /*!< Bit mask of VREGHRFSHTRIMULP field. */

/* Bits 21..16 : Trimmed value for refresh mode counter for automatic mode change to PWM */
#define FICR_CHIPCONF08_VREGHRFSHTRIMPWM_Pos (16UL) /*!< Position of VREGHRFSHTRIMPWM field. */
#define FICR_CHIPCONF08_VREGHRFSHTRIMPWM_Msk (0x3FUL << FICR_CHIPCONF08_VREGHRFSHTRIMPWM_Pos) /*!< Bit mask of VREGHRFSHTRIMPWM field. */

/* Bits 15..14 : Programmable value for counter for poller in PWM mode */
#define FICR_CHIPCONF08_VREGHRFSHPOLLSEL_Pos (14UL) /*!< Position of VREGHRFSHPOLLSEL field. */
#define FICR_CHIPCONF08_VREGHRFSHPOLLSEL_Msk (0x3UL << FICR_CHIPCONF08_VREGHRFSHPOLLSEL_Pos) /*!< Bit mask of VREGHRFSHPOLLSEL field. */
#define FICR_CHIPCONF08_VREGHRFSHPOLLSEL_Disabled (0UL) /*!< Disabled */
#define FICR_CHIPCONF08_VREGHRFSHPOLLSEL_256us (1UL) /*!< 256 us polling interval */
#define FICR_CHIPCONF08_VREGHRFSHPOLLSEL_512us (2UL) /*!< 512 us polling interval */
#define FICR_CHIPCONF08_VREGHRFSHPOLLSEL_1024us (3UL) /*!< 1024 us polling interval */

/* Bits 13..12 : Trimming of VREG_VIO load current measurement */
#define FICR_CHIPCONF08_VREGHVREGICMPTRIM_Pos (12UL) /*!< Position of VREGHVREGICMPTRIM field. */
#define FICR_CHIPCONF08_VREGHVREGICMPTRIM_Msk (0x3UL << FICR_CHIPCONF08_VREGHVREGICMPTRIM_Pos) /*!< Bit mask of VREGHVREGICMPTRIM field. */
#define FICR_CHIPCONF08_VREGHVREGICMPTRIM_m30pcnt (0UL) /*!< -30 percent */
#define FICR_CHIPCONF08_VREGHVREGICMPTRIM_m10pcnt (1UL) /*!< -10 percent (default) */
#define FICR_CHIPCONF08_VREGHVREGICMPTRIM_p10pcnt (2UL) /*!< +10 percent */
#define FICR_CHIPCONF08_VREGHVREGICMPTRIM_p30pcnt (3UL) /*!< +30 percent */

/* Bits 11..10 : Trimming of VREGH_ULP load current measurement */
#define FICR_CHIPCONF08_VREGHULPICMPTRIM_Pos (10UL) /*!< Position of VREGHULPICMPTRIM field. */
#define FICR_CHIPCONF08_VREGHULPICMPTRIM_Msk (0x3UL << FICR_CHIPCONF08_VREGHULPICMPTRIM_Pos) /*!< Bit mask of VREGHULPICMPTRIM field. */
#define FICR_CHIPCONF08_VREGHULPICMPTRIM_m30pcnt (0UL) /*!< -30 percent */
#define FICR_CHIPCONF08_VREGHULPICMPTRIM_m10pcnt (1UL) /*!< -10 percent (default) */
#define FICR_CHIPCONF08_VREGHULPICMPTRIM_p10pcnt (2UL) /*!< +10 percent */
#define FICR_CHIPCONF08_VREGHULPICMPTRIM_p30pcnt (3UL) /*!< +30 percent */

/* Bit 9 : Programmable value for VREGH LDO to ULP overlay counter */
#define FICR_CHIPCONF08_VREGHLDO2ULPOVERLAPTRIM_Pos (9UL) /*!< Position of VREGHLDO2ULPOVERLAPTRIM field. */
#define FICR_CHIPCONF08_VREGHLDO2ULPOVERLAPTRIM_Msk (0x1UL << FICR_CHIPCONF08_VREGHLDO2ULPOVERLAPTRIM_Pos) /*!< Bit mask of VREGHLDO2ULPOVERLAPTRIM field. */
#define FICR_CHIPCONF08_VREGHLDO2ULPOVERLAPTRIM_512us (0UL) /*!< 512 us overlay */
#define FICR_CHIPCONF08_VREGHLDO2ULPOVERLAPTRIM_1024us (1UL) /*!< 1024 us overlay */

/* Bits 8..7 : Refresh mode trim register */
#define FICR_CHIPCONF08_VREGHRFSHBUCKCAL_Pos (7UL) /*!< Position of VREGHRFSHBUCKCAL field. */
#define FICR_CHIPCONF08_VREGHRFSHBUCKCAL_Msk (0x3UL << FICR_CHIPCONF08_VREGHRFSHBUCKCAL_Pos) /*!< Bit mask of VREGHRFSHBUCKCAL field. */

/* Bits 6..5 : VREGH BUCK output current limit calibration */
#define FICR_CHIPCONF08_VREGHBUCKCALILIM_Pos (5UL) /*!< Position of VREGHBUCKCALILIM field. */
#define FICR_CHIPCONF08_VREGHBUCKCALILIM_Msk (0x3UL << FICR_CHIPCONF08_VREGHBUCKCALILIM_Pos) /*!< Bit mask of VREGHBUCKCALILIM field. */
#define FICR_CHIPCONF08_VREGHBUCKCALILIM_65mA (0UL) /*!< 65mA (default) */
#define FICR_CHIPCONF08_VREGHBUCKCALILIM_m20pcnt (1UL) /*!< -20 percent */
#define FICR_CHIPCONF08_VREGHBUCKCALILIM_p40pcnt (2UL) /*!< +40 percent */
#define FICR_CHIPCONF08_VREGHBUCKCALILIM_p20pcnt (3UL) /*!< +20 percent */

/* Bits 4..0 : VREGH BUCK output voltage fine calibration */
#define FICR_CHIPCONF08_VREGHBUCKCAL_Pos (0UL) /*!< Position of VREGHBUCKCAL field. */
#define FICR_CHIPCONF08_VREGHBUCKCAL_Msk (0x1FUL << FICR_CHIPCONF08_VREGHBUCKCAL_Pos) /*!< Bit mask of VREGHBUCKCAL field. */

/* Register: FICR_CHIPCONF09 */
/* Description: Configuration for VREGH. Will be set during production test. */

/* Bits 20..14 : Sets the threshold value for VREGH */
#define FICR_CHIPCONF09_VREGHTHRESHOLD_Pos (14UL) /*!< Position of VREGHTHRESHOLD field. */
#define FICR_CHIPCONF09_VREGHTHRESHOLD_Msk (0x7FUL << FICR_CHIPCONF09_VREGHTHRESHOLD_Pos) /*!< Bit mask of VREGHTHRESHOLD field. */

/* Bits 13..6 : Power configuration for VREGH */
#define FICR_CHIPCONF09_POWERCFG_Pos (6UL) /*!< Position of POWERCFG field. */
#define FICR_CHIPCONF09_POWERCFG_Msk (0xFFUL << FICR_CHIPCONF09_POWERCFG_Pos) /*!< Bit mask of POWERCFG field. */

/* Bits 5..3 : Output voltage trimming for VREGH _ULP */
#define FICR_CHIPCONF09_VREGHULPTRIM_Pos (3UL) /*!< Position of VREGHULPTRIM field. */
#define FICR_CHIPCONF09_VREGHULPTRIM_Msk (0x7UL << FICR_CHIPCONF09_VREGHULPTRIM_Pos) /*!< Bit mask of VREGHULPTRIM field. */

/* Bits 2..0 : VREGH LDO output voltage trimming */
#define FICR_CHIPCONF09_VREGHVREGTRIM_Pos (0UL) /*!< Position of VREGHVREGTRIM field. */
#define FICR_CHIPCONF09_VREGHVREGTRIM_Msk (0x7UL << FICR_CHIPCONF09_VREGHVREGTRIM_Pos) /*!< Bit mask of VREGHVREGTRIM field. */

/* Register: FICR_CHIPCONF10 */
/* Description: Configuration for Application, Audio and 192M PLLs, */

/* Bit 20 : Power configuration for VREGH */
#define FICR_CHIPCONF10_PLL192MPROGCHPUMP_Pos (20UL) /*!< Position of PLL192MPROGCHPUMP field. */
#define FICR_CHIPCONF10_PLL192MPROGCHPUMP_Msk (0x1UL << FICR_CHIPCONF10_PLL192MPROGCHPUMP_Pos) /*!< Bit mask of PLL192MPROGCHPUMP field. */

/* Bits 19..16 : Power configuration for VREGH */
#define FICR_CHIPCONF10_PLL192MCTRL_Pos (16UL) /*!< Position of PLL192MCTRL field. */
#define FICR_CHIPCONF10_PLL192MCTRL_Msk (0xFUL << FICR_CHIPCONF10_PLL192MCTRL_Pos) /*!< Bit mask of PLL192MCTRL field. */

/* Bits 13..8 : Power configuration for VREGH */
#define FICR_CHIPCONF10_AUDIOCTRL_Pos (8UL) /*!< Position of AUDIOCTRL field. */
#define FICR_CHIPCONF10_AUDIOCTRL_Msk (0x3FUL << FICR_CHIPCONF10_AUDIOCTRL_Pos) /*!< Bit mask of AUDIOCTRL field. */

/* Bit 4 : Power configuration for VREGH */
#define FICR_CHIPCONF10_APPPROGCHPUMP_Pos (4UL) /*!< Position of APPPROGCHPUMP field. */
#define FICR_CHIPCONF10_APPPROGCHPUMP_Msk (0x1UL << FICR_CHIPCONF10_APPPROGCHPUMP_Pos) /*!< Bit mask of APPPROGCHPUMP field. */

/* Bits 3..0 : Power configuration for VREGH */
#define FICR_CHIPCONF10_APPCTRL_Pos (0UL) /*!< Position of APPCTRL field. */
#define FICR_CHIPCONF10_APPCTRL_Msk (0xFUL << FICR_CHIPCONF10_APPCTRL_Pos) /*!< Bit mask of APPCTRL field. */

/* Register: FICR_CHIPCONF11 */
/* Description: RAM redundancy configuration */

/* Bits 17..16 : Which part of RAM slave to repair */
#define FICR_CHIPCONF11_RAMREPAIRCONFIG_Pos (16UL) /*!< Position of RAMREPAIRCONFIG field. */
#define FICR_CHIPCONF11_RAMREPAIRCONFIG_Msk (0x3UL << FICR_CHIPCONF11_RAMREPAIRCONFIG_Pos) /*!< Bit mask of RAMREPAIRCONFIG field. */
#define FICR_CHIPCONF11_RAMREPAIRCONFIG_Part0 (0UL) /*!< Part 0 */
#define FICR_CHIPCONF11_RAMREPAIRCONFIG_Part1 (1UL) /*!< Part 1 */
#define FICR_CHIPCONF11_RAMREPAIRCONFIG_Part2 (2UL) /*!< Part 2 */
#define FICR_CHIPCONF11_RAMREPAIRCONFIG_Part3 (3UL) /*!< Part 3 */

/* Bits 7..0 : Select which RAM slave to be repaired (one hot) */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Pos (0UL) /*!< Position of RAMREPAIRENABLE field. */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Msk (0xFFUL << FICR_CHIPCONF11_RAMREPAIRENABLE_Pos) /*!< Bit mask of RAMREPAIRENABLE field. */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Slave0 (1UL) /*!< RAM slave 0 */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Slave1 (2UL) /*!< RAM slave 1 */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Slave2 (4UL) /*!< RAM slave 2 */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Slave3 (8UL) /*!< RAM slave 3 */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Slave4 (16UL) /*!< RAM slave 4 */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Slave5 (32UL) /*!< RAM slave 5 */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Slave6 (64UL) /*!< RAM slave 6 */
#define FICR_CHIPCONF11_RAMREPAIRENABLE_Slave7 (128UL) /*!< RAM slave 7 */

/* Register: FICR_CHIPCONF12 */
/* Description: Backdoor trim values for Application RAM, CPUCACHE and CC312 */

/* Bit 29 : Read/Write Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_CC312RWMHP_Pos (29UL) /*!< Position of CC312RWMHP field. */
#define FICR_CHIPCONF12_CC312RWMHP_Msk (0x1UL << FICR_CHIPCONF12_CC312RWMHP_Pos) /*!< Bit mask of CC312RWMHP field. */
#define FICR_CHIPCONF12_CC312RWMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CC312RWMHP_Enabled (1UL) /*!< Enable */

/* Bit 28 : Read Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_CC312RMHP_Pos (28UL) /*!< Position of CC312RMHP field. */
#define FICR_CHIPCONF12_CC312RMHP_Msk (0x1UL << FICR_CHIPCONF12_CC312RMHP_Pos) /*!< Bit mask of CC312RMHP field. */
#define FICR_CHIPCONF12_CC312RMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CC312RMHP_Enabled (1UL) /*!< Enable */

/* Bit 27 : Write Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_CC312WMHP_Pos (27UL) /*!< Position of CC312WMHP field. */
#define FICR_CHIPCONF12_CC312WMHP_Msk (0x1UL << FICR_CHIPCONF12_CC312WMHP_Pos) /*!< Bit mask of CC312WMHP field. */
#define FICR_CHIPCONF12_CC312WMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CC312WMHP_Enabled (1UL) /*!< Enable */

/* Bit 26 : Read/Write Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_CC312RWMLP_Pos (26UL) /*!< Position of CC312RWMLP field. */
#define FICR_CHIPCONF12_CC312RWMLP_Msk (0x1UL << FICR_CHIPCONF12_CC312RWMLP_Pos) /*!< Bit mask of CC312RWMLP field. */
#define FICR_CHIPCONF12_CC312RWMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CC312RWMLP_Enabled (1UL) /*!< Enable */

/* Bit 25 : Read Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_CC312RMLP_Pos (25UL) /*!< Position of CC312RMLP field. */
#define FICR_CHIPCONF12_CC312RMLP_Msk (0x1UL << FICR_CHIPCONF12_CC312RMLP_Pos) /*!< Bit mask of CC312RMLP field. */
#define FICR_CHIPCONF12_CC312RMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CC312RMLP_Enabled (1UL) /*!< Enable */

/* Bit 24 : Write Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_CC312WMLP_Pos (24UL) /*!< Position of CC312WMLP field. */
#define FICR_CHIPCONF12_CC312WMLP_Msk (0x1UL << FICR_CHIPCONF12_CC312WMLP_Pos) /*!< Bit mask of CC312WMLP field. */
#define FICR_CHIPCONF12_CC312WMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CC312WMLP_Enabled (1UL) /*!< Enable */

/* Bit 21 : Read/Write Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_CACHERWMHP_Pos (21UL) /*!< Position of CACHERWMHP field. */
#define FICR_CHIPCONF12_CACHERWMHP_Msk (0x1UL << FICR_CHIPCONF12_CACHERWMHP_Pos) /*!< Bit mask of CACHERWMHP field. */
#define FICR_CHIPCONF12_CACHERWMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CACHERWMHP_Enabled (1UL) /*!< Enable */

/* Bit 20 : Read Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_CACHERMHP_Pos (20UL) /*!< Position of CACHERMHP field. */
#define FICR_CHIPCONF12_CACHERMHP_Msk (0x1UL << FICR_CHIPCONF12_CACHERMHP_Pos) /*!< Bit mask of CACHERMHP field. */
#define FICR_CHIPCONF12_CACHERMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CACHERMHP_Enabled (1UL) /*!< Enable */

/* Bit 19 : Write Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_CACHEWMHP_Pos (19UL) /*!< Position of CACHEWMHP field. */
#define FICR_CHIPCONF12_CACHEWMHP_Msk (0x1UL << FICR_CHIPCONF12_CACHEWMHP_Pos) /*!< Bit mask of CACHEWMHP field. */
#define FICR_CHIPCONF12_CACHEWMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CACHEWMHP_Enabled (1UL) /*!< Enable */

/* Bit 18 : Read/Write Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_CACHERWMLP_Pos (18UL) /*!< Position of CACHERWMLP field. */
#define FICR_CHIPCONF12_CACHERWMLP_Msk (0x1UL << FICR_CHIPCONF12_CACHERWMLP_Pos) /*!< Bit mask of CACHERWMLP field. */
#define FICR_CHIPCONF12_CACHERWMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CACHERWMLP_Enabled (1UL) /*!< Enable */

/* Bit 17 : Read Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_CACHERMLP_Pos (17UL) /*!< Position of CACHERMLP field. */
#define FICR_CHIPCONF12_CACHERMLP_Msk (0x1UL << FICR_CHIPCONF12_CACHERMLP_Pos) /*!< Bit mask of CACHERMLP field. */
#define FICR_CHIPCONF12_CACHERMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CACHERMLP_Enabled (1UL) /*!< Enable */

/* Bit 16 : Write Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_CACHEWMLP_Pos (16UL) /*!< Position of CACHEWMLP field. */
#define FICR_CHIPCONF12_CACHEWMLP_Msk (0x1UL << FICR_CHIPCONF12_CACHEWMLP_Pos) /*!< Bit mask of CACHEWMLP field. */
#define FICR_CHIPCONF12_CACHEWMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_CACHEWMLP_Enabled (1UL) /*!< Enable */

/* Bits 15..12 : Source Bias Trim Adjustment for retention */
#define FICR_CHIPCONF12_CACHEBTRIM_Pos (12UL) /*!< Position of CACHEBTRIM field. */
#define FICR_CHIPCONF12_CACHEBTRIM_Msk (0xFUL << FICR_CHIPCONF12_CACHEBTRIM_Pos) /*!< Bit mask of CACHEBTRIM field. */

/* Bit 9 : Read/Write Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_RAMRWMHP_Pos (9UL) /*!< Position of RAMRWMHP field. */
#define FICR_CHIPCONF12_RAMRWMHP_Msk (0x1UL << FICR_CHIPCONF12_RAMRWMHP_Pos) /*!< Bit mask of RAMRWMHP field. */
#define FICR_CHIPCONF12_RAMRWMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_RAMRWMHP_Enabled (1UL) /*!< Enable */

/* Bit 8 : Read Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_RAMRMHP_Pos (8UL) /*!< Position of RAMRMHP field. */
#define FICR_CHIPCONF12_RAMRMHP_Msk (0x1UL << FICR_CHIPCONF12_RAMRMHP_Pos) /*!< Bit mask of RAMRMHP field. */
#define FICR_CHIPCONF12_RAMRMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_RAMRMHP_Enabled (1UL) /*!< Enable */

/* Bit 7 : Write Margin Adjustment in high performance mode */
#define FICR_CHIPCONF12_RAMWMHP_Pos (7UL) /*!< Position of RAMWMHP field. */
#define FICR_CHIPCONF12_RAMWMHP_Msk (0x1UL << FICR_CHIPCONF12_RAMWMHP_Pos) /*!< Bit mask of RAMWMHP field. */
#define FICR_CHIPCONF12_RAMWMHP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_RAMWMHP_Enabled (1UL) /*!< Enable */

/* Bit 6 : Read/Write Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_RAMRWMLP_Pos (6UL) /*!< Position of RAMRWMLP field. */
#define FICR_CHIPCONF12_RAMRWMLP_Msk (0x1UL << FICR_CHIPCONF12_RAMRWMLP_Pos) /*!< Bit mask of RAMRWMLP field. */
#define FICR_CHIPCONF12_RAMRWMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_RAMRWMLP_Enabled (1UL) /*!< Enable */

/* Bit 5 : Read Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_RAMRMLP_Pos (5UL) /*!< Position of RAMRMLP field. */
#define FICR_CHIPCONF12_RAMRMLP_Msk (0x1UL << FICR_CHIPCONF12_RAMRMLP_Pos) /*!< Bit mask of RAMRMLP field. */
#define FICR_CHIPCONF12_RAMRMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_RAMRMLP_Enabled (1UL) /*!< Enable */

/* Bit 4 : Write Margin Adjustment in low power mode */
#define FICR_CHIPCONF12_RAMWMLP_Pos (4UL) /*!< Position of RAMWMLP field. */
#define FICR_CHIPCONF12_RAMWMLP_Msk (0x1UL << FICR_CHIPCONF12_RAMWMLP_Pos) /*!< Bit mask of RAMWMLP field. */
#define FICR_CHIPCONF12_RAMWMLP_Disabled (0UL) /*!< Disable */
#define FICR_CHIPCONF12_RAMWMLP_Enabled (1UL) /*!< Enable */

/* Bits 3..0 : Source Bias Trim Adjustment for retention */
#define FICR_CHIPCONF12_RAMBTRIM_Pos (0UL) /*!< Position of RAMBTRIM field. */
#define FICR_CHIPCONF12_RAMBTRIM_Msk (0xFUL << FICR_CHIPCONF12_RAMBTRIM_Pos) /*!< Bit mask of RAMBTRIM field. */

/* Register: FICR_CHIPCONF13 */
/* Description: RCOSC32K trim values */

/* Bits 29..24 : LFULP coarse calibration input */
#define FICR_CHIPCONF13_LFULP32KICOARSEIN_Pos (24UL) /*!< Position of LFULP32KICOARSEIN field. */
#define FICR_CHIPCONF13_LFULP32KICOARSEIN_Msk (0x3FUL << FICR_CHIPCONF13_LFULP32KICOARSEIN_Pos) /*!< Bit mask of LFULP32KICOARSEIN field. */

/* Bits 17..16 : 32kHz ULP RC oscillator calibration length in number of cycles */
#define FICR_CHIPCONF13_LFULP32KICALLENGTH_Pos (16UL) /*!< Position of LFULP32KICALLENGTH field. */
#define FICR_CHIPCONF13_LFULP32KICALLENGTH_Msk (0x3UL << FICR_CHIPCONF13_LFULP32KICALLENGTH_Pos) /*!< Bit mask of LFULP32KICALLENGTH field. */
#define FICR_CHIPCONF13_LFULP32KICALLENGTH_N64 (0UL) /*!< 64 cycles */
#define FICR_CHIPCONF13_LFULP32KICALLENGTH_N128 (1UL) /*!< 128 cycles */
#define FICR_CHIPCONF13_LFULP32KICALLENGTH_N256 (2UL) /*!< 256 cycles */
#define FICR_CHIPCONF13_LFULP32KICALLENGTH_N512 (3UL) /*!< 512 cycles */

/* Bits 13..8 : RCOSC coarse calibration input */
#define FICR_CHIPCONF13_RCOSC32KICOARSEIN_Pos (8UL) /*!< Position of RCOSC32KICOARSEIN field. */
#define FICR_CHIPCONF13_RCOSC32KICOARSEIN_Msk (0x3FUL << FICR_CHIPCONF13_RCOSC32KICOARSEIN_Pos) /*!< Bit mask of RCOSC32KICOARSEIN field. */

/* Bits 1..0 : 32kHz RC oscillator calibration length in number of cycles */
#define FICR_CHIPCONF13_RCOSC32KICALLENGTH_Pos (0UL) /*!< Position of RCOSC32KICALLENGTH field. */
#define FICR_CHIPCONF13_RCOSC32KICALLENGTH_Msk (0x3UL << FICR_CHIPCONF13_RCOSC32KICALLENGTH_Pos) /*!< Bit mask of RCOSC32KICALLENGTH field. */
#define FICR_CHIPCONF13_RCOSC32KICALLENGTH_N64 (0UL) /*!< 64 cycles */
#define FICR_CHIPCONF13_RCOSC32KICALLENGTH_N128 (1UL) /*!< 128 cycles */
#define FICR_CHIPCONF13_RCOSC32KICALLENGTH_N256 (2UL) /*!< 256 cycles */
#define FICR_CHIPCONF13_RCOSC32KICALLENGTH_N512 (3UL) /*!< 512 cycles */

/* Register: FICR_CHIPCONF14 */
/* Description: Trim values for Application and Audio PLL */

/* Bits 27..22 : Trim value for the Audio PLL VCO at 12.288MHz */
#define FICR_CHIPCONF14_AUDIOVCOTRIM12MHZ_Pos (22UL) /*!< Position of AUDIOVCOTRIM12MHZ field. */
#define FICR_CHIPCONF14_AUDIOVCOTRIM12MHZ_Msk (0x3FUL << FICR_CHIPCONF14_AUDIOVCOTRIM12MHZ_Pos) /*!< Bit mask of AUDIOVCOTRIM12MHZ field. */

/* Bits 21..16 : Trim value for the Audio PLL VCO at 11.289MHz */
#define FICR_CHIPCONF14_AUDIOVCOTRIM11MHZ_Pos (16UL) /*!< Position of AUDIOVCOTRIM11MHZ field. */
#define FICR_CHIPCONF14_AUDIOVCOTRIM11MHZ_Msk (0x3FUL << FICR_CHIPCONF14_AUDIOVCOTRIM11MHZ_Pos) /*!< Bit mask of AUDIOVCOTRIM11MHZ field. */

/* Bits 5..0 : Trim value for the Application PLL VCO at 128MHz */
#define FICR_CHIPCONF14_APPVCOTRIM128MHZ_Pos (0UL) /*!< Position of APPVCOTRIM128MHZ field. */
#define FICR_CHIPCONF14_APPVCOTRIM128MHZ_Msk (0x3FUL << FICR_CHIPCONF14_APPVCOTRIM128MHZ_Pos) /*!< Bit mask of APPVCOTRIM128MHZ field. */

/* Register: FICR_CHIPCONF15 */
/* Description: Trim values for the 192M PLL */

/* Bits 29..24 : Trim value for the 192M PLL VCO at 192MHz */
#define FICR_CHIPCONF15_VCOTRIM192MHZ_Pos (24UL) /*!< Position of VCOTRIM192MHZ field. */
#define FICR_CHIPCONF15_VCOTRIM192MHZ_Msk (0x3FUL << FICR_CHIPCONF15_VCOTRIM192MHZ_Pos) /*!< Bit mask of VCOTRIM192MHZ field. */

/* Bits 23..18 : Trim value for the 192M PLL VCO at 176MHz */
#define FICR_CHIPCONF15_VCOTRIM176MHZ_Pos (18UL) /*!< Position of VCOTRIM176MHZ field. */
#define FICR_CHIPCONF15_VCOTRIM176MHZ_Msk (0x3FUL << FICR_CHIPCONF15_VCOTRIM176MHZ_Pos) /*!< Bit mask of VCOTRIM176MHZ field. */

/* Bits 17..12 : Trim value for the 192M PLL VCO at 160MHz */
#define FICR_CHIPCONF15_VCOTRIM160MHZ_Pos (12UL) /*!< Position of VCOTRIM160MHZ field. */
#define FICR_CHIPCONF15_VCOTRIM160MHZ_Msk (0x3FUL << FICR_CHIPCONF15_VCOTRIM160MHZ_Pos) /*!< Bit mask of VCOTRIM160MHZ field. */

/* Bits 11..6 : Trim value for the 192M PLL VCO at 144MHz */
#define FICR_CHIPCONF15_VCOTRIM144MHZ_Pos (6UL) /*!< Position of VCOTRIM144MHZ field. */
#define FICR_CHIPCONF15_VCOTRIM144MHZ_Msk (0x3FUL << FICR_CHIPCONF15_VCOTRIM144MHZ_Pos) /*!< Bit mask of VCOTRIM144MHZ field. */

/* Bits 5..0 : Trim value for the 192M PLL VCO at 128MHz */
#define FICR_CHIPCONF15_VCOTRIM128MHZ_Pos (0UL) /*!< Position of VCOTRIM128MHZ field. */
#define FICR_CHIPCONF15_VCOTRIM128MHZ_Msk (0x3FUL << FICR_CHIPCONF15_VCOTRIM128MHZ_Pos) /*!< Bit mask of VCOTRIM128MHZ field. */

/* Register: FICR_TESTSTATUS */
/* Description: Code memory test status. Will be set during production test. */

/* Bits 31..0 : Code memory test status. Will be set during production test. */
#define FICR_TESTSTATUS_TESTSTATUS_Pos (0UL) /*!< Position of TESTSTATUS field. */
#define FICR_TESTSTATUS_TESTSTATUS_Msk (0xFFFFFFFFUL << FICR_TESTSTATUS_TESTSTATUS_Pos) /*!< Bit mask of TESTSTATUS field. */

/* Register: FICR_CPTEST0 */
/* Description: Result from Circuit Probe test */

/* Bits 31..0 : Result from Circuit Probe test */
#define FICR_CPTEST0_CP1_Pos (0UL) /*!< Position of CP1 field. */
#define FICR_CPTEST0_CP1_Msk (0xFFFFFFFFUL << FICR_CPTEST0_CP1_Pos) /*!< Bit mask of CP1 field. */

/* Register: FICR_CPTEST00 */
/* Description: Result from Circuit Probe test */

/* Bits 31..0 : Result from Circuit Probe test */
#define FICR_CPTEST00_CP2_Pos (0UL) /*!< Position of CP2 field. */
#define FICR_CPTEST00_CP2_Msk (0xFFFFFFFFUL << FICR_CPTEST00_CP2_Pos) /*!< Bit mask of CP2 field. */

/* Register: FICR_CPTEST1 */
/* Description: Result from Circuit Probe test */

/* Bits 31..24 : 4th ascii byte of Lot ID character */
#define FICR_CPTEST1_LOTID4_Pos (24UL) /*!< Position of LOTID4 field. */
#define FICR_CPTEST1_LOTID4_Msk (0xFFUL << FICR_CPTEST1_LOTID4_Pos) /*!< Bit mask of LOTID4 field. */

/* Bits 23..16 : 3rd ascii byte of Lot ID character */
#define FICR_CPTEST1_LOTID3_Pos (16UL) /*!< Position of LOTID3 field. */
#define FICR_CPTEST1_LOTID3_Msk (0xFFUL << FICR_CPTEST1_LOTID3_Pos) /*!< Bit mask of LOTID3 field. */

/* Bits 15..8 : 2nd ascii byte of Lot ID character */
#define FICR_CPTEST1_LOTID2_Pos (8UL) /*!< Position of LOTID2 field. */
#define FICR_CPTEST1_LOTID2_Msk (0xFFUL << FICR_CPTEST1_LOTID2_Pos) /*!< Bit mask of LOTID2 field. */

/* Bits 7..0 : 1st ascii byte of Lot ID character */
#define FICR_CPTEST1_LOTID1_Pos (0UL) /*!< Position of LOTID1 field. */
#define FICR_CPTEST1_LOTID1_Msk (0xFFUL << FICR_CPTEST1_LOTID1_Pos) /*!< Bit mask of LOTID1 field. */

/* Register: FICR_CPTEST2 */
/* Description: Result from Circuit Probe test */

/* Bits 31..24 : Device X-coordinate, always &gt;=0, offset so that the leftmost value on wafer is 0 */
#define FICR_CPTEST2_XCOORD_Pos (24UL) /*!< Position of XCOORD field. */
#define FICR_CPTEST2_XCOORD_Msk (0xFFUL << FICR_CPTEST2_XCOORD_Pos) /*!< Bit mask of XCOORD field. */

/* Bits 23..16 : Wafer number, 1 byte integer */
#define FICR_CPTEST2_WAFER_Pos (16UL) /*!< Position of WAFER field. */
#define FICR_CPTEST2_WAFER_Msk (0xFFUL << FICR_CPTEST2_WAFER_Pos) /*!< Bit mask of WAFER field. */

/* Bits 15..8 : 6th ascii byte of Lot ID character */
#define FICR_CPTEST2_LOTID6_Pos (8UL) /*!< Position of LOTID6 field. */
#define FICR_CPTEST2_LOTID6_Msk (0xFFUL << FICR_CPTEST2_LOTID6_Pos) /*!< Bit mask of LOTID6 field. */

/* Bits 7..0 : 5th ascii byte of Lot ID character */
#define FICR_CPTEST2_LOTID5_Pos (0UL) /*!< Position of LOTID5 field. */
#define FICR_CPTEST2_LOTID5_Msk (0xFFUL << FICR_CPTEST2_LOTID5_Pos) /*!< Bit mask of LOTID5 field. */

/* Register: FICR_CPTEST3 */
/* Description: Result from Circuit Probe test */

/* Bits 31..24 : Data Retention (DR) flag */
#define FICR_CPTEST3_DR3_Pos (24UL) /*!< Position of DR3 field. */
#define FICR_CPTEST3_DR3_Msk (0xFFUL << FICR_CPTEST3_DR3_Pos) /*!< Bit mask of DR3 field. */

/* Bits 23..16 : Data Retention (DR) flag */
#define FICR_CPTEST3_DR2_Pos (16UL) /*!< Position of DR2 field. */
#define FICR_CPTEST3_DR2_Msk (0xFFUL << FICR_CPTEST3_DR2_Pos) /*!< Bit mask of DR2 field. */

/* Bits 15..8 : Data Retention (DR) flag */
#define FICR_CPTEST3_DR1_Pos (8UL) /*!< Position of DR1 field. */
#define FICR_CPTEST3_DR1_Msk (0xFFUL << FICR_CPTEST3_DR1_Pos) /*!< Bit mask of DR1 field. */

/* Bits 7..0 : Device Y-coordinate, always &gt;=0, offset so that the bottom value on wafer is 0 */
#define FICR_CPTEST3_YCOORD_Pos (0UL) /*!< Position of YCOORD field. */
#define FICR_CPTEST3_YCOORD_Msk (0xFFUL << FICR_CPTEST3_YCOORD_Pos) /*!< Bit mask of YCOORD field. */

/* Register: FICR_CPTEST4 */
/* Description: Result from Circuit Probe test */

/* Bits 7..0 : Data Retention (DR) flag */
#define FICR_CPTEST4_DR4_Pos (0UL) /*!< Position of DR4 field. */
#define FICR_CPTEST4_DR4_Msk (0xFFUL << FICR_CPTEST4_DR4_Pos) /*!< Bit mask of DR4 field. */

/* Register: FICR_SOCINFO_PARTNO */
/* Description: Part number of the device. */

/* Bits 31..0 :   */
#define FICR_SOCINFO_PARTNO_PARTNO_Pos (0UL) /*!< Position of PARTNO field. */
#define FICR_SOCINFO_PARTNO_PARTNO_Msk (0xFFFFFFFFUL << FICR_SOCINFO_PARTNO_PARTNO_Pos) /*!< Bit mask of PARTNO field. */
#define FICR_SOCINFO_PARTNO_PARTNO_nRF5340 (7UL) /*!< nRF5340 (Yoda) */

/* Register: FICR_SOCINFO_HWREVISION */
/* Description: Hardware Revision of the device. Will be updated in production test. */

/* Bits 31..0 :   */
#define FICR_SOCINFO_HWREVISION_HWREVISION_Pos (0UL) /*!< Position of HWREVISION field. */
#define FICR_SOCINFO_HWREVISION_HWREVISION_Msk (0xFFFFFFFFUL << FICR_SOCINFO_HWREVISION_HWREVISION_Pos) /*!< Bit mask of HWREVISION field. */
#define FICR_SOCINFO_HWREVISION_HWREVISION_MPW1 (0UL) /*!< Unspecified */
#define FICR_SOCINFO_HWREVISION_HWREVISION_MPW2 (1UL) /*!< Unspecified */
#define FICR_SOCINFO_HWREVISION_HWREVISION_EngA (2UL) /*!< Unspecified */
#define FICR_SOCINFO_HWREVISION_HWREVISION_Rev1 (3UL) /*!< Unspecified */

/* Register: FICR_CPTEST5 */
/* Description: Result from Circuit Probe test, flash repair information */

/* Bits 31..0 : flash repair information */
#define FICR_CPTEST5_CPTEST5_Pos (0UL) /*!< Position of CPTEST5 field. */
#define FICR_CPTEST5_CPTEST5_Msk (0xFFFFFFFFUL << FICR_CPTEST5_CPTEST5_Pos) /*!< Bit mask of CPTEST5 field. */

/* Register: FICR_CPTEST6 */
/* Description: Result from Circuit Probe test, flash repair information */

/* Bits 31..0 : flash repair information */
#define FICR_CPTEST6_CPTEST6_Pos (0UL) /*!< Position of CPTEST6 field. */
#define FICR_CPTEST6_CPTEST6_Msk (0xFFFFFFFFUL << FICR_CPTEST6_CPTEST6_Pos) /*!< Bit mask of CPTEST6 field. */

/* Register: FICR_CPTEST7 */
/* Description: Result from Circuit Probe test, flash repair information */

/* Bits 31..0 : flash repair information */
#define FICR_CPTEST7_CPTEST7_Pos (0UL) /*!< Position of CPTEST7 field. */
#define FICR_CPTEST7_CPTEST7_Msk (0xFFFFFFFFUL << FICR_CPTEST7_CPTEST7_Pos) /*!< Bit mask of CPTEST7 field. */

/* Register: FICR_CPTEST8 */
/* Description: Result from Circuit Probe test, flash repair information */

/* Bits 31..0 : flash repair information */
#define FICR_CPTEST8_CPTEST8_Pos (0UL) /*!< Position of CPTEST8 field. */
#define FICR_CPTEST8_CPTEST8_Msk (0xFFFFFFFFUL << FICR_CPTEST8_CPTEST8_Pos) /*!< Bit mask of CPTEST8 field. */

/* Register: FICR_INFO_CONFIGID */
/* Description: Configuration identifier */

/* Bits 15..0 : Identification number for the HW */
#define FICR_INFO_CONFIGID_HWID_Pos (0UL) /*!< Position of HWID field. */
#define FICR_INFO_CONFIGID_HWID_Msk (0xFFFFUL << FICR_INFO_CONFIGID_HWID_Pos) /*!< Bit mask of HWID field. */

/* Register: FICR_INFO_DEVICEID */
/* Description: Description collection: Device identifier */

/* Bits 31..0 : 64 bit unique device identifier */
#define FICR_INFO_DEVICEID_DEVICEID_Pos (0UL) /*!< Position of DEVICEID field. */
#define FICR_INFO_DEVICEID_DEVICEID_Msk (0xFFFFFFFFUL << FICR_INFO_DEVICEID_DEVICEID_Pos) /*!< Bit mask of DEVICEID field. */

/* Register: FICR_INFO_PART */
/* Description: Part code */

/* Bits 31..0 : Part code */
#define FICR_INFO_PART_PART_Pos (0UL) /*!< Position of PART field. */
#define FICR_INFO_PART_PART_Msk (0xFFFFFFFFUL << FICR_INFO_PART_PART_Pos) /*!< Bit mask of PART field. */
#define FICR_INFO_PART_PART_N5340 (0x5340UL) /*!< nRF5340 */
#define FICR_INFO_PART_PART_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */

/* Register: FICR_INFO_VARIANT */
/* Description: Part Variant, Hardware version and Production configuration */

/* Bits 31..0 : Part Variant, Hardware version and Production configuration, encoded as ASCII */
#define FICR_INFO_VARIANT_VARIANT_Pos (0UL) /*!< Position of VARIANT field. */
#define FICR_INFO_VARIANT_VARIANT_Msk (0xFFFFFFFFUL << FICR_INFO_VARIANT_VARIANT_Pos) /*!< Bit mask of VARIANT field. */
#define FICR_INFO_VARIANT_VARIANT_QKAA (0x514B4141UL) /*!< QKAA */
#define FICR_INFO_VARIANT_VARIANT_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */

/* Register: FICR_INFO_PACKAGE */
/* Description: Package option */

/* Bits 31..0 : Package option */
#define FICR_INFO_PACKAGE_PACKAGE_Pos (0UL) /*!< Position of PACKAGE field. */
#define FICR_INFO_PACKAGE_PACKAGE_Msk (0xFFFFFFFFUL << FICR_INFO_PACKAGE_PACKAGE_Pos) /*!< Bit mask of PACKAGE field. */
#define FICR_INFO_PACKAGE_PACKAGE_QF (0x2000UL) /*!< QFxx - 94 pin QFN */
#define FICR_INFO_PACKAGE_PACKAGE_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */

/* Register: FICR_INFO_RAM */
/* Description: RAM variant */

/* Bits 31..0 : RAM variant */
#define FICR_INFO_RAM_RAM_Pos (0UL) /*!< Position of RAM field. */
#define FICR_INFO_RAM_RAM_Msk (0xFFFFFFFFUL << FICR_INFO_RAM_RAM_Pos) /*!< Bit mask of RAM field. */
#define FICR_INFO_RAM_RAM_K16 (0x10UL) /*!< 16 kByte RAM */
#define FICR_INFO_RAM_RAM_K32 (0x20UL) /*!< 32 kByte RAM */
#define FICR_INFO_RAM_RAM_K64 (0x40UL) /*!< 64 kByte RAM */
#define FICR_INFO_RAM_RAM_K128 (0x80UL) /*!< 128 kByte RAM */
#define FICR_INFO_RAM_RAM_K256 (0x100UL) /*!< 256 kByte RAM */
#define FICR_INFO_RAM_RAM_K512 (0x200UL) /*!< 512 kByte RAM */
#define FICR_INFO_RAM_RAM_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */

/* Register: FICR_INFO_FLASH */
/* Description: Flash variant */

/* Bits 31..0 : Flash variant */
#define FICR_INFO_FLASH_FLASH_Pos (0UL) /*!< Position of FLASH field. */
#define FICR_INFO_FLASH_FLASH_Msk (0xFFFFFFFFUL << FICR_INFO_FLASH_FLASH_Pos) /*!< Bit mask of FLASH field. */
#define FICR_INFO_FLASH_FLASH_K128 (0x80UL) /*!< 128 kByte FLASH */
#define FICR_INFO_FLASH_FLASH_K256 (0x100UL) /*!< 256 kByte FLASH */
#define FICR_INFO_FLASH_FLASH_K512 (0x200UL) /*!< 512 kByte FLASH */
#define FICR_INFO_FLASH_FLASH_K1024 (0x400UL) /*!< 1 MByte FLASH */
#define FICR_INFO_FLASH_FLASH_K2048 (0x800UL) /*!< 2 MByte FLASH */
#define FICR_INFO_FLASH_FLASH_Unspecified (0xFFFFFFFFUL) /*!< Unspecified */

/* Register: FICR_INFO_CODEPAGESIZE */
/* Description: Code memory page size in bytes */

/* Bits 31..0 : Code memory page size in bytes */
#define FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Pos (0UL) /*!< Position of CODEPAGESIZE field. */
#define FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk (0xFFFFFFFFUL << FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Pos) /*!< Bit mask of CODEPAGESIZE field. */
#define FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_K4096 (0x1000UL) /*!< 4 kByte */

/* Register: FICR_INFO_CODESIZE */
/* Description: Code memory size */

/* Bits 31..0 : Code memory size in number of pages */
#define FICR_INFO_CODESIZE_CODESIZE_Pos (0UL) /*!< Position of CODESIZE field. */
#define FICR_INFO_CODESIZE_CODESIZE_Msk (0xFFFFFFFFUL << FICR_INFO_CODESIZE_CODESIZE_Pos) /*!< Bit mask of CODESIZE field. */
#define FICR_INFO_CODESIZE_CODESIZE_P256 (256UL) /*!< 256 pages */

/* Register: FICR_INFO_DEVICETYPE */
/* Description: Device type */

/* Bits 31..0 : Device type */
#define FICR_INFO_DEVICETYPE_DEVICETYPE_Pos (0UL) /*!< Position of DEVICETYPE field. */
#define FICR_INFO_DEVICETYPE_DEVICETYPE_Msk (0xFFFFFFFFUL << FICR_INFO_DEVICETYPE_DEVICETYPE_Pos) /*!< Bit mask of DEVICETYPE field. */
#define FICR_INFO_DEVICETYPE_DEVICETYPE_Die (0x0000000UL) /*!< Device is an physical DIE */
#define FICR_INFO_DEVICETYPE_DEVICETYPE_FPGA (0xFFFFFFFFUL) /*!< Device is an FPGA */

/* Register: FICR_SOCINFO1_PARTNO */
/* Description: Part number of the device. These register is a workaround for YOPAN-38 on Enga / Proto3 */

/* Bits 31..0 :   */
#define FICR_SOCINFO1_PARTNO_PARTNO_Pos (0UL) /*!< Position of PARTNO field. */
#define FICR_SOCINFO1_PARTNO_PARTNO_Msk (0xFFFFFFFFUL << FICR_SOCINFO1_PARTNO_PARTNO_Pos) /*!< Bit mask of PARTNO field. */
#define FICR_SOCINFO1_PARTNO_PARTNO_nRF5340 (7UL) /*!< nRF5340 (Yoda) */

/* Register: FICR_SOCINFO1_HWREVISION */
/* Description: Hardware Revision of the device. Will be updated in production test. These register is a workaround for YOPAN-38 on Enga / Proto3 */

/* Bits 31..0 :   */
#define FICR_SOCINFO1_HWREVISION_HWREVISION_Pos (0UL) /*!< Position of HWREVISION field. */
#define FICR_SOCINFO1_HWREVISION_HWREVISION_Msk (0xFFFFFFFFUL << FICR_SOCINFO1_HWREVISION_HWREVISION_Pos) /*!< Bit mask of HWREVISION field. */
#define FICR_SOCINFO1_HWREVISION_HWREVISION_MPW1 (0UL) /*!< Unspecified */
#define FICR_SOCINFO1_HWREVISION_HWREVISION_MPW2 (1UL) /*!< Unspecified */
#define FICR_SOCINFO1_HWREVISION_HWREVISION_EngA (2UL) /*!< Unspecified */
#define FICR_SOCINFO1_HWREVISION_HWREVISION_Rev1 (3UL) /*!< Unspecified */

/* Register: FICR_FLASHPWRUP0 */
/* Description: Power-up pattern for flash */

/* Bits 31..0 : Power-up pattern for flash */
#define FICR_FLASHPWRUP0_FLASHPWRUP0_Pos (0UL) /*!< Position of FLASHPWRUP0 field. */
#define FICR_FLASHPWRUP0_FLASHPWRUP0_Msk (0xFFFFFFFFUL << FICR_FLASHPWRUP0_FLASHPWRUP0_Pos) /*!< Bit mask of FLASHPWRUP0 field. */

/* Register: FICR_FLASHPWRUP1 */
/* Description: Power-up pattern for flash */

/* Bits 31..0 : Power-up pattern for flash */
#define FICR_FLASHPWRUP1_FLASHPWRUP1_Pos (0UL) /*!< Position of FLASHPWRUP1 field. */
#define FICR_FLASHPWRUP1_FLASHPWRUP1_Msk (0xFFFFFFFFUL << FICR_FLASHPWRUP1_FLASHPWRUP1_Pos) /*!< Bit mask of FLASHPWRUP1 field. */

/* Register: FICR_FLASHPWRUP2 */
/* Description: Power-up pattern for flash */

/* Bits 31..0 : Power-up pattern for flash */
#define FICR_FLASHPWRUP2_FLASHPWRUP2_Pos (0UL) /*!< Position of FLASHPWRUP2 field. */
#define FICR_FLASHPWRUP2_FLASHPWRUP2_Msk (0xFFFFFFFFUL << FICR_FLASHPWRUP2_FLASHPWRUP2_Pos) /*!< Bit mask of FLASHPWRUP2 field. */

/* Register: FICR_FLASHPWRUP3 */
/* Description: Power-up pattern for flash */

/* Bits 31..0 : Power-up pattern for flash */
#define FICR_FLASHPWRUP3_FLASHPWRUP3_Pos (0UL) /*!< Position of FLASHPWRUP3 field. */
#define FICR_FLASHPWRUP3_FLASHPWRUP3_Msk (0xFFFFFFFFUL << FICR_FLASHPWRUP3_FLASHPWRUP3_Pos) /*!< Bit mask of FLASHPWRUP3 field. */

/* Register: FICR_TRIMCNF_ADDR */
/* Description: Description cluster: Address of the PAR register which will be written */

/* Bits 31..0 : Address */
#define FICR_TRIMCNF_ADDR_Address_Pos (0UL) /*!< Position of Address field. */
#define FICR_TRIMCNF_ADDR_Address_Msk (0xFFFFFFFFUL << FICR_TRIMCNF_ADDR_Address_Pos) /*!< Bit mask of Address field. */

/* Register: FICR_TRIMCNF_DATA */
/* Description: Description cluster: Data */

/* Bits 31..0 : Data to be written into the PAR register */
#define FICR_TRIMCNF_DATA_Data_Pos (0UL) /*!< Position of Data field. */
#define FICR_TRIMCNF_DATA_Data_Msk (0xFFFFFFFFUL << FICR_TRIMCNF_DATA_Data_Pos) /*!< Bit mask of Data field. */

/* Register: FICR_NFC_TAGHEADER0 */
/* Description: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST. */

/* Bits 31..24 : Unique identifier byte 3 */
#define FICR_NFC_TAGHEADER0_UD3_Pos (24UL) /*!< Position of UD3 field. */
#define FICR_NFC_TAGHEADER0_UD3_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD3_Pos) /*!< Bit mask of UD3 field. */

/* Bits 23..16 : Unique identifier byte 2 */
#define FICR_NFC_TAGHEADER0_UD2_Pos (16UL) /*!< Position of UD2 field. */
#define FICR_NFC_TAGHEADER0_UD2_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD2_Pos) /*!< Bit mask of UD2 field. */

/* Bits 15..8 : Unique identifier byte 1 */
#define FICR_NFC_TAGHEADER0_UD1_Pos (8UL) /*!< Position of UD1 field. */
#define FICR_NFC_TAGHEADER0_UD1_Msk (0xFFUL << FICR_NFC_TAGHEADER0_UD1_Pos) /*!< Bit mask of UD1 field. */

/* Bits 7..0 : Default Manufacturer ID: Nordic Semiconductor ASA has ICM 0x5F */
#define FICR_NFC_TAGHEADER0_MFGID_Pos (0UL) /*!< Position of MFGID field. */
#define FICR_NFC_TAGHEADER0_MFGID_Msk (0xFFUL << FICR_NFC_TAGHEADER0_MFGID_Pos) /*!< Bit mask of MFGID field. */

/* Register: FICR_NFC_TAGHEADER1 */
/* Description: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST. */

/* Bits 31..24 : Unique identifier byte 7 */
#define FICR_NFC_TAGHEADER1_UD7_Pos (24UL) /*!< Position of UD7 field. */
#define FICR_NFC_TAGHEADER1_UD7_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD7_Pos) /*!< Bit mask of UD7 field. */

/* Bits 23..16 : Unique identifier byte 6 */
#define FICR_NFC_TAGHEADER1_UD6_Pos (16UL) /*!< Position of UD6 field. */
#define FICR_NFC_TAGHEADER1_UD6_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD6_Pos) /*!< Bit mask of UD6 field. */

/* Bits 15..8 : Unique identifier byte 5 */
#define FICR_NFC_TAGHEADER1_UD5_Pos (8UL) /*!< Position of UD5 field. */
#define FICR_NFC_TAGHEADER1_UD5_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD5_Pos) /*!< Bit mask of UD5 field. */

/* Bits 7..0 : Unique identifier byte 4 */
#define FICR_NFC_TAGHEADER1_UD4_Pos (0UL) /*!< Position of UD4 field. */
#define FICR_NFC_TAGHEADER1_UD4_Msk (0xFFUL << FICR_NFC_TAGHEADER1_UD4_Pos) /*!< Bit mask of UD4 field. */

/* Register: FICR_NFC_TAGHEADER2 */
/* Description: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST. */

/* Bits 31..24 : Unique identifier byte 11 */
#define FICR_NFC_TAGHEADER2_UD11_Pos (24UL) /*!< Position of UD11 field. */
#define FICR_NFC_TAGHEADER2_UD11_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD11_Pos) /*!< Bit mask of UD11 field. */

/* Bits 23..16 : Unique identifier byte 10 */
#define FICR_NFC_TAGHEADER2_UD10_Pos (16UL) /*!< Position of UD10 field. */
#define FICR_NFC_TAGHEADER2_UD10_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD10_Pos) /*!< Bit mask of UD10 field. */

/* Bits 15..8 : Unique identifier byte 9 */
#define FICR_NFC_TAGHEADER2_UD9_Pos (8UL) /*!< Position of UD9 field. */
#define FICR_NFC_TAGHEADER2_UD9_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD9_Pos) /*!< Bit mask of UD9 field. */

/* Bits 7..0 : Unique identifier byte 8 */
#define FICR_NFC_TAGHEADER2_UD8_Pos (0UL) /*!< Position of UD8 field. */
#define FICR_NFC_TAGHEADER2_UD8_Msk (0xFFUL << FICR_NFC_TAGHEADER2_UD8_Pos) /*!< Bit mask of UD8 field. */

/* Register: FICR_NFC_TAGHEADER3 */
/* Description: Default header for NFC Tag. Software can read these values to populate NFCID1_3RD_LAST, NFCID1_2ND_LAST and NFCID1_LAST. */

/* Bits 31..24 : Unique identifier byte 15 */
#define FICR_NFC_TAGHEADER3_UD15_Pos (24UL) /*!< Position of UD15 field. */
#define FICR_NFC_TAGHEADER3_UD15_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD15_Pos) /*!< Bit mask of UD15 field. */

/* Bits 23..16 : Unique identifier byte 14 */
#define FICR_NFC_TAGHEADER3_UD14_Pos (16UL) /*!< Position of UD14 field. */
#define FICR_NFC_TAGHEADER3_UD14_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD14_Pos) /*!< Bit mask of UD14 field. */

/* Bits 15..8 : Unique identifier byte 13 */
#define FICR_NFC_TAGHEADER3_UD13_Pos (8UL) /*!< Position of UD13 field. */
#define FICR_NFC_TAGHEADER3_UD13_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD13_Pos) /*!< Bit mask of UD13 field. */

/* Bits 7..0 : Unique identifier byte 12 */
#define FICR_NFC_TAGHEADER3_UD12_Pos (0UL) /*!< Position of UD12 field. */
#define FICR_NFC_TAGHEADER3_UD12_Msk (0xFFUL << FICR_NFC_TAGHEADER3_UD12_Pos) /*!< Bit mask of UD12 field. */

/* Register: FICR_PRODTEST */
/* Description: Description collection: Production test signature n */

/* Bits 31..0 : Production test signature n A majority vote is done by HW for each bit over all three PRODTEST fields in order to read the valid value */
#define FICR_PRODTEST_PRODTEST_Pos (0UL) /*!< Position of PRODTEST field. */
#define FICR_PRODTEST_PRODTEST_Msk (0xFFFFFFFFUL << FICR_PRODTEST_PRODTEST_Pos) /*!< Bit mask of PRODTEST field. */
#define FICR_PRODTEST_PRODTEST_Done (0xBB42319FUL) /*!< Production tests done DFT mode blocked */
#define FICR_PRODTEST_PRODTEST_NotDone (0xFFFFFFFFUL) /*!< Production tests not done DFT mode open */

/* Register: FICR_CPVBGTRIM */
/* Description: VBG TRIM in CP flow. Reserved for CP */

/* Bits 31..0 : VBG TRIM in CP flow. Reserved for CP */
#define FICR_CPVBGTRIM_CPVBGTRIM_Pos (0UL) /*!< Position of CPVBGTRIM field. */
#define FICR_CPVBGTRIM_CPVBGTRIM_Msk (0xFFFFFFFFUL << FICR_CPVBGTRIM_CPVBGTRIM_Pos) /*!< Bit mask of CPVBGTRIM field. */

/* Register: FICR_TRNG90B_BYTES */
/* Description: Amount of bytes for the required entropy bits */

/* Bits 31..0 : Amount of bytes for the required entropy bits */
#define FICR_TRNG90B_BYTES_BYTES_Pos (0UL) /*!< Position of BYTES field. */
#define FICR_TRNG90B_BYTES_BYTES_Msk (0xFFFFFFFFUL << FICR_TRNG90B_BYTES_BYTES_Pos) /*!< Bit mask of BYTES field. */

/* Register: FICR_TRNG90B_RCCUTOFF */
/* Description: Repetition counter cutoff */

/* Bits 31..0 : Repetition counter cutoff */
#define FICR_TRNG90B_RCCUTOFF_RCCUTOFF_Pos (0UL) /*!< Position of RCCUTOFF field. */
#define FICR_TRNG90B_RCCUTOFF_RCCUTOFF_Msk (0xFFFFFFFFUL << FICR_TRNG90B_RCCUTOFF_RCCUTOFF_Pos) /*!< Bit mask of RCCUTOFF field. */

/* Register: FICR_TRNG90B_APCUTOFF */
/* Description: Adaptive proportion cutoff */

/* Bits 31..0 : Adaptive proportion cutoff */
#define FICR_TRNG90B_APCUTOFF_APCUTOFF_Pos (0UL) /*!< Position of APCUTOFF field. */
#define FICR_TRNG90B_APCUTOFF_APCUTOFF_Msk (0xFFFFFFFFUL << FICR_TRNG90B_APCUTOFF_APCUTOFF_Pos) /*!< Bit mask of APCUTOFF field. */

/* Register: FICR_TRNG90B_STARTUP */
/* Description: Amount of bytes for the startup tests */

/* Bits 31..0 : Amount of bytes for the startup tests */
#define FICR_TRNG90B_STARTUP_STARTUP_Pos (0UL) /*!< Position of STARTUP field. */
#define FICR_TRNG90B_STARTUP_STARTUP_Msk (0xFFFFFFFFUL << FICR_TRNG90B_STARTUP_STARTUP_Pos) /*!< Bit mask of STARTUP field. */

/* Register: FICR_TRNG90B_ROSC1 */
/* Description: Sample count for ring oscillator 1 */

/* Bits 31..0 : Sample count for ring oscillator 1 */
#define FICR_TRNG90B_ROSC1_ROSC1_Pos (0UL) /*!< Position of ROSC1 field. */
#define FICR_TRNG90B_ROSC1_ROSC1_Msk (0xFFFFFFFFUL << FICR_TRNG90B_ROSC1_ROSC1_Pos) /*!< Bit mask of ROSC1 field. */

/* Register: FICR_TRNG90B_ROSC2 */
/* Description: Sample count for ring oscillator 2 */

/* Bits 31..0 : Sample count for ring oscillator 2 */
#define FICR_TRNG90B_ROSC2_ROSC2_Pos (0UL) /*!< Position of ROSC2 field. */
#define FICR_TRNG90B_ROSC2_ROSC2_Msk (0xFFFFFFFFUL << FICR_TRNG90B_ROSC2_ROSC2_Pos) /*!< Bit mask of ROSC2 field. */

/* Register: FICR_TRNG90B_ROSC3 */
/* Description: Sample count for ring oscillator 3 */

/* Bits 31..0 : Sample count for ring oscillator 3 */
#define FICR_TRNG90B_ROSC3_ROSC3_Pos (0UL) /*!< Position of ROSC3 field. */
#define FICR_TRNG90B_ROSC3_ROSC3_Msk (0xFFFFFFFFUL << FICR_TRNG90B_ROSC3_ROSC3_Pos) /*!< Bit mask of ROSC3 field. */

/* Register: FICR_TRNG90B_ROSC4 */
/* Description: Sample count for ring oscillator 4 */

/* Bits 31..0 : Sample count for ring oscillator 4 */
#define FICR_TRNG90B_ROSC4_ROSC4_Pos (0UL) /*!< Position of ROSC4 field. */
#define FICR_TRNG90B_ROSC4_ROSC4_Msk (0xFFFFFFFFUL << FICR_TRNG90B_ROSC4_ROSC4_Pos) /*!< Bit mask of ROSC4 field. */

/* Register: FICR_XOSC32MTRIM */
/* Description: XOSC32M capacitor selection trim values */

/* Bits 9..5 : Offset trim factor on integer form */
#define FICR_XOSC32MTRIM_OFFSET_Pos (5UL) /*!< Position of OFFSET field. */
#define FICR_XOSC32MTRIM_OFFSET_Msk (0x1FUL << FICR_XOSC32MTRIM_OFFSET_Pos) /*!< Bit mask of OFFSET field. */

/* Bits 4..0 : Slope trim factor on twos complement form */
#define FICR_XOSC32MTRIM_SLOPE_Pos (0UL) /*!< Position of SLOPE field. */
#define FICR_XOSC32MTRIM_SLOPE_Msk (0x1FUL << FICR_XOSC32MTRIM_SLOPE_Pos) /*!< Bit mask of SLOPE field. */


/* Peripheral: FPU */
/* Description: FPU control peripheral 0 */

/* Register: FPU_EVENTS_INVALIDOPERATION */
/* Description: An FPUIOC exception triggered by an invalid operation has occurred in the FPU */

/* Bit 0 : An FPUIOC exception triggered by an invalid operation has occurred in the FPU */
#define FPU_EVENTS_INVALIDOPERATION_EVENTS_INVALIDOPERATION_Pos (0UL) /*!< Position of EVENTS_INVALIDOPERATION field. */
#define FPU_EVENTS_INVALIDOPERATION_EVENTS_INVALIDOPERATION_Msk (0x1UL << FPU_EVENTS_INVALIDOPERATION_EVENTS_INVALIDOPERATION_Pos) /*!< Bit mask of EVENTS_INVALIDOPERATION field. */
#define FPU_EVENTS_INVALIDOPERATION_EVENTS_INVALIDOPERATION_NotGenerated (0UL) /*!< Event not generated */
#define FPU_EVENTS_INVALIDOPERATION_EVENTS_INVALIDOPERATION_Generated (1UL) /*!< Event generated */

/* Register: FPU_EVENTS_DIVIDEBYZERO */
/* Description: An FPUDZC exception triggered by a floating-point divide-by-zero operation has occurred in the FPU */

/* Bit 0 : An FPUDZC exception triggered by a floating-point divide-by-zero operation has occurred in the FPU */
#define FPU_EVENTS_DIVIDEBYZERO_EVENTS_DIVIDEBYZERO_Pos (0UL) /*!< Position of EVENTS_DIVIDEBYZERO field. */
#define FPU_EVENTS_DIVIDEBYZERO_EVENTS_DIVIDEBYZERO_Msk (0x1UL << FPU_EVENTS_DIVIDEBYZERO_EVENTS_DIVIDEBYZERO_Pos) /*!< Bit mask of EVENTS_DIVIDEBYZERO field. */
#define FPU_EVENTS_DIVIDEBYZERO_EVENTS_DIVIDEBYZERO_NotGenerated (0UL) /*!< Event not generated */
#define FPU_EVENTS_DIVIDEBYZERO_EVENTS_DIVIDEBYZERO_Generated (1UL) /*!< Event generated */

/* Register: FPU_EVENTS_OVERFLOW */
/* Description: An FPUOFC exception triggered by a floating-point overflow has occurred in the FPU */

/* Bit 0 : An FPUOFC exception triggered by a floating-point overflow has occurred in the FPU */
#define FPU_EVENTS_OVERFLOW_EVENTS_OVERFLOW_Pos (0UL) /*!< Position of EVENTS_OVERFLOW field. */
#define FPU_EVENTS_OVERFLOW_EVENTS_OVERFLOW_Msk (0x1UL << FPU_EVENTS_OVERFLOW_EVENTS_OVERFLOW_Pos) /*!< Bit mask of EVENTS_OVERFLOW field. */
#define FPU_EVENTS_OVERFLOW_EVENTS_OVERFLOW_NotGenerated (0UL) /*!< Event not generated */
#define FPU_EVENTS_OVERFLOW_EVENTS_OVERFLOW_Generated (1UL) /*!< Event generated */

/* Register: FPU_EVENTS_UNDERFLOW */
/* Description: An FPUUFC exception triggered by a floating-point underflow has occurred in the FPU */

/* Bit 0 : An FPUUFC exception triggered by a floating-point underflow has occurred in the FPU */
#define FPU_EVENTS_UNDERFLOW_EVENTS_UNDERFLOW_Pos (0UL) /*!< Position of EVENTS_UNDERFLOW field. */
#define FPU_EVENTS_UNDERFLOW_EVENTS_UNDERFLOW_Msk (0x1UL << FPU_EVENTS_UNDERFLOW_EVENTS_UNDERFLOW_Pos) /*!< Bit mask of EVENTS_UNDERFLOW field. */
#define FPU_EVENTS_UNDERFLOW_EVENTS_UNDERFLOW_NotGenerated (0UL) /*!< Event not generated */
#define FPU_EVENTS_UNDERFLOW_EVENTS_UNDERFLOW_Generated (1UL) /*!< Event generated */

/* Register: FPU_EVENTS_INEXACT */
/* Description: An FPUIXC exception triggered by an inexact floating-point operation has occurred in the FPU */

/* Bit 0 : An FPUIXC exception triggered by an inexact floating-point operation has occurred in the FPU */
#define FPU_EVENTS_INEXACT_EVENTS_INEXACT_Pos (0UL) /*!< Position of EVENTS_INEXACT field. */
#define FPU_EVENTS_INEXACT_EVENTS_INEXACT_Msk (0x1UL << FPU_EVENTS_INEXACT_EVENTS_INEXACT_Pos) /*!< Bit mask of EVENTS_INEXACT field. */
#define FPU_EVENTS_INEXACT_EVENTS_INEXACT_NotGenerated (0UL) /*!< Event not generated */
#define FPU_EVENTS_INEXACT_EVENTS_INEXACT_Generated (1UL) /*!< Event generated */

/* Register: FPU_EVENTS_DENORMALINPUT */
/* Description: An FPUIDC exception triggered by a denormal floating-point input has occurred in the FPU */

/* Bit 0 : An FPUIDC exception triggered by a denormal floating-point input has occurred in the FPU */
#define FPU_EVENTS_DENORMALINPUT_EVENTS_DENORMALINPUT_Pos (0UL) /*!< Position of EVENTS_DENORMALINPUT field. */
#define FPU_EVENTS_DENORMALINPUT_EVENTS_DENORMALINPUT_Msk (0x1UL << FPU_EVENTS_DENORMALINPUT_EVENTS_DENORMALINPUT_Pos) /*!< Bit mask of EVENTS_DENORMALINPUT field. */
#define FPU_EVENTS_DENORMALINPUT_EVENTS_DENORMALINPUT_NotGenerated (0UL) /*!< Event not generated */
#define FPU_EVENTS_DENORMALINPUT_EVENTS_DENORMALINPUT_Generated (1UL) /*!< Event generated */

/* Register: FPU_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 5 : Enable or disable interrupt for event DENORMALINPUT */
#define FPU_INTEN_DENORMALINPUT_Pos (5UL) /*!< Position of DENORMALINPUT field. */
#define FPU_INTEN_DENORMALINPUT_Msk (0x1UL << FPU_INTEN_DENORMALINPUT_Pos) /*!< Bit mask of DENORMALINPUT field. */
#define FPU_INTEN_DENORMALINPUT_Disabled (0UL) /*!< Disable */
#define FPU_INTEN_DENORMALINPUT_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event INEXACT */
#define FPU_INTEN_INEXACT_Pos (4UL) /*!< Position of INEXACT field. */
#define FPU_INTEN_INEXACT_Msk (0x1UL << FPU_INTEN_INEXACT_Pos) /*!< Bit mask of INEXACT field. */
#define FPU_INTEN_INEXACT_Disabled (0UL) /*!< Disable */
#define FPU_INTEN_INEXACT_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event UNDERFLOW */
#define FPU_INTEN_UNDERFLOW_Pos (3UL) /*!< Position of UNDERFLOW field. */
#define FPU_INTEN_UNDERFLOW_Msk (0x1UL << FPU_INTEN_UNDERFLOW_Pos) /*!< Bit mask of UNDERFLOW field. */
#define FPU_INTEN_UNDERFLOW_Disabled (0UL) /*!< Disable */
#define FPU_INTEN_UNDERFLOW_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event OVERFLOW */
#define FPU_INTEN_OVERFLOW_Pos (2UL) /*!< Position of OVERFLOW field. */
#define FPU_INTEN_OVERFLOW_Msk (0x1UL << FPU_INTEN_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field. */
#define FPU_INTEN_OVERFLOW_Disabled (0UL) /*!< Disable */
#define FPU_INTEN_OVERFLOW_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event DIVIDEBYZERO */
#define FPU_INTEN_DIVIDEBYZERO_Pos (1UL) /*!< Position of DIVIDEBYZERO field. */
#define FPU_INTEN_DIVIDEBYZERO_Msk (0x1UL << FPU_INTEN_DIVIDEBYZERO_Pos) /*!< Bit mask of DIVIDEBYZERO field. */
#define FPU_INTEN_DIVIDEBYZERO_Disabled (0UL) /*!< Disable */
#define FPU_INTEN_DIVIDEBYZERO_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event INVALIDOPERATION */
#define FPU_INTEN_INVALIDOPERATION_Pos (0UL) /*!< Position of INVALIDOPERATION field. */
#define FPU_INTEN_INVALIDOPERATION_Msk (0x1UL << FPU_INTEN_INVALIDOPERATION_Pos) /*!< Bit mask of INVALIDOPERATION field. */
#define FPU_INTEN_INVALIDOPERATION_Disabled (0UL) /*!< Disable */
#define FPU_INTEN_INVALIDOPERATION_Enabled (1UL) /*!< Enable */

/* Register: FPU_INTENSET */
/* Description: Enable interrupt */

/* Bit 5 : Write '1' to enable interrupt for event DENORMALINPUT */
#define FPU_INTENSET_DENORMALINPUT_Pos (5UL) /*!< Position of DENORMALINPUT field. */
#define FPU_INTENSET_DENORMALINPUT_Msk (0x1UL << FPU_INTENSET_DENORMALINPUT_Pos) /*!< Bit mask of DENORMALINPUT field. */
#define FPU_INTENSET_DENORMALINPUT_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENSET_DENORMALINPUT_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENSET_DENORMALINPUT_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event INEXACT */
#define FPU_INTENSET_INEXACT_Pos (4UL) /*!< Position of INEXACT field. */
#define FPU_INTENSET_INEXACT_Msk (0x1UL << FPU_INTENSET_INEXACT_Pos) /*!< Bit mask of INEXACT field. */
#define FPU_INTENSET_INEXACT_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENSET_INEXACT_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENSET_INEXACT_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event UNDERFLOW */
#define FPU_INTENSET_UNDERFLOW_Pos (3UL) /*!< Position of UNDERFLOW field. */
#define FPU_INTENSET_UNDERFLOW_Msk (0x1UL << FPU_INTENSET_UNDERFLOW_Pos) /*!< Bit mask of UNDERFLOW field. */
#define FPU_INTENSET_UNDERFLOW_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENSET_UNDERFLOW_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENSET_UNDERFLOW_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event OVERFLOW */
#define FPU_INTENSET_OVERFLOW_Pos (2UL) /*!< Position of OVERFLOW field. */
#define FPU_INTENSET_OVERFLOW_Msk (0x1UL << FPU_INTENSET_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field. */
#define FPU_INTENSET_OVERFLOW_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENSET_OVERFLOW_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENSET_OVERFLOW_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event DIVIDEBYZERO */
#define FPU_INTENSET_DIVIDEBYZERO_Pos (1UL) /*!< Position of DIVIDEBYZERO field. */
#define FPU_INTENSET_DIVIDEBYZERO_Msk (0x1UL << FPU_INTENSET_DIVIDEBYZERO_Pos) /*!< Bit mask of DIVIDEBYZERO field. */
#define FPU_INTENSET_DIVIDEBYZERO_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENSET_DIVIDEBYZERO_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENSET_DIVIDEBYZERO_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event INVALIDOPERATION */
#define FPU_INTENSET_INVALIDOPERATION_Pos (0UL) /*!< Position of INVALIDOPERATION field. */
#define FPU_INTENSET_INVALIDOPERATION_Msk (0x1UL << FPU_INTENSET_INVALIDOPERATION_Pos) /*!< Bit mask of INVALIDOPERATION field. */
#define FPU_INTENSET_INVALIDOPERATION_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENSET_INVALIDOPERATION_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENSET_INVALIDOPERATION_Set (1UL) /*!< Enable */

/* Register: FPU_INTENCLR */
/* Description: Disable interrupt */

/* Bit 5 : Write '1' to disable interrupt for event DENORMALINPUT */
#define FPU_INTENCLR_DENORMALINPUT_Pos (5UL) /*!< Position of DENORMALINPUT field. */
#define FPU_INTENCLR_DENORMALINPUT_Msk (0x1UL << FPU_INTENCLR_DENORMALINPUT_Pos) /*!< Bit mask of DENORMALINPUT field. */
#define FPU_INTENCLR_DENORMALINPUT_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENCLR_DENORMALINPUT_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENCLR_DENORMALINPUT_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event INEXACT */
#define FPU_INTENCLR_INEXACT_Pos (4UL) /*!< Position of INEXACT field. */
#define FPU_INTENCLR_INEXACT_Msk (0x1UL << FPU_INTENCLR_INEXACT_Pos) /*!< Bit mask of INEXACT field. */
#define FPU_INTENCLR_INEXACT_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENCLR_INEXACT_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENCLR_INEXACT_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event UNDERFLOW */
#define FPU_INTENCLR_UNDERFLOW_Pos (3UL) /*!< Position of UNDERFLOW field. */
#define FPU_INTENCLR_UNDERFLOW_Msk (0x1UL << FPU_INTENCLR_UNDERFLOW_Pos) /*!< Bit mask of UNDERFLOW field. */
#define FPU_INTENCLR_UNDERFLOW_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENCLR_UNDERFLOW_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENCLR_UNDERFLOW_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event OVERFLOW */
#define FPU_INTENCLR_OVERFLOW_Pos (2UL) /*!< Position of OVERFLOW field. */
#define FPU_INTENCLR_OVERFLOW_Msk (0x1UL << FPU_INTENCLR_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field. */
#define FPU_INTENCLR_OVERFLOW_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENCLR_OVERFLOW_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENCLR_OVERFLOW_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event DIVIDEBYZERO */
#define FPU_INTENCLR_DIVIDEBYZERO_Pos (1UL) /*!< Position of DIVIDEBYZERO field. */
#define FPU_INTENCLR_DIVIDEBYZERO_Msk (0x1UL << FPU_INTENCLR_DIVIDEBYZERO_Pos) /*!< Bit mask of DIVIDEBYZERO field. */
#define FPU_INTENCLR_DIVIDEBYZERO_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENCLR_DIVIDEBYZERO_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENCLR_DIVIDEBYZERO_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event INVALIDOPERATION */
#define FPU_INTENCLR_INVALIDOPERATION_Pos (0UL) /*!< Position of INVALIDOPERATION field. */
#define FPU_INTENCLR_INVALIDOPERATION_Msk (0x1UL << FPU_INTENCLR_INVALIDOPERATION_Pos) /*!< Bit mask of INVALIDOPERATION field. */
#define FPU_INTENCLR_INVALIDOPERATION_Disabled (0UL) /*!< Read: Disabled */
#define FPU_INTENCLR_INVALIDOPERATION_Enabled (1UL) /*!< Read: Enabled */
#define FPU_INTENCLR_INVALIDOPERATION_Clear (1UL) /*!< Disable */


/* Peripheral: PCGCSLAVE */
/* Description: PCGCSlave 0 */

/* Register: PCGCSLAVE_TRIGZEROPENALTY */
/* Description: Trigger zero penalty */

/* Bit 0 : TRIGGER */
#define PCGCSLAVE_TRIGZEROPENALTY_TRIGGER_Pos (0UL) /*!< Position of TRIGGER field. */
#define PCGCSLAVE_TRIGZEROPENALTY_TRIGGER_Msk (0x1UL << PCGCSLAVE_TRIGZEROPENALTY_TRIGGER_Pos) /*!< Bit mask of TRIGGER field. */
#define PCGCSLAVE_TRIGZEROPENALTY_TRIGGER_Enable (1UL) /*!< Trigger zero penalty */

/* Register: PCGCSLAVE_TRIGFULLPENALTY */
/* Description: Trigger full penalty */

/* Bit 0 : TRIGGER */
#define PCGCSLAVE_TRIGFULLPENALTY_TRIGGER_Pos (0UL) /*!< Position of TRIGGER field. */
#define PCGCSLAVE_TRIGFULLPENALTY_TRIGGER_Msk (0x1UL << PCGCSLAVE_TRIGFULLPENALTY_TRIGGER_Pos) /*!< Bit mask of TRIGGER field. */
#define PCGCSLAVE_TRIGFULLPENALTY_TRIGGER_Enable (1UL) /*!< Trigger full penalty */

/* Register: PCGCSLAVE_PENALTY */
/* Description: Description collection: Penalty level for power/clock pair n */

/* Bits 7..0 : Penalty level */
#define PCGCSLAVE_PENALTY_PENALTY_Pos (0UL) /*!< Position of PENALTY field. */
#define PCGCSLAVE_PENALTY_PENALTY_Msk (0xFFUL << PCGCSLAVE_PENALTY_PENALTY_Pos) /*!< Bit mask of PENALTY field. */

/* Register: PCGCSLAVE_FORCEOVERRIDE */
/* Description: Description collection: Force override of power/clock pair n */

/* Bit 15 : DOFORCEPOWERPRE */
#define PCGCSLAVE_FORCEOVERRIDE_DOFORCEPOWERPRE_Pos (15UL) /*!< Position of DOFORCEPOWERPRE field. */
#define PCGCSLAVE_FORCEOVERRIDE_DOFORCEPOWERPRE_Msk (0x1UL << PCGCSLAVE_FORCEOVERRIDE_DOFORCEPOWERPRE_Pos) /*!< Bit mask of DOFORCEPOWERPRE field. */

/* Bits 9..8 : POWERFORCINGPRE */
#define PCGCSLAVE_FORCEOVERRIDE_POWERFORCINGPRE_Pos (8UL) /*!< Position of POWERFORCINGPRE field. */
#define PCGCSLAVE_FORCEOVERRIDE_POWERFORCINGPRE_Msk (0x3UL << PCGCSLAVE_FORCEOVERRIDE_POWERFORCINGPRE_Pos) /*!< Bit mask of POWERFORCINGPRE field. */

/* Bit 7 : DOFORCECLOCKPRE */
#define PCGCSLAVE_FORCEOVERRIDE_DOFORCECLOCKPRE_Pos (7UL) /*!< Position of DOFORCECLOCKPRE field. */
#define PCGCSLAVE_FORCEOVERRIDE_DOFORCECLOCKPRE_Msk (0x1UL << PCGCSLAVE_FORCEOVERRIDE_DOFORCECLOCKPRE_Pos) /*!< Bit mask of DOFORCECLOCKPRE field. */

/* Bits 3..0 : CLOCKFORCINGPRE */
#define PCGCSLAVE_FORCEOVERRIDE_CLOCKFORCINGPRE_Pos (0UL) /*!< Position of CLOCKFORCINGPRE field. */
#define PCGCSLAVE_FORCEOVERRIDE_CLOCKFORCINGPRE_Msk (0xFUL << PCGCSLAVE_FORCEOVERRIDE_CLOCKFORCINGPRE_Pos) /*!< Bit mask of CLOCKFORCINGPRE field. */


/* Peripheral: GPIOSTATIC */
/* Description: GPIO Static 0 */

/* Register: GPIOSTATIC_LATCHCLRWAITCNT */
/* Description: Select the number of wait cycles inserted on the bus when a LATCH register is cleared. Note: this register is only accessible from secure code. */

/* Bits 1..0 : Select the number of wait cycles inserted on the bus when a LATCH register is cleared. */
#define GPIOSTATIC_LATCHCLRWAITCNT_LATCHCLRWAITCNT_Pos (0UL) /*!< Position of LATCHCLRWAITCNT field. */
#define GPIOSTATIC_LATCHCLRWAITCNT_LATCHCLRWAITCNT_Msk (0x3UL << GPIOSTATIC_LATCHCLRWAITCNT_LATCHCLRWAITCNT_Pos) /*!< Bit mask of LATCHCLRWAITCNT field. */

/* Register: GPIOSTATIC_FORCELDETECTLOWCNT */
/* Description: Select the number of cycles that LDETECT is forced low after clearing a LATCH register. Note: this register is only accessible from secure code. */

/* Bits 3..0 : Select the number of cycles that LDETECT is forced low after clearing a LATCH register. */
#define GPIOSTATIC_FORCELDETECTLOWCNT_FORCELDETECTLOWCNT_Pos (0UL) /*!< Position of FORCELDETECTLOWCNT field. */
#define GPIOSTATIC_FORCELDETECTLOWCNT_FORCELDETECTLOWCNT_Msk (0xFUL << GPIOSTATIC_FORCELDETECTLOWCNT_FORCELDETECTLOWCNT_Pos) /*!< Bit mask of FORCELDETECTLOWCNT field. */

/* Register: GPIOSTATIC_RESET */
/* Description: Reset all GPIO registers. Note: this register is only accessible from secure code. */

/* Bit 0 : Reset all GPIO registers. */
#define GPIOSTATIC_RESET_RESET_Pos (0UL) /*!< Position of RESET field. */
#define GPIOSTATIC_RESET_RESET_Msk (0x1UL << GPIOSTATIC_RESET_RESET_Pos) /*!< Bit mask of RESET field. */
#define GPIOSTATIC_RESET_RESET_NA (0x0UL) /*!< No effect */
#define GPIOSTATIC_RESET_RESET_RESET (0x1UL) /*!< Trigger reset */

/* Register: GPIOSTATIC_SENSECONFIGCHANGECNT */
/* Description: Selects the number of cycles before the SENSE configuration takes effect when it is changed. Setting this register lower than the reset value can lead to unwanted LATCH set
        when SENSE and INPUT fields (PIN_CNF) are changed simultaneously. Note: this register is only accessible from secure code. */

/* Bits 2..0 : Selects the number of cycles before the SENSE configuration takes effect when it is changed. */
#define GPIOSTATIC_SENSECONFIGCHANGECNT_SENSECONFIGCHANGECNT_Pos (0UL) /*!< Position of SENSECONFIGCHANGECNT field. */
#define GPIOSTATIC_SENSECONFIGCHANGECNT_SENSECONFIGCHANGECNT_Msk (0x7UL << GPIOSTATIC_SENSECONFIGCHANGECNT_SENSECONFIGCHANGECNT_Pos) /*!< Bit mask of SENSECONFIGCHANGECNT field. */


/* Peripheral: GPIOTE */
/* Description: GPIO Tasks and Events 0 */

/* Register: GPIOTE_TASKS_OUT */
/* Description: Description collection: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is configured in CONFIG[n].POLARITY. */

/* Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is configured in CONFIG[n].POLARITY. */
#define GPIOTE_TASKS_OUT_TASKS_OUT_Pos (0UL) /*!< Position of TASKS_OUT field. */
#define GPIOTE_TASKS_OUT_TASKS_OUT_Msk (0x1UL << GPIOTE_TASKS_OUT_TASKS_OUT_Pos) /*!< Bit mask of TASKS_OUT field. */
#define GPIOTE_TASKS_OUT_TASKS_OUT_Trigger (1UL) /*!< Trigger task */

/* Register: GPIOTE_TASKS_SET */
/* Description: Description collection: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it high. */

/* Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it high. */
#define GPIOTE_TASKS_SET_TASKS_SET_Pos (0UL) /*!< Position of TASKS_SET field. */
#define GPIOTE_TASKS_SET_TASKS_SET_Msk (0x1UL << GPIOTE_TASKS_SET_TASKS_SET_Pos) /*!< Bit mask of TASKS_SET field. */
#define GPIOTE_TASKS_SET_TASKS_SET_Trigger (1UL) /*!< Trigger task */

/* Register: GPIOTE_TASKS_CLR */
/* Description: Description collection: Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it low. */

/* Bit 0 : Task for writing to pin specified in CONFIG[n].PSEL. Action on pin is to set it low. */
#define GPIOTE_TASKS_CLR_TASKS_CLR_Pos (0UL) /*!< Position of TASKS_CLR field. */
#define GPIOTE_TASKS_CLR_TASKS_CLR_Msk (0x1UL << GPIOTE_TASKS_CLR_TASKS_CLR_Pos) /*!< Bit mask of TASKS_CLR field. */
#define GPIOTE_TASKS_CLR_TASKS_CLR_Trigger (1UL) /*!< Trigger task */

/* Register: GPIOTE_SUBSCRIBE_OUT */
/* Description: Description collection: Subscribe configuration for task OUT[n] */

/* Bit 31 :   */
#define GPIOTE_SUBSCRIBE_OUT_EN_Pos (31UL) /*!< Position of EN field. */
#define GPIOTE_SUBSCRIBE_OUT_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_OUT_EN_Pos) /*!< Bit mask of EN field. */
#define GPIOTE_SUBSCRIBE_OUT_EN_Disabled (0UL) /*!< Disable subscription */
#define GPIOTE_SUBSCRIBE_OUT_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task OUT[n] will subscribe to */
#define GPIOTE_SUBSCRIBE_OUT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define GPIOTE_SUBSCRIBE_OUT_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_OUT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: GPIOTE_SUBSCRIBE_SET */
/* Description: Description collection: Subscribe configuration for task SET[n] */

/* Bit 31 :   */
#define GPIOTE_SUBSCRIBE_SET_EN_Pos (31UL) /*!< Position of EN field. */
#define GPIOTE_SUBSCRIBE_SET_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_SET_EN_Pos) /*!< Bit mask of EN field. */
#define GPIOTE_SUBSCRIBE_SET_EN_Disabled (0UL) /*!< Disable subscription */
#define GPIOTE_SUBSCRIBE_SET_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SET[n] will subscribe to */
#define GPIOTE_SUBSCRIBE_SET_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define GPIOTE_SUBSCRIBE_SET_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_SET_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: GPIOTE_SUBSCRIBE_CLR */
/* Description: Description collection: Subscribe configuration for task CLR[n] */

/* Bit 31 :   */
#define GPIOTE_SUBSCRIBE_CLR_EN_Pos (31UL) /*!< Position of EN field. */
#define GPIOTE_SUBSCRIBE_CLR_EN_Msk (0x1UL << GPIOTE_SUBSCRIBE_CLR_EN_Pos) /*!< Bit mask of EN field. */
#define GPIOTE_SUBSCRIBE_CLR_EN_Disabled (0UL) /*!< Disable subscription */
#define GPIOTE_SUBSCRIBE_CLR_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CLR[n] will subscribe to */
#define GPIOTE_SUBSCRIBE_CLR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define GPIOTE_SUBSCRIBE_CLR_CHIDX_Msk (0xFFUL << GPIOTE_SUBSCRIBE_CLR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: GPIOTE_EVENTS_IN */
/* Description: Description collection: Event generated from pin specified in CONFIG[n].PSEL */

/* Bit 0 : Event generated from pin specified in CONFIG[n].PSEL */
#define GPIOTE_EVENTS_IN_EVENTS_IN_Pos (0UL) /*!< Position of EVENTS_IN field. */
#define GPIOTE_EVENTS_IN_EVENTS_IN_Msk (0x1UL << GPIOTE_EVENTS_IN_EVENTS_IN_Pos) /*!< Bit mask of EVENTS_IN field. */
#define GPIOTE_EVENTS_IN_EVENTS_IN_NotGenerated (0UL) /*!< Event not generated */
#define GPIOTE_EVENTS_IN_EVENTS_IN_Generated (1UL) /*!< Event generated */

/* Register: GPIOTE_EVENTS_PORT */
/* Description: Event generated from multiple input GPIO pins with SENSE mechanism enabled */

/* Bit 0 : Event generated from multiple input GPIO pins with SENSE mechanism enabled */
#define GPIOTE_EVENTS_PORT_EVENTS_PORT_Pos (0UL) /*!< Position of EVENTS_PORT field. */
#define GPIOTE_EVENTS_PORT_EVENTS_PORT_Msk (0x1UL << GPIOTE_EVENTS_PORT_EVENTS_PORT_Pos) /*!< Bit mask of EVENTS_PORT field. */
#define GPIOTE_EVENTS_PORT_EVENTS_PORT_NotGenerated (0UL) /*!< Event not generated */
#define GPIOTE_EVENTS_PORT_EVENTS_PORT_Generated (1UL) /*!< Event generated */

/* Register: GPIOTE_PUBLISH_IN */
/* Description: Description collection: Publish configuration for event IN[n] */

/* Bit 31 :   */
#define GPIOTE_PUBLISH_IN_EN_Pos (31UL) /*!< Position of EN field. */
#define GPIOTE_PUBLISH_IN_EN_Msk (0x1UL << GPIOTE_PUBLISH_IN_EN_Pos) /*!< Bit mask of EN field. */
#define GPIOTE_PUBLISH_IN_EN_Disabled (0UL) /*!< Disable publishing */
#define GPIOTE_PUBLISH_IN_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event IN[n] will publish to. */
#define GPIOTE_PUBLISH_IN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define GPIOTE_PUBLISH_IN_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_IN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: GPIOTE_PUBLISH_PORT */
/* Description: Publish configuration for event PORT */

/* Bit 31 :   */
#define GPIOTE_PUBLISH_PORT_EN_Pos (31UL) /*!< Position of EN field. */
#define GPIOTE_PUBLISH_PORT_EN_Msk (0x1UL << GPIOTE_PUBLISH_PORT_EN_Pos) /*!< Bit mask of EN field. */
#define GPIOTE_PUBLISH_PORT_EN_Disabled (0UL) /*!< Disable publishing */
#define GPIOTE_PUBLISH_PORT_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event PORT will publish to. */
#define GPIOTE_PUBLISH_PORT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define GPIOTE_PUBLISH_PORT_CHIDX_Msk (0xFFUL << GPIOTE_PUBLISH_PORT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: GPIOTE_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 31 : Enable or disable interrupt for event PORT */
#define GPIOTE_INTEN_PORT_Pos (31UL) /*!< Position of PORT field. */
#define GPIOTE_INTEN_PORT_Msk (0x1UL << GPIOTE_INTEN_PORT_Pos) /*!< Bit mask of PORT field. */
#define GPIOTE_INTEN_PORT_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_PORT_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event IN[7] */
#define GPIOTE_INTEN_IN7_Pos (7UL) /*!< Position of IN7 field. */
#define GPIOTE_INTEN_IN7_Msk (0x1UL << GPIOTE_INTEN_IN7_Pos) /*!< Bit mask of IN7 field. */
#define GPIOTE_INTEN_IN7_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_IN7_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event IN[6] */
#define GPIOTE_INTEN_IN6_Pos (6UL) /*!< Position of IN6 field. */
#define GPIOTE_INTEN_IN6_Msk (0x1UL << GPIOTE_INTEN_IN6_Pos) /*!< Bit mask of IN6 field. */
#define GPIOTE_INTEN_IN6_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_IN6_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event IN[5] */
#define GPIOTE_INTEN_IN5_Pos (5UL) /*!< Position of IN5 field. */
#define GPIOTE_INTEN_IN5_Msk (0x1UL << GPIOTE_INTEN_IN5_Pos) /*!< Bit mask of IN5 field. */
#define GPIOTE_INTEN_IN5_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_IN5_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event IN[4] */
#define GPIOTE_INTEN_IN4_Pos (4UL) /*!< Position of IN4 field. */
#define GPIOTE_INTEN_IN4_Msk (0x1UL << GPIOTE_INTEN_IN4_Pos) /*!< Bit mask of IN4 field. */
#define GPIOTE_INTEN_IN4_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_IN4_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event IN[3] */
#define GPIOTE_INTEN_IN3_Pos (3UL) /*!< Position of IN3 field. */
#define GPIOTE_INTEN_IN3_Msk (0x1UL << GPIOTE_INTEN_IN3_Pos) /*!< Bit mask of IN3 field. */
#define GPIOTE_INTEN_IN3_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_IN3_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event IN[2] */
#define GPIOTE_INTEN_IN2_Pos (2UL) /*!< Position of IN2 field. */
#define GPIOTE_INTEN_IN2_Msk (0x1UL << GPIOTE_INTEN_IN2_Pos) /*!< Bit mask of IN2 field. */
#define GPIOTE_INTEN_IN2_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_IN2_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event IN[1] */
#define GPIOTE_INTEN_IN1_Pos (1UL) /*!< Position of IN1 field. */
#define GPIOTE_INTEN_IN1_Msk (0x1UL << GPIOTE_INTEN_IN1_Pos) /*!< Bit mask of IN1 field. */
#define GPIOTE_INTEN_IN1_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_IN1_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event IN[0] */
#define GPIOTE_INTEN_IN0_Pos (0UL) /*!< Position of IN0 field. */
#define GPIOTE_INTEN_IN0_Msk (0x1UL << GPIOTE_INTEN_IN0_Pos) /*!< Bit mask of IN0 field. */
#define GPIOTE_INTEN_IN0_Disabled (0UL) /*!< Disable */
#define GPIOTE_INTEN_IN0_Enabled (1UL) /*!< Enable */

/* Register: GPIOTE_INTENSET */
/* Description: Enable interrupt */

/* Bit 31 : Write '1' to enable interrupt for event PORT */
#define GPIOTE_INTENSET_PORT_Pos (31UL) /*!< Position of PORT field. */
#define GPIOTE_INTENSET_PORT_Msk (0x1UL << GPIOTE_INTENSET_PORT_Pos) /*!< Bit mask of PORT field. */
#define GPIOTE_INTENSET_PORT_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_PORT_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_PORT_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event IN[7] */
#define GPIOTE_INTENSET_IN7_Pos (7UL) /*!< Position of IN7 field. */
#define GPIOTE_INTENSET_IN7_Msk (0x1UL << GPIOTE_INTENSET_IN7_Pos) /*!< Bit mask of IN7 field. */
#define GPIOTE_INTENSET_IN7_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_IN7_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_IN7_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event IN[6] */
#define GPIOTE_INTENSET_IN6_Pos (6UL) /*!< Position of IN6 field. */
#define GPIOTE_INTENSET_IN6_Msk (0x1UL << GPIOTE_INTENSET_IN6_Pos) /*!< Bit mask of IN6 field. */
#define GPIOTE_INTENSET_IN6_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_IN6_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_IN6_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event IN[5] */
#define GPIOTE_INTENSET_IN5_Pos (5UL) /*!< Position of IN5 field. */
#define GPIOTE_INTENSET_IN5_Msk (0x1UL << GPIOTE_INTENSET_IN5_Pos) /*!< Bit mask of IN5 field. */
#define GPIOTE_INTENSET_IN5_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_IN5_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_IN5_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event IN[4] */
#define GPIOTE_INTENSET_IN4_Pos (4UL) /*!< Position of IN4 field. */
#define GPIOTE_INTENSET_IN4_Msk (0x1UL << GPIOTE_INTENSET_IN4_Pos) /*!< Bit mask of IN4 field. */
#define GPIOTE_INTENSET_IN4_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_IN4_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_IN4_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event IN[3] */
#define GPIOTE_INTENSET_IN3_Pos (3UL) /*!< Position of IN3 field. */
#define GPIOTE_INTENSET_IN3_Msk (0x1UL << GPIOTE_INTENSET_IN3_Pos) /*!< Bit mask of IN3 field. */
#define GPIOTE_INTENSET_IN3_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_IN3_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_IN3_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event IN[2] */
#define GPIOTE_INTENSET_IN2_Pos (2UL) /*!< Position of IN2 field. */
#define GPIOTE_INTENSET_IN2_Msk (0x1UL << GPIOTE_INTENSET_IN2_Pos) /*!< Bit mask of IN2 field. */
#define GPIOTE_INTENSET_IN2_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_IN2_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_IN2_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event IN[1] */
#define GPIOTE_INTENSET_IN1_Pos (1UL) /*!< Position of IN1 field. */
#define GPIOTE_INTENSET_IN1_Msk (0x1UL << GPIOTE_INTENSET_IN1_Pos) /*!< Bit mask of IN1 field. */
#define GPIOTE_INTENSET_IN1_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_IN1_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_IN1_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event IN[0] */
#define GPIOTE_INTENSET_IN0_Pos (0UL) /*!< Position of IN0 field. */
#define GPIOTE_INTENSET_IN0_Msk (0x1UL << GPIOTE_INTENSET_IN0_Pos) /*!< Bit mask of IN0 field. */
#define GPIOTE_INTENSET_IN0_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENSET_IN0_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENSET_IN0_Set (1UL) /*!< Enable */

/* Register: GPIOTE_INTENCLR */
/* Description: Disable interrupt */

/* Bit 31 : Write '1' to disable interrupt for event PORT */
#define GPIOTE_INTENCLR_PORT_Pos (31UL) /*!< Position of PORT field. */
#define GPIOTE_INTENCLR_PORT_Msk (0x1UL << GPIOTE_INTENCLR_PORT_Pos) /*!< Bit mask of PORT field. */
#define GPIOTE_INTENCLR_PORT_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_PORT_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_PORT_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event IN[7] */
#define GPIOTE_INTENCLR_IN7_Pos (7UL) /*!< Position of IN7 field. */
#define GPIOTE_INTENCLR_IN7_Msk (0x1UL << GPIOTE_INTENCLR_IN7_Pos) /*!< Bit mask of IN7 field. */
#define GPIOTE_INTENCLR_IN7_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_IN7_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_IN7_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event IN[6] */
#define GPIOTE_INTENCLR_IN6_Pos (6UL) /*!< Position of IN6 field. */
#define GPIOTE_INTENCLR_IN6_Msk (0x1UL << GPIOTE_INTENCLR_IN6_Pos) /*!< Bit mask of IN6 field. */
#define GPIOTE_INTENCLR_IN6_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_IN6_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_IN6_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event IN[5] */
#define GPIOTE_INTENCLR_IN5_Pos (5UL) /*!< Position of IN5 field. */
#define GPIOTE_INTENCLR_IN5_Msk (0x1UL << GPIOTE_INTENCLR_IN5_Pos) /*!< Bit mask of IN5 field. */
#define GPIOTE_INTENCLR_IN5_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_IN5_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_IN5_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event IN[4] */
#define GPIOTE_INTENCLR_IN4_Pos (4UL) /*!< Position of IN4 field. */
#define GPIOTE_INTENCLR_IN4_Msk (0x1UL << GPIOTE_INTENCLR_IN4_Pos) /*!< Bit mask of IN4 field. */
#define GPIOTE_INTENCLR_IN4_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_IN4_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_IN4_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event IN[3] */
#define GPIOTE_INTENCLR_IN3_Pos (3UL) /*!< Position of IN3 field. */
#define GPIOTE_INTENCLR_IN3_Msk (0x1UL << GPIOTE_INTENCLR_IN3_Pos) /*!< Bit mask of IN3 field. */
#define GPIOTE_INTENCLR_IN3_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_IN3_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_IN3_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event IN[2] */
#define GPIOTE_INTENCLR_IN2_Pos (2UL) /*!< Position of IN2 field. */
#define GPIOTE_INTENCLR_IN2_Msk (0x1UL << GPIOTE_INTENCLR_IN2_Pos) /*!< Bit mask of IN2 field. */
#define GPIOTE_INTENCLR_IN2_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_IN2_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_IN2_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event IN[1] */
#define GPIOTE_INTENCLR_IN1_Pos (1UL) /*!< Position of IN1 field. */
#define GPIOTE_INTENCLR_IN1_Msk (0x1UL << GPIOTE_INTENCLR_IN1_Pos) /*!< Bit mask of IN1 field. */
#define GPIOTE_INTENCLR_IN1_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_IN1_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_IN1_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event IN[0] */
#define GPIOTE_INTENCLR_IN0_Pos (0UL) /*!< Position of IN0 field. */
#define GPIOTE_INTENCLR_IN0_Msk (0x1UL << GPIOTE_INTENCLR_IN0_Pos) /*!< Bit mask of IN0 field. */
#define GPIOTE_INTENCLR_IN0_Disabled (0UL) /*!< Read: Disabled */
#define GPIOTE_INTENCLR_IN0_Enabled (1UL) /*!< Read: Enabled */
#define GPIOTE_INTENCLR_IN0_Clear (1UL) /*!< Disable */

/* Register: GPIOTE_LATENCY */
/* Description: Latency selection for Event mode (MODE=Event) with rising or falling edge detection on the pin. */

/* Bit 0 : Latency setting */
#define GPIOTE_LATENCY_LATENCY_Pos (0UL) /*!< Position of LATENCY field. */
#define GPIOTE_LATENCY_LATENCY_Msk (0x1UL << GPIOTE_LATENCY_LATENCY_Pos) /*!< Bit mask of LATENCY field. */
#define GPIOTE_LATENCY_LATENCY_LowPower (0UL) /*!< Low power setting, for signals with minimum hold time tGPIOTE,HOLD,LP; refer to Electrical specification section */
#define GPIOTE_LATENCY_LATENCY_LowLatency (1UL) /*!< Low latency setting, for signals with minimum hold time tGPIOTE,HOLD,LL; refer to Electrical specification section */

/* Register: GPIOTE_CONFIG */
/* Description: Description collection: Configuration for OUT[n], SET[n], and CLR[n] tasks and IN[n] event */

/* Bit 20 : When in task mode: Initial value of the output when the GPIOTE channel is configured. When in event mode: No effect. */
#define GPIOTE_CONFIG_OUTINIT_Pos (20UL) /*!< Position of OUTINIT field. */
#define GPIOTE_CONFIG_OUTINIT_Msk (0x1UL << GPIOTE_CONFIG_OUTINIT_Pos) /*!< Bit mask of OUTINIT field. */
#define GPIOTE_CONFIG_OUTINIT_Low (0UL) /*!< Task mode: Initial value of pin before task triggering is low */
#define GPIOTE_CONFIG_OUTINIT_High (1UL) /*!< Task mode: Initial value of pin before task triggering is high */

/* Bits 17..16 : When In task mode: Operation to be performed on output when OUT[n] task is triggered. When In event mode: Operation on input that shall trigger IN[n] event. */
#define GPIOTE_CONFIG_POLARITY_Pos (16UL) /*!< Position of POLARITY field. */
#define GPIOTE_CONFIG_POLARITY_Msk (0x3UL << GPIOTE_CONFIG_POLARITY_Pos) /*!< Bit mask of POLARITY field. */
#define GPIOTE_CONFIG_POLARITY_None (0UL) /*!< Task mode: No effect on pin from OUT[n] task. Event mode: no IN[n] event generated on pin activity. */
#define GPIOTE_CONFIG_POLARITY_LoToHi (1UL) /*!< Task mode: Set pin from OUT[n] task. Event mode: Generate IN[n] event when rising edge on pin. */
#define GPIOTE_CONFIG_POLARITY_HiToLo (2UL) /*!< Task mode: Clear pin from OUT[n] task. Event mode: Generate IN[n] event when falling edge on pin. */
#define GPIOTE_CONFIG_POLARITY_Toggle (3UL) /*!< Task mode: Toggle pin from OUT[n]. Event mode: Generate IN[n] when any change on pin. */

/* Bit 13 : Port number */
#define GPIOTE_CONFIG_PORT_Pos (13UL) /*!< Position of PORT field. */
#define GPIOTE_CONFIG_PORT_Msk (0x1UL << GPIOTE_CONFIG_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 12..8 : GPIO number associated with SET[n], CLR[n], and OUT[n] tasks and IN[n] event */
#define GPIOTE_CONFIG_PSEL_Pos (8UL) /*!< Position of PSEL field. */
#define GPIOTE_CONFIG_PSEL_Msk (0x1FUL << GPIOTE_CONFIG_PSEL_Pos) /*!< Bit mask of PSEL field. */

/* Bits 1..0 : Mode */
#define GPIOTE_CONFIG_MODE_Pos (0UL) /*!< Position of MODE field. */
#define GPIOTE_CONFIG_MODE_Msk (0x3UL << GPIOTE_CONFIG_MODE_Pos) /*!< Bit mask of MODE field. */
#define GPIOTE_CONFIG_MODE_Disabled (0UL) /*!< Disabled. Pin specified by PSEL will not be acquired by the GPIOTE module. */
#define GPIOTE_CONFIG_MODE_Event (1UL) /*!< Event mode */
#define GPIOTE_CONFIG_MODE_Task (3UL) /*!< Task mode */

/* Register: GPIOTE_DEBOUNCE */
/* Description: Description collection: Debounce mode for GPIOTE channel n */

/* Bit 0 : Mode */
#define GPIOTE_DEBOUNCE_MODE_Pos (0UL) /*!< Position of MODE field. */
#define GPIOTE_DEBOUNCE_MODE_Msk (0x1UL << GPIOTE_DEBOUNCE_MODE_Pos) /*!< Bit mask of MODE field. */
#define GPIOTE_DEBOUNCE_MODE_Mode0 (0UL) /*!< Mode 0: nRF52 debounce method */
#define GPIOTE_DEBOUNCE_MODE_Mode1 (1UL) /*!< Mode 1: nRF51 legacy debounce method */


/* Peripheral: I2S */
/* Description: Inter-IC Sound 0 */

/* Register: I2S_TASKS_START */
/* Description: Starts continuous I2S transfer. Also starts MCK generator when this is enabled */

/* Bit 0 : Starts continuous I2S transfer. Also starts MCK generator when this is enabled */
#define I2S_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define I2S_TASKS_START_TASKS_START_Msk (0x1UL << I2S_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define I2S_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: I2S_TASKS_STOP */
/* Description: Stops I2S transfer and MCK generator. Triggering this task will cause the event STOPPED to be generated. */

/* Bit 0 : Stops I2S transfer and MCK generator. Triggering this task will cause the event STOPPED to be generated. */
#define I2S_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define I2S_TASKS_STOP_TASKS_STOP_Msk (0x1UL << I2S_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define I2S_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: I2S_TASKS_DMA_START_TX */
/* Description: Equivalent to ID_DMA_CHANNEL_PERIPHERAL_TASK_TRIG_START_TX */

/* Bit 0 : Equivalent to ID_DMA_CHANNEL_PERIPHERAL_TASK_TRIG_START_TX */
#define I2S_TASKS_DMA_START_TX_TASKS_DMA_START_TX_Pos (0UL) /*!< Position of TASKS_DMA_START_TX field. */
#define I2S_TASKS_DMA_START_TX_TASKS_DMA_START_TX_Msk (0x1UL << I2S_TASKS_DMA_START_TX_TASKS_DMA_START_TX_Pos) /*!< Bit mask of TASKS_DMA_START_TX field. */
#define I2S_TASKS_DMA_START_TX_TASKS_DMA_START_TX_Trigger (1UL) /*!< Trigger task */

/* Register: I2S_TASKS_DMA_START_RX */
/* Description: Equivalent to ID_DMA_CHANNEL_PERIPHERAL_TASK_TRIG_START_RX */

/* Bit 0 : Equivalent to ID_DMA_CHANNEL_PERIPHERAL_TASK_TRIG_START_RX */
#define I2S_TASKS_DMA_START_RX_TASKS_DMA_START_RX_Pos (0UL) /*!< Position of TASKS_DMA_START_RX field. */
#define I2S_TASKS_DMA_START_RX_TASKS_DMA_START_RX_Msk (0x1UL << I2S_TASKS_DMA_START_RX_TASKS_DMA_START_RX_Pos) /*!< Bit mask of TASKS_DMA_START_RX field. */
#define I2S_TASKS_DMA_START_RX_TASKS_DMA_START_RX_Trigger (1UL) /*!< Trigger task */

/* Register: I2S_TASKS_DMA_STOP_TX */
/* Description: Equivalent to ID_DMA_CHANNEL_PERIPHERAL_TASK_TRIG_STOP_TX */

/* Bit 0 : Equivalent to ID_DMA_CHANNEL_PERIPHERAL_TASK_TRIG_STOP_TX */
#define I2S_TASKS_DMA_STOP_TX_TASKS_DMA_STOP_TX_Pos (0UL) /*!< Position of TASKS_DMA_STOP_TX field. */
#define I2S_TASKS_DMA_STOP_TX_TASKS_DMA_STOP_TX_Msk (0x1UL << I2S_TASKS_DMA_STOP_TX_TASKS_DMA_STOP_TX_Pos) /*!< Bit mask of TASKS_DMA_STOP_TX field. */
#define I2S_TASKS_DMA_STOP_TX_TASKS_DMA_STOP_TX_Trigger (1UL) /*!< Trigger task */

/* Register: I2S_TASKS_DMA_STOP_RX */
/* Description: Equivalent to ID_DMA_CHANNEL_PERIPHERAL_TASK_TRIG_STOP_RX */

/* Bit 0 : Equivalent to ID_DMA_CHANNEL_PERIPHERAL_TASK_TRIG_STOP_RX */
#define I2S_TASKS_DMA_STOP_RX_TASKS_DMA_STOP_RX_Pos (0UL) /*!< Position of TASKS_DMA_STOP_RX field. */
#define I2S_TASKS_DMA_STOP_RX_TASKS_DMA_STOP_RX_Msk (0x1UL << I2S_TASKS_DMA_STOP_RX_TASKS_DMA_STOP_RX_Pos) /*!< Bit mask of TASKS_DMA_STOP_RX field. */
#define I2S_TASKS_DMA_STOP_RX_TASKS_DMA_STOP_RX_Trigger (1UL) /*!< Trigger task */

/* Register: I2S_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define I2S_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_SUBSCRIBE_START_EN_Msk (0x1UL << I2S_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define I2S_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define I2S_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << I2S_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define I2S_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_SUBSCRIBE_STOP_EN_Msk (0x1UL << I2S_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define I2S_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define I2S_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << I2S_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_SUBSCRIBE_DMA_START_TX */
/* Description: Subscribe configuration for task DMA_START_TX */

/* Bit 31 :   */
#define I2S_SUBSCRIBE_DMA_START_TX_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_SUBSCRIBE_DMA_START_TX_EN_Msk (0x1UL << I2S_SUBSCRIBE_DMA_START_TX_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_SUBSCRIBE_DMA_START_TX_EN_Disabled (0UL) /*!< Disable subscription */
#define I2S_SUBSCRIBE_DMA_START_TX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DMA_START_TX will subscribe to */
#define I2S_SUBSCRIBE_DMA_START_TX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_SUBSCRIBE_DMA_START_TX_CHIDX_Msk (0xFFUL << I2S_SUBSCRIBE_DMA_START_TX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_SUBSCRIBE_DMA_START_RX */
/* Description: Subscribe configuration for task DMA_START_RX */

/* Bit 31 :   */
#define I2S_SUBSCRIBE_DMA_START_RX_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_SUBSCRIBE_DMA_START_RX_EN_Msk (0x1UL << I2S_SUBSCRIBE_DMA_START_RX_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_SUBSCRIBE_DMA_START_RX_EN_Disabled (0UL) /*!< Disable subscription */
#define I2S_SUBSCRIBE_DMA_START_RX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DMA_START_RX will subscribe to */
#define I2S_SUBSCRIBE_DMA_START_RX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_SUBSCRIBE_DMA_START_RX_CHIDX_Msk (0xFFUL << I2S_SUBSCRIBE_DMA_START_RX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_SUBSCRIBE_DMA_STOP_TX */
/* Description: Subscribe configuration for task DMA_STOP_TX */

/* Bit 31 :   */
#define I2S_SUBSCRIBE_DMA_STOP_TX_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_SUBSCRIBE_DMA_STOP_TX_EN_Msk (0x1UL << I2S_SUBSCRIBE_DMA_STOP_TX_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_SUBSCRIBE_DMA_STOP_TX_EN_Disabled (0UL) /*!< Disable subscription */
#define I2S_SUBSCRIBE_DMA_STOP_TX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DMA_STOP_TX will subscribe to */
#define I2S_SUBSCRIBE_DMA_STOP_TX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_SUBSCRIBE_DMA_STOP_TX_CHIDX_Msk (0xFFUL << I2S_SUBSCRIBE_DMA_STOP_TX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_SUBSCRIBE_DMA_STOP_RX */
/* Description: Subscribe configuration for task DMA_STOP_RX */

/* Bit 31 :   */
#define I2S_SUBSCRIBE_DMA_STOP_RX_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_SUBSCRIBE_DMA_STOP_RX_EN_Msk (0x1UL << I2S_SUBSCRIBE_DMA_STOP_RX_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_SUBSCRIBE_DMA_STOP_RX_EN_Disabled (0UL) /*!< Disable subscription */
#define I2S_SUBSCRIBE_DMA_STOP_RX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DMA_STOP_RX will subscribe to */
#define I2S_SUBSCRIBE_DMA_STOP_RX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_SUBSCRIBE_DMA_STOP_RX_CHIDX_Msk (0xFFUL << I2S_SUBSCRIBE_DMA_STOP_RX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_EVENTS_DMA_END_TX */
/* Description: Equivalent to eventDmaEndTx */

/* Bit 0 : Equivalent to eventDmaEndTx */
#define I2S_EVENTS_DMA_END_TX_EVENTS_DMA_END_TX_Pos (0UL) /*!< Position of EVENTS_DMA_END_TX field. */
#define I2S_EVENTS_DMA_END_TX_EVENTS_DMA_END_TX_Msk (0x1UL << I2S_EVENTS_DMA_END_TX_EVENTS_DMA_END_TX_Pos) /*!< Bit mask of EVENTS_DMA_END_TX field. */
#define I2S_EVENTS_DMA_END_TX_EVENTS_DMA_END_TX_NotGenerated (0UL) /*!< Event not generated */
#define I2S_EVENTS_DMA_END_TX_EVENTS_DMA_END_TX_Generated (1UL) /*!< Event generated */

/* Register: I2S_EVENTS_RXPTRUPD */
/* Description: The RXD.PTR register has been copied to internal double-buffers.
      When the I2S module is started and RX is enabled, this event will be generated for every RXTXD.MAXCNT words received on the SDIN pin. Equivalent to eventDmaReadyRx. */

/* Bit 0 : The RXD.PTR register has been copied to internal double-buffers.
      When the I2S module is started and RX is enabled, this event will be generated for every RXTXD.MAXCNT words received on the SDIN pin. Equivalent to eventDmaReadyRx. */
#define I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Pos (0UL) /*!< Position of EVENTS_RXPTRUPD field. */
#define I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Msk (0x1UL << I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Pos) /*!< Bit mask of EVENTS_RXPTRUPD field. */
#define I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_NotGenerated (0UL) /*!< Event not generated */
#define I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Generated (1UL) /*!< Event generated */

/* Register: I2S_EVENTS_STOPPED */
/* Description: I2S transfer stopped. There are no requirements to how graceful the I2S module shall be stopped. The reason for this is that we are talking about streaming audio data here, and thus loosing some data is not critical. Graceful stopping of stream can easily be done in FW. Equivalent to eventStopped */

/* Bit 0 : I2S transfer stopped. There are no requirements to how graceful the I2S module shall be stopped. The reason for this is that we are talking about streaming audio data here, and thus loosing some data is not critical. Graceful stopping of stream can easily be done in FW. Equivalent to eventStopped */
#define I2S_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define I2S_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << I2S_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define I2S_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define I2S_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: I2S_EVENTS_ERROR_TX */
/* Description: DMA read from memory failed. Equivalent to eventUnderflowTx */

/* Bit 0 : DMA read from memory failed. Equivalent to eventUnderflowTx */
#define I2S_EVENTS_ERROR_TX_EVENTS_ERROR_TX_Pos (0UL) /*!< Position of EVENTS_ERROR_TX field. */
#define I2S_EVENTS_ERROR_TX_EVENTS_ERROR_TX_Msk (0x1UL << I2S_EVENTS_ERROR_TX_EVENTS_ERROR_TX_Pos) /*!< Bit mask of EVENTS_ERROR_TX field. */
#define I2S_EVENTS_ERROR_TX_EVENTS_ERROR_TX_NotGenerated (0UL) /*!< Event not generated */
#define I2S_EVENTS_ERROR_TX_EVENTS_ERROR_TX_Generated (1UL) /*!< Event generated */

/* Register: I2S_EVENTS_ERROR_RX */
/* Description: DMA write to memory failed. Equivalent to eventOverflowRx */

/* Bit 0 : DMA write to memory failed. Equivalent to eventOverflowRx */
#define I2S_EVENTS_ERROR_RX_EVENTS_ERROR_RX_Pos (0UL) /*!< Position of EVENTS_ERROR_RX field. */
#define I2S_EVENTS_ERROR_RX_EVENTS_ERROR_RX_Msk (0x1UL << I2S_EVENTS_ERROR_RX_EVENTS_ERROR_RX_Pos) /*!< Bit mask of EVENTS_ERROR_RX field. */
#define I2S_EVENTS_ERROR_RX_EVENTS_ERROR_RX_NotGenerated (0UL) /*!< Event not generated */
#define I2S_EVENTS_ERROR_RX_EVENTS_ERROR_RX_Generated (1UL) /*!< Event generated */

/* Register: I2S_EVENTS_TXPTRUPD */
/* Description: The TDX.PTR register has been copied to internal double-buffers.
      When the I2S module is started and TX is enabled, this event will be generated for every RXTXD.MAXCNT words that are sent on the SDOUT pin. Equivalent to eventDmaReadyTx. */

/* Bit 0 : The TDX.PTR register has been copied to internal double-buffers.
      When the I2S module is started and TX is enabled, this event will be generated for every RXTXD.MAXCNT words that are sent on the SDOUT pin. Equivalent to eventDmaReadyTx. */
#define I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Pos (0UL) /*!< Position of EVENTS_TXPTRUPD field. */
#define I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Msk (0x1UL << I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Pos) /*!< Bit mask of EVENTS_TXPTRUPD field. */
#define I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_NotGenerated (0UL) /*!< Event not generated */
#define I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Generated (1UL) /*!< Event generated */

/* Register: I2S_EVENTS_DMA_END_RX */
/* Description: DMA write to memory failed. Equivalent to eventDmaEndRx */

/* Bit 0 : DMA write to memory failed. Equivalent to eventDmaEndRx */
#define I2S_EVENTS_DMA_END_RX_EVENTS_DMA_END_RX_Pos (0UL) /*!< Position of EVENTS_DMA_END_RX field. */
#define I2S_EVENTS_DMA_END_RX_EVENTS_DMA_END_RX_Msk (0x1UL << I2S_EVENTS_DMA_END_RX_EVENTS_DMA_END_RX_Pos) /*!< Bit mask of EVENTS_DMA_END_RX field. */
#define I2S_EVENTS_DMA_END_RX_EVENTS_DMA_END_RX_NotGenerated (0UL) /*!< Event not generated */
#define I2S_EVENTS_DMA_END_RX_EVENTS_DMA_END_RX_Generated (1UL) /*!< Event generated */

/* Register: I2S_EVENTS_FRAMESTART */
/* Description: Frame start event, generated on the active edge of LRCK */

/* Bit 0 : Frame start event, generated on the active edge of LRCK */
#define I2S_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos (0UL) /*!< Position of EVENTS_FRAMESTART field. */
#define I2S_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Msk (0x1UL << I2S_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos) /*!< Bit mask of EVENTS_FRAMESTART field. */
#define I2S_EVENTS_FRAMESTART_EVENTS_FRAMESTART_NotGenerated (0UL) /*!< Event not generated */
#define I2S_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Generated (1UL) /*!< Event generated */

/* Register: I2S_PUBLISH_DMA_END_TX */
/* Description: Publish configuration for event DMA_END_TX */

/* Bit 31 :   */
#define I2S_PUBLISH_DMA_END_TX_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_PUBLISH_DMA_END_TX_EN_Msk (0x1UL << I2S_PUBLISH_DMA_END_TX_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_PUBLISH_DMA_END_TX_EN_Disabled (0UL) /*!< Disable publishing */
#define I2S_PUBLISH_DMA_END_TX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DMA_END_TX will publish to. */
#define I2S_PUBLISH_DMA_END_TX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_PUBLISH_DMA_END_TX_CHIDX_Msk (0xFFUL << I2S_PUBLISH_DMA_END_TX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_PUBLISH_RXPTRUPD */
/* Description: Publish configuration for event RXPTRUPD */

/* Bit 31 :   */
#define I2S_PUBLISH_RXPTRUPD_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_PUBLISH_RXPTRUPD_EN_Msk (0x1UL << I2S_PUBLISH_RXPTRUPD_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_PUBLISH_RXPTRUPD_EN_Disabled (0UL) /*!< Disable publishing */
#define I2S_PUBLISH_RXPTRUPD_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXPTRUPD will publish to. */
#define I2S_PUBLISH_RXPTRUPD_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_PUBLISH_RXPTRUPD_CHIDX_Msk (0xFFUL << I2S_PUBLISH_RXPTRUPD_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define I2S_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_PUBLISH_STOPPED_EN_Msk (0x1UL << I2S_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define I2S_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define I2S_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << I2S_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_PUBLISH_ERROR_TX */
/* Description: Publish configuration for event ERROR_TX */

/* Bit 31 :   */
#define I2S_PUBLISH_ERROR_TX_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_PUBLISH_ERROR_TX_EN_Msk (0x1UL << I2S_PUBLISH_ERROR_TX_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_PUBLISH_ERROR_TX_EN_Disabled (0UL) /*!< Disable publishing */
#define I2S_PUBLISH_ERROR_TX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ERROR_TX will publish to. */
#define I2S_PUBLISH_ERROR_TX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_PUBLISH_ERROR_TX_CHIDX_Msk (0xFFUL << I2S_PUBLISH_ERROR_TX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_PUBLISH_ERROR_RX */
/* Description: Publish configuration for event ERROR_RX */

/* Bit 31 :   */
#define I2S_PUBLISH_ERROR_RX_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_PUBLISH_ERROR_RX_EN_Msk (0x1UL << I2S_PUBLISH_ERROR_RX_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_PUBLISH_ERROR_RX_EN_Disabled (0UL) /*!< Disable publishing */
#define I2S_PUBLISH_ERROR_RX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ERROR_RX will publish to. */
#define I2S_PUBLISH_ERROR_RX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_PUBLISH_ERROR_RX_CHIDX_Msk (0xFFUL << I2S_PUBLISH_ERROR_RX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_PUBLISH_TXPTRUPD */
/* Description: Publish configuration for event TXPTRUPD */

/* Bit 31 :   */
#define I2S_PUBLISH_TXPTRUPD_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_PUBLISH_TXPTRUPD_EN_Msk (0x1UL << I2S_PUBLISH_TXPTRUPD_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_PUBLISH_TXPTRUPD_EN_Disabled (0UL) /*!< Disable publishing */
#define I2S_PUBLISH_TXPTRUPD_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXPTRUPD will publish to. */
#define I2S_PUBLISH_TXPTRUPD_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_PUBLISH_TXPTRUPD_CHIDX_Msk (0xFFUL << I2S_PUBLISH_TXPTRUPD_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_PUBLISH_DMA_END_RX */
/* Description: Publish configuration for event DMA_END_RX */

/* Bit 31 :   */
#define I2S_PUBLISH_DMA_END_RX_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_PUBLISH_DMA_END_RX_EN_Msk (0x1UL << I2S_PUBLISH_DMA_END_RX_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_PUBLISH_DMA_END_RX_EN_Disabled (0UL) /*!< Disable publishing */
#define I2S_PUBLISH_DMA_END_RX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DMA_END_RX will publish to. */
#define I2S_PUBLISH_DMA_END_RX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_PUBLISH_DMA_END_RX_CHIDX_Msk (0xFFUL << I2S_PUBLISH_DMA_END_RX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_PUBLISH_FRAMESTART */
/* Description: Publish configuration for event FRAMESTART */

/* Bit 31 :   */
#define I2S_PUBLISH_FRAMESTART_EN_Pos (31UL) /*!< Position of EN field. */
#define I2S_PUBLISH_FRAMESTART_EN_Msk (0x1UL << I2S_PUBLISH_FRAMESTART_EN_Pos) /*!< Bit mask of EN field. */
#define I2S_PUBLISH_FRAMESTART_EN_Disabled (0UL) /*!< Disable publishing */
#define I2S_PUBLISH_FRAMESTART_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event FRAMESTART will publish to. */
#define I2S_PUBLISH_FRAMESTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define I2S_PUBLISH_FRAMESTART_CHIDX_Msk (0xFFUL << I2S_PUBLISH_FRAMESTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: I2S_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 7 : Enable or disable interrupt for event FRAMESTART */
#define I2S_INTEN_FRAMESTART_Pos (7UL) /*!< Position of FRAMESTART field. */
#define I2S_INTEN_FRAMESTART_Msk (0x1UL << I2S_INTEN_FRAMESTART_Pos) /*!< Bit mask of FRAMESTART field. */
#define I2S_INTEN_FRAMESTART_Disabled (0UL) /*!< Disable */
#define I2S_INTEN_FRAMESTART_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event DMA_END_RX */
#define I2S_INTEN_DMA_END_RX_Pos (6UL) /*!< Position of DMA_END_RX field. */
#define I2S_INTEN_DMA_END_RX_Msk (0x1UL << I2S_INTEN_DMA_END_RX_Pos) /*!< Bit mask of DMA_END_RX field. */
#define I2S_INTEN_DMA_END_RX_Disabled (0UL) /*!< Disable */
#define I2S_INTEN_DMA_END_RX_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event TXPTRUPD */
#define I2S_INTEN_TXPTRUPD_Pos (5UL) /*!< Position of TXPTRUPD field. */
#define I2S_INTEN_TXPTRUPD_Msk (0x1UL << I2S_INTEN_TXPTRUPD_Pos) /*!< Bit mask of TXPTRUPD field. */
#define I2S_INTEN_TXPTRUPD_Disabled (0UL) /*!< Disable */
#define I2S_INTEN_TXPTRUPD_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event ERROR_RX */
#define I2S_INTEN_ERROR_RX_Pos (4UL) /*!< Position of ERROR_RX field. */
#define I2S_INTEN_ERROR_RX_Msk (0x1UL << I2S_INTEN_ERROR_RX_Pos) /*!< Bit mask of ERROR_RX field. */
#define I2S_INTEN_ERROR_RX_Disabled (0UL) /*!< Disable */
#define I2S_INTEN_ERROR_RX_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event ERROR_TX */
#define I2S_INTEN_ERROR_TX_Pos (3UL) /*!< Position of ERROR_TX field. */
#define I2S_INTEN_ERROR_TX_Msk (0x1UL << I2S_INTEN_ERROR_TX_Pos) /*!< Bit mask of ERROR_TX field. */
#define I2S_INTEN_ERROR_TX_Disabled (0UL) /*!< Disable */
#define I2S_INTEN_ERROR_TX_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event STOPPED */
#define I2S_INTEN_STOPPED_Pos (2UL) /*!< Position of STOPPED field. */
#define I2S_INTEN_STOPPED_Msk (0x1UL << I2S_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define I2S_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define I2S_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event RXPTRUPD */
#define I2S_INTEN_RXPTRUPD_Pos (1UL) /*!< Position of RXPTRUPD field. */
#define I2S_INTEN_RXPTRUPD_Msk (0x1UL << I2S_INTEN_RXPTRUPD_Pos) /*!< Bit mask of RXPTRUPD field. */
#define I2S_INTEN_RXPTRUPD_Disabled (0UL) /*!< Disable */
#define I2S_INTEN_RXPTRUPD_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event DMA_END_TX */
#define I2S_INTEN_DMA_END_TX_Pos (0UL) /*!< Position of DMA_END_TX field. */
#define I2S_INTEN_DMA_END_TX_Msk (0x1UL << I2S_INTEN_DMA_END_TX_Pos) /*!< Bit mask of DMA_END_TX field. */
#define I2S_INTEN_DMA_END_TX_Disabled (0UL) /*!< Disable */
#define I2S_INTEN_DMA_END_TX_Enabled (1UL) /*!< Enable */

/* Register: I2S_INTENSET */
/* Description: Enable interrupt */

/* Bit 7 : Write '1' to enable interrupt for event FRAMESTART */
#define I2S_INTENSET_FRAMESTART_Pos (7UL) /*!< Position of FRAMESTART field. */
#define I2S_INTENSET_FRAMESTART_Msk (0x1UL << I2S_INTENSET_FRAMESTART_Pos) /*!< Bit mask of FRAMESTART field. */
#define I2S_INTENSET_FRAMESTART_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENSET_FRAMESTART_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENSET_FRAMESTART_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event DMA_END_RX */
#define I2S_INTENSET_DMA_END_RX_Pos (6UL) /*!< Position of DMA_END_RX field. */
#define I2S_INTENSET_DMA_END_RX_Msk (0x1UL << I2S_INTENSET_DMA_END_RX_Pos) /*!< Bit mask of DMA_END_RX field. */
#define I2S_INTENSET_DMA_END_RX_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENSET_DMA_END_RX_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENSET_DMA_END_RX_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event TXPTRUPD */
#define I2S_INTENSET_TXPTRUPD_Pos (5UL) /*!< Position of TXPTRUPD field. */
#define I2S_INTENSET_TXPTRUPD_Msk (0x1UL << I2S_INTENSET_TXPTRUPD_Pos) /*!< Bit mask of TXPTRUPD field. */
#define I2S_INTENSET_TXPTRUPD_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENSET_TXPTRUPD_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENSET_TXPTRUPD_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event ERROR_RX */
#define I2S_INTENSET_ERROR_RX_Pos (4UL) /*!< Position of ERROR_RX field. */
#define I2S_INTENSET_ERROR_RX_Msk (0x1UL << I2S_INTENSET_ERROR_RX_Pos) /*!< Bit mask of ERROR_RX field. */
#define I2S_INTENSET_ERROR_RX_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENSET_ERROR_RX_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENSET_ERROR_RX_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event ERROR_TX */
#define I2S_INTENSET_ERROR_TX_Pos (3UL) /*!< Position of ERROR_TX field. */
#define I2S_INTENSET_ERROR_TX_Msk (0x1UL << I2S_INTENSET_ERROR_TX_Pos) /*!< Bit mask of ERROR_TX field. */
#define I2S_INTENSET_ERROR_TX_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENSET_ERROR_TX_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENSET_ERROR_TX_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event STOPPED */
#define I2S_INTENSET_STOPPED_Pos (2UL) /*!< Position of STOPPED field. */
#define I2S_INTENSET_STOPPED_Msk (0x1UL << I2S_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define I2S_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event RXPTRUPD */
#define I2S_INTENSET_RXPTRUPD_Pos (1UL) /*!< Position of RXPTRUPD field. */
#define I2S_INTENSET_RXPTRUPD_Msk (0x1UL << I2S_INTENSET_RXPTRUPD_Pos) /*!< Bit mask of RXPTRUPD field. */
#define I2S_INTENSET_RXPTRUPD_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENSET_RXPTRUPD_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENSET_RXPTRUPD_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event DMA_END_TX */
#define I2S_INTENSET_DMA_END_TX_Pos (0UL) /*!< Position of DMA_END_TX field. */
#define I2S_INTENSET_DMA_END_TX_Msk (0x1UL << I2S_INTENSET_DMA_END_TX_Pos) /*!< Bit mask of DMA_END_TX field. */
#define I2S_INTENSET_DMA_END_TX_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENSET_DMA_END_TX_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENSET_DMA_END_TX_Set (1UL) /*!< Enable */

/* Register: I2S_INTENCLR */
/* Description: Disable interrupt */

/* Bit 7 : Write '1' to disable interrupt for event FRAMESTART */
#define I2S_INTENCLR_FRAMESTART_Pos (7UL) /*!< Position of FRAMESTART field. */
#define I2S_INTENCLR_FRAMESTART_Msk (0x1UL << I2S_INTENCLR_FRAMESTART_Pos) /*!< Bit mask of FRAMESTART field. */
#define I2S_INTENCLR_FRAMESTART_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENCLR_FRAMESTART_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENCLR_FRAMESTART_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event DMA_END_RX */
#define I2S_INTENCLR_DMA_END_RX_Pos (6UL) /*!< Position of DMA_END_RX field. */
#define I2S_INTENCLR_DMA_END_RX_Msk (0x1UL << I2S_INTENCLR_DMA_END_RX_Pos) /*!< Bit mask of DMA_END_RX field. */
#define I2S_INTENCLR_DMA_END_RX_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENCLR_DMA_END_RX_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENCLR_DMA_END_RX_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event TXPTRUPD */
#define I2S_INTENCLR_TXPTRUPD_Pos (5UL) /*!< Position of TXPTRUPD field. */
#define I2S_INTENCLR_TXPTRUPD_Msk (0x1UL << I2S_INTENCLR_TXPTRUPD_Pos) /*!< Bit mask of TXPTRUPD field. */
#define I2S_INTENCLR_TXPTRUPD_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENCLR_TXPTRUPD_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENCLR_TXPTRUPD_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event ERROR_RX */
#define I2S_INTENCLR_ERROR_RX_Pos (4UL) /*!< Position of ERROR_RX field. */
#define I2S_INTENCLR_ERROR_RX_Msk (0x1UL << I2S_INTENCLR_ERROR_RX_Pos) /*!< Bit mask of ERROR_RX field. */
#define I2S_INTENCLR_ERROR_RX_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENCLR_ERROR_RX_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENCLR_ERROR_RX_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event ERROR_TX */
#define I2S_INTENCLR_ERROR_TX_Pos (3UL) /*!< Position of ERROR_TX field. */
#define I2S_INTENCLR_ERROR_TX_Msk (0x1UL << I2S_INTENCLR_ERROR_TX_Pos) /*!< Bit mask of ERROR_TX field. */
#define I2S_INTENCLR_ERROR_TX_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENCLR_ERROR_TX_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENCLR_ERROR_TX_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event STOPPED */
#define I2S_INTENCLR_STOPPED_Pos (2UL) /*!< Position of STOPPED field. */
#define I2S_INTENCLR_STOPPED_Msk (0x1UL << I2S_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define I2S_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event RXPTRUPD */
#define I2S_INTENCLR_RXPTRUPD_Pos (1UL) /*!< Position of RXPTRUPD field. */
#define I2S_INTENCLR_RXPTRUPD_Msk (0x1UL << I2S_INTENCLR_RXPTRUPD_Pos) /*!< Bit mask of RXPTRUPD field. */
#define I2S_INTENCLR_RXPTRUPD_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENCLR_RXPTRUPD_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENCLR_RXPTRUPD_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event DMA_END_TX */
#define I2S_INTENCLR_DMA_END_TX_Pos (0UL) /*!< Position of DMA_END_TX field. */
#define I2S_INTENCLR_DMA_END_TX_Msk (0x1UL << I2S_INTENCLR_DMA_END_TX_Pos) /*!< Bit mask of DMA_END_TX field. */
#define I2S_INTENCLR_DMA_END_TX_Disabled (0UL) /*!< Read: Disabled */
#define I2S_INTENCLR_DMA_END_TX_Enabled (1UL) /*!< Read: Enabled */
#define I2S_INTENCLR_DMA_END_TX_Clear (1UL) /*!< Disable */

/* Register: I2S_ENABLE */
/* Description: Enable I2S module */

/* Bit 0 : Enable I2S module */
#define I2S_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define I2S_ENABLE_ENABLE_Msk (0x1UL << I2S_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define I2S_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
#define I2S_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */

/* Register: I2S_CONFIG_MODE */
/* Description: I2S mode */

/* Bit 0 : I2S mode */
#define I2S_CONFIG_MODE_MODE_Pos (0UL) /*!< Position of MODE field. */
#define I2S_CONFIG_MODE_MODE_Msk (0x1UL << I2S_CONFIG_MODE_MODE_Pos) /*!< Bit mask of MODE field. */
#define I2S_CONFIG_MODE_MODE_Master (0UL) /*!< Master mode. SCK and LRCK generated from internal master clcok (MCK) and output on pins defined by PSEL.xxx. */
#define I2S_CONFIG_MODE_MODE_Slave (1UL) /*!< Slave mode. SCK and LRCK generated by external master and received on pins defined by PSEL.xxx */

/* Register: I2S_CONFIG_RXEN */
/* Description: Reception (RX) enable */

/* Bit 0 : Reception (RX) enable */
#define I2S_CONFIG_RXEN_RXEN_Pos (0UL) /*!< Position of RXEN field. */
#define I2S_CONFIG_RXEN_RXEN_Msk (0x1UL << I2S_CONFIG_RXEN_RXEN_Pos) /*!< Bit mask of RXEN field. */
#define I2S_CONFIG_RXEN_RXEN_Disabled (0UL) /*!< Reception disabled and now data will be written to the RXD.PTR address. */
#define I2S_CONFIG_RXEN_RXEN_Enabled (1UL) /*!< Reception enabled. */

/* Register: I2S_CONFIG_TXEN */
/* Description: Transmission (TX) enable */

/* Bit 0 : Transmission (TX) enable */
#define I2S_CONFIG_TXEN_TXEN_Pos (0UL) /*!< Position of TXEN field. */
#define I2S_CONFIG_TXEN_TXEN_Msk (0x1UL << I2S_CONFIG_TXEN_TXEN_Pos) /*!< Bit mask of TXEN field. */
#define I2S_CONFIG_TXEN_TXEN_Disabled (0UL) /*!< Transmission disabled and now data will be read from the RXD.TXD address. */
#define I2S_CONFIG_TXEN_TXEN_Enabled (1UL) /*!< Transmission enabled. */

/* Register: I2S_CONFIG_MCKEN */
/* Description: Master clock generator enable */

/* Bit 0 : Master clock generator enable */
#define I2S_CONFIG_MCKEN_MCKEN_Pos (0UL) /*!< Position of MCKEN field. */
#define I2S_CONFIG_MCKEN_MCKEN_Msk (0x1UL << I2S_CONFIG_MCKEN_MCKEN_Pos) /*!< Bit mask of MCKEN field. */
#define I2S_CONFIG_MCKEN_MCKEN_Disabled (0UL) /*!< Master clock generator disabled and PSEL.MCK not connected(available as GPIO). */
#define I2S_CONFIG_MCKEN_MCKEN_Enabled (1UL) /*!< Master clock generator running and MCK output on PSEL.MCK. */

/* Register: I2S_CONFIG_MCKFREQ */
/* Description: I2S clock generator control */

/* Bits 31..0 : I2S MCK frequency configuration NOTE: Enumerations are deprecated, use MCKFREQ equation. NOTE: The 12 least significant bits of the register are ignored and shall be set to zero. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_Pos (0UL) /*!< Position of MCKFREQ field. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_Msk (0xFFFFFFFFUL << I2S_CONFIG_MCKFREQ_MCKFREQ_Pos) /*!< Bit mask of MCKFREQ field. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV125 (0x020C0000UL) /*!< 32 MHz / 125 = 0.256 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV63 (0x04100000UL) /*!< 32 MHz / 63 = 0.5079365 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV42 (0x06000000UL) /*!< 32 MHz / 42 = 0.7619048 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV32 (0x08000000UL) /*!< 32 MHz / 32 = 1.0 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV31 (0x08400000UL) /*!< 32 MHz / 31 = 1.0322581 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV30 (0x08800000UL) /*!< 32 MHz / 30 = 1.0666667 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV23 (0x0B000000UL) /*!< 32 MHz / 23 = 1.3913043 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV21 (0x0C000000UL) /*!< 32 MHz / 21 = 1.5238095 Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV16 (0x10000000UL) /*!< 32 MHz / 16 = 2.0 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV15 (0x11000000UL) /*!< 32 MHz / 15 = 2.1333333 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV11 (0x16000000UL) /*!< 32 MHz / 11 = 2.9090909 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV10 (0x18000000UL) /*!< 32 MHz / 10 = 3.2 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV8 (0x20000000UL) /*!< 32 MHz / 8 = 4.0 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV6 (0x28000000UL) /*!< 32 MHz / 6 = 5.3333333 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV5 (0x30000000UL) /*!< 32 MHz / 5 = 6.4 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV4 (0x40000000UL) /*!< 32 MHz / 4 = 8.0 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV3 (0x50000000UL) /*!< 32 MHz / 3 = 10.6666667 MHz Deprecated, use MCKFREQ equation. */
#define I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV2 (0x80000000UL) /*!< 32 MHz / 2 = 16.0 MHz Deprecated, use MCKFREQ equation. */

/* Register: I2S_CONFIG_RATIO */
/* Description: MCK / LRCK ratio */

/* Bits 3..0 : MCK / LRCK ratio */
#define I2S_CONFIG_RATIO_RATIO_Pos (0UL) /*!< Position of RATIO field. */
#define I2S_CONFIG_RATIO_RATIO_Msk (0xFUL << I2S_CONFIG_RATIO_RATIO_Pos) /*!< Bit mask of RATIO field. */
#define I2S_CONFIG_RATIO_RATIO_32X (0UL) /*!< LRCK = MCK / 32 */
#define I2S_CONFIG_RATIO_RATIO_48X (1UL) /*!< LRCK = MCK / 48 */
#define I2S_CONFIG_RATIO_RATIO_64X (2UL) /*!< LRCK = MCK / 64 */
#define I2S_CONFIG_RATIO_RATIO_96X (3UL) /*!< LRCK = MCK / 96 */
#define I2S_CONFIG_RATIO_RATIO_128X (4UL) /*!< LRCK = MCK / 128 */
#define I2S_CONFIG_RATIO_RATIO_192X (5UL) /*!< LRCK = MCK / 192 */
#define I2S_CONFIG_RATIO_RATIO_256X (6UL) /*!< LRCK = MCK / 256 */
#define I2S_CONFIG_RATIO_RATIO_384X (7UL) /*!< LRCK = MCK / 384 */
#define I2S_CONFIG_RATIO_RATIO_512X (8UL) /*!< LRCK = MCK / 512 */

/* Register: I2S_CONFIG_SWIDTH */
/* Description: Sample width */

/* Bits 2..0 : Sample and half-frame width */
#define I2S_CONFIG_SWIDTH_SWIDTH_Pos (0UL) /*!< Position of SWIDTH field. */
#define I2S_CONFIG_SWIDTH_SWIDTH_Msk (0x7UL << I2S_CONFIG_SWIDTH_SWIDTH_Pos) /*!< Bit mask of SWIDTH field. */
#define I2S_CONFIG_SWIDTH_SWIDTH_8Bit (0UL) /*!< 8 bit sample. */
#define I2S_CONFIG_SWIDTH_SWIDTH_16Bit (1UL) /*!< 16 bit sample. */
#define I2S_CONFIG_SWIDTH_SWIDTH_24Bit (2UL) /*!< 24 bit sample. */
#define I2S_CONFIG_SWIDTH_SWIDTH_32Bit (3UL) /*!< 32-bit sample. */
#define I2S_CONFIG_SWIDTH_SWIDTH_8BitIn16 (4UL) /*!< 8 bit sample in a 16 bit half-frame. */
#define I2S_CONFIG_SWIDTH_SWIDTH_8BitIn32 (5UL) /*!< 8 bit sample in a 32-bit half-frame. */
#define I2S_CONFIG_SWIDTH_SWIDTH_16BitIn32 (6UL) /*!< 16 bit sample in a 32-bit half-frame. */
#define I2S_CONFIG_SWIDTH_SWIDTH_24BitIn32 (7UL) /*!< 24 bit sample in a 32-bit half-frame. */

/* Register: I2S_CONFIG_ALIGN */
/* Description: Alignment of sample within a frame */

/* Bit 0 : Alignment of sample within a frame */
#define I2S_CONFIG_ALIGN_ALIGN_Pos (0UL) /*!< Position of ALIGN field. */
#define I2S_CONFIG_ALIGN_ALIGN_Msk (0x1UL << I2S_CONFIG_ALIGN_ALIGN_Pos) /*!< Bit mask of ALIGN field. */
#define I2S_CONFIG_ALIGN_ALIGN_Left (0UL) /*!< Left-aligned. */
#define I2S_CONFIG_ALIGN_ALIGN_Right (1UL) /*!< Right-aligned. */

/* Register: I2S_CONFIG_FORMAT */
/* Description: Frame format */

/* Bit 0 : Frame format */
#define I2S_CONFIG_FORMAT_FORMAT_Pos (0UL) /*!< Position of FORMAT field. */
#define I2S_CONFIG_FORMAT_FORMAT_Msk (0x1UL << I2S_CONFIG_FORMAT_FORMAT_Pos) /*!< Bit mask of FORMAT field. */
#define I2S_CONFIG_FORMAT_FORMAT_I2S (0UL) /*!< Original I2S format. */
#define I2S_CONFIG_FORMAT_FORMAT_Aligned (1UL) /*!< Alternate (left- or right-aligned) format. */

/* Register: I2S_CONFIG_CHANNELS */
/* Description: Enable channels */

/* Bits 1..0 : Enable channels */
#define I2S_CONFIG_CHANNELS_CHANNELS_Pos (0UL) /*!< Position of CHANNELS field. */
#define I2S_CONFIG_CHANNELS_CHANNELS_Msk (0x3UL << I2S_CONFIG_CHANNELS_CHANNELS_Pos) /*!< Bit mask of CHANNELS field. */
#define I2S_CONFIG_CHANNELS_CHANNELS_Stereo (0UL) /*!< Stereo. */
#define I2S_CONFIG_CHANNELS_CHANNELS_Left (1UL) /*!< Left only. */
#define I2S_CONFIG_CHANNELS_CHANNELS_Right (2UL) /*!< Right only. */

/* Register: I2S_CONFIG_CLKCONFIG */
/* Description: Clock source selection for the I2S module */

/* Bit 9 : Enable jittering clock. */
#define I2S_CONFIG_CLKCONFIG_JITTER_Pos (9UL) /*!< Position of JITTER field. */
#define I2S_CONFIG_CLKCONFIG_JITTER_Msk (0x1UL << I2S_CONFIG_CLKCONFIG_JITTER_Pos) /*!< Bit mask of JITTER field. */
#define I2S_CONFIG_CLKCONFIG_JITTER_Disable (0UL) /*!< Disable jitter */
#define I2S_CONFIG_CLKCONFIG_JITTER_Enable (1UL) /*!< Enable jitter */

/* Bit 8 : Bypass clock generator. MCK will be equal to source input. If bypass is enabled the MCKFREQ setting has no effect. */
#define I2S_CONFIG_CLKCONFIG_BYPASS_Pos (8UL) /*!< Position of BYPASS field. */
#define I2S_CONFIG_CLKCONFIG_BYPASS_Msk (0x1UL << I2S_CONFIG_CLKCONFIG_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
#define I2S_CONFIG_CLKCONFIG_BYPASS_Disable (0UL) /*!< Disable bypass */
#define I2S_CONFIG_CLKCONFIG_BYPASS_Enable (1UL) /*!< Enable bypass */

/* Bit 0 : Clock source selection */
#define I2S_CONFIG_CLKCONFIG_CLKSRC_Pos (0UL) /*!< Position of CLKSRC field. */
#define I2S_CONFIG_CLKCONFIG_CLKSRC_Msk (0x1UL << I2S_CONFIG_CLKCONFIG_CLKSRC_Pos) /*!< Bit mask of CLKSRC field. */
#define I2S_CONFIG_CLKCONFIG_CLKSRC_PCLK32M (0UL) /*!< 32MHz peripheral clock */
#define I2S_CONFIG_CLKCONFIG_CLKSRC_ACLK (1UL) /*!< Audio PLL clock */

/* Register: I2S_RXD_PTR */
/* Description: Receive buffer RAM start address. */

/* Bits 31..0 : Receive buffer Data RAM start address. When receiving, words containing samples will be written to this address. This address is a word aligned Data RAM address. */
#define I2S_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define I2S_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << I2S_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: I2S_TXD_PTR */
/* Description: Transmit buffer RAM start address */

/* Bits 31..0 : Transmit buffer Data RAM start address. When transmitting, words containing samples will be fetched from this address. This address is a word aligned Data RAM address. */
#define I2S_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define I2S_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << I2S_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: I2S_RXTXD_MAXCNT */
/* Description: Size of RXD and TXD buffers */

/* Bits 13..0 : Size of RXD and TXD buffers in number of 32 bit words */
#define I2S_RXTXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define I2S_RXTXD_MAXCNT_MAXCNT_Msk (0x3FFFUL << I2S_RXTXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: I2S_RXTXD_AMOUNT */
/* Description: Number of 32 bit words sent and received since the previous END event. Nice to have only. TBD. */

/* Bits 13..0 : Number of 32 bit words sent and received since the previous END event */
#define I2S_RXTXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define I2S_RXTXD_AMOUNT_AMOUNT_Msk (0x3FFFUL << I2S_RXTXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: I2S_PSEL_MCK */
/* Description: Pin select for MCK signal */

/* Bit 31 : Connection */
#define I2S_PSEL_MCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define I2S_PSEL_MCK_CONNECT_Msk (0x1UL << I2S_PSEL_MCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define I2S_PSEL_MCK_CONNECT_Connected (0UL) /*!< Connect */
#define I2S_PSEL_MCK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define I2S_PSEL_MCK_PORT_Pos (5UL) /*!< Position of PORT field. */
#define I2S_PSEL_MCK_PORT_Msk (0x1UL << I2S_PSEL_MCK_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define I2S_PSEL_MCK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define I2S_PSEL_MCK_PIN_Msk (0x1FUL << I2S_PSEL_MCK_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: I2S_PSEL_SCK */
/* Description: Pin select for SCK signal */

/* Bit 31 : Connection */
#define I2S_PSEL_SCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define I2S_PSEL_SCK_CONNECT_Msk (0x1UL << I2S_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define I2S_PSEL_SCK_CONNECT_Connected (0UL) /*!< Connect */
#define I2S_PSEL_SCK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define I2S_PSEL_SCK_PORT_Pos (5UL) /*!< Position of PORT field. */
#define I2S_PSEL_SCK_PORT_Msk (0x1UL << I2S_PSEL_SCK_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define I2S_PSEL_SCK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define I2S_PSEL_SCK_PIN_Msk (0x1FUL << I2S_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: I2S_PSEL_LRCK */
/* Description: Pin select for LRCK signal */

/* Bit 31 : Connection */
#define I2S_PSEL_LRCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define I2S_PSEL_LRCK_CONNECT_Msk (0x1UL << I2S_PSEL_LRCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define I2S_PSEL_LRCK_CONNECT_Connected (0UL) /*!< Connect */
#define I2S_PSEL_LRCK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define I2S_PSEL_LRCK_PORT_Pos (5UL) /*!< Position of PORT field. */
#define I2S_PSEL_LRCK_PORT_Msk (0x1UL << I2S_PSEL_LRCK_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define I2S_PSEL_LRCK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define I2S_PSEL_LRCK_PIN_Msk (0x1FUL << I2S_PSEL_LRCK_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: I2S_PSEL_SDIN */
/* Description: Pin select for SDIN signal */

/* Bit 31 : Connection */
#define I2S_PSEL_SDIN_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define I2S_PSEL_SDIN_CONNECT_Msk (0x1UL << I2S_PSEL_SDIN_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define I2S_PSEL_SDIN_CONNECT_Connected (0UL) /*!< Connect */
#define I2S_PSEL_SDIN_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define I2S_PSEL_SDIN_PORT_Pos (5UL) /*!< Position of PORT field. */
#define I2S_PSEL_SDIN_PORT_Msk (0x1UL << I2S_PSEL_SDIN_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define I2S_PSEL_SDIN_PIN_Pos (0UL) /*!< Position of PIN field. */
#define I2S_PSEL_SDIN_PIN_Msk (0x1FUL << I2S_PSEL_SDIN_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: I2S_PSEL_SDOUT */
/* Description: Pin select for SDOUT signal */

/* Bit 31 : Connection */
#define I2S_PSEL_SDOUT_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define I2S_PSEL_SDOUT_CONNECT_Msk (0x1UL << I2S_PSEL_SDOUT_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define I2S_PSEL_SDOUT_CONNECT_Connected (0UL) /*!< Connect */
#define I2S_PSEL_SDOUT_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define I2S_PSEL_SDOUT_PORT_Pos (5UL) /*!< Position of PORT field. */
#define I2S_PSEL_SDOUT_PORT_Msk (0x1UL << I2S_PSEL_SDOUT_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define I2S_PSEL_SDOUT_PIN_Pos (0UL) /*!< Position of PIN field. */
#define I2S_PSEL_SDOUT_PIN_Msk (0x1FUL << I2S_PSEL_SDOUT_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: I2S_DMA_ENABLE_RX */
/* Description: Equivalent to ID_DMA_CHANNEL_PERIPHERAL_ENABLE_RX */

/* Bit 0 :   */
#define I2S_DMA_ENABLE_RX_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define I2S_DMA_ENABLE_RX_ENABLE_Msk (0x1UL << I2S_DMA_ENABLE_RX_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define I2S_DMA_ENABLE_RX_ENABLE_Disabled (0UL) /*!< Disable */
#define I2S_DMA_ENABLE_RX_ENABLE_Enabled (1UL) /*!< Enable */

/* Register: I2S_DMA_ENABLE_TX */
/* Description: Equivalent to ID_DMA_CHANNEL_PERIPHERAL_ENABLE_TX */

/* Bit 0 :   */
#define I2S_DMA_ENABLE_TX_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define I2S_DMA_ENABLE_TX_ENABLE_Msk (0x1UL << I2S_DMA_ENABLE_TX_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define I2S_DMA_ENABLE_TX_ENABLE_Disabled (0UL) /*!< Disable */
#define I2S_DMA_ENABLE_TX_ENABLE_Enabled (1UL) /*!< Enable */


/* Peripheral: IPC */
/* Description: Interprocessor communication 0 */

/* Register: IPC_TASKS_SEND */
/* Description: Description collection: Trigger events on IPC channel enabled in SEND_CNF[n] */

/* Bit 0 : Trigger events on IPC channel enabled in SEND_CNF[n] */
#define IPC_TASKS_SEND_TASKS_SEND_Pos (0UL) /*!< Position of TASKS_SEND field. */
#define IPC_TASKS_SEND_TASKS_SEND_Msk (0x1UL << IPC_TASKS_SEND_TASKS_SEND_Pos) /*!< Bit mask of TASKS_SEND field. */
#define IPC_TASKS_SEND_TASKS_SEND_Trigger (1UL) /*!< Trigger task */

/* Register: IPC_SUBSCRIBE_SEND */
/* Description: Description collection: Subscribe configuration for task SEND[n] */

/* Bit 31 :   */
#define IPC_SUBSCRIBE_SEND_EN_Pos (31UL) /*!< Position of EN field. */
#define IPC_SUBSCRIBE_SEND_EN_Msk (0x1UL << IPC_SUBSCRIBE_SEND_EN_Pos) /*!< Bit mask of EN field. */
#define IPC_SUBSCRIBE_SEND_EN_Disabled (0UL) /*!< Disable subscription */
#define IPC_SUBSCRIBE_SEND_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SEND[n] will subscribe to */
#define IPC_SUBSCRIBE_SEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define IPC_SUBSCRIBE_SEND_CHIDX_Msk (0xFFUL << IPC_SUBSCRIBE_SEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: IPC_EVENTS_RECEIVE */
/* Description: Description collection: Event received on one or more of the enabled IPC channels in RECEIVE_CNF[n] */

/* Bit 0 : Event received on one or more of the enabled IPC channels in RECEIVE_CNF[n] */
#define IPC_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos (0UL) /*!< Position of EVENTS_RECEIVE field. */
#define IPC_EVENTS_RECEIVE_EVENTS_RECEIVE_Msk (0x1UL << IPC_EVENTS_RECEIVE_EVENTS_RECEIVE_Pos) /*!< Bit mask of EVENTS_RECEIVE field. */
#define IPC_EVENTS_RECEIVE_EVENTS_RECEIVE_NotGenerated (0UL) /*!< Event not generated */
#define IPC_EVENTS_RECEIVE_EVENTS_RECEIVE_Generated (1UL) /*!< Event generated */

/* Register: IPC_PUBLISH_RECEIVE */
/* Description: Description collection: Publish configuration for event RECEIVE[n] */

/* Bit 31 :   */
#define IPC_PUBLISH_RECEIVE_EN_Pos (31UL) /*!< Position of EN field. */
#define IPC_PUBLISH_RECEIVE_EN_Msk (0x1UL << IPC_PUBLISH_RECEIVE_EN_Pos) /*!< Bit mask of EN field. */
#define IPC_PUBLISH_RECEIVE_EN_Disabled (0UL) /*!< Disable publishing */
#define IPC_PUBLISH_RECEIVE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RECEIVE[n] will publish to. */
#define IPC_PUBLISH_RECEIVE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define IPC_PUBLISH_RECEIVE_CHIDX_Msk (0xFFUL << IPC_PUBLISH_RECEIVE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: IPC_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 15 : Enable or disable interrupt for event RECEIVE[15] */
#define IPC_INTEN_RECEIVE15_Pos (15UL) /*!< Position of RECEIVE15 field. */
#define IPC_INTEN_RECEIVE15_Msk (0x1UL << IPC_INTEN_RECEIVE15_Pos) /*!< Bit mask of RECEIVE15 field. */
#define IPC_INTEN_RECEIVE15_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE15_Enabled (1UL) /*!< Enable */

/* Bit 14 : Enable or disable interrupt for event RECEIVE[14] */
#define IPC_INTEN_RECEIVE14_Pos (14UL) /*!< Position of RECEIVE14 field. */
#define IPC_INTEN_RECEIVE14_Msk (0x1UL << IPC_INTEN_RECEIVE14_Pos) /*!< Bit mask of RECEIVE14 field. */
#define IPC_INTEN_RECEIVE14_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE14_Enabled (1UL) /*!< Enable */

/* Bit 13 : Enable or disable interrupt for event RECEIVE[13] */
#define IPC_INTEN_RECEIVE13_Pos (13UL) /*!< Position of RECEIVE13 field. */
#define IPC_INTEN_RECEIVE13_Msk (0x1UL << IPC_INTEN_RECEIVE13_Pos) /*!< Bit mask of RECEIVE13 field. */
#define IPC_INTEN_RECEIVE13_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE13_Enabled (1UL) /*!< Enable */

/* Bit 12 : Enable or disable interrupt for event RECEIVE[12] */
#define IPC_INTEN_RECEIVE12_Pos (12UL) /*!< Position of RECEIVE12 field. */
#define IPC_INTEN_RECEIVE12_Msk (0x1UL << IPC_INTEN_RECEIVE12_Pos) /*!< Bit mask of RECEIVE12 field. */
#define IPC_INTEN_RECEIVE12_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE12_Enabled (1UL) /*!< Enable */

/* Bit 11 : Enable or disable interrupt for event RECEIVE[11] */
#define IPC_INTEN_RECEIVE11_Pos (11UL) /*!< Position of RECEIVE11 field. */
#define IPC_INTEN_RECEIVE11_Msk (0x1UL << IPC_INTEN_RECEIVE11_Pos) /*!< Bit mask of RECEIVE11 field. */
#define IPC_INTEN_RECEIVE11_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE11_Enabled (1UL) /*!< Enable */

/* Bit 10 : Enable or disable interrupt for event RECEIVE[10] */
#define IPC_INTEN_RECEIVE10_Pos (10UL) /*!< Position of RECEIVE10 field. */
#define IPC_INTEN_RECEIVE10_Msk (0x1UL << IPC_INTEN_RECEIVE10_Pos) /*!< Bit mask of RECEIVE10 field. */
#define IPC_INTEN_RECEIVE10_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE10_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event RECEIVE[9] */
#define IPC_INTEN_RECEIVE9_Pos (9UL) /*!< Position of RECEIVE9 field. */
#define IPC_INTEN_RECEIVE9_Msk (0x1UL << IPC_INTEN_RECEIVE9_Pos) /*!< Bit mask of RECEIVE9 field. */
#define IPC_INTEN_RECEIVE9_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE9_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event RECEIVE[8] */
#define IPC_INTEN_RECEIVE8_Pos (8UL) /*!< Position of RECEIVE8 field. */
#define IPC_INTEN_RECEIVE8_Msk (0x1UL << IPC_INTEN_RECEIVE8_Pos) /*!< Bit mask of RECEIVE8 field. */
#define IPC_INTEN_RECEIVE8_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE8_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event RECEIVE[7] */
#define IPC_INTEN_RECEIVE7_Pos (7UL) /*!< Position of RECEIVE7 field. */
#define IPC_INTEN_RECEIVE7_Msk (0x1UL << IPC_INTEN_RECEIVE7_Pos) /*!< Bit mask of RECEIVE7 field. */
#define IPC_INTEN_RECEIVE7_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE7_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event RECEIVE[6] */
#define IPC_INTEN_RECEIVE6_Pos (6UL) /*!< Position of RECEIVE6 field. */
#define IPC_INTEN_RECEIVE6_Msk (0x1UL << IPC_INTEN_RECEIVE6_Pos) /*!< Bit mask of RECEIVE6 field. */
#define IPC_INTEN_RECEIVE6_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE6_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event RECEIVE[5] */
#define IPC_INTEN_RECEIVE5_Pos (5UL) /*!< Position of RECEIVE5 field. */
#define IPC_INTEN_RECEIVE5_Msk (0x1UL << IPC_INTEN_RECEIVE5_Pos) /*!< Bit mask of RECEIVE5 field. */
#define IPC_INTEN_RECEIVE5_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE5_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event RECEIVE[4] */
#define IPC_INTEN_RECEIVE4_Pos (4UL) /*!< Position of RECEIVE4 field. */
#define IPC_INTEN_RECEIVE4_Msk (0x1UL << IPC_INTEN_RECEIVE4_Pos) /*!< Bit mask of RECEIVE4 field. */
#define IPC_INTEN_RECEIVE4_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE4_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event RECEIVE[3] */
#define IPC_INTEN_RECEIVE3_Pos (3UL) /*!< Position of RECEIVE3 field. */
#define IPC_INTEN_RECEIVE3_Msk (0x1UL << IPC_INTEN_RECEIVE3_Pos) /*!< Bit mask of RECEIVE3 field. */
#define IPC_INTEN_RECEIVE3_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE3_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event RECEIVE[2] */
#define IPC_INTEN_RECEIVE2_Pos (2UL) /*!< Position of RECEIVE2 field. */
#define IPC_INTEN_RECEIVE2_Msk (0x1UL << IPC_INTEN_RECEIVE2_Pos) /*!< Bit mask of RECEIVE2 field. */
#define IPC_INTEN_RECEIVE2_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE2_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event RECEIVE[1] */
#define IPC_INTEN_RECEIVE1_Pos (1UL) /*!< Position of RECEIVE1 field. */
#define IPC_INTEN_RECEIVE1_Msk (0x1UL << IPC_INTEN_RECEIVE1_Pos) /*!< Bit mask of RECEIVE1 field. */
#define IPC_INTEN_RECEIVE1_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE1_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event RECEIVE[0] */
#define IPC_INTEN_RECEIVE0_Pos (0UL) /*!< Position of RECEIVE0 field. */
#define IPC_INTEN_RECEIVE0_Msk (0x1UL << IPC_INTEN_RECEIVE0_Pos) /*!< Bit mask of RECEIVE0 field. */
#define IPC_INTEN_RECEIVE0_Disabled (0UL) /*!< Disable */
#define IPC_INTEN_RECEIVE0_Enabled (1UL) /*!< Enable */

/* Register: IPC_INTENSET */
/* Description: Enable interrupt */

/* Bit 15 : Write '1' to enable interrupt for event RECEIVE[15] */
#define IPC_INTENSET_RECEIVE15_Pos (15UL) /*!< Position of RECEIVE15 field. */
#define IPC_INTENSET_RECEIVE15_Msk (0x1UL << IPC_INTENSET_RECEIVE15_Pos) /*!< Bit mask of RECEIVE15 field. */
#define IPC_INTENSET_RECEIVE15_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE15_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE15_Set (1UL) /*!< Enable */

/* Bit 14 : Write '1' to enable interrupt for event RECEIVE[14] */
#define IPC_INTENSET_RECEIVE14_Pos (14UL) /*!< Position of RECEIVE14 field. */
#define IPC_INTENSET_RECEIVE14_Msk (0x1UL << IPC_INTENSET_RECEIVE14_Pos) /*!< Bit mask of RECEIVE14 field. */
#define IPC_INTENSET_RECEIVE14_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE14_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE14_Set (1UL) /*!< Enable */

/* Bit 13 : Write '1' to enable interrupt for event RECEIVE[13] */
#define IPC_INTENSET_RECEIVE13_Pos (13UL) /*!< Position of RECEIVE13 field. */
#define IPC_INTENSET_RECEIVE13_Msk (0x1UL << IPC_INTENSET_RECEIVE13_Pos) /*!< Bit mask of RECEIVE13 field. */
#define IPC_INTENSET_RECEIVE13_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE13_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE13_Set (1UL) /*!< Enable */

/* Bit 12 : Write '1' to enable interrupt for event RECEIVE[12] */
#define IPC_INTENSET_RECEIVE12_Pos (12UL) /*!< Position of RECEIVE12 field. */
#define IPC_INTENSET_RECEIVE12_Msk (0x1UL << IPC_INTENSET_RECEIVE12_Pos) /*!< Bit mask of RECEIVE12 field. */
#define IPC_INTENSET_RECEIVE12_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE12_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE12_Set (1UL) /*!< Enable */

/* Bit 11 : Write '1' to enable interrupt for event RECEIVE[11] */
#define IPC_INTENSET_RECEIVE11_Pos (11UL) /*!< Position of RECEIVE11 field. */
#define IPC_INTENSET_RECEIVE11_Msk (0x1UL << IPC_INTENSET_RECEIVE11_Pos) /*!< Bit mask of RECEIVE11 field. */
#define IPC_INTENSET_RECEIVE11_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE11_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE11_Set (1UL) /*!< Enable */

/* Bit 10 : Write '1' to enable interrupt for event RECEIVE[10] */
#define IPC_INTENSET_RECEIVE10_Pos (10UL) /*!< Position of RECEIVE10 field. */
#define IPC_INTENSET_RECEIVE10_Msk (0x1UL << IPC_INTENSET_RECEIVE10_Pos) /*!< Bit mask of RECEIVE10 field. */
#define IPC_INTENSET_RECEIVE10_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE10_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE10_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event RECEIVE[9] */
#define IPC_INTENSET_RECEIVE9_Pos (9UL) /*!< Position of RECEIVE9 field. */
#define IPC_INTENSET_RECEIVE9_Msk (0x1UL << IPC_INTENSET_RECEIVE9_Pos) /*!< Bit mask of RECEIVE9 field. */
#define IPC_INTENSET_RECEIVE9_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE9_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE9_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event RECEIVE[8] */
#define IPC_INTENSET_RECEIVE8_Pos (8UL) /*!< Position of RECEIVE8 field. */
#define IPC_INTENSET_RECEIVE8_Msk (0x1UL << IPC_INTENSET_RECEIVE8_Pos) /*!< Bit mask of RECEIVE8 field. */
#define IPC_INTENSET_RECEIVE8_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE8_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE8_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event RECEIVE[7] */
#define IPC_INTENSET_RECEIVE7_Pos (7UL) /*!< Position of RECEIVE7 field. */
#define IPC_INTENSET_RECEIVE7_Msk (0x1UL << IPC_INTENSET_RECEIVE7_Pos) /*!< Bit mask of RECEIVE7 field. */
#define IPC_INTENSET_RECEIVE7_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE7_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE7_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event RECEIVE[6] */
#define IPC_INTENSET_RECEIVE6_Pos (6UL) /*!< Position of RECEIVE6 field. */
#define IPC_INTENSET_RECEIVE6_Msk (0x1UL << IPC_INTENSET_RECEIVE6_Pos) /*!< Bit mask of RECEIVE6 field. */
#define IPC_INTENSET_RECEIVE6_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE6_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE6_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event RECEIVE[5] */
#define IPC_INTENSET_RECEIVE5_Pos (5UL) /*!< Position of RECEIVE5 field. */
#define IPC_INTENSET_RECEIVE5_Msk (0x1UL << IPC_INTENSET_RECEIVE5_Pos) /*!< Bit mask of RECEIVE5 field. */
#define IPC_INTENSET_RECEIVE5_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE5_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE5_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event RECEIVE[4] */
#define IPC_INTENSET_RECEIVE4_Pos (4UL) /*!< Position of RECEIVE4 field. */
#define IPC_INTENSET_RECEIVE4_Msk (0x1UL << IPC_INTENSET_RECEIVE4_Pos) /*!< Bit mask of RECEIVE4 field. */
#define IPC_INTENSET_RECEIVE4_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE4_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE4_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event RECEIVE[3] */
#define IPC_INTENSET_RECEIVE3_Pos (3UL) /*!< Position of RECEIVE3 field. */
#define IPC_INTENSET_RECEIVE3_Msk (0x1UL << IPC_INTENSET_RECEIVE3_Pos) /*!< Bit mask of RECEIVE3 field. */
#define IPC_INTENSET_RECEIVE3_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE3_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE3_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event RECEIVE[2] */
#define IPC_INTENSET_RECEIVE2_Pos (2UL) /*!< Position of RECEIVE2 field. */
#define IPC_INTENSET_RECEIVE2_Msk (0x1UL << IPC_INTENSET_RECEIVE2_Pos) /*!< Bit mask of RECEIVE2 field. */
#define IPC_INTENSET_RECEIVE2_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE2_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE2_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event RECEIVE[1] */
#define IPC_INTENSET_RECEIVE1_Pos (1UL) /*!< Position of RECEIVE1 field. */
#define IPC_INTENSET_RECEIVE1_Msk (0x1UL << IPC_INTENSET_RECEIVE1_Pos) /*!< Bit mask of RECEIVE1 field. */
#define IPC_INTENSET_RECEIVE1_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE1_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE1_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event RECEIVE[0] */
#define IPC_INTENSET_RECEIVE0_Pos (0UL) /*!< Position of RECEIVE0 field. */
#define IPC_INTENSET_RECEIVE0_Msk (0x1UL << IPC_INTENSET_RECEIVE0_Pos) /*!< Bit mask of RECEIVE0 field. */
#define IPC_INTENSET_RECEIVE0_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENSET_RECEIVE0_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENSET_RECEIVE0_Set (1UL) /*!< Enable */

/* Register: IPC_INTENCLR */
/* Description: Disable interrupt */

/* Bit 15 : Write '1' to disable interrupt for event RECEIVE[15] */
#define IPC_INTENCLR_RECEIVE15_Pos (15UL) /*!< Position of RECEIVE15 field. */
#define IPC_INTENCLR_RECEIVE15_Msk (0x1UL << IPC_INTENCLR_RECEIVE15_Pos) /*!< Bit mask of RECEIVE15 field. */
#define IPC_INTENCLR_RECEIVE15_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE15_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE15_Clear (1UL) /*!< Disable */

/* Bit 14 : Write '1' to disable interrupt for event RECEIVE[14] */
#define IPC_INTENCLR_RECEIVE14_Pos (14UL) /*!< Position of RECEIVE14 field. */
#define IPC_INTENCLR_RECEIVE14_Msk (0x1UL << IPC_INTENCLR_RECEIVE14_Pos) /*!< Bit mask of RECEIVE14 field. */
#define IPC_INTENCLR_RECEIVE14_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE14_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE14_Clear (1UL) /*!< Disable */

/* Bit 13 : Write '1' to disable interrupt for event RECEIVE[13] */
#define IPC_INTENCLR_RECEIVE13_Pos (13UL) /*!< Position of RECEIVE13 field. */
#define IPC_INTENCLR_RECEIVE13_Msk (0x1UL << IPC_INTENCLR_RECEIVE13_Pos) /*!< Bit mask of RECEIVE13 field. */
#define IPC_INTENCLR_RECEIVE13_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE13_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE13_Clear (1UL) /*!< Disable */

/* Bit 12 : Write '1' to disable interrupt for event RECEIVE[12] */
#define IPC_INTENCLR_RECEIVE12_Pos (12UL) /*!< Position of RECEIVE12 field. */
#define IPC_INTENCLR_RECEIVE12_Msk (0x1UL << IPC_INTENCLR_RECEIVE12_Pos) /*!< Bit mask of RECEIVE12 field. */
#define IPC_INTENCLR_RECEIVE12_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE12_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE12_Clear (1UL) /*!< Disable */

/* Bit 11 : Write '1' to disable interrupt for event RECEIVE[11] */
#define IPC_INTENCLR_RECEIVE11_Pos (11UL) /*!< Position of RECEIVE11 field. */
#define IPC_INTENCLR_RECEIVE11_Msk (0x1UL << IPC_INTENCLR_RECEIVE11_Pos) /*!< Bit mask of RECEIVE11 field. */
#define IPC_INTENCLR_RECEIVE11_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE11_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE11_Clear (1UL) /*!< Disable */

/* Bit 10 : Write '1' to disable interrupt for event RECEIVE[10] */
#define IPC_INTENCLR_RECEIVE10_Pos (10UL) /*!< Position of RECEIVE10 field. */
#define IPC_INTENCLR_RECEIVE10_Msk (0x1UL << IPC_INTENCLR_RECEIVE10_Pos) /*!< Bit mask of RECEIVE10 field. */
#define IPC_INTENCLR_RECEIVE10_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE10_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE10_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event RECEIVE[9] */
#define IPC_INTENCLR_RECEIVE9_Pos (9UL) /*!< Position of RECEIVE9 field. */
#define IPC_INTENCLR_RECEIVE9_Msk (0x1UL << IPC_INTENCLR_RECEIVE9_Pos) /*!< Bit mask of RECEIVE9 field. */
#define IPC_INTENCLR_RECEIVE9_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE9_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE9_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event RECEIVE[8] */
#define IPC_INTENCLR_RECEIVE8_Pos (8UL) /*!< Position of RECEIVE8 field. */
#define IPC_INTENCLR_RECEIVE8_Msk (0x1UL << IPC_INTENCLR_RECEIVE8_Pos) /*!< Bit mask of RECEIVE8 field. */
#define IPC_INTENCLR_RECEIVE8_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE8_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE8_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event RECEIVE[7] */
#define IPC_INTENCLR_RECEIVE7_Pos (7UL) /*!< Position of RECEIVE7 field. */
#define IPC_INTENCLR_RECEIVE7_Msk (0x1UL << IPC_INTENCLR_RECEIVE7_Pos) /*!< Bit mask of RECEIVE7 field. */
#define IPC_INTENCLR_RECEIVE7_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE7_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE7_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event RECEIVE[6] */
#define IPC_INTENCLR_RECEIVE6_Pos (6UL) /*!< Position of RECEIVE6 field. */
#define IPC_INTENCLR_RECEIVE6_Msk (0x1UL << IPC_INTENCLR_RECEIVE6_Pos) /*!< Bit mask of RECEIVE6 field. */
#define IPC_INTENCLR_RECEIVE6_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE6_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE6_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event RECEIVE[5] */
#define IPC_INTENCLR_RECEIVE5_Pos (5UL) /*!< Position of RECEIVE5 field. */
#define IPC_INTENCLR_RECEIVE5_Msk (0x1UL << IPC_INTENCLR_RECEIVE5_Pos) /*!< Bit mask of RECEIVE5 field. */
#define IPC_INTENCLR_RECEIVE5_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE5_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE5_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event RECEIVE[4] */
#define IPC_INTENCLR_RECEIVE4_Pos (4UL) /*!< Position of RECEIVE4 field. */
#define IPC_INTENCLR_RECEIVE4_Msk (0x1UL << IPC_INTENCLR_RECEIVE4_Pos) /*!< Bit mask of RECEIVE4 field. */
#define IPC_INTENCLR_RECEIVE4_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE4_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE4_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event RECEIVE[3] */
#define IPC_INTENCLR_RECEIVE3_Pos (3UL) /*!< Position of RECEIVE3 field. */
#define IPC_INTENCLR_RECEIVE3_Msk (0x1UL << IPC_INTENCLR_RECEIVE3_Pos) /*!< Bit mask of RECEIVE3 field. */
#define IPC_INTENCLR_RECEIVE3_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE3_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE3_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event RECEIVE[2] */
#define IPC_INTENCLR_RECEIVE2_Pos (2UL) /*!< Position of RECEIVE2 field. */
#define IPC_INTENCLR_RECEIVE2_Msk (0x1UL << IPC_INTENCLR_RECEIVE2_Pos) /*!< Bit mask of RECEIVE2 field. */
#define IPC_INTENCLR_RECEIVE2_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE2_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE2_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event RECEIVE[1] */
#define IPC_INTENCLR_RECEIVE1_Pos (1UL) /*!< Position of RECEIVE1 field. */
#define IPC_INTENCLR_RECEIVE1_Msk (0x1UL << IPC_INTENCLR_RECEIVE1_Pos) /*!< Bit mask of RECEIVE1 field. */
#define IPC_INTENCLR_RECEIVE1_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE1_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE1_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event RECEIVE[0] */
#define IPC_INTENCLR_RECEIVE0_Pos (0UL) /*!< Position of RECEIVE0 field. */
#define IPC_INTENCLR_RECEIVE0_Msk (0x1UL << IPC_INTENCLR_RECEIVE0_Pos) /*!< Bit mask of RECEIVE0 field. */
#define IPC_INTENCLR_RECEIVE0_Disabled (0UL) /*!< Read: Disabled */
#define IPC_INTENCLR_RECEIVE0_Enabled (1UL) /*!< Read: Enabled */
#define IPC_INTENCLR_RECEIVE0_Clear (1UL) /*!< Disable */

/* Register: IPC_INTPEND */
/* Description: Pending interrupts */

/* Bit 15 : Read pending status of interrupt for event RECEIVE[15] */
#define IPC_INTPEND_RECEIVE15_Pos (15UL) /*!< Position of RECEIVE15 field. */
#define IPC_INTPEND_RECEIVE15_Msk (0x1UL << IPC_INTPEND_RECEIVE15_Pos) /*!< Bit mask of RECEIVE15 field. */
#define IPC_INTPEND_RECEIVE15_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE15_Pending (1UL) /*!< Read: Pending */

/* Bit 14 : Read pending status of interrupt for event RECEIVE[14] */
#define IPC_INTPEND_RECEIVE14_Pos (14UL) /*!< Position of RECEIVE14 field. */
#define IPC_INTPEND_RECEIVE14_Msk (0x1UL << IPC_INTPEND_RECEIVE14_Pos) /*!< Bit mask of RECEIVE14 field. */
#define IPC_INTPEND_RECEIVE14_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE14_Pending (1UL) /*!< Read: Pending */

/* Bit 13 : Read pending status of interrupt for event RECEIVE[13] */
#define IPC_INTPEND_RECEIVE13_Pos (13UL) /*!< Position of RECEIVE13 field. */
#define IPC_INTPEND_RECEIVE13_Msk (0x1UL << IPC_INTPEND_RECEIVE13_Pos) /*!< Bit mask of RECEIVE13 field. */
#define IPC_INTPEND_RECEIVE13_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE13_Pending (1UL) /*!< Read: Pending */

/* Bit 12 : Read pending status of interrupt for event RECEIVE[12] */
#define IPC_INTPEND_RECEIVE12_Pos (12UL) /*!< Position of RECEIVE12 field. */
#define IPC_INTPEND_RECEIVE12_Msk (0x1UL << IPC_INTPEND_RECEIVE12_Pos) /*!< Bit mask of RECEIVE12 field. */
#define IPC_INTPEND_RECEIVE12_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE12_Pending (1UL) /*!< Read: Pending */

/* Bit 11 : Read pending status of interrupt for event RECEIVE[11] */
#define IPC_INTPEND_RECEIVE11_Pos (11UL) /*!< Position of RECEIVE11 field. */
#define IPC_INTPEND_RECEIVE11_Msk (0x1UL << IPC_INTPEND_RECEIVE11_Pos) /*!< Bit mask of RECEIVE11 field. */
#define IPC_INTPEND_RECEIVE11_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE11_Pending (1UL) /*!< Read: Pending */

/* Bit 10 : Read pending status of interrupt for event RECEIVE[10] */
#define IPC_INTPEND_RECEIVE10_Pos (10UL) /*!< Position of RECEIVE10 field. */
#define IPC_INTPEND_RECEIVE10_Msk (0x1UL << IPC_INTPEND_RECEIVE10_Pos) /*!< Bit mask of RECEIVE10 field. */
#define IPC_INTPEND_RECEIVE10_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE10_Pending (1UL) /*!< Read: Pending */

/* Bit 9 : Read pending status of interrupt for event RECEIVE[9] */
#define IPC_INTPEND_RECEIVE9_Pos (9UL) /*!< Position of RECEIVE9 field. */
#define IPC_INTPEND_RECEIVE9_Msk (0x1UL << IPC_INTPEND_RECEIVE9_Pos) /*!< Bit mask of RECEIVE9 field. */
#define IPC_INTPEND_RECEIVE9_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE9_Pending (1UL) /*!< Read: Pending */

/* Bit 8 : Read pending status of interrupt for event RECEIVE[8] */
#define IPC_INTPEND_RECEIVE8_Pos (8UL) /*!< Position of RECEIVE8 field. */
#define IPC_INTPEND_RECEIVE8_Msk (0x1UL << IPC_INTPEND_RECEIVE8_Pos) /*!< Bit mask of RECEIVE8 field. */
#define IPC_INTPEND_RECEIVE8_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE8_Pending (1UL) /*!< Read: Pending */

/* Bit 7 : Read pending status of interrupt for event RECEIVE[7] */
#define IPC_INTPEND_RECEIVE7_Pos (7UL) /*!< Position of RECEIVE7 field. */
#define IPC_INTPEND_RECEIVE7_Msk (0x1UL << IPC_INTPEND_RECEIVE7_Pos) /*!< Bit mask of RECEIVE7 field. */
#define IPC_INTPEND_RECEIVE7_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE7_Pending (1UL) /*!< Read: Pending */

/* Bit 6 : Read pending status of interrupt for event RECEIVE[6] */
#define IPC_INTPEND_RECEIVE6_Pos (6UL) /*!< Position of RECEIVE6 field. */
#define IPC_INTPEND_RECEIVE6_Msk (0x1UL << IPC_INTPEND_RECEIVE6_Pos) /*!< Bit mask of RECEIVE6 field. */
#define IPC_INTPEND_RECEIVE6_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE6_Pending (1UL) /*!< Read: Pending */

/* Bit 5 : Read pending status of interrupt for event RECEIVE[5] */
#define IPC_INTPEND_RECEIVE5_Pos (5UL) /*!< Position of RECEIVE5 field. */
#define IPC_INTPEND_RECEIVE5_Msk (0x1UL << IPC_INTPEND_RECEIVE5_Pos) /*!< Bit mask of RECEIVE5 field. */
#define IPC_INTPEND_RECEIVE5_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE5_Pending (1UL) /*!< Read: Pending */

/* Bit 4 : Read pending status of interrupt for event RECEIVE[4] */
#define IPC_INTPEND_RECEIVE4_Pos (4UL) /*!< Position of RECEIVE4 field. */
#define IPC_INTPEND_RECEIVE4_Msk (0x1UL << IPC_INTPEND_RECEIVE4_Pos) /*!< Bit mask of RECEIVE4 field. */
#define IPC_INTPEND_RECEIVE4_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE4_Pending (1UL) /*!< Read: Pending */

/* Bit 3 : Read pending status of interrupt for event RECEIVE[3] */
#define IPC_INTPEND_RECEIVE3_Pos (3UL) /*!< Position of RECEIVE3 field. */
#define IPC_INTPEND_RECEIVE3_Msk (0x1UL << IPC_INTPEND_RECEIVE3_Pos) /*!< Bit mask of RECEIVE3 field. */
#define IPC_INTPEND_RECEIVE3_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE3_Pending (1UL) /*!< Read: Pending */

/* Bit 2 : Read pending status of interrupt for event RECEIVE[2] */
#define IPC_INTPEND_RECEIVE2_Pos (2UL) /*!< Position of RECEIVE2 field. */
#define IPC_INTPEND_RECEIVE2_Msk (0x1UL << IPC_INTPEND_RECEIVE2_Pos) /*!< Bit mask of RECEIVE2 field. */
#define IPC_INTPEND_RECEIVE2_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE2_Pending (1UL) /*!< Read: Pending */

/* Bit 1 : Read pending status of interrupt for event RECEIVE[1] */
#define IPC_INTPEND_RECEIVE1_Pos (1UL) /*!< Position of RECEIVE1 field. */
#define IPC_INTPEND_RECEIVE1_Msk (0x1UL << IPC_INTPEND_RECEIVE1_Pos) /*!< Bit mask of RECEIVE1 field. */
#define IPC_INTPEND_RECEIVE1_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE1_Pending (1UL) /*!< Read: Pending */

/* Bit 0 : Read pending status of interrupt for event RECEIVE[0] */
#define IPC_INTPEND_RECEIVE0_Pos (0UL) /*!< Position of RECEIVE0 field. */
#define IPC_INTPEND_RECEIVE0_Msk (0x1UL << IPC_INTPEND_RECEIVE0_Pos) /*!< Bit mask of RECEIVE0 field. */
#define IPC_INTPEND_RECEIVE0_NotPending (0UL) /*!< Read: Not pending */
#define IPC_INTPEND_RECEIVE0_Pending (1UL) /*!< Read: Pending */

/* Register: IPC_SEND_CNF */
/* Description: Description collection: Send event configuration for TASKS_SEND[n] */

/* Bit 15 : Enable broadcasting on IPC channel 15 */
#define IPC_SEND_CNF_CHEN15_Pos (15UL) /*!< Position of CHEN15 field. */
#define IPC_SEND_CNF_CHEN15_Msk (0x1UL << IPC_SEND_CNF_CHEN15_Pos) /*!< Bit mask of CHEN15 field. */
#define IPC_SEND_CNF_CHEN15_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN15_Enable (1UL) /*!< Enable broadcast */

/* Bit 14 : Enable broadcasting on IPC channel 14 */
#define IPC_SEND_CNF_CHEN14_Pos (14UL) /*!< Position of CHEN14 field. */
#define IPC_SEND_CNF_CHEN14_Msk (0x1UL << IPC_SEND_CNF_CHEN14_Pos) /*!< Bit mask of CHEN14 field. */
#define IPC_SEND_CNF_CHEN14_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN14_Enable (1UL) /*!< Enable broadcast */

/* Bit 13 : Enable broadcasting on IPC channel 13 */
#define IPC_SEND_CNF_CHEN13_Pos (13UL) /*!< Position of CHEN13 field. */
#define IPC_SEND_CNF_CHEN13_Msk (0x1UL << IPC_SEND_CNF_CHEN13_Pos) /*!< Bit mask of CHEN13 field. */
#define IPC_SEND_CNF_CHEN13_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN13_Enable (1UL) /*!< Enable broadcast */

/* Bit 12 : Enable broadcasting on IPC channel 12 */
#define IPC_SEND_CNF_CHEN12_Pos (12UL) /*!< Position of CHEN12 field. */
#define IPC_SEND_CNF_CHEN12_Msk (0x1UL << IPC_SEND_CNF_CHEN12_Pos) /*!< Bit mask of CHEN12 field. */
#define IPC_SEND_CNF_CHEN12_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN12_Enable (1UL) /*!< Enable broadcast */

/* Bit 11 : Enable broadcasting on IPC channel 11 */
#define IPC_SEND_CNF_CHEN11_Pos (11UL) /*!< Position of CHEN11 field. */
#define IPC_SEND_CNF_CHEN11_Msk (0x1UL << IPC_SEND_CNF_CHEN11_Pos) /*!< Bit mask of CHEN11 field. */
#define IPC_SEND_CNF_CHEN11_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN11_Enable (1UL) /*!< Enable broadcast */

/* Bit 10 : Enable broadcasting on IPC channel 10 */
#define IPC_SEND_CNF_CHEN10_Pos (10UL) /*!< Position of CHEN10 field. */
#define IPC_SEND_CNF_CHEN10_Msk (0x1UL << IPC_SEND_CNF_CHEN10_Pos) /*!< Bit mask of CHEN10 field. */
#define IPC_SEND_CNF_CHEN10_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN10_Enable (1UL) /*!< Enable broadcast */

/* Bit 9 : Enable broadcasting on IPC channel 9 */
#define IPC_SEND_CNF_CHEN9_Pos (9UL) /*!< Position of CHEN9 field. */
#define IPC_SEND_CNF_CHEN9_Msk (0x1UL << IPC_SEND_CNF_CHEN9_Pos) /*!< Bit mask of CHEN9 field. */
#define IPC_SEND_CNF_CHEN9_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN9_Enable (1UL) /*!< Enable broadcast */

/* Bit 8 : Enable broadcasting on IPC channel 8 */
#define IPC_SEND_CNF_CHEN8_Pos (8UL) /*!< Position of CHEN8 field. */
#define IPC_SEND_CNF_CHEN8_Msk (0x1UL << IPC_SEND_CNF_CHEN8_Pos) /*!< Bit mask of CHEN8 field. */
#define IPC_SEND_CNF_CHEN8_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN8_Enable (1UL) /*!< Enable broadcast */

/* Bit 7 : Enable broadcasting on IPC channel 7 */
#define IPC_SEND_CNF_CHEN7_Pos (7UL) /*!< Position of CHEN7 field. */
#define IPC_SEND_CNF_CHEN7_Msk (0x1UL << IPC_SEND_CNF_CHEN7_Pos) /*!< Bit mask of CHEN7 field. */
#define IPC_SEND_CNF_CHEN7_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN7_Enable (1UL) /*!< Enable broadcast */

/* Bit 6 : Enable broadcasting on IPC channel 6 */
#define IPC_SEND_CNF_CHEN6_Pos (6UL) /*!< Position of CHEN6 field. */
#define IPC_SEND_CNF_CHEN6_Msk (0x1UL << IPC_SEND_CNF_CHEN6_Pos) /*!< Bit mask of CHEN6 field. */
#define IPC_SEND_CNF_CHEN6_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN6_Enable (1UL) /*!< Enable broadcast */

/* Bit 5 : Enable broadcasting on IPC channel 5 */
#define IPC_SEND_CNF_CHEN5_Pos (5UL) /*!< Position of CHEN5 field. */
#define IPC_SEND_CNF_CHEN5_Msk (0x1UL << IPC_SEND_CNF_CHEN5_Pos) /*!< Bit mask of CHEN5 field. */
#define IPC_SEND_CNF_CHEN5_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN5_Enable (1UL) /*!< Enable broadcast */

/* Bit 4 : Enable broadcasting on IPC channel 4 */
#define IPC_SEND_CNF_CHEN4_Pos (4UL) /*!< Position of CHEN4 field. */
#define IPC_SEND_CNF_CHEN4_Msk (0x1UL << IPC_SEND_CNF_CHEN4_Pos) /*!< Bit mask of CHEN4 field. */
#define IPC_SEND_CNF_CHEN4_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN4_Enable (1UL) /*!< Enable broadcast */

/* Bit 3 : Enable broadcasting on IPC channel 3 */
#define IPC_SEND_CNF_CHEN3_Pos (3UL) /*!< Position of CHEN3 field. */
#define IPC_SEND_CNF_CHEN3_Msk (0x1UL << IPC_SEND_CNF_CHEN3_Pos) /*!< Bit mask of CHEN3 field. */
#define IPC_SEND_CNF_CHEN3_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN3_Enable (1UL) /*!< Enable broadcast */

/* Bit 2 : Enable broadcasting on IPC channel 2 */
#define IPC_SEND_CNF_CHEN2_Pos (2UL) /*!< Position of CHEN2 field. */
#define IPC_SEND_CNF_CHEN2_Msk (0x1UL << IPC_SEND_CNF_CHEN2_Pos) /*!< Bit mask of CHEN2 field. */
#define IPC_SEND_CNF_CHEN2_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN2_Enable (1UL) /*!< Enable broadcast */

/* Bit 1 : Enable broadcasting on IPC channel 1 */
#define IPC_SEND_CNF_CHEN1_Pos (1UL) /*!< Position of CHEN1 field. */
#define IPC_SEND_CNF_CHEN1_Msk (0x1UL << IPC_SEND_CNF_CHEN1_Pos) /*!< Bit mask of CHEN1 field. */
#define IPC_SEND_CNF_CHEN1_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN1_Enable (1UL) /*!< Enable broadcast */

/* Bit 0 : Enable broadcasting on IPC channel 0 */
#define IPC_SEND_CNF_CHEN0_Pos (0UL) /*!< Position of CHEN0 field. */
#define IPC_SEND_CNF_CHEN0_Msk (0x1UL << IPC_SEND_CNF_CHEN0_Pos) /*!< Bit mask of CHEN0 field. */
#define IPC_SEND_CNF_CHEN0_Disable (0UL) /*!< Disable broadcast */
#define IPC_SEND_CNF_CHEN0_Enable (1UL) /*!< Enable broadcast */

/* Register: IPC_RECEIVE_CNF */
/* Description: Description collection: Receive event configuration for EVENTS_RECEIVE[n] */

/* Bit 15 : Enable subscription to IPC channel 15 */
#define IPC_RECEIVE_CNF_CHEN15_Pos (15UL) /*!< Position of CHEN15 field. */
#define IPC_RECEIVE_CNF_CHEN15_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN15_Pos) /*!< Bit mask of CHEN15 field. */
#define IPC_RECEIVE_CNF_CHEN15_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN15_Enable (1UL) /*!< Enable events */

/* Bit 14 : Enable subscription to IPC channel 14 */
#define IPC_RECEIVE_CNF_CHEN14_Pos (14UL) /*!< Position of CHEN14 field. */
#define IPC_RECEIVE_CNF_CHEN14_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN14_Pos) /*!< Bit mask of CHEN14 field. */
#define IPC_RECEIVE_CNF_CHEN14_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN14_Enable (1UL) /*!< Enable events */

/* Bit 13 : Enable subscription to IPC channel 13 */
#define IPC_RECEIVE_CNF_CHEN13_Pos (13UL) /*!< Position of CHEN13 field. */
#define IPC_RECEIVE_CNF_CHEN13_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN13_Pos) /*!< Bit mask of CHEN13 field. */
#define IPC_RECEIVE_CNF_CHEN13_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN13_Enable (1UL) /*!< Enable events */

/* Bit 12 : Enable subscription to IPC channel 12 */
#define IPC_RECEIVE_CNF_CHEN12_Pos (12UL) /*!< Position of CHEN12 field. */
#define IPC_RECEIVE_CNF_CHEN12_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN12_Pos) /*!< Bit mask of CHEN12 field. */
#define IPC_RECEIVE_CNF_CHEN12_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN12_Enable (1UL) /*!< Enable events */

/* Bit 11 : Enable subscription to IPC channel 11 */
#define IPC_RECEIVE_CNF_CHEN11_Pos (11UL) /*!< Position of CHEN11 field. */
#define IPC_RECEIVE_CNF_CHEN11_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN11_Pos) /*!< Bit mask of CHEN11 field. */
#define IPC_RECEIVE_CNF_CHEN11_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN11_Enable (1UL) /*!< Enable events */

/* Bit 10 : Enable subscription to IPC channel 10 */
#define IPC_RECEIVE_CNF_CHEN10_Pos (10UL) /*!< Position of CHEN10 field. */
#define IPC_RECEIVE_CNF_CHEN10_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN10_Pos) /*!< Bit mask of CHEN10 field. */
#define IPC_RECEIVE_CNF_CHEN10_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN10_Enable (1UL) /*!< Enable events */

/* Bit 9 : Enable subscription to IPC channel 9 */
#define IPC_RECEIVE_CNF_CHEN9_Pos (9UL) /*!< Position of CHEN9 field. */
#define IPC_RECEIVE_CNF_CHEN9_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN9_Pos) /*!< Bit mask of CHEN9 field. */
#define IPC_RECEIVE_CNF_CHEN9_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN9_Enable (1UL) /*!< Enable events */

/* Bit 8 : Enable subscription to IPC channel 8 */
#define IPC_RECEIVE_CNF_CHEN8_Pos (8UL) /*!< Position of CHEN8 field. */
#define IPC_RECEIVE_CNF_CHEN8_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN8_Pos) /*!< Bit mask of CHEN8 field. */
#define IPC_RECEIVE_CNF_CHEN8_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN8_Enable (1UL) /*!< Enable events */

/* Bit 7 : Enable subscription to IPC channel 7 */
#define IPC_RECEIVE_CNF_CHEN7_Pos (7UL) /*!< Position of CHEN7 field. */
#define IPC_RECEIVE_CNF_CHEN7_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN7_Pos) /*!< Bit mask of CHEN7 field. */
#define IPC_RECEIVE_CNF_CHEN7_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN7_Enable (1UL) /*!< Enable events */

/* Bit 6 : Enable subscription to IPC channel 6 */
#define IPC_RECEIVE_CNF_CHEN6_Pos (6UL) /*!< Position of CHEN6 field. */
#define IPC_RECEIVE_CNF_CHEN6_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN6_Pos) /*!< Bit mask of CHEN6 field. */
#define IPC_RECEIVE_CNF_CHEN6_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN6_Enable (1UL) /*!< Enable events */

/* Bit 5 : Enable subscription to IPC channel 5 */
#define IPC_RECEIVE_CNF_CHEN5_Pos (5UL) /*!< Position of CHEN5 field. */
#define IPC_RECEIVE_CNF_CHEN5_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN5_Pos) /*!< Bit mask of CHEN5 field. */
#define IPC_RECEIVE_CNF_CHEN5_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN5_Enable (1UL) /*!< Enable events */

/* Bit 4 : Enable subscription to IPC channel 4 */
#define IPC_RECEIVE_CNF_CHEN4_Pos (4UL) /*!< Position of CHEN4 field. */
#define IPC_RECEIVE_CNF_CHEN4_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN4_Pos) /*!< Bit mask of CHEN4 field. */
#define IPC_RECEIVE_CNF_CHEN4_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN4_Enable (1UL) /*!< Enable events */

/* Bit 3 : Enable subscription to IPC channel 3 */
#define IPC_RECEIVE_CNF_CHEN3_Pos (3UL) /*!< Position of CHEN3 field. */
#define IPC_RECEIVE_CNF_CHEN3_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN3_Pos) /*!< Bit mask of CHEN3 field. */
#define IPC_RECEIVE_CNF_CHEN3_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN3_Enable (1UL) /*!< Enable events */

/* Bit 2 : Enable subscription to IPC channel 2 */
#define IPC_RECEIVE_CNF_CHEN2_Pos (2UL) /*!< Position of CHEN2 field. */
#define IPC_RECEIVE_CNF_CHEN2_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN2_Pos) /*!< Bit mask of CHEN2 field. */
#define IPC_RECEIVE_CNF_CHEN2_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN2_Enable (1UL) /*!< Enable events */

/* Bit 1 : Enable subscription to IPC channel 1 */
#define IPC_RECEIVE_CNF_CHEN1_Pos (1UL) /*!< Position of CHEN1 field. */
#define IPC_RECEIVE_CNF_CHEN1_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN1_Pos) /*!< Bit mask of CHEN1 field. */
#define IPC_RECEIVE_CNF_CHEN1_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN1_Enable (1UL) /*!< Enable events */

/* Bit 0 : Enable subscription to IPC channel 0 */
#define IPC_RECEIVE_CNF_CHEN0_Pos (0UL) /*!< Position of CHEN0 field. */
#define IPC_RECEIVE_CNF_CHEN0_Msk (0x1UL << IPC_RECEIVE_CNF_CHEN0_Pos) /*!< Bit mask of CHEN0 field. */
#define IPC_RECEIVE_CNF_CHEN0_Disable (0UL) /*!< Disable events */
#define IPC_RECEIVE_CNF_CHEN0_Enable (1UL) /*!< Enable events */

/* Register: IPC_GPMEM */
/* Description: Description collection: General purpose memory */

/* Bits 31..0 : General purpose memory */
#define IPC_GPMEM_GPMEM_Pos (0UL) /*!< Position of GPMEM field. */
#define IPC_GPMEM_GPMEM_Msk (0xFFFFFFFFUL << IPC_GPMEM_GPMEM_Pos) /*!< Bit mask of GPMEM field. */


/* Peripheral: KMU */
/* Description: Key management unit 0 */

/* Register: KMU_TASKS_PUSH_KEYSLOT */
/* Description: Push a key slot over secure APB */

/* Bit 0 : Push a key slot over secure APB */
#define KMU_TASKS_PUSH_KEYSLOT_TASKS_PUSH_KEYSLOT_Pos (0UL) /*!< Position of TASKS_PUSH_KEYSLOT field. */
#define KMU_TASKS_PUSH_KEYSLOT_TASKS_PUSH_KEYSLOT_Msk (0x1UL << KMU_TASKS_PUSH_KEYSLOT_TASKS_PUSH_KEYSLOT_Pos) /*!< Bit mask of TASKS_PUSH_KEYSLOT field. */
#define KMU_TASKS_PUSH_KEYSLOT_TASKS_PUSH_KEYSLOT_Trigger (1UL) /*!< Trigger task */

/* Register: KMU_EVENTS_KEYSLOT_PUSHED */
/* Description: Key slot successfully pushed over secure APB */

/* Bit 0 : Key slot successfully pushed over secure APB */
#define KMU_EVENTS_KEYSLOT_PUSHED_EVENTS_KEYSLOT_PUSHED_Pos (0UL) /*!< Position of EVENTS_KEYSLOT_PUSHED field. */
#define KMU_EVENTS_KEYSLOT_PUSHED_EVENTS_KEYSLOT_PUSHED_Msk (0x1UL << KMU_EVENTS_KEYSLOT_PUSHED_EVENTS_KEYSLOT_PUSHED_Pos) /*!< Bit mask of EVENTS_KEYSLOT_PUSHED field. */
#define KMU_EVENTS_KEYSLOT_PUSHED_EVENTS_KEYSLOT_PUSHED_NotGenerated (0UL) /*!< Event not generated */
#define KMU_EVENTS_KEYSLOT_PUSHED_EVENTS_KEYSLOT_PUSHED_Generated (1UL) /*!< Event generated */

/* Register: KMU_EVENTS_KEYSLOT_REVOKED */
/* Description: Key slot has been revoked and cannot be tasked for selection */

/* Bit 0 : Key slot has been revoked and cannot be tasked for selection */
#define KMU_EVENTS_KEYSLOT_REVOKED_EVENTS_KEYSLOT_REVOKED_Pos (0UL) /*!< Position of EVENTS_KEYSLOT_REVOKED field. */
#define KMU_EVENTS_KEYSLOT_REVOKED_EVENTS_KEYSLOT_REVOKED_Msk (0x1UL << KMU_EVENTS_KEYSLOT_REVOKED_EVENTS_KEYSLOT_REVOKED_Pos) /*!< Bit mask of EVENTS_KEYSLOT_REVOKED field. */
#define KMU_EVENTS_KEYSLOT_REVOKED_EVENTS_KEYSLOT_REVOKED_NotGenerated (0UL) /*!< Event not generated */
#define KMU_EVENTS_KEYSLOT_REVOKED_EVENTS_KEYSLOT_REVOKED_Generated (1UL) /*!< Event generated */

/* Register: KMU_EVENTS_KEYSLOT_ERROR */
/* Description: No key slot selected, no destination address defined, or error during push operation */

/* Bit 0 : No key slot selected, no destination address defined, or error during push operation */
#define KMU_EVENTS_KEYSLOT_ERROR_EVENTS_KEYSLOT_ERROR_Pos (0UL) /*!< Position of EVENTS_KEYSLOT_ERROR field. */
#define KMU_EVENTS_KEYSLOT_ERROR_EVENTS_KEYSLOT_ERROR_Msk (0x1UL << KMU_EVENTS_KEYSLOT_ERROR_EVENTS_KEYSLOT_ERROR_Pos) /*!< Bit mask of EVENTS_KEYSLOT_ERROR field. */
#define KMU_EVENTS_KEYSLOT_ERROR_EVENTS_KEYSLOT_ERROR_NotGenerated (0UL) /*!< Event not generated */
#define KMU_EVENTS_KEYSLOT_ERROR_EVENTS_KEYSLOT_ERROR_Generated (1UL) /*!< Event generated */

/* Register: KMU_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 2 : Enable or disable interrupt for event KEYSLOT_ERROR */
#define KMU_INTEN_KEYSLOT_ERROR_Pos (2UL) /*!< Position of KEYSLOT_ERROR field. */
#define KMU_INTEN_KEYSLOT_ERROR_Msk (0x1UL << KMU_INTEN_KEYSLOT_ERROR_Pos) /*!< Bit mask of KEYSLOT_ERROR field. */
#define KMU_INTEN_KEYSLOT_ERROR_Disabled (0UL) /*!< Disable */
#define KMU_INTEN_KEYSLOT_ERROR_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event KEYSLOT_REVOKED */
#define KMU_INTEN_KEYSLOT_REVOKED_Pos (1UL) /*!< Position of KEYSLOT_REVOKED field. */
#define KMU_INTEN_KEYSLOT_REVOKED_Msk (0x1UL << KMU_INTEN_KEYSLOT_REVOKED_Pos) /*!< Bit mask of KEYSLOT_REVOKED field. */
#define KMU_INTEN_KEYSLOT_REVOKED_Disabled (0UL) /*!< Disable */
#define KMU_INTEN_KEYSLOT_REVOKED_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event KEYSLOT_PUSHED */
#define KMU_INTEN_KEYSLOT_PUSHED_Pos (0UL) /*!< Position of KEYSLOT_PUSHED field. */
#define KMU_INTEN_KEYSLOT_PUSHED_Msk (0x1UL << KMU_INTEN_KEYSLOT_PUSHED_Pos) /*!< Bit mask of KEYSLOT_PUSHED field. */
#define KMU_INTEN_KEYSLOT_PUSHED_Disabled (0UL) /*!< Disable */
#define KMU_INTEN_KEYSLOT_PUSHED_Enabled (1UL) /*!< Enable */

/* Register: KMU_INTENSET */
/* Description: Enable interrupt */

/* Bit 2 : Write '1' to enable interrupt for event KEYSLOT_ERROR */
#define KMU_INTENSET_KEYSLOT_ERROR_Pos (2UL) /*!< Position of KEYSLOT_ERROR field. */
#define KMU_INTENSET_KEYSLOT_ERROR_Msk (0x1UL << KMU_INTENSET_KEYSLOT_ERROR_Pos) /*!< Bit mask of KEYSLOT_ERROR field. */
#define KMU_INTENSET_KEYSLOT_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define KMU_INTENSET_KEYSLOT_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define KMU_INTENSET_KEYSLOT_ERROR_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event KEYSLOT_REVOKED */
#define KMU_INTENSET_KEYSLOT_REVOKED_Pos (1UL) /*!< Position of KEYSLOT_REVOKED field. */
#define KMU_INTENSET_KEYSLOT_REVOKED_Msk (0x1UL << KMU_INTENSET_KEYSLOT_REVOKED_Pos) /*!< Bit mask of KEYSLOT_REVOKED field. */
#define KMU_INTENSET_KEYSLOT_REVOKED_Disabled (0UL) /*!< Read: Disabled */
#define KMU_INTENSET_KEYSLOT_REVOKED_Enabled (1UL) /*!< Read: Enabled */
#define KMU_INTENSET_KEYSLOT_REVOKED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event KEYSLOT_PUSHED */
#define KMU_INTENSET_KEYSLOT_PUSHED_Pos (0UL) /*!< Position of KEYSLOT_PUSHED field. */
#define KMU_INTENSET_KEYSLOT_PUSHED_Msk (0x1UL << KMU_INTENSET_KEYSLOT_PUSHED_Pos) /*!< Bit mask of KEYSLOT_PUSHED field. */
#define KMU_INTENSET_KEYSLOT_PUSHED_Disabled (0UL) /*!< Read: Disabled */
#define KMU_INTENSET_KEYSLOT_PUSHED_Enabled (1UL) /*!< Read: Enabled */
#define KMU_INTENSET_KEYSLOT_PUSHED_Set (1UL) /*!< Enable */

/* Register: KMU_INTENCLR */
/* Description: Disable interrupt */

/* Bit 2 : Write '1' to disable interrupt for event KEYSLOT_ERROR */
#define KMU_INTENCLR_KEYSLOT_ERROR_Pos (2UL) /*!< Position of KEYSLOT_ERROR field. */
#define KMU_INTENCLR_KEYSLOT_ERROR_Msk (0x1UL << KMU_INTENCLR_KEYSLOT_ERROR_Pos) /*!< Bit mask of KEYSLOT_ERROR field. */
#define KMU_INTENCLR_KEYSLOT_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define KMU_INTENCLR_KEYSLOT_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define KMU_INTENCLR_KEYSLOT_ERROR_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event KEYSLOT_REVOKED */
#define KMU_INTENCLR_KEYSLOT_REVOKED_Pos (1UL) /*!< Position of KEYSLOT_REVOKED field. */
#define KMU_INTENCLR_KEYSLOT_REVOKED_Msk (0x1UL << KMU_INTENCLR_KEYSLOT_REVOKED_Pos) /*!< Bit mask of KEYSLOT_REVOKED field. */
#define KMU_INTENCLR_KEYSLOT_REVOKED_Disabled (0UL) /*!< Read: Disabled */
#define KMU_INTENCLR_KEYSLOT_REVOKED_Enabled (1UL) /*!< Read: Enabled */
#define KMU_INTENCLR_KEYSLOT_REVOKED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event KEYSLOT_PUSHED */
#define KMU_INTENCLR_KEYSLOT_PUSHED_Pos (0UL) /*!< Position of KEYSLOT_PUSHED field. */
#define KMU_INTENCLR_KEYSLOT_PUSHED_Msk (0x1UL << KMU_INTENCLR_KEYSLOT_PUSHED_Pos) /*!< Bit mask of KEYSLOT_PUSHED field. */
#define KMU_INTENCLR_KEYSLOT_PUSHED_Disabled (0UL) /*!< Read: Disabled */
#define KMU_INTENCLR_KEYSLOT_PUSHED_Enabled (1UL) /*!< Read: Enabled */
#define KMU_INTENCLR_KEYSLOT_PUSHED_Clear (1UL) /*!< Disable */

/* Register: KMU_INTPEND */
/* Description: Pending interrupts */

/* Bit 2 : Read pending status of interrupt for event KEYSLOT_ERROR */
#define KMU_INTPEND_KEYSLOT_ERROR_Pos (2UL) /*!< Position of KEYSLOT_ERROR field. */
#define KMU_INTPEND_KEYSLOT_ERROR_Msk (0x1UL << KMU_INTPEND_KEYSLOT_ERROR_Pos) /*!< Bit mask of KEYSLOT_ERROR field. */
#define KMU_INTPEND_KEYSLOT_ERROR_NotPending (0UL) /*!< Read: Not pending */
#define KMU_INTPEND_KEYSLOT_ERROR_Pending (1UL) /*!< Read: Pending */

/* Bit 1 : Read pending status of interrupt for event KEYSLOT_REVOKED */
#define KMU_INTPEND_KEYSLOT_REVOKED_Pos (1UL) /*!< Position of KEYSLOT_REVOKED field. */
#define KMU_INTPEND_KEYSLOT_REVOKED_Msk (0x1UL << KMU_INTPEND_KEYSLOT_REVOKED_Pos) /*!< Bit mask of KEYSLOT_REVOKED field. */
#define KMU_INTPEND_KEYSLOT_REVOKED_NotPending (0UL) /*!< Read: Not pending */
#define KMU_INTPEND_KEYSLOT_REVOKED_Pending (1UL) /*!< Read: Pending */

/* Bit 0 : Read pending status of interrupt for event KEYSLOT_PUSHED */
#define KMU_INTPEND_KEYSLOT_PUSHED_Pos (0UL) /*!< Position of KEYSLOT_PUSHED field. */
#define KMU_INTPEND_KEYSLOT_PUSHED_Msk (0x1UL << KMU_INTPEND_KEYSLOT_PUSHED_Pos) /*!< Bit mask of KEYSLOT_PUSHED field. */
#define KMU_INTPEND_KEYSLOT_PUSHED_NotPending (0UL) /*!< Read: Not pending */
#define KMU_INTPEND_KEYSLOT_PUSHED_Pending (1UL) /*!< Read: Pending */

/* Register: KMU_STATUS */
/* Description: Status bits for KMU operation */

/* Bit 1 : Violation status */
#define KMU_STATUS_BLOCKED_Pos (1UL) /*!< Position of BLOCKED field. */
#define KMU_STATUS_BLOCKED_Msk (0x1UL << KMU_STATUS_BLOCKED_Pos) /*!< Bit mask of BLOCKED field. */
#define KMU_STATUS_BLOCKED_Disabled (0UL) /*!< No access violation detected */
#define KMU_STATUS_BLOCKED_Enabled (1UL) /*!< Access violation detected and blocked */

/* Bit 0 : Key slot ID successfully selected by the KMU */
#define KMU_STATUS_SELECTED_Pos (0UL) /*!< Position of SELECTED field. */
#define KMU_STATUS_SELECTED_Msk (0x1UL << KMU_STATUS_SELECTED_Pos) /*!< Bit mask of SELECTED field. */
#define KMU_STATUS_SELECTED_Disabled (0UL) /*!< No key slot ID selected by KMU */
#define KMU_STATUS_SELECTED_Enabled (1UL) /*!< Key slot ID successfully selected by KMU */

/* Register: KMU_SELECTKEYSLOT */
/* Description: Select key slot to be read over AHB or pushed over secure APB when TASKS_PUSH_KEYSLOT is started */

/* Bits 7..0 : Select key slot ID to be read over AHB, or pushed over secure APB, when TASKS_PUSH_KEYSLOT is started. NOTE: ID=0 is not a valid key slot ID. The 0 ID should be used when the KMU is idle or not in use. NOTE: Index N in UICR-&gt;KEYSLOT.KEY[N] and UICR-&gt;KEYSLOT.CONFIG[N] corresponds to KMU key slot ID=N+1. */
#define KMU_SELECTKEYSLOT_ID_Pos (0UL) /*!< Position of ID field. */
#define KMU_SELECTKEYSLOT_ID_Msk (0xFFUL << KMU_SELECTKEYSLOT_ID_Pos) /*!< Bit mask of ID field. */


/* Peripheral: LPCOMP */
/* Description: Low-power comparator 0 */

/* Register: LPCOMP_TASKS_START */
/* Description: Start comparator */

/* Bit 0 : Start comparator */
#define LPCOMP_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define LPCOMP_TASKS_START_TASKS_START_Msk (0x1UL << LPCOMP_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define LPCOMP_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: LPCOMP_TASKS_STOP */
/* Description: Stop comparator */

/* Bit 0 : Stop comparator */
#define LPCOMP_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define LPCOMP_TASKS_STOP_TASKS_STOP_Msk (0x1UL << LPCOMP_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define LPCOMP_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: LPCOMP_TASKS_SAMPLE */
/* Description: Sample comparator value */

/* Bit 0 : Sample comparator value */
#define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL) /*!< Position of TASKS_SAMPLE field. */
#define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos) /*!< Bit mask of TASKS_SAMPLE field. */
#define LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (1UL) /*!< Trigger task */

/* Register: LPCOMP_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define LPCOMP_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define LPCOMP_SUBSCRIBE_START_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define LPCOMP_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define LPCOMP_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define LPCOMP_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define LPCOMP_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: LPCOMP_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define LPCOMP_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define LPCOMP_SUBSCRIBE_STOP_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define LPCOMP_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define LPCOMP_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define LPCOMP_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define LPCOMP_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: LPCOMP_SUBSCRIBE_SAMPLE */
/* Description: Subscribe configuration for task SAMPLE */

/* Bit 31 :   */
#define LPCOMP_SUBSCRIBE_SAMPLE_EN_Pos (31UL) /*!< Position of EN field. */
#define LPCOMP_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << LPCOMP_SUBSCRIBE_SAMPLE_EN_Pos) /*!< Bit mask of EN field. */
#define LPCOMP_SUBSCRIBE_SAMPLE_EN_Disabled (0UL) /*!< Disable subscription */
#define LPCOMP_SUBSCRIBE_SAMPLE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SAMPLE will subscribe to */
#define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << LPCOMP_SUBSCRIBE_SAMPLE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: LPCOMP_EVENTS_READY */
/* Description: LPCOMP is ready and output is valid */

/* Bit 0 : LPCOMP is ready and output is valid */
#define LPCOMP_EVENTS_READY_EVENTS_READY_Pos (0UL) /*!< Position of EVENTS_READY field. */
#define LPCOMP_EVENTS_READY_EVENTS_READY_Msk (0x1UL << LPCOMP_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY field. */
#define LPCOMP_EVENTS_READY_EVENTS_READY_NotGenerated (0UL) /*!< Event not generated */
#define LPCOMP_EVENTS_READY_EVENTS_READY_Generated (1UL) /*!< Event generated */

/* Register: LPCOMP_EVENTS_DOWN */
/* Description: Downward crossing */

/* Bit 0 : Downward crossing */
#define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos (0UL) /*!< Position of EVENTS_DOWN field. */
#define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Msk (0x1UL << LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos) /*!< Bit mask of EVENTS_DOWN field. */
#define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated (0UL) /*!< Event not generated */
#define LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Generated (1UL) /*!< Event generated */

/* Register: LPCOMP_EVENTS_UP */
/* Description: Upward crossing */

/* Bit 0 : Upward crossing */
#define LPCOMP_EVENTS_UP_EVENTS_UP_Pos (0UL) /*!< Position of EVENTS_UP field. */
#define LPCOMP_EVENTS_UP_EVENTS_UP_Msk (0x1UL << LPCOMP_EVENTS_UP_EVENTS_UP_Pos) /*!< Bit mask of EVENTS_UP field. */
#define LPCOMP_EVENTS_UP_EVENTS_UP_NotGenerated (0UL) /*!< Event not generated */
#define LPCOMP_EVENTS_UP_EVENTS_UP_Generated (1UL) /*!< Event generated */

/* Register: LPCOMP_EVENTS_CROSS */
/* Description: Downward or upward crossing */

/* Bit 0 : Downward or upward crossing */
#define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos (0UL) /*!< Position of EVENTS_CROSS field. */
#define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Msk (0x1UL << LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos) /*!< Bit mask of EVENTS_CROSS field. */
#define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated (0UL) /*!< Event not generated */
#define LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Generated (1UL) /*!< Event generated */

/* Register: LPCOMP_PUBLISH_READY */
/* Description: Publish configuration for event READY */

/* Bit 31 :   */
#define LPCOMP_PUBLISH_READY_EN_Pos (31UL) /*!< Position of EN field. */
#define LPCOMP_PUBLISH_READY_EN_Msk (0x1UL << LPCOMP_PUBLISH_READY_EN_Pos) /*!< Bit mask of EN field. */
#define LPCOMP_PUBLISH_READY_EN_Disabled (0UL) /*!< Disable publishing */
#define LPCOMP_PUBLISH_READY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event READY will publish to. */
#define LPCOMP_PUBLISH_READY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define LPCOMP_PUBLISH_READY_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: LPCOMP_PUBLISH_DOWN */
/* Description: Publish configuration for event DOWN */

/* Bit 31 :   */
#define LPCOMP_PUBLISH_DOWN_EN_Pos (31UL) /*!< Position of EN field. */
#define LPCOMP_PUBLISH_DOWN_EN_Msk (0x1UL << LPCOMP_PUBLISH_DOWN_EN_Pos) /*!< Bit mask of EN field. */
#define LPCOMP_PUBLISH_DOWN_EN_Disabled (0UL) /*!< Disable publishing */
#define LPCOMP_PUBLISH_DOWN_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DOWN will publish to. */
#define LPCOMP_PUBLISH_DOWN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define LPCOMP_PUBLISH_DOWN_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_DOWN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: LPCOMP_PUBLISH_UP */
/* Description: Publish configuration for event UP */

/* Bit 31 :   */
#define LPCOMP_PUBLISH_UP_EN_Pos (31UL) /*!< Position of EN field. */
#define LPCOMP_PUBLISH_UP_EN_Msk (0x1UL << LPCOMP_PUBLISH_UP_EN_Pos) /*!< Bit mask of EN field. */
#define LPCOMP_PUBLISH_UP_EN_Disabled (0UL) /*!< Disable publishing */
#define LPCOMP_PUBLISH_UP_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event UP will publish to. */
#define LPCOMP_PUBLISH_UP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define LPCOMP_PUBLISH_UP_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_UP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: LPCOMP_PUBLISH_CROSS */
/* Description: Publish configuration for event CROSS */

/* Bit 31 :   */
#define LPCOMP_PUBLISH_CROSS_EN_Pos (31UL) /*!< Position of EN field. */
#define LPCOMP_PUBLISH_CROSS_EN_Msk (0x1UL << LPCOMP_PUBLISH_CROSS_EN_Pos) /*!< Bit mask of EN field. */
#define LPCOMP_PUBLISH_CROSS_EN_Disabled (0UL) /*!< Disable publishing */
#define LPCOMP_PUBLISH_CROSS_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CROSS will publish to. */
#define LPCOMP_PUBLISH_CROSS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define LPCOMP_PUBLISH_CROSS_CHIDX_Msk (0xFFUL << LPCOMP_PUBLISH_CROSS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: LPCOMP_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 4 : Shortcut between event CROSS and task STOP */
#define LPCOMP_SHORTS_CROSS_STOP_Pos (4UL) /*!< Position of CROSS_STOP field. */
#define LPCOMP_SHORTS_CROSS_STOP_Msk (0x1UL << LPCOMP_SHORTS_CROSS_STOP_Pos) /*!< Bit mask of CROSS_STOP field. */
#define LPCOMP_SHORTS_CROSS_STOP_Disabled (0UL) /*!< Disable shortcut */
#define LPCOMP_SHORTS_CROSS_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event UP and task STOP */
#define LPCOMP_SHORTS_UP_STOP_Pos (3UL) /*!< Position of UP_STOP field. */
#define LPCOMP_SHORTS_UP_STOP_Msk (0x1UL << LPCOMP_SHORTS_UP_STOP_Pos) /*!< Bit mask of UP_STOP field. */
#define LPCOMP_SHORTS_UP_STOP_Disabled (0UL) /*!< Disable shortcut */
#define LPCOMP_SHORTS_UP_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 2 : Shortcut between event DOWN and task STOP */
#define LPCOMP_SHORTS_DOWN_STOP_Pos (2UL) /*!< Position of DOWN_STOP field. */
#define LPCOMP_SHORTS_DOWN_STOP_Msk (0x1UL << LPCOMP_SHORTS_DOWN_STOP_Pos) /*!< Bit mask of DOWN_STOP field. */
#define LPCOMP_SHORTS_DOWN_STOP_Disabled (0UL) /*!< Disable shortcut */
#define LPCOMP_SHORTS_DOWN_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 1 : Shortcut between event READY and task STOP */
#define LPCOMP_SHORTS_READY_STOP_Pos (1UL) /*!< Position of READY_STOP field. */
#define LPCOMP_SHORTS_READY_STOP_Msk (0x1UL << LPCOMP_SHORTS_READY_STOP_Pos) /*!< Bit mask of READY_STOP field. */
#define LPCOMP_SHORTS_READY_STOP_Disabled (0UL) /*!< Disable shortcut */
#define LPCOMP_SHORTS_READY_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event READY and task SAMPLE */
#define LPCOMP_SHORTS_READY_SAMPLE_Pos (0UL) /*!< Position of READY_SAMPLE field. */
#define LPCOMP_SHORTS_READY_SAMPLE_Msk (0x1UL << LPCOMP_SHORTS_READY_SAMPLE_Pos) /*!< Bit mask of READY_SAMPLE field. */
#define LPCOMP_SHORTS_READY_SAMPLE_Disabled (0UL) /*!< Disable shortcut */
#define LPCOMP_SHORTS_READY_SAMPLE_Enabled (1UL) /*!< Enable shortcut */

/* Register: LPCOMP_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 3 : Enable or disable interrupt for event CROSS */
#define LPCOMP_INTEN_CROSS_Pos (3UL) /*!< Position of CROSS field. */
#define LPCOMP_INTEN_CROSS_Msk (0x1UL << LPCOMP_INTEN_CROSS_Pos) /*!< Bit mask of CROSS field. */
#define LPCOMP_INTEN_CROSS_Disabled (0UL) /*!< Disable */
#define LPCOMP_INTEN_CROSS_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event UP */
#define LPCOMP_INTEN_UP_Pos (2UL) /*!< Position of UP field. */
#define LPCOMP_INTEN_UP_Msk (0x1UL << LPCOMP_INTEN_UP_Pos) /*!< Bit mask of UP field. */
#define LPCOMP_INTEN_UP_Disabled (0UL) /*!< Disable */
#define LPCOMP_INTEN_UP_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event DOWN */
#define LPCOMP_INTEN_DOWN_Pos (1UL) /*!< Position of DOWN field. */
#define LPCOMP_INTEN_DOWN_Msk (0x1UL << LPCOMP_INTEN_DOWN_Pos) /*!< Bit mask of DOWN field. */
#define LPCOMP_INTEN_DOWN_Disabled (0UL) /*!< Disable */
#define LPCOMP_INTEN_DOWN_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event READY */
#define LPCOMP_INTEN_READY_Pos (0UL) /*!< Position of READY field. */
#define LPCOMP_INTEN_READY_Msk (0x1UL << LPCOMP_INTEN_READY_Pos) /*!< Bit mask of READY field. */
#define LPCOMP_INTEN_READY_Disabled (0UL) /*!< Disable */
#define LPCOMP_INTEN_READY_Enabled (1UL) /*!< Enable */

/* Register: LPCOMP_INTENSET */
/* Description: Enable interrupt */

/* Bit 3 : Write '1' to enable interrupt for event CROSS */
#define LPCOMP_INTENSET_CROSS_Pos (3UL) /*!< Position of CROSS field. */
#define LPCOMP_INTENSET_CROSS_Msk (0x1UL << LPCOMP_INTENSET_CROSS_Pos) /*!< Bit mask of CROSS field. */
#define LPCOMP_INTENSET_CROSS_Disabled (0UL) /*!< Read: Disabled */
#define LPCOMP_INTENSET_CROSS_Enabled (1UL) /*!< Read: Enabled */
#define LPCOMP_INTENSET_CROSS_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event UP */
#define LPCOMP_INTENSET_UP_Pos (2UL) /*!< Position of UP field. */
#define LPCOMP_INTENSET_UP_Msk (0x1UL << LPCOMP_INTENSET_UP_Pos) /*!< Bit mask of UP field. */
#define LPCOMP_INTENSET_UP_Disabled (0UL) /*!< Read: Disabled */
#define LPCOMP_INTENSET_UP_Enabled (1UL) /*!< Read: Enabled */
#define LPCOMP_INTENSET_UP_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event DOWN */
#define LPCOMP_INTENSET_DOWN_Pos (1UL) /*!< Position of DOWN field. */
#define LPCOMP_INTENSET_DOWN_Msk (0x1UL << LPCOMP_INTENSET_DOWN_Pos) /*!< Bit mask of DOWN field. */
#define LPCOMP_INTENSET_DOWN_Disabled (0UL) /*!< Read: Disabled */
#define LPCOMP_INTENSET_DOWN_Enabled (1UL) /*!< Read: Enabled */
#define LPCOMP_INTENSET_DOWN_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event READY */
#define LPCOMP_INTENSET_READY_Pos (0UL) /*!< Position of READY field. */
#define LPCOMP_INTENSET_READY_Msk (0x1UL << LPCOMP_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
#define LPCOMP_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
#define LPCOMP_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
#define LPCOMP_INTENSET_READY_Set (1UL) /*!< Enable */

/* Register: LPCOMP_INTENCLR */
/* Description: Disable interrupt */

/* Bit 3 : Write '1' to disable interrupt for event CROSS */
#define LPCOMP_INTENCLR_CROSS_Pos (3UL) /*!< Position of CROSS field. */
#define LPCOMP_INTENCLR_CROSS_Msk (0x1UL << LPCOMP_INTENCLR_CROSS_Pos) /*!< Bit mask of CROSS field. */
#define LPCOMP_INTENCLR_CROSS_Disabled (0UL) /*!< Read: Disabled */
#define LPCOMP_INTENCLR_CROSS_Enabled (1UL) /*!< Read: Enabled */
#define LPCOMP_INTENCLR_CROSS_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event UP */
#define LPCOMP_INTENCLR_UP_Pos (2UL) /*!< Position of UP field. */
#define LPCOMP_INTENCLR_UP_Msk (0x1UL << LPCOMP_INTENCLR_UP_Pos) /*!< Bit mask of UP field. */
#define LPCOMP_INTENCLR_UP_Disabled (0UL) /*!< Read: Disabled */
#define LPCOMP_INTENCLR_UP_Enabled (1UL) /*!< Read: Enabled */
#define LPCOMP_INTENCLR_UP_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event DOWN */
#define LPCOMP_INTENCLR_DOWN_Pos (1UL) /*!< Position of DOWN field. */
#define LPCOMP_INTENCLR_DOWN_Msk (0x1UL << LPCOMP_INTENCLR_DOWN_Pos) /*!< Bit mask of DOWN field. */
#define LPCOMP_INTENCLR_DOWN_Disabled (0UL) /*!< Read: Disabled */
#define LPCOMP_INTENCLR_DOWN_Enabled (1UL) /*!< Read: Enabled */
#define LPCOMP_INTENCLR_DOWN_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event READY */
#define LPCOMP_INTENCLR_READY_Pos (0UL) /*!< Position of READY field. */
#define LPCOMP_INTENCLR_READY_Msk (0x1UL << LPCOMP_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
#define LPCOMP_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
#define LPCOMP_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
#define LPCOMP_INTENCLR_READY_Clear (1UL) /*!< Disable */

/* Register: LPCOMP_RESULT */
/* Description: Compare result */

/* Bit 0 : Result of last compare. Decision point SAMPLE task. */
#define LPCOMP_RESULT_RESULT_Pos (0UL) /*!< Position of RESULT field. */
#define LPCOMP_RESULT_RESULT_Msk (0x1UL << LPCOMP_RESULT_RESULT_Pos) /*!< Bit mask of RESULT field. */
#define LPCOMP_RESULT_RESULT_Below (0UL) /*!< Input voltage is below the reference threshold (VIN+ &lt; VIN-) */
#define LPCOMP_RESULT_RESULT_Above (1UL) /*!< Input voltage is above the reference threshold (VIN+ &gt; VIN-) */

/* Register: LPCOMP_ENABLE */
/* Description: Enable LPCOMP */

/* Bits 1..0 : Enable or disable LPCOMP */
#define LPCOMP_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define LPCOMP_ENABLE_ENABLE_Msk (0x3UL << LPCOMP_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define LPCOMP_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
#define LPCOMP_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */

/* Register: LPCOMP_PSEL */
/* Description: Input pin select */

/* Bits 2..0 : Analog pin select */
#define LPCOMP_PSEL_PSEL_Pos (0UL) /*!< Position of PSEL field. */
#define LPCOMP_PSEL_PSEL_Msk (0x7UL << LPCOMP_PSEL_PSEL_Pos) /*!< Bit mask of PSEL field. */
#define LPCOMP_PSEL_PSEL_AnalogInput0 (0UL) /*!< AIN0 selected as analog input */
#define LPCOMP_PSEL_PSEL_AnalogInput1 (1UL) /*!< AIN1 selected as analog input */
#define LPCOMP_PSEL_PSEL_AnalogInput2 (2UL) /*!< AIN2 selected as analog input */
#define LPCOMP_PSEL_PSEL_AnalogInput3 (3UL) /*!< AIN3 selected as analog input */
#define LPCOMP_PSEL_PSEL_AnalogInput4 (4UL) /*!< AIN4 selected as analog input */
#define LPCOMP_PSEL_PSEL_AnalogInput5 (5UL) /*!< AIN5 selected as analog input */
#define LPCOMP_PSEL_PSEL_AnalogInput6 (6UL) /*!< AIN6 selected as analog input */
#define LPCOMP_PSEL_PSEL_AnalogInput7 (7UL) /*!< AIN7 selected as analog input */

/* Register: LPCOMP_REFSEL */
/* Description: Reference select */

/* Bits 3..0 : Reference select */
#define LPCOMP_REFSEL_REFSEL_Pos (0UL) /*!< Position of REFSEL field. */
#define LPCOMP_REFSEL_REFSEL_Msk (0xFUL << LPCOMP_REFSEL_REFSEL_Pos) /*!< Bit mask of REFSEL field. */
#define LPCOMP_REFSEL_REFSEL_Ref1_8Vdd (0UL) /*!< VDD * 1/8 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref2_8Vdd (1UL) /*!< VDD * 2/8 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref3_8Vdd (2UL) /*!< VDD * 3/8 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref4_8Vdd (3UL) /*!< VDD * 4/8 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref5_8Vdd (4UL) /*!< VDD * 5/8 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref6_8Vdd (5UL) /*!< VDD * 6/8 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref7_8Vdd (6UL) /*!< VDD * 7/8 selected as reference */
#define LPCOMP_REFSEL_REFSEL_ARef (7UL) /*!< External analog reference selected */
#define LPCOMP_REFSEL_REFSEL_Ref1_16Vdd (8UL) /*!< VDD * 1/16 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref3_16Vdd (9UL) /*!< VDD * 3/16 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref5_16Vdd (10UL) /*!< VDD * 5/16 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref7_16Vdd (11UL) /*!< VDD * 7/16 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref9_16Vdd (12UL) /*!< VDD * 9/16 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref11_16Vdd (13UL) /*!< VDD * 11/16 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref13_16Vdd (14UL) /*!< VDD * 13/16 selected as reference */
#define LPCOMP_REFSEL_REFSEL_Ref15_16Vdd (15UL) /*!< VDD * 15/16 selected as reference */

/* Register: LPCOMP_EXTREFSEL */
/* Description: External reference select */

/* Bits 2..0 : External analog reference select */
#define LPCOMP_EXTREFSEL_EXTREFSEL_Pos (0UL) /*!< Position of EXTREFSEL field. */
#define LPCOMP_EXTREFSEL_EXTREFSEL_Msk (0x7UL << LPCOMP_EXTREFSEL_EXTREFSEL_Pos) /*!< Bit mask of EXTREFSEL field. */
#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference0 (0UL) /*!< Use AIN0 as external analog reference */
#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference1 (1UL) /*!< Use AIN1 as external analog reference */
#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference2 (2UL) /*!< Use AIN2 as external analog reference */
#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference3 (3UL) /*!< Use AIN3 as external analog reference */
#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference4 (4UL) /*!< Use AIN4 as external analog reference */
#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference5 (5UL) /*!< Use AIN5 as external analog reference */
#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference6 (6UL) /*!< Use AIN6 as external analog reference */
#define LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference7 (7UL) /*!< Use AIN7 as external analog reference */

/* Register: LPCOMP_ANADETECT */
/* Description: Analog detect configuration */

/* Bits 1..0 : Analog detect configuration */
#define LPCOMP_ANADETECT_ANADETECT_Pos (0UL) /*!< Position of ANADETECT field. */
#define LPCOMP_ANADETECT_ANADETECT_Msk (0x3UL << LPCOMP_ANADETECT_ANADETECT_Pos) /*!< Bit mask of ANADETECT field. */
#define LPCOMP_ANADETECT_ANADETECT_Cross (0UL) /*!< Generate ANADETECT on crossing, both upward crossing and downward crossing */
#define LPCOMP_ANADETECT_ANADETECT_Up (1UL) /*!< Generate ANADETECT on upward crossing only */
#define LPCOMP_ANADETECT_ANADETECT_Down (2UL) /*!< Generate ANADETECT on downward crossing only */

/* Register: LPCOMP_HYST */
/* Description: Comparator hysteresis enable */

/* Bit 0 : Comparator hysteresis enable */
#define LPCOMP_HYST_HYST_Pos (0UL) /*!< Position of HYST field. */
#define LPCOMP_HYST_HYST_Msk (0x1UL << LPCOMP_HYST_HYST_Pos) /*!< Bit mask of HYST field. */
#define LPCOMP_HYST_HYST_Disabled (0UL) /*!< Comparator hysteresis disabled */
#define LPCOMP_HYST_HYST_Enabled (1UL) /*!< Comparator hysteresis enabled */


/* Peripheral: MUTEX */
/* Description: MUTEX 0 */

/* Register: MUTEX_MUTEX */
/* Description: Description collection: Mutex register */

/* Bit 0 : Mutex register n */
#define MUTEX_MUTEX_MUTEX_Pos (0UL) /*!< Position of MUTEX field. */
#define MUTEX_MUTEX_MUTEX_Msk (0x1UL << MUTEX_MUTEX_MUTEX_Pos) /*!< Bit mask of MUTEX field. */
#define MUTEX_MUTEX_MUTEX_Unlocked (0UL) /*!< Mutex n is in unlocked state */
#define MUTEX_MUTEX_MUTEX_Locked (1UL) /*!< Mutex n is in locked state */


/* Peripheral: NFCT */
/* Description: NFC-A compatible radio 0 */

/* Register: NFCT_TASKS_ACTIVATE */
/* Description: Activate NFCT peripheral for incoming and outgoing frames, change state to activated */

/* Bit 0 : Activate NFCT peripheral for incoming and outgoing frames, change state to activated */
#define NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos (0UL) /*!< Position of TASKS_ACTIVATE field. */
#define NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Msk (0x1UL << NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos) /*!< Bit mask of TASKS_ACTIVATE field. */
#define NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_DISABLE */
/* Description: Disable NFCT peripheral */

/* Bit 0 : Disable NFCT peripheral */
#define NFCT_TASKS_DISABLE_TASKS_DISABLE_Pos (0UL) /*!< Position of TASKS_DISABLE field. */
#define NFCT_TASKS_DISABLE_TASKS_DISABLE_Msk (0x1UL << NFCT_TASKS_DISABLE_TASKS_DISABLE_Pos) /*!< Bit mask of TASKS_DISABLE field. */
#define NFCT_TASKS_DISABLE_TASKS_DISABLE_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_SENSE */
/* Description: Enable NFC sense field mode, change state to sense mode */

/* Bit 0 : Enable NFC sense field mode, change state to sense mode */
#define NFCT_TASKS_SENSE_TASKS_SENSE_Pos (0UL) /*!< Position of TASKS_SENSE field. */
#define NFCT_TASKS_SENSE_TASKS_SENSE_Msk (0x1UL << NFCT_TASKS_SENSE_TASKS_SENSE_Pos) /*!< Bit mask of TASKS_SENSE field. */
#define NFCT_TASKS_SENSE_TASKS_SENSE_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_STARTTX */
/* Description: Start transmission of an outgoing frame, change state to transmit */

/* Bit 0 : Start transmission of an outgoing frame, change state to transmit */
#define NFCT_TASKS_STARTTX_TASKS_STARTTX_Pos (0UL) /*!< Position of TASKS_STARTTX field. */
#define NFCT_TASKS_STARTTX_TASKS_STARTTX_Msk (0x1UL << NFCT_TASKS_STARTTX_TASKS_STARTTX_Pos) /*!< Bit mask of TASKS_STARTTX field. */
#define NFCT_TASKS_STARTTX_TASKS_STARTTX_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_STOPTX */
/* Description: Stops an issued transmission of a frame */

/* Bit 0 : Stops an issued transmission of a frame */
#define NFCT_TASKS_STOPTX_TASKS_STOPTX_Pos (0UL) /*!< Position of TASKS_STOPTX field. */
#define NFCT_TASKS_STOPTX_TASKS_STOPTX_Msk (0x1UL << NFCT_TASKS_STOPTX_TASKS_STOPTX_Pos) /*!< Bit mask of TASKS_STOPTX field. */
#define NFCT_TASKS_STOPTX_TASKS_STOPTX_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_START_ROSCCAL */
/* Description: Starts calibration of ring oscillator */

/* Bit 0 : Starts calibration of ring oscillator */
#define NFCT_TASKS_START_ROSCCAL_TASKS_START_ROSCCAL_Pos (0UL) /*!< Position of TASKS_START_ROSCCAL field. */
#define NFCT_TASKS_START_ROSCCAL_TASKS_START_ROSCCAL_Msk (0x1UL << NFCT_TASKS_START_ROSCCAL_TASKS_START_ROSCCAL_Pos) /*!< Bit mask of TASKS_START_ROSCCAL field. */
#define NFCT_TASKS_START_ROSCCAL_TASKS_START_ROSCCAL_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_FREQMEASURE */
/* Description: Measures the 13.56 MHz clock frequency */

/* Bit 0 : Measures the 13.56 MHz clock frequency */
#define NFCT_TASKS_FREQMEASURE_TASKS_FREQMEASURE_Pos (0UL) /*!< Position of TASKS_FREQMEASURE field. */
#define NFCT_TASKS_FREQMEASURE_TASKS_FREQMEASURE_Msk (0x1UL << NFCT_TASKS_FREQMEASURE_TASKS_FREQMEASURE_Pos) /*!< Bit mask of TASKS_FREQMEASURE field. */
#define NFCT_TASKS_FREQMEASURE_TASKS_FREQMEASURE_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_ENABLERXDATA */
/* Description: Initializes the EasyDMA for receive. */

/* Bit 0 : Initializes the EasyDMA for receive. */
#define NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Pos (0UL) /*!< Position of TASKS_ENABLERXDATA field. */
#define NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Msk (0x1UL << NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Pos) /*!< Bit mask of TASKS_ENABLERXDATA field. */
#define NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_DISABLERXDATA */
/* Description: Ends current EasyDMA transfer and stops waiting for start of frame (SoF) */

/* Bit 0 : Ends current EasyDMA transfer and stops waiting for start of frame (SoF) */
#define NFCT_TASKS_DISABLERXDATA_TASKS_DISABLERXDATA_Pos (0UL) /*!< Position of TASKS_DISABLERXDATA field. */
#define NFCT_TASKS_DISABLERXDATA_TASKS_DISABLERXDATA_Msk (0x1UL << NFCT_TASKS_DISABLERXDATA_TASKS_DISABLERXDATA_Pos) /*!< Bit mask of TASKS_DISABLERXDATA field. */
#define NFCT_TASKS_DISABLERXDATA_TASKS_DISABLERXDATA_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_GOIDLE */
/* Description: Force state machine to IDLE state */

/* Bit 0 : Force state machine to IDLE state */
#define NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Pos (0UL) /*!< Position of TASKS_GOIDLE field. */
#define NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Msk (0x1UL << NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Pos) /*!< Bit mask of TASKS_GOIDLE field. */
#define NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_TASKS_GOSLEEP */
/* Description: Force state machine to SLEEP_A state */

/* Bit 0 : Force state machine to SLEEP_A state */
#define NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Pos (0UL) /*!< Position of TASKS_GOSLEEP field. */
#define NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Msk (0x1UL << NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Pos) /*!< Bit mask of TASKS_GOSLEEP field. */
#define NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Trigger (1UL) /*!< Trigger task */

/* Register: NFCT_SUBSCRIBE_ACTIVATE */
/* Description: Subscribe configuration for task ACTIVATE */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_ACTIVATE_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_ACTIVATE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_ACTIVATE_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_ACTIVATE_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_ACTIVATE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task ACTIVATE will subscribe to */
#define NFCT_SUBSCRIBE_ACTIVATE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_ACTIVATE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_ACTIVATE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_DISABLE */
/* Description: Subscribe configuration for task DISABLE */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_DISABLE_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_DISABLE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_DISABLE_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_DISABLE_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_DISABLE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DISABLE will subscribe to */
#define NFCT_SUBSCRIBE_DISABLE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_DISABLE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_DISABLE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_SENSE */
/* Description: Subscribe configuration for task SENSE */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_SENSE_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_SENSE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_SENSE_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_SENSE_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_SENSE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SENSE will subscribe to */
#define NFCT_SUBSCRIBE_SENSE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_SENSE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_SENSE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_STARTTX */
/* Description: Subscribe configuration for task STARTTX */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_STARTTX_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_STARTTX_EN_Msk (0x1UL << NFCT_SUBSCRIBE_STARTTX_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_STARTTX_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_STARTTX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTTX will subscribe to */
#define NFCT_SUBSCRIBE_STARTTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_STARTTX_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_STARTTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_STOPTX */
/* Description: Subscribe configuration for task STOPTX */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_STOPTX_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_STOPTX_EN_Msk (0x1UL << NFCT_SUBSCRIBE_STOPTX_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_STOPTX_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_STOPTX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOPTX will subscribe to */
#define NFCT_SUBSCRIBE_STOPTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_STOPTX_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_STOPTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_START_ROSCCAL */
/* Description: Subscribe configuration for task START_ROSCCAL */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_START_ROSCCAL_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_START_ROSCCAL_EN_Msk (0x1UL << NFCT_SUBSCRIBE_START_ROSCCAL_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_START_ROSCCAL_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_START_ROSCCAL_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START_ROSCCAL will subscribe to */
#define NFCT_SUBSCRIBE_START_ROSCCAL_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_START_ROSCCAL_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_START_ROSCCAL_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_FREQMEASURE */
/* Description: Subscribe configuration for task FREQMEASURE */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_FREQMEASURE_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_FREQMEASURE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_FREQMEASURE_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_FREQMEASURE_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_FREQMEASURE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task FREQMEASURE will subscribe to */
#define NFCT_SUBSCRIBE_FREQMEASURE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_FREQMEASURE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_FREQMEASURE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_ENABLERXDATA */
/* Description: Subscribe configuration for task ENABLERXDATA */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Msk (0x1UL << NFCT_SUBSCRIBE_ENABLERXDATA_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_ENABLERXDATA_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task ENABLERXDATA will subscribe to */
#define NFCT_SUBSCRIBE_ENABLERXDATA_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_ENABLERXDATA_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_ENABLERXDATA_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_DISABLERXDATA */
/* Description: Subscribe configuration for task DISABLERXDATA */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_DISABLERXDATA_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_DISABLERXDATA_EN_Msk (0x1UL << NFCT_SUBSCRIBE_DISABLERXDATA_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_DISABLERXDATA_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_DISABLERXDATA_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DISABLERXDATA will subscribe to */
#define NFCT_SUBSCRIBE_DISABLERXDATA_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_DISABLERXDATA_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_DISABLERXDATA_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_GOIDLE */
/* Description: Subscribe configuration for task GOIDLE */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_GOIDLE_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_GOIDLE_EN_Msk (0x1UL << NFCT_SUBSCRIBE_GOIDLE_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_GOIDLE_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_GOIDLE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task GOIDLE will subscribe to */
#define NFCT_SUBSCRIBE_GOIDLE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_GOIDLE_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_GOIDLE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SUBSCRIBE_GOSLEEP */
/* Description: Subscribe configuration for task GOSLEEP */

/* Bit 31 :   */
#define NFCT_SUBSCRIBE_GOSLEEP_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_SUBSCRIBE_GOSLEEP_EN_Msk (0x1UL << NFCT_SUBSCRIBE_GOSLEEP_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_SUBSCRIBE_GOSLEEP_EN_Disabled (0UL) /*!< Disable subscription */
#define NFCT_SUBSCRIBE_GOSLEEP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task GOSLEEP will subscribe to */
#define NFCT_SUBSCRIBE_GOSLEEP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_SUBSCRIBE_GOSLEEP_CHIDX_Msk (0xFFUL << NFCT_SUBSCRIBE_GOSLEEP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_EVENTS_READY */
/* Description: The NFCT peripheral is ready to receive and send frames */

/* Bit 0 : The NFCT peripheral is ready to receive and send frames */
#define NFCT_EVENTS_READY_EVENTS_READY_Pos (0UL) /*!< Position of EVENTS_READY field. */
#define NFCT_EVENTS_READY_EVENTS_READY_Msk (0x1UL << NFCT_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY field. */
#define NFCT_EVENTS_READY_EVENTS_READY_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_READY_EVENTS_READY_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_FIELDDETECTED */
/* Description: Remote NFC field detected */

/* Bit 0 : Remote NFC field detected */
#define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Pos (0UL) /*!< Position of EVENTS_FIELDDETECTED field. */
#define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Msk (0x1UL << NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Pos) /*!< Bit mask of EVENTS_FIELDDETECTED field. */
#define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_FIELDLOST */
/* Description: Remote NFC field lost */

/* Bit 0 : Remote NFC field lost */
#define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Pos (0UL) /*!< Position of EVENTS_FIELDLOST field. */
#define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Msk (0x1UL << NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Pos) /*!< Bit mask of EVENTS_FIELDLOST field. */
#define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_TXFRAMESTART */
/* Description: Marks the start of the first symbol of a transmitted frame */

/* Bit 0 : Marks the start of the first symbol of a transmitted frame */
#define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Pos (0UL) /*!< Position of EVENTS_TXFRAMESTART field. */
#define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Msk (0x1UL << NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Pos) /*!< Bit mask of EVENTS_TXFRAMESTART field. */
#define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_TXFRAMEEND */
/* Description: Marks the end of the last transmitted on-air symbol of a frame data bit on the last positive edge ckTxNfc with nfcTransmit = 1 */

/* Bit 0 : Marks the end of the last transmitted on-air symbol of a frame data bit on the last positive edge ckTxNfc with nfcTransmit = 1 */
#define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Pos (0UL) /*!< Position of EVENTS_TXFRAMEEND field. */
#define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Msk (0x1UL << NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Pos) /*!< Bit mask of EVENTS_TXFRAMEEND field. */
#define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_RXFRAMESTART */
/* Description: Marks the end of the first symbol of a received frame */

/* Bit 0 : Marks the end of the first symbol of a received frame */
#define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Pos (0UL) /*!< Position of EVENTS_RXFRAMESTART field. */
#define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Msk (0x1UL << NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Pos) /*!< Bit mask of EVENTS_RXFRAMESTART field. */
#define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_RXFRAMEEND */
/* Description: Received data has been checked (CRC, parity) and transferred to RAM, and EasyDMA has ended accessing the RX buffer */

/* Bit 0 : Received data has been checked (CRC, parity) and transferred to RAM, and EasyDMA has ended accessing the RX buffer */
#define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Pos (0UL) /*!< Position of EVENTS_RXFRAMEEND field. */
#define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Msk (0x1UL << NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Pos) /*!< Bit mask of EVENTS_RXFRAMEEND field. */
#define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_ERROR */
/* Description: NFC error reported. The ERRORSTATUS register contains details on the source of the error. */

/* Bit 0 : NFC error reported. The ERRORSTATUS register contains details on the source of the error. */
#define NFCT_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL) /*!< Position of EVENTS_ERROR field. */
#define NFCT_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << NFCT_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field. */
#define NFCT_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_ERROR_EVENTS_ERROR_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_FREQMEASUREDONE */
/* Description: Done with one frequency measurement, result available in the MEASUREDFREQ register. This event will fire several times during calibration. */

/* Bit 0 : Done with one frequency measurement, result available in the MEASUREDFREQ register. This event will fire several times during calibration. */
#define NFCT_EVENTS_FREQMEASUREDONE_EVENTS_FREQMEASUREDONE_Pos (0UL) /*!< Position of EVENTS_FREQMEASUREDONE field. */
#define NFCT_EVENTS_FREQMEASUREDONE_EVENTS_FREQMEASUREDONE_Msk (0x1UL << NFCT_EVENTS_FREQMEASUREDONE_EVENTS_FREQMEASUREDONE_Pos) /*!< Bit mask of EVENTS_FREQMEASUREDONE field. */
#define NFCT_EVENTS_FREQMEASUREDONE_EVENTS_FREQMEASUREDONE_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_FREQMEASUREDONE_EVENTS_FREQMEASUREDONE_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_CALCOMPLETE */
/* Description: NFC ring oscillator calibration complete. */

/* Bit 0 : NFC ring oscillator calibration complete. */
#define NFCT_EVENTS_CALCOMPLETE_EVENTS_CALCOMPLETE_Pos (0UL) /*!< Position of EVENTS_CALCOMPLETE field. */
#define NFCT_EVENTS_CALCOMPLETE_EVENTS_CALCOMPLETE_Msk (0x1UL << NFCT_EVENTS_CALCOMPLETE_EVENTS_CALCOMPLETE_Pos) /*!< Bit mask of EVENTS_CALCOMPLETE field. */
#define NFCT_EVENTS_CALCOMPLETE_EVENTS_CALCOMPLETE_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_CALCOMPLETE_EVENTS_CALCOMPLETE_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_RXERROR */
/* Description: NFC RX frame error reported. The FRAMESTATUS.RX register contains details on the source of the error. */

/* Bit 0 : NFC RX frame error reported. The FRAMESTATUS.RX register contains details on the source of the error. */
#define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Pos (0UL) /*!< Position of EVENTS_RXERROR field. */
#define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Msk (0x1UL << NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Pos) /*!< Bit mask of EVENTS_RXERROR field. */
#define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_ENDRX */
/* Description: RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full. */

/* Bit 0 : RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full. */
#define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Pos (0UL) /*!< Position of EVENTS_ENDRX field. */
#define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Msk (0x1UL << NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Pos) /*!< Bit mask of EVENTS_ENDRX field. */
#define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_ENDTX */
/* Description: Transmission of data in RAM has ended, and EasyDMA has ended accessing the TX buffer */

/* Bit 0 : Transmission of data in RAM has ended, and EasyDMA has ended accessing the TX buffer */
#define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Pos (0UL) /*!< Position of EVENTS_ENDTX field. */
#define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Msk (0x1UL << NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Pos) /*!< Bit mask of EVENTS_ENDTX field. */
#define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_AUTOCOLRESSTARTED */
/* Description: Auto collision resolution process has started Event generated when ALL_REQ or SENS_REQ has been received while in IDLE state */

/* Bit 0 : Auto collision resolution process has started Event generated when ALL_REQ or SENS_REQ has been received while in IDLE state */
#define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Pos (0UL) /*!< Position of EVENTS_AUTOCOLRESSTARTED field. */
#define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of EVENTS_AUTOCOLRESSTARTED field. */
#define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_AUTOCOLRES1 */
/* Description: Auto collision resolution cascade level 1 succeeded */

/* Bit 0 : Auto collision resolution cascade level 1 succeeded */
#define NFCT_EVENTS_AUTOCOLRES1_EVENTS_AUTOCOLRES1_Pos (0UL) /*!< Position of EVENTS_AUTOCOLRES1 field. */
#define NFCT_EVENTS_AUTOCOLRES1_EVENTS_AUTOCOLRES1_Msk (0x1UL << NFCT_EVENTS_AUTOCOLRES1_EVENTS_AUTOCOLRES1_Pos) /*!< Bit mask of EVENTS_AUTOCOLRES1 field. */
#define NFCT_EVENTS_AUTOCOLRES1_EVENTS_AUTOCOLRES1_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_AUTOCOLRES1_EVENTS_AUTOCOLRES1_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_AUTOCOLRES2 */
/* Description: Auto collision resolution cascade level 2 succeeded */

/* Bit 0 : Auto collision resolution cascade level 2 succeeded */
#define NFCT_EVENTS_AUTOCOLRES2_EVENTS_AUTOCOLRES2_Pos (0UL) /*!< Position of EVENTS_AUTOCOLRES2 field. */
#define NFCT_EVENTS_AUTOCOLRES2_EVENTS_AUTOCOLRES2_Msk (0x1UL << NFCT_EVENTS_AUTOCOLRES2_EVENTS_AUTOCOLRES2_Pos) /*!< Bit mask of EVENTS_AUTOCOLRES2 field. */
#define NFCT_EVENTS_AUTOCOLRES2_EVENTS_AUTOCOLRES2_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_AUTOCOLRES2_EVENTS_AUTOCOLRES2_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_AUTOCOLRES3 */
/* Description: Auto collision resolution cascade level 3 succeeded */

/* Bit 0 : Auto collision resolution cascade level 3 succeeded */
#define NFCT_EVENTS_AUTOCOLRES3_EVENTS_AUTOCOLRES3_Pos (0UL) /*!< Position of EVENTS_AUTOCOLRES3 field. */
#define NFCT_EVENTS_AUTOCOLRES3_EVENTS_AUTOCOLRES3_Msk (0x1UL << NFCT_EVENTS_AUTOCOLRES3_EVENTS_AUTOCOLRES3_Pos) /*!< Bit mask of EVENTS_AUTOCOLRES3 field. */
#define NFCT_EVENTS_AUTOCOLRES3_EVENTS_AUTOCOLRES3_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_AUTOCOLRES3_EVENTS_AUTOCOLRES3_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_COLLISION */
/* Description: NFC auto collision resolution error reported. The AUTOCOLRESSTATUS register contains details on the source of the error. */

/* Bit 0 : NFC auto collision resolution error reported. The AUTOCOLRESSTATUS register contains details on the source of the error. */
#define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Pos (0UL) /*!< Position of EVENTS_COLLISION field. */
#define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Msk (0x1UL << NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Pos) /*!< Bit mask of EVENTS_COLLISION field. */
#define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_SELECTED */
/* Description: NFC auto collision resolution successfully completed */

/* Bit 0 : NFC auto collision resolution successfully completed */
#define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Pos (0UL) /*!< Position of EVENTS_SELECTED field. */
#define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Msk (0x1UL << NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Pos) /*!< Bit mask of EVENTS_SELECTED field. */
#define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Generated (1UL) /*!< Event generated */

/* Register: NFCT_EVENTS_STARTED */
/* Description: EasyDMA is ready to receive or send frames. */

/* Bit 0 : EasyDMA is ready to receive or send frames. */
#define NFCT_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL) /*!< Position of EVENTS_STARTED field. */
#define NFCT_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << NFCT_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of EVENTS_STARTED field. */
#define NFCT_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0UL) /*!< Event not generated */
#define NFCT_EVENTS_STARTED_EVENTS_STARTED_Generated (1UL) /*!< Event generated */

/* Register: NFCT_PUBLISH_READY */
/* Description: Publish configuration for event READY */

/* Bit 31 :   */
#define NFCT_PUBLISH_READY_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_READY_EN_Msk (0x1UL << NFCT_PUBLISH_READY_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_READY_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_READY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event READY will publish to. */
#define NFCT_PUBLISH_READY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_READY_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_FIELDDETECTED */
/* Description: Publish configuration for event FIELDDETECTED */

/* Bit 31 :   */
#define NFCT_PUBLISH_FIELDDETECTED_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_FIELDDETECTED_EN_Msk (0x1UL << NFCT_PUBLISH_FIELDDETECTED_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_FIELDDETECTED_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_FIELDDETECTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event FIELDDETECTED will publish to. */
#define NFCT_PUBLISH_FIELDDETECTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_FIELDDETECTED_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_FIELDDETECTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_FIELDLOST */
/* Description: Publish configuration for event FIELDLOST */

/* Bit 31 :   */
#define NFCT_PUBLISH_FIELDLOST_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_FIELDLOST_EN_Msk (0x1UL << NFCT_PUBLISH_FIELDLOST_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_FIELDLOST_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_FIELDLOST_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event FIELDLOST will publish to. */
#define NFCT_PUBLISH_FIELDLOST_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_FIELDLOST_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_FIELDLOST_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_TXFRAMESTART */
/* Description: Publish configuration for event TXFRAMESTART */

/* Bit 31 :   */
#define NFCT_PUBLISH_TXFRAMESTART_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_TXFRAMESTART_EN_Msk (0x1UL << NFCT_PUBLISH_TXFRAMESTART_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_TXFRAMESTART_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_TXFRAMESTART_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXFRAMESTART will publish to. */
#define NFCT_PUBLISH_TXFRAMESTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_TXFRAMESTART_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_TXFRAMESTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_TXFRAMEEND */
/* Description: Publish configuration for event TXFRAMEEND */

/* Bit 31 :   */
#define NFCT_PUBLISH_TXFRAMEEND_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_TXFRAMEEND_EN_Msk (0x1UL << NFCT_PUBLISH_TXFRAMEEND_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_TXFRAMEEND_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_TXFRAMEEND_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXFRAMEEND will publish to. */
#define NFCT_PUBLISH_TXFRAMEEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_TXFRAMEEND_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_TXFRAMEEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_RXFRAMESTART */
/* Description: Publish configuration for event RXFRAMESTART */

/* Bit 31 :   */
#define NFCT_PUBLISH_RXFRAMESTART_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_RXFRAMESTART_EN_Msk (0x1UL << NFCT_PUBLISH_RXFRAMESTART_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_RXFRAMESTART_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_RXFRAMESTART_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXFRAMESTART will publish to. */
#define NFCT_PUBLISH_RXFRAMESTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_RXFRAMESTART_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_RXFRAMESTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_RXFRAMEEND */
/* Description: Publish configuration for event RXFRAMEEND */

/* Bit 31 :   */
#define NFCT_PUBLISH_RXFRAMEEND_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_RXFRAMEEND_EN_Msk (0x1UL << NFCT_PUBLISH_RXFRAMEEND_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_RXFRAMEEND_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_RXFRAMEEND_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXFRAMEEND will publish to. */
#define NFCT_PUBLISH_RXFRAMEEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_RXFRAMEEND_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_RXFRAMEEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_ERROR */
/* Description: Publish configuration for event ERROR */

/* Bit 31 :   */
#define NFCT_PUBLISH_ERROR_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_ERROR_EN_Msk (0x1UL << NFCT_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_ERROR_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_ERROR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ERROR will publish to. */
#define NFCT_PUBLISH_ERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_FREQMEASUREDONE */
/* Description: Publish configuration for event FREQMEASUREDONE */

/* Bit 31 :   */
#define NFCT_PUBLISH_FREQMEASUREDONE_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_FREQMEASUREDONE_EN_Msk (0x1UL << NFCT_PUBLISH_FREQMEASUREDONE_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_FREQMEASUREDONE_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_FREQMEASUREDONE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event FREQMEASUREDONE will publish to. */
#define NFCT_PUBLISH_FREQMEASUREDONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_FREQMEASUREDONE_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_FREQMEASUREDONE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_CALCOMPLETE */
/* Description: Publish configuration for event CALCOMPLETE */

/* Bit 31 :   */
#define NFCT_PUBLISH_CALCOMPLETE_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_CALCOMPLETE_EN_Msk (0x1UL << NFCT_PUBLISH_CALCOMPLETE_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_CALCOMPLETE_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_CALCOMPLETE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CALCOMPLETE will publish to. */
#define NFCT_PUBLISH_CALCOMPLETE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_CALCOMPLETE_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_CALCOMPLETE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_RXERROR */
/* Description: Publish configuration for event RXERROR */

/* Bit 31 :   */
#define NFCT_PUBLISH_RXERROR_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_RXERROR_EN_Msk (0x1UL << NFCT_PUBLISH_RXERROR_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_RXERROR_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_RXERROR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXERROR will publish to. */
#define NFCT_PUBLISH_RXERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_RXERROR_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_RXERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_ENDRX */
/* Description: Publish configuration for event ENDRX */

/* Bit 31 :   */
#define NFCT_PUBLISH_ENDRX_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_ENDRX_EN_Msk (0x1UL << NFCT_PUBLISH_ENDRX_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_ENDRX_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_ENDRX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDRX will publish to. */
#define NFCT_PUBLISH_ENDRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_ENDRX_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_ENDRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_ENDTX */
/* Description: Publish configuration for event ENDTX */

/* Bit 31 :   */
#define NFCT_PUBLISH_ENDTX_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_ENDTX_EN_Msk (0x1UL << NFCT_PUBLISH_ENDTX_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_ENDTX_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_ENDTX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDTX will publish to. */
#define NFCT_PUBLISH_ENDTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_ENDTX_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_ENDTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_AUTOCOLRESSTARTED */
/* Description: Publish configuration for event AUTOCOLRESSTARTED */

/* Bit 31 :   */
#define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Msk (0x1UL << NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_AUTOCOLRESSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event AUTOCOLRESSTARTED will publish to. */
#define NFCT_PUBLISH_AUTOCOLRESSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_AUTOCOLRESSTARTED_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_AUTOCOLRESSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_AUTOCOLRES1 */
/* Description: Publish configuration for event AUTOCOLRES1 */

/* Bit 31 :   */
#define NFCT_PUBLISH_AUTOCOLRES1_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_AUTOCOLRES1_EN_Msk (0x1UL << NFCT_PUBLISH_AUTOCOLRES1_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_AUTOCOLRES1_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_AUTOCOLRES1_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event AUTOCOLRES1 will publish to. */
#define NFCT_PUBLISH_AUTOCOLRES1_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_AUTOCOLRES1_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_AUTOCOLRES1_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_AUTOCOLRES2 */
/* Description: Publish configuration for event AUTOCOLRES2 */

/* Bit 31 :   */
#define NFCT_PUBLISH_AUTOCOLRES2_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_AUTOCOLRES2_EN_Msk (0x1UL << NFCT_PUBLISH_AUTOCOLRES2_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_AUTOCOLRES2_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_AUTOCOLRES2_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event AUTOCOLRES2 will publish to. */
#define NFCT_PUBLISH_AUTOCOLRES2_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_AUTOCOLRES2_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_AUTOCOLRES2_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_AUTOCOLRES3 */
/* Description: Publish configuration for event AUTOCOLRES3 */

/* Bit 31 :   */
#define NFCT_PUBLISH_AUTOCOLRES3_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_AUTOCOLRES3_EN_Msk (0x1UL << NFCT_PUBLISH_AUTOCOLRES3_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_AUTOCOLRES3_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_AUTOCOLRES3_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event AUTOCOLRES3 will publish to. */
#define NFCT_PUBLISH_AUTOCOLRES3_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_AUTOCOLRES3_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_AUTOCOLRES3_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_COLLISION */
/* Description: Publish configuration for event COLLISION */

/* Bit 31 :   */
#define NFCT_PUBLISH_COLLISION_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_COLLISION_EN_Msk (0x1UL << NFCT_PUBLISH_COLLISION_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_COLLISION_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_COLLISION_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event COLLISION will publish to. */
#define NFCT_PUBLISH_COLLISION_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_COLLISION_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_COLLISION_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_SELECTED */
/* Description: Publish configuration for event SELECTED */

/* Bit 31 :   */
#define NFCT_PUBLISH_SELECTED_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_SELECTED_EN_Msk (0x1UL << NFCT_PUBLISH_SELECTED_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_SELECTED_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_SELECTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SELECTED will publish to. */
#define NFCT_PUBLISH_SELECTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_SELECTED_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_SELECTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_PUBLISH_STARTED */
/* Description: Publish configuration for event STARTED */

/* Bit 31 :   */
#define NFCT_PUBLISH_STARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define NFCT_PUBLISH_STARTED_EN_Msk (0x1UL << NFCT_PUBLISH_STARTED_EN_Pos) /*!< Bit mask of EN field. */
#define NFCT_PUBLISH_STARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define NFCT_PUBLISH_STARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STARTED will publish to. */
#define NFCT_PUBLISH_STARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define NFCT_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << NFCT_PUBLISH_STARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: NFCT_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 6 : Shortcut between event TXFRAMEEND and task DISABLERXDATA */
#define NFCT_SHORTS_TXFRAMEEND_DISABLERXDATA_Pos (6UL) /*!< Position of TXFRAMEEND_DISABLERXDATA field. */
#define NFCT_SHORTS_TXFRAMEEND_DISABLERXDATA_Msk (0x1UL << NFCT_SHORTS_TXFRAMEEND_DISABLERXDATA_Pos) /*!< Bit mask of TXFRAMEEND_DISABLERXDATA field. */
#define NFCT_SHORTS_TXFRAMEEND_DISABLERXDATA_Disabled (0UL) /*!< Disable shortcut */
#define NFCT_SHORTS_TXFRAMEEND_DISABLERXDATA_Enabled (1UL) /*!< Enable shortcut */

/* Bit 5 : Shortcut between event TXFRAMEEND and task ENABLERXDATA */
#define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Pos (5UL) /*!< Position of TXFRAMEEND_ENABLERXDATA field. */
#define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Msk (0x1UL << NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Pos) /*!< Bit mask of TXFRAMEEND_ENABLERXDATA field. */
#define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Disabled (0UL) /*!< Disable shortcut */
#define NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Enabled (1UL) /*!< Enable shortcut */

/* Bit 4 : Shortcut between event RXFRAMEEND and task DISABLERXDATA */
#define NFCT_SHORTS_RXFRAMEEND_DISABLERXDATA_Pos (4UL) /*!< Position of RXFRAMEEND_DISABLERXDATA field. */
#define NFCT_SHORTS_RXFRAMEEND_DISABLERXDATA_Msk (0x1UL << NFCT_SHORTS_RXFRAMEEND_DISABLERXDATA_Pos) /*!< Bit mask of RXFRAMEEND_DISABLERXDATA field. */
#define NFCT_SHORTS_RXFRAMEEND_DISABLERXDATA_Disabled (0UL) /*!< Disable shortcut */
#define NFCT_SHORTS_RXFRAMEEND_DISABLERXDATA_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event ENDTX and task ENABLERXDATA */
#define NFCT_SHORTS_ENDTX_ENABLERXDATA_Pos (3UL) /*!< Position of ENDTX_ENABLERXDATA field. */
#define NFCT_SHORTS_ENDTX_ENABLERXDATA_Msk (0x1UL << NFCT_SHORTS_ENDTX_ENABLERXDATA_Pos) /*!< Bit mask of ENDTX_ENABLERXDATA field. */
#define NFCT_SHORTS_ENDTX_ENABLERXDATA_Disabled (0UL) /*!< Disable shortcut */
#define NFCT_SHORTS_ENDTX_ENABLERXDATA_Enabled (1UL) /*!< Enable shortcut */

/* Bit 2 : Shortcut between event ENDRX and task ENABLERXDATA */
#define NFCT_SHORTS_ENDRX_ENABLERXDATA_Pos (2UL) /*!< Position of ENDRX_ENABLERXDATA field. */
#define NFCT_SHORTS_ENDRX_ENABLERXDATA_Msk (0x1UL << NFCT_SHORTS_ENDRX_ENABLERXDATA_Pos) /*!< Bit mask of ENDRX_ENABLERXDATA field. */
#define NFCT_SHORTS_ENDRX_ENABLERXDATA_Disabled (0UL) /*!< Disable shortcut */
#define NFCT_SHORTS_ENDRX_ENABLERXDATA_Enabled (1UL) /*!< Enable shortcut */

/* Bit 1 : Shortcut between event FIELDLOST and task SENSE */
#define NFCT_SHORTS_FIELDLOST_SENSE_Pos (1UL) /*!< Position of FIELDLOST_SENSE field. */
#define NFCT_SHORTS_FIELDLOST_SENSE_Msk (0x1UL << NFCT_SHORTS_FIELDLOST_SENSE_Pos) /*!< Bit mask of FIELDLOST_SENSE field. */
#define NFCT_SHORTS_FIELDLOST_SENSE_Disabled (0UL) /*!< Disable shortcut */
#define NFCT_SHORTS_FIELDLOST_SENSE_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event FIELDDETECTED and task ACTIVATE */
#define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos (0UL) /*!< Position of FIELDDETECTED_ACTIVATE field. */
#define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Msk (0x1UL << NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos) /*!< Bit mask of FIELDDETECTED_ACTIVATE field. */
#define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Disabled (0UL) /*!< Disable shortcut */
#define NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Enabled (1UL) /*!< Enable shortcut */

/* Register: NFCT_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 20 : Enable or disable interrupt for event STARTED */
#define NFCT_INTEN_STARTED_Pos (20UL) /*!< Position of STARTED field. */
#define NFCT_INTEN_STARTED_Msk (0x1UL << NFCT_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define NFCT_INTEN_STARTED_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_STARTED_Enabled (1UL) /*!< Enable */

/* Bit 19 : Enable or disable interrupt for event SELECTED */
#define NFCT_INTEN_SELECTED_Pos (19UL) /*!< Position of SELECTED field. */
#define NFCT_INTEN_SELECTED_Msk (0x1UL << NFCT_INTEN_SELECTED_Pos) /*!< Bit mask of SELECTED field. */
#define NFCT_INTEN_SELECTED_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_SELECTED_Enabled (1UL) /*!< Enable */

/* Bit 18 : Enable or disable interrupt for event COLLISION */
#define NFCT_INTEN_COLLISION_Pos (18UL) /*!< Position of COLLISION field. */
#define NFCT_INTEN_COLLISION_Msk (0x1UL << NFCT_INTEN_COLLISION_Pos) /*!< Bit mask of COLLISION field. */
#define NFCT_INTEN_COLLISION_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_COLLISION_Enabled (1UL) /*!< Enable */

/* Bit 17 : Enable or disable interrupt for event AUTOCOLRES3 */
#define NFCT_INTEN_AUTOCOLRES3_Pos (17UL) /*!< Position of AUTOCOLRES3 field. */
#define NFCT_INTEN_AUTOCOLRES3_Msk (0x1UL << NFCT_INTEN_AUTOCOLRES3_Pos) /*!< Bit mask of AUTOCOLRES3 field. */
#define NFCT_INTEN_AUTOCOLRES3_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_AUTOCOLRES3_Enabled (1UL) /*!< Enable */

/* Bit 16 : Enable or disable interrupt for event AUTOCOLRES2 */
#define NFCT_INTEN_AUTOCOLRES2_Pos (16UL) /*!< Position of AUTOCOLRES2 field. */
#define NFCT_INTEN_AUTOCOLRES2_Msk (0x1UL << NFCT_INTEN_AUTOCOLRES2_Pos) /*!< Bit mask of AUTOCOLRES2 field. */
#define NFCT_INTEN_AUTOCOLRES2_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_AUTOCOLRES2_Enabled (1UL) /*!< Enable */

/* Bit 15 : Enable or disable interrupt for event AUTOCOLRES1 */
#define NFCT_INTEN_AUTOCOLRES1_Pos (15UL) /*!< Position of AUTOCOLRES1 field. */
#define NFCT_INTEN_AUTOCOLRES1_Msk (0x1UL << NFCT_INTEN_AUTOCOLRES1_Pos) /*!< Bit mask of AUTOCOLRES1 field. */
#define NFCT_INTEN_AUTOCOLRES1_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_AUTOCOLRES1_Enabled (1UL) /*!< Enable */

/* Bit 14 : Enable or disable interrupt for event AUTOCOLRESSTARTED */
#define NFCT_INTEN_AUTOCOLRESSTARTED_Pos (14UL) /*!< Position of AUTOCOLRESSTARTED field. */
#define NFCT_INTEN_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTEN_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED field. */
#define NFCT_INTEN_AUTOCOLRESSTARTED_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_AUTOCOLRESSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 12 : Enable or disable interrupt for event ENDTX */
#define NFCT_INTEN_ENDTX_Pos (12UL) /*!< Position of ENDTX field. */
#define NFCT_INTEN_ENDTX_Msk (0x1UL << NFCT_INTEN_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define NFCT_INTEN_ENDTX_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_ENDTX_Enabled (1UL) /*!< Enable */

/* Bit 11 : Enable or disable interrupt for event ENDRX */
#define NFCT_INTEN_ENDRX_Pos (11UL) /*!< Position of ENDRX field. */
#define NFCT_INTEN_ENDRX_Msk (0x1UL << NFCT_INTEN_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define NFCT_INTEN_ENDRX_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_ENDRX_Enabled (1UL) /*!< Enable */

/* Bit 10 : Enable or disable interrupt for event RXERROR */
#define NFCT_INTEN_RXERROR_Pos (10UL) /*!< Position of RXERROR field. */
#define NFCT_INTEN_RXERROR_Msk (0x1UL << NFCT_INTEN_RXERROR_Pos) /*!< Bit mask of RXERROR field. */
#define NFCT_INTEN_RXERROR_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_RXERROR_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event CALCOMPLETE */
#define NFCT_INTEN_CALCOMPLETE_Pos (9UL) /*!< Position of CALCOMPLETE field. */
#define NFCT_INTEN_CALCOMPLETE_Msk (0x1UL << NFCT_INTEN_CALCOMPLETE_Pos) /*!< Bit mask of CALCOMPLETE field. */
#define NFCT_INTEN_CALCOMPLETE_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_CALCOMPLETE_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event FREQMEASUREDONE */
#define NFCT_INTEN_FREQMEASUREDONE_Pos (8UL) /*!< Position of FREQMEASUREDONE field. */
#define NFCT_INTEN_FREQMEASUREDONE_Msk (0x1UL << NFCT_INTEN_FREQMEASUREDONE_Pos) /*!< Bit mask of FREQMEASUREDONE field. */
#define NFCT_INTEN_FREQMEASUREDONE_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_FREQMEASUREDONE_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event ERROR */
#define NFCT_INTEN_ERROR_Pos (7UL) /*!< Position of ERROR field. */
#define NFCT_INTEN_ERROR_Msk (0x1UL << NFCT_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define NFCT_INTEN_ERROR_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_ERROR_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event RXFRAMEEND */
#define NFCT_INTEN_RXFRAMEEND_Pos (6UL) /*!< Position of RXFRAMEEND field. */
#define NFCT_INTEN_RXFRAMEEND_Msk (0x1UL << NFCT_INTEN_RXFRAMEEND_Pos) /*!< Bit mask of RXFRAMEEND field. */
#define NFCT_INTEN_RXFRAMEEND_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_RXFRAMEEND_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event RXFRAMESTART */
#define NFCT_INTEN_RXFRAMESTART_Pos (5UL) /*!< Position of RXFRAMESTART field. */
#define NFCT_INTEN_RXFRAMESTART_Msk (0x1UL << NFCT_INTEN_RXFRAMESTART_Pos) /*!< Bit mask of RXFRAMESTART field. */
#define NFCT_INTEN_RXFRAMESTART_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_RXFRAMESTART_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event TXFRAMEEND */
#define NFCT_INTEN_TXFRAMEEND_Pos (4UL) /*!< Position of TXFRAMEEND field. */
#define NFCT_INTEN_TXFRAMEEND_Msk (0x1UL << NFCT_INTEN_TXFRAMEEND_Pos) /*!< Bit mask of TXFRAMEEND field. */
#define NFCT_INTEN_TXFRAMEEND_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_TXFRAMEEND_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event TXFRAMESTART */
#define NFCT_INTEN_TXFRAMESTART_Pos (3UL) /*!< Position of TXFRAMESTART field. */
#define NFCT_INTEN_TXFRAMESTART_Msk (0x1UL << NFCT_INTEN_TXFRAMESTART_Pos) /*!< Bit mask of TXFRAMESTART field. */
#define NFCT_INTEN_TXFRAMESTART_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_TXFRAMESTART_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event FIELDLOST */
#define NFCT_INTEN_FIELDLOST_Pos (2UL) /*!< Position of FIELDLOST field. */
#define NFCT_INTEN_FIELDLOST_Msk (0x1UL << NFCT_INTEN_FIELDLOST_Pos) /*!< Bit mask of FIELDLOST field. */
#define NFCT_INTEN_FIELDLOST_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_FIELDLOST_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event FIELDDETECTED */
#define NFCT_INTEN_FIELDDETECTED_Pos (1UL) /*!< Position of FIELDDETECTED field. */
#define NFCT_INTEN_FIELDDETECTED_Msk (0x1UL << NFCT_INTEN_FIELDDETECTED_Pos) /*!< Bit mask of FIELDDETECTED field. */
#define NFCT_INTEN_FIELDDETECTED_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_FIELDDETECTED_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event READY */
#define NFCT_INTEN_READY_Pos (0UL) /*!< Position of READY field. */
#define NFCT_INTEN_READY_Msk (0x1UL << NFCT_INTEN_READY_Pos) /*!< Bit mask of READY field. */
#define NFCT_INTEN_READY_Disabled (0UL) /*!< Disable */
#define NFCT_INTEN_READY_Enabled (1UL) /*!< Enable */

/* Register: NFCT_INTENSET */
/* Description: Enable interrupt */

/* Bit 20 : Write '1' to enable interrupt for event STARTED */
#define NFCT_INTENSET_STARTED_Pos (20UL) /*!< Position of STARTED field. */
#define NFCT_INTENSET_STARTED_Msk (0x1UL << NFCT_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define NFCT_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_STARTED_Set (1UL) /*!< Enable */

/* Bit 19 : Write '1' to enable interrupt for event SELECTED */
#define NFCT_INTENSET_SELECTED_Pos (19UL) /*!< Position of SELECTED field. */
#define NFCT_INTENSET_SELECTED_Msk (0x1UL << NFCT_INTENSET_SELECTED_Pos) /*!< Bit mask of SELECTED field. */
#define NFCT_INTENSET_SELECTED_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_SELECTED_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_SELECTED_Set (1UL) /*!< Enable */

/* Bit 18 : Write '1' to enable interrupt for event COLLISION */
#define NFCT_INTENSET_COLLISION_Pos (18UL) /*!< Position of COLLISION field. */
#define NFCT_INTENSET_COLLISION_Msk (0x1UL << NFCT_INTENSET_COLLISION_Pos) /*!< Bit mask of COLLISION field. */
#define NFCT_INTENSET_COLLISION_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_COLLISION_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_COLLISION_Set (1UL) /*!< Enable */

/* Bit 17 : Write '1' to enable interrupt for event AUTOCOLRES3 */
#define NFCT_INTENSET_AUTOCOLRES3_Pos (17UL) /*!< Position of AUTOCOLRES3 field. */
#define NFCT_INTENSET_AUTOCOLRES3_Msk (0x1UL << NFCT_INTENSET_AUTOCOLRES3_Pos) /*!< Bit mask of AUTOCOLRES3 field. */
#define NFCT_INTENSET_AUTOCOLRES3_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_AUTOCOLRES3_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_AUTOCOLRES3_Set (1UL) /*!< Enable */

/* Bit 16 : Write '1' to enable interrupt for event AUTOCOLRES2 */
#define NFCT_INTENSET_AUTOCOLRES2_Pos (16UL) /*!< Position of AUTOCOLRES2 field. */
#define NFCT_INTENSET_AUTOCOLRES2_Msk (0x1UL << NFCT_INTENSET_AUTOCOLRES2_Pos) /*!< Bit mask of AUTOCOLRES2 field. */
#define NFCT_INTENSET_AUTOCOLRES2_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_AUTOCOLRES2_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_AUTOCOLRES2_Set (1UL) /*!< Enable */

/* Bit 15 : Write '1' to enable interrupt for event AUTOCOLRES1 */
#define NFCT_INTENSET_AUTOCOLRES1_Pos (15UL) /*!< Position of AUTOCOLRES1 field. */
#define NFCT_INTENSET_AUTOCOLRES1_Msk (0x1UL << NFCT_INTENSET_AUTOCOLRES1_Pos) /*!< Bit mask of AUTOCOLRES1 field. */
#define NFCT_INTENSET_AUTOCOLRES1_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_AUTOCOLRES1_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_AUTOCOLRES1_Set (1UL) /*!< Enable */

/* Bit 14 : Write '1' to enable interrupt for event AUTOCOLRESSTARTED */
#define NFCT_INTENSET_AUTOCOLRESSTARTED_Pos (14UL) /*!< Position of AUTOCOLRESSTARTED field. */
#define NFCT_INTENSET_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTENSET_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED field. */
#define NFCT_INTENSET_AUTOCOLRESSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_AUTOCOLRESSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_AUTOCOLRESSTARTED_Set (1UL) /*!< Enable */

/* Bit 12 : Write '1' to enable interrupt for event ENDTX */
#define NFCT_INTENSET_ENDTX_Pos (12UL) /*!< Position of ENDTX field. */
#define NFCT_INTENSET_ENDTX_Msk (0x1UL << NFCT_INTENSET_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define NFCT_INTENSET_ENDTX_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_ENDTX_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_ENDTX_Set (1UL) /*!< Enable */

/* Bit 11 : Write '1' to enable interrupt for event ENDRX */
#define NFCT_INTENSET_ENDRX_Pos (11UL) /*!< Position of ENDRX field. */
#define NFCT_INTENSET_ENDRX_Msk (0x1UL << NFCT_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define NFCT_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_ENDRX_Set (1UL) /*!< Enable */

/* Bit 10 : Write '1' to enable interrupt for event RXERROR */
#define NFCT_INTENSET_RXERROR_Pos (10UL) /*!< Position of RXERROR field. */
#define NFCT_INTENSET_RXERROR_Msk (0x1UL << NFCT_INTENSET_RXERROR_Pos) /*!< Bit mask of RXERROR field. */
#define NFCT_INTENSET_RXERROR_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_RXERROR_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_RXERROR_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event CALCOMPLETE */
#define NFCT_INTENSET_CALCOMPLETE_Pos (9UL) /*!< Position of CALCOMPLETE field. */
#define NFCT_INTENSET_CALCOMPLETE_Msk (0x1UL << NFCT_INTENSET_CALCOMPLETE_Pos) /*!< Bit mask of CALCOMPLETE field. */
#define NFCT_INTENSET_CALCOMPLETE_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_CALCOMPLETE_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_CALCOMPLETE_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event FREQMEASUREDONE */
#define NFCT_INTENSET_FREQMEASUREDONE_Pos (8UL) /*!< Position of FREQMEASUREDONE field. */
#define NFCT_INTENSET_FREQMEASUREDONE_Msk (0x1UL << NFCT_INTENSET_FREQMEASUREDONE_Pos) /*!< Bit mask of FREQMEASUREDONE field. */
#define NFCT_INTENSET_FREQMEASUREDONE_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_FREQMEASUREDONE_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_FREQMEASUREDONE_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event ERROR */
#define NFCT_INTENSET_ERROR_Pos (7UL) /*!< Position of ERROR field. */
#define NFCT_INTENSET_ERROR_Msk (0x1UL << NFCT_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define NFCT_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_ERROR_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event RXFRAMEEND */
#define NFCT_INTENSET_RXFRAMEEND_Pos (6UL) /*!< Position of RXFRAMEEND field. */
#define NFCT_INTENSET_RXFRAMEEND_Msk (0x1UL << NFCT_INTENSET_RXFRAMEEND_Pos) /*!< Bit mask of RXFRAMEEND field. */
#define NFCT_INTENSET_RXFRAMEEND_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_RXFRAMEEND_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_RXFRAMEEND_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event RXFRAMESTART */
#define NFCT_INTENSET_RXFRAMESTART_Pos (5UL) /*!< Position of RXFRAMESTART field. */
#define NFCT_INTENSET_RXFRAMESTART_Msk (0x1UL << NFCT_INTENSET_RXFRAMESTART_Pos) /*!< Bit mask of RXFRAMESTART field. */
#define NFCT_INTENSET_RXFRAMESTART_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_RXFRAMESTART_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_RXFRAMESTART_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event TXFRAMEEND */
#define NFCT_INTENSET_TXFRAMEEND_Pos (4UL) /*!< Position of TXFRAMEEND field. */
#define NFCT_INTENSET_TXFRAMEEND_Msk (0x1UL << NFCT_INTENSET_TXFRAMEEND_Pos) /*!< Bit mask of TXFRAMEEND field. */
#define NFCT_INTENSET_TXFRAMEEND_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_TXFRAMEEND_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_TXFRAMEEND_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event TXFRAMESTART */
#define NFCT_INTENSET_TXFRAMESTART_Pos (3UL) /*!< Position of TXFRAMESTART field. */
#define NFCT_INTENSET_TXFRAMESTART_Msk (0x1UL << NFCT_INTENSET_TXFRAMESTART_Pos) /*!< Bit mask of TXFRAMESTART field. */
#define NFCT_INTENSET_TXFRAMESTART_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_TXFRAMESTART_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_TXFRAMESTART_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event FIELDLOST */
#define NFCT_INTENSET_FIELDLOST_Pos (2UL) /*!< Position of FIELDLOST field. */
#define NFCT_INTENSET_FIELDLOST_Msk (0x1UL << NFCT_INTENSET_FIELDLOST_Pos) /*!< Bit mask of FIELDLOST field. */
#define NFCT_INTENSET_FIELDLOST_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_FIELDLOST_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_FIELDLOST_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event FIELDDETECTED */
#define NFCT_INTENSET_FIELDDETECTED_Pos (1UL) /*!< Position of FIELDDETECTED field. */
#define NFCT_INTENSET_FIELDDETECTED_Msk (0x1UL << NFCT_INTENSET_FIELDDETECTED_Pos) /*!< Bit mask of FIELDDETECTED field. */
#define NFCT_INTENSET_FIELDDETECTED_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_FIELDDETECTED_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_FIELDDETECTED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event READY */
#define NFCT_INTENSET_READY_Pos (0UL) /*!< Position of READY field. */
#define NFCT_INTENSET_READY_Msk (0x1UL << NFCT_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
#define NFCT_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENSET_READY_Set (1UL) /*!< Enable */

/* Register: NFCT_INTENCLR */
/* Description: Disable interrupt */

/* Bit 20 : Write '1' to disable interrupt for event STARTED */
#define NFCT_INTENCLR_STARTED_Pos (20UL) /*!< Position of STARTED field. */
#define NFCT_INTENCLR_STARTED_Msk (0x1UL << NFCT_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define NFCT_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_STARTED_Clear (1UL) /*!< Disable */

/* Bit 19 : Write '1' to disable interrupt for event SELECTED */
#define NFCT_INTENCLR_SELECTED_Pos (19UL) /*!< Position of SELECTED field. */
#define NFCT_INTENCLR_SELECTED_Msk (0x1UL << NFCT_INTENCLR_SELECTED_Pos) /*!< Bit mask of SELECTED field. */
#define NFCT_INTENCLR_SELECTED_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_SELECTED_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_SELECTED_Clear (1UL) /*!< Disable */

/* Bit 18 : Write '1' to disable interrupt for event COLLISION */
#define NFCT_INTENCLR_COLLISION_Pos (18UL) /*!< Position of COLLISION field. */
#define NFCT_INTENCLR_COLLISION_Msk (0x1UL << NFCT_INTENCLR_COLLISION_Pos) /*!< Bit mask of COLLISION field. */
#define NFCT_INTENCLR_COLLISION_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_COLLISION_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_COLLISION_Clear (1UL) /*!< Disable */

/* Bit 17 : Write '1' to disable interrupt for event AUTOCOLRES3 */
#define NFCT_INTENCLR_AUTOCOLRES3_Pos (17UL) /*!< Position of AUTOCOLRES3 field. */
#define NFCT_INTENCLR_AUTOCOLRES3_Msk (0x1UL << NFCT_INTENCLR_AUTOCOLRES3_Pos) /*!< Bit mask of AUTOCOLRES3 field. */
#define NFCT_INTENCLR_AUTOCOLRES3_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_AUTOCOLRES3_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_AUTOCOLRES3_Clear (1UL) /*!< Disable */

/* Bit 16 : Write '1' to disable interrupt for event AUTOCOLRES2 */
#define NFCT_INTENCLR_AUTOCOLRES2_Pos (16UL) /*!< Position of AUTOCOLRES2 field. */
#define NFCT_INTENCLR_AUTOCOLRES2_Msk (0x1UL << NFCT_INTENCLR_AUTOCOLRES2_Pos) /*!< Bit mask of AUTOCOLRES2 field. */
#define NFCT_INTENCLR_AUTOCOLRES2_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_AUTOCOLRES2_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_AUTOCOLRES2_Clear (1UL) /*!< Disable */

/* Bit 15 : Write '1' to disable interrupt for event AUTOCOLRES1 */
#define NFCT_INTENCLR_AUTOCOLRES1_Pos (15UL) /*!< Position of AUTOCOLRES1 field. */
#define NFCT_INTENCLR_AUTOCOLRES1_Msk (0x1UL << NFCT_INTENCLR_AUTOCOLRES1_Pos) /*!< Bit mask of AUTOCOLRES1 field. */
#define NFCT_INTENCLR_AUTOCOLRES1_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_AUTOCOLRES1_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_AUTOCOLRES1_Clear (1UL) /*!< Disable */

/* Bit 14 : Write '1' to disable interrupt for event AUTOCOLRESSTARTED */
#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos (14UL) /*!< Position of AUTOCOLRESSTARTED field. */
#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Msk (0x1UL << NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos) /*!< Bit mask of AUTOCOLRESSTARTED field. */
#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_AUTOCOLRESSTARTED_Clear (1UL) /*!< Disable */

/* Bit 12 : Write '1' to disable interrupt for event ENDTX */
#define NFCT_INTENCLR_ENDTX_Pos (12UL) /*!< Position of ENDTX field. */
#define NFCT_INTENCLR_ENDTX_Msk (0x1UL << NFCT_INTENCLR_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define NFCT_INTENCLR_ENDTX_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_ENDTX_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_ENDTX_Clear (1UL) /*!< Disable */

/* Bit 11 : Write '1' to disable interrupt for event ENDRX */
#define NFCT_INTENCLR_ENDRX_Pos (11UL) /*!< Position of ENDRX field. */
#define NFCT_INTENCLR_ENDRX_Msk (0x1UL << NFCT_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define NFCT_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */

/* Bit 10 : Write '1' to disable interrupt for event RXERROR */
#define NFCT_INTENCLR_RXERROR_Pos (10UL) /*!< Position of RXERROR field. */
#define NFCT_INTENCLR_RXERROR_Msk (0x1UL << NFCT_INTENCLR_RXERROR_Pos) /*!< Bit mask of RXERROR field. */
#define NFCT_INTENCLR_RXERROR_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_RXERROR_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_RXERROR_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event CALCOMPLETE */
#define NFCT_INTENCLR_CALCOMPLETE_Pos (9UL) /*!< Position of CALCOMPLETE field. */
#define NFCT_INTENCLR_CALCOMPLETE_Msk (0x1UL << NFCT_INTENCLR_CALCOMPLETE_Pos) /*!< Bit mask of CALCOMPLETE field. */
#define NFCT_INTENCLR_CALCOMPLETE_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_CALCOMPLETE_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_CALCOMPLETE_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event FREQMEASUREDONE */
#define NFCT_INTENCLR_FREQMEASUREDONE_Pos (8UL) /*!< Position of FREQMEASUREDONE field. */
#define NFCT_INTENCLR_FREQMEASUREDONE_Msk (0x1UL << NFCT_INTENCLR_FREQMEASUREDONE_Pos) /*!< Bit mask of FREQMEASUREDONE field. */
#define NFCT_INTENCLR_FREQMEASUREDONE_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_FREQMEASUREDONE_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_FREQMEASUREDONE_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event ERROR */
#define NFCT_INTENCLR_ERROR_Pos (7UL) /*!< Position of ERROR field. */
#define NFCT_INTENCLR_ERROR_Msk (0x1UL << NFCT_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define NFCT_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_ERROR_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event RXFRAMEEND */
#define NFCT_INTENCLR_RXFRAMEEND_Pos (6UL) /*!< Position of RXFRAMEEND field. */
#define NFCT_INTENCLR_RXFRAMEEND_Msk (0x1UL << NFCT_INTENCLR_RXFRAMEEND_Pos) /*!< Bit mask of RXFRAMEEND field. */
#define NFCT_INTENCLR_RXFRAMEEND_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_RXFRAMEEND_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_RXFRAMEEND_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event RXFRAMESTART */
#define NFCT_INTENCLR_RXFRAMESTART_Pos (5UL) /*!< Position of RXFRAMESTART field. */
#define NFCT_INTENCLR_RXFRAMESTART_Msk (0x1UL << NFCT_INTENCLR_RXFRAMESTART_Pos) /*!< Bit mask of RXFRAMESTART field. */
#define NFCT_INTENCLR_RXFRAMESTART_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_RXFRAMESTART_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_RXFRAMESTART_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event TXFRAMEEND */
#define NFCT_INTENCLR_TXFRAMEEND_Pos (4UL) /*!< Position of TXFRAMEEND field. */
#define NFCT_INTENCLR_TXFRAMEEND_Msk (0x1UL << NFCT_INTENCLR_TXFRAMEEND_Pos) /*!< Bit mask of TXFRAMEEND field. */
#define NFCT_INTENCLR_TXFRAMEEND_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_TXFRAMEEND_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_TXFRAMEEND_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event TXFRAMESTART */
#define NFCT_INTENCLR_TXFRAMESTART_Pos (3UL) /*!< Position of TXFRAMESTART field. */
#define NFCT_INTENCLR_TXFRAMESTART_Msk (0x1UL << NFCT_INTENCLR_TXFRAMESTART_Pos) /*!< Bit mask of TXFRAMESTART field. */
#define NFCT_INTENCLR_TXFRAMESTART_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_TXFRAMESTART_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_TXFRAMESTART_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event FIELDLOST */
#define NFCT_INTENCLR_FIELDLOST_Pos (2UL) /*!< Position of FIELDLOST field. */
#define NFCT_INTENCLR_FIELDLOST_Msk (0x1UL << NFCT_INTENCLR_FIELDLOST_Pos) /*!< Bit mask of FIELDLOST field. */
#define NFCT_INTENCLR_FIELDLOST_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_FIELDLOST_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_FIELDLOST_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event FIELDDETECTED */
#define NFCT_INTENCLR_FIELDDETECTED_Pos (1UL) /*!< Position of FIELDDETECTED field. */
#define NFCT_INTENCLR_FIELDDETECTED_Msk (0x1UL << NFCT_INTENCLR_FIELDDETECTED_Pos) /*!< Bit mask of FIELDDETECTED field. */
#define NFCT_INTENCLR_FIELDDETECTED_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_FIELDDETECTED_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_FIELDDETECTED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event READY */
#define NFCT_INTENCLR_READY_Pos (0UL) /*!< Position of READY field. */
#define NFCT_INTENCLR_READY_Msk (0x1UL << NFCT_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
#define NFCT_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
#define NFCT_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
#define NFCT_INTENCLR_READY_Clear (1UL) /*!< Disable */

/* Register: NFCT_PWRUPSENSE */
/* Description: Tells if the NFCT peripheral is in SENSE mode */

/* Bit 0 : Tells if the NFCT peripheral is in SENSE mode */
#define NFCT_PWRUPSENSE_SENSE_Pos (0UL) /*!< Position of SENSE field. */
#define NFCT_PWRUPSENSE_SENSE_Msk (0x1UL << NFCT_PWRUPSENSE_SENSE_Pos) /*!< Bit mask of SENSE field. */
#define NFCT_PWRUPSENSE_SENSE_Disabled (0UL) /*!< NFCT is not in SENSE mode */
#define NFCT_PWRUPSENSE_SENSE_Sense (1UL) /*!< NFCT is in SENSE mode */

/* Register: NFCT_ERRORSTATUS */
/* Description: NFC Error Status register */

/* Bit 7 : Common mode regulation out of range */
#define NFCT_ERRORSTATUS_CMREGOUTOFRANGE_Pos (7UL) /*!< Position of CMREGOUTOFRANGE field. */
#define NFCT_ERRORSTATUS_CMREGOUTOFRANGE_Msk (0x1UL << NFCT_ERRORSTATUS_CMREGOUTOFRANGE_Pos) /*!< Bit mask of CMREGOUTOFRANGE field. */

/* Bit 1 : Detects any transition
      on demodulated carrier between 100 RF carrier periods before EoF and 255 RF carrier periods after EoF.
      This status is cleared on SoF. */
#define NFCT_ERRORSTATUS_INVALIDNFCSYMBOL_Pos (1UL) /*!< Position of INVALIDNFCSYMBOL field. */
#define NFCT_ERRORSTATUS_INVALIDNFCSYMBOL_Msk (0x1UL << NFCT_ERRORSTATUS_INVALIDNFCSYMBOL_Pos) /*!< Bit mask of INVALIDNFCSYMBOL field. */

/* Bit 0 : No STARTTX task triggered before expiration of the time set in FRAMEDELAYMAX */
#define NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos (0UL) /*!< Position of FRAMEDELAYTIMEOUT field. */
#define NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Msk (0x1UL << NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos) /*!< Bit mask of FRAMEDELAYTIMEOUT field. */

/* Register: NFCT_AUTOCOLRESSTATUS */
/* Description: NFC Auto collision resolution Error Status register */

/* Bits 1..0 : Auto collision resolution status */
#define NFCT_AUTOCOLRESSTATUS_ERROR_Pos (0UL) /*!< Position of ERROR field. */
#define NFCT_AUTOCOLRESSTATUS_ERROR_Msk (0x3UL << NFCT_AUTOCOLRESSTATUS_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define NFCT_AUTOCOLRESSTATUS_ERROR_NoCollision (0UL) /*!< Auto collision resolution resolved, no error */
#define NFCT_AUTOCOLRESSTATUS_ERROR_Cascade1Fail (1UL) /*!< Auto collision resolution failed at Cascade level 1 */
#define NFCT_AUTOCOLRESSTATUS_ERROR_Cascade2Fail (2UL) /*!< Auto collision resolution failed at Cascade level 2 */
#define NFCT_AUTOCOLRESSTATUS_ERROR_Cascade3Fail (3UL) /*!< Auto collision resolution failed at Cascade level 3 */

/* Register: NFCT_FRAMESTATUS_RX */
/* Description: Result of last incoming frame */

/* Bit 5 : Invalid SEL_PAR field of a received SDD_REQ */
#define NFCT_FRAMESTATUS_RX_INVALIDSELPAR_Pos (5UL) /*!< Position of INVALIDSELPAR field. */
#define NFCT_FRAMESTATUS_RX_INVALIDSELPAR_Msk (0x1UL << NFCT_FRAMESTATUS_RX_INVALIDSELPAR_Pos) /*!< Bit mask of INVALIDSELPAR field. */
#define NFCT_FRAMESTATUS_RX_INVALIDSELPAR_Valid (0UL) /*!< No invalid SEL_PAR */
#define NFCT_FRAMESTATUS_RX_INVALIDSELPAR_Invalid (1UL) /*!< Invalid SEL_PAR */

/* Bit 4 : Invalid SEL_CMD field of a received SDD_REQ */
#define NFCT_FRAMESTATUS_RX_INVALIDSELCMD_Pos (4UL) /*!< Position of INVALIDSELCMD field. */
#define NFCT_FRAMESTATUS_RX_INVALIDSELCMD_Msk (0x1UL << NFCT_FRAMESTATUS_RX_INVALIDSELCMD_Pos) /*!< Bit mask of INVALIDSELCMD field. */
#define NFCT_FRAMESTATUS_RX_INVALIDSELCMD_Valid (0UL) /*!< No invalid SEL_CMD */
#define NFCT_FRAMESTATUS_RX_INVALIDSELCMD_Invalid (1UL) /*!< Invalid SEL_CMD */

/* Bit 3 : Overrun detected */
#define NFCT_FRAMESTATUS_RX_OVERRUN_Pos (3UL) /*!< Position of OVERRUN field. */
#define NFCT_FRAMESTATUS_RX_OVERRUN_Msk (0x1UL << NFCT_FRAMESTATUS_RX_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
#define NFCT_FRAMESTATUS_RX_OVERRUN_NoOverrun (0UL) /*!< No overrun detected */
#define NFCT_FRAMESTATUS_RX_OVERRUN_Overrun (1UL) /*!< Overrun error */

/* Bit 2 : Parity status of received frame */
#define NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos (2UL) /*!< Position of PARITYSTATUS field. */
#define NFCT_FRAMESTATUS_RX_PARITYSTATUS_Msk (0x1UL << NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos) /*!< Bit mask of PARITYSTATUS field. */
#define NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityOK (0UL) /*!< Frame received with parity OK */
#define NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityError (1UL) /*!< Frame received with parity error */

/* Bit 0 : No valid end of frame (EoF) detected */
#define NFCT_FRAMESTATUS_RX_CRCERROR_Pos (0UL) /*!< Position of CRCERROR field. */
#define NFCT_FRAMESTATUS_RX_CRCERROR_Msk (0x1UL << NFCT_FRAMESTATUS_RX_CRCERROR_Pos) /*!< Bit mask of CRCERROR field. */
#define NFCT_FRAMESTATUS_RX_CRCERROR_CRCCorrect (0UL) /*!< Valid CRC detected */
#define NFCT_FRAMESTATUS_RX_CRCERROR_CRCError (1UL) /*!< CRC received does not match local check */

/* Register: NFCT_NFCTAGSTATE */
/* Description: NfcTag state register */

/* Bits 2..0 : NfcTag state */
#define NFCT_NFCTAGSTATE_NFCTAGSTATE_Pos (0UL) /*!< Position of NFCTAGSTATE field. */
#define NFCT_NFCTAGSTATE_NFCTAGSTATE_Msk (0x7UL << NFCT_NFCTAGSTATE_NFCTAGSTATE_Pos) /*!< Bit mask of NFCTAGSTATE field. */
#define NFCT_NFCTAGSTATE_NFCTAGSTATE_Disabled (0UL) /*!< Disabled or sense */
#define NFCT_NFCTAGSTATE_NFCTAGSTATE_RampUp (2UL) /*!< RampUp */
#define NFCT_NFCTAGSTATE_NFCTAGSTATE_Idle (3UL) /*!< Idle */
#define NFCT_NFCTAGSTATE_NFCTAGSTATE_Receive (4UL) /*!< Receive */
#define NFCT_NFCTAGSTATE_NFCTAGSTATE_FrameDelay (5UL) /*!< FrameDelay */
#define NFCT_NFCTAGSTATE_NFCTAGSTATE_Transmit (6UL) /*!< Transmit */

/* Register: NFCT_SLEEPSTATE */
/* Description: Sleep state during automatic collision resolution */

/* Bit 0 : Reflects the sleep state during automatic collision resolution. Set to IDLE 
        by a GOIDLE task. Set to SLEEP_A when a valid SLEEP_REQ frame is received or by a 
        GOSLEEP task. */
#define NFCT_SLEEPSTATE_SLEEPSTATE_Pos (0UL) /*!< Position of SLEEPSTATE field. */
#define NFCT_SLEEPSTATE_SLEEPSTATE_Msk (0x1UL << NFCT_SLEEPSTATE_SLEEPSTATE_Pos) /*!< Bit mask of SLEEPSTATE field. */
#define NFCT_SLEEPSTATE_SLEEPSTATE_Idle (0UL) /*!< State is IDLE. */
#define NFCT_SLEEPSTATE_SLEEPSTATE_SleepA (1UL) /*!< State is SLEEP_A. */

/* Register: NFCT_BYTESWRITTENTORAM */
/* Description: Number of bytes written to RAM */

/* Bits 8..0 : Number of bytes written to RAM. */
#define NFCT_BYTESWRITTENTORAM_BYTESWRITTENTORAM_Pos (0UL) /*!< Position of BYTESWRITTENTORAM field. */
#define NFCT_BYTESWRITTENTORAM_BYTESWRITTENTORAM_Msk (0x1FFUL << NFCT_BYTESWRITTENTORAM_BYTESWRITTENTORAM_Pos) /*!< Bit mask of BYTESWRITTENTORAM field. */

/* Register: NFCT_NFCFRAMINGCORESTATE */
/* Description: NFC Framing Core State */

/* Bits 2..0 : Current NFC Framing Core State */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_Pos (0UL) /*!< Position of NFCFRAMINGCORESTATE field. */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_Msk (0x7UL << NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_Pos) /*!< Bit mask of NFCFRAMINGCORESTATE field. */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_PadNotConnected (0x00UL) /*!< NFC pads not connected */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_Disabled (0x01UL) /*!< NFCT peripheral disabled */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_Sense (0x02UL) /*!< In sense state. But it is transitive state, so visible for one peripheral clock cycle only. */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_RampUp (0x03UL) /*!< NFCT peripheral ramping up */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_CollisionResolution (0x04UL) /*!< Automatic collision resolution in progress */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_Selected (0x05UL) /*!< In selected state */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_Transmitting (0x06UL) /*!< Transmit in progress */
#define NFCT_NFCFRAMINGCORESTATE_NFCFRAMINGCORESTATE_TransmitFinishing (0x07UL) /*!< Transmit finishing, reading from the RAM buffer completed */

/* Register: NFCT_NFCANTICOLRESSTATE */
/* Description: Automatic collision resolution (anti-collision) state */

/* Bits 3..0 : Current Automatic collision resolution (anti-collision) state */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_Pos (0UL) /*!< Position of NFCANTICOLRESSTATE field. */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_Msk (0xFUL << NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_Pos) /*!< Bit mask of NFCANTICOLRESSTATE field. */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_IDLE (0x00UL) /*!< State IDLE */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_IDLE_SENS_RES (0x01UL) /*!< State IDLE_SENS_RES */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A0 (0x02UL) /*!< State READY_A0 */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A0_SEL_RES (0x03UL) /*!< State READY_A0_SEL_RES */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A0_SDD_RES (0x04UL) /*!< State READY_A0_SDD_RES */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A1 (0x05UL) /*!< State READY_A1 */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A1_SEL_RES (0x06UL) /*!< State READY_A1_SEL_RES */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A1_SDD_RES (0x07UL) /*!< State READY_A1_SDD_RES */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A2 (0x08UL) /*!< State READY_A2 */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A2_SEL_RES (0x09UL) /*!< State READY_A2_SEL_RES */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_READY_A2_SDD_RES (0x0AUL) /*!< State READY_A2_SDD_RES */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_ACTIVE_A (0x0BUL) /*!< State ACTIVE_A */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_SLEEP_A (0x0CUL) /*!< State SLEEP_A */
#define NFCT_NFCANTICOLRESSTATE_NFCANTICOLRESSTATE_SLEEP_A_SENS_RES (0x0DUL) /*!< State SLEEP_A_SENS_RES */

/* Register: NFCT_MEASUREDFREQ */
/* Description: The frequency measured on the 13.56 MHz NFC carrier signal */

/* Bits 10..0 : The frequency measured on the 13.56 MHz NFC carrier signal. This result is produced in response to triggering FREQMEASURE. Frequency = 16 MHz * MEASUREDFREQ / 1000 */
#define NFCT_MEASUREDFREQ_MEASUREDFREQ_Pos (0UL) /*!< Position of MEASUREDFREQ field. */
#define NFCT_MEASUREDFREQ_MEASUREDFREQ_Msk (0x7FFUL << NFCT_MEASUREDFREQ_MEASUREDFREQ_Pos) /*!< Bit mask of MEASUREDFREQ field. */

/* Register: NFCT_ROSCCALVALUE */
/* Description: The current value used by the ring oscillator */

/* Bits 4..0 : The current value used by the ring oscillator. Either given by the calibration engine, or by the override value. */
#define NFCT_ROSCCALVALUE_ROSCCALVALUE_Pos (0UL) /*!< Position of ROSCCALVALUE field. */
#define NFCT_ROSCCALVALUE_ROSCCALVALUE_Msk (0x1FUL << NFCT_ROSCCALVALUE_ROSCCALVALUE_Pos) /*!< Bit mask of ROSCCALVALUE field. */
#define NFCT_ROSCCALVALUE_ROSCCALVALUE_Minimum (0x00UL) /*!< Minimum frequency */
#define NFCT_ROSCCALVALUE_ROSCCALVALUE_Nominal (0x0FUL) /*!< Nominal frequency */
#define NFCT_ROSCCALVALUE_ROSCCALVALUE_Maximum (0x1FUL) /*!< Maximum frequency */

/* Register: NFCT_FIELDPRESENT */
/* Description: Indicates the presence or not of a valid field */

/* Bit 1 : Indicates if the low level has locked to the field */
#define NFCT_FIELDPRESENT_LOCKDETECT_Pos (1UL) /*!< Position of LOCKDETECT field. */
#define NFCT_FIELDPRESENT_LOCKDETECT_Msk (0x1UL << NFCT_FIELDPRESENT_LOCKDETECT_Pos) /*!< Bit mask of LOCKDETECT field. */
#define NFCT_FIELDPRESENT_LOCKDETECT_NotLocked (0UL) /*!< Not locked to field */
#define NFCT_FIELDPRESENT_LOCKDETECT_Locked (1UL) /*!< Locked to field */

/* Bit 0 : Indicates if a valid field is present. Available only in the activated state. */
#define NFCT_FIELDPRESENT_FIELDPRESENT_Pos (0UL) /*!< Position of FIELDPRESENT field. */
#define NFCT_FIELDPRESENT_FIELDPRESENT_Msk (0x1UL << NFCT_FIELDPRESENT_FIELDPRESENT_Pos) /*!< Bit mask of FIELDPRESENT field. */
#define NFCT_FIELDPRESENT_FIELDPRESENT_NoField (0UL) /*!< No valid field detected */
#define NFCT_FIELDPRESENT_FIELDPRESENT_FieldPresent (1UL) /*!< Valid field detected */

/* Register: NFCT_CURRENTPEAKDETECTREF */
/* Description: Current peak detect reference */

/* Bits 2..0 : Current value of peak detect reference voltage adjustment. Same as SHUNTREGCONFIG.PEAKDETECTREFINIT. */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_Pos (0UL) /*!< Position of CURRENTPEAKDETECTREF field. */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_Msk (0x7UL << NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_Pos) /*!< Bit mask of CURRENTPEAKDETECTREF field. */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_0 (0UL) /*!< 1040 mV */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_1 (1UL) /*!< 1000 mV */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_2 (2UL) /*!< 960 mV */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_3 (3UL) /*!< 920 mV */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_4 (4UL) /*!< 880 mV */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_5 (5UL) /*!< 840 mV */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_6 (6UL) /*!< 800 mV */
#define NFCT_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_CURRENTPEAKDETECTREF_7 (7UL) /*!< 760 mV */

/* Register: NFCT_ENABLE */
/* Description: Register to enable NFC functionality */

/* Bit 0 : Register to enable NFC functionality */
#define NFCT_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define NFCT_ENABLE_ENABLE_Msk (0x1UL << NFCT_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define NFCT_ENABLE_ENABLE_Disabled (0UL) /*!< Disable NFC */
#define NFCT_ENABLE_ENABLE_Enabled (1UL) /*!< Enable NFC */

/* Register: NFCT_FRAMEDELAYMIN */
/* Description: Minimum frame delay */

/* Bits 15..0 : Minimum frame delay in number of 13.56 MHz clocks */
#define NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos (0UL) /*!< Position of FRAMEDELAYMIN field. */
#define NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Msk (0xFFFFUL << NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos) /*!< Bit mask of FRAMEDELAYMIN field. */

/* Register: NFCT_FRAMEDELAYMAX */
/* Description: Maximum frame delay */

/* Bits 19..0 : Maximum frame delay in number of 13.56 MHz clocks */
#define NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos (0UL) /*!< Position of FRAMEDELAYMAX field. */
#define NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk (0xFFFFFUL << NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos) /*!< Bit mask of FRAMEDELAYMAX field. */

/* Register: NFCT_FRAMEDELAYMODE */
/* Description: Configuration register for the Frame Delay Timer */

/* Bits 1..0 : Configuration register for the Frame Delay Timer */
#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos (0UL) /*!< Position of FRAMEDELAYMODE field. */
#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Msk (0x3UL << NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos) /*!< Bit mask of FRAMEDELAYMODE field. */
#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_FreeRun (0UL) /*!< Transmission is independent of frame timer and will start when the STARTTX task is triggered. No timeout. */
#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Window (1UL) /*!< Frame is transmitted between FRAMEDELAYMIN and FRAMEDELAYMAX */
#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_ExactVal (2UL) /*!< Frame is transmitted exactly at FRAMEDELAYMAX */
#define NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_WindowGrid (3UL) /*!< Frame is transmitted on a bit grid between FRAMEDELAYMIN and FRAMEDELAYMAX */

/* Register: NFCT_PACKETPTR */
/* Description: Packet pointer for TXD and RXD data storage in Data RAM */

/* Bits 31..0 : Packet pointer for TXD and RXD data storage in Data RAM. This address is a byte-aligned RAM address. */
#define NFCT_PACKETPTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define NFCT_PACKETPTR_PTR_Msk (0xFFFFFFFFUL << NFCT_PACKETPTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: NFCT_MAXLEN */
/* Description: Size of the RAM buffer allocated to TXD and RXD data storage each */

/* Bits 8..0 : Size of the RAM buffer allocated to TXD and RXD data storage each */
#define NFCT_MAXLEN_MAXLEN_Pos (0UL) /*!< Position of MAXLEN field. */
#define NFCT_MAXLEN_MAXLEN_Msk (0x1FFUL << NFCT_MAXLEN_MAXLEN_Pos) /*!< Bit mask of MAXLEN field. */

/* Register: NFCT_TXD_FRAMECONFIG */
/* Description: Configuration of outgoing frames */

/* Bit 4 : CRC mode for outgoing frames */
#define NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos (4UL) /*!< Position of CRCMODETX field. */
#define NFCT_TXD_FRAMECONFIG_CRCMODETX_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos) /*!< Bit mask of CRCMODETX field. */
#define NFCT_TXD_FRAMECONFIG_CRCMODETX_NoCRCTX (0UL) /*!< CRC is not added to the frame */
#define NFCT_TXD_FRAMECONFIG_CRCMODETX_CRC16TX (1UL) /*!< 16 bit CRC added to the frame based on all the data read from RAM that is used in the frame */

/* Bit 2 : Adding SoF or not in TX frames */
#define NFCT_TXD_FRAMECONFIG_SOF_Pos (2UL) /*!< Position of SOF field. */
#define NFCT_TXD_FRAMECONFIG_SOF_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_SOF_Pos) /*!< Bit mask of SOF field. */
#define NFCT_TXD_FRAMECONFIG_SOF_NoSoF (0UL) /*!< SoF symbol not added */
#define NFCT_TXD_FRAMECONFIG_SOF_SoF (1UL) /*!< SoF symbol added */

/* Bit 1 : Discarding unused bits at start or end of a frame */
#define NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos (1UL) /*!< Position of DISCARDMODE field. */
#define NFCT_TXD_FRAMECONFIG_DISCARDMODE_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos) /*!< Bit mask of DISCARDMODE field. */
#define NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardEnd (0UL) /*!< Unused bits are discarded at end of frame (EoF) */
#define NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardStart (1UL) /*!< Unused bits are discarded at start of frame (SoF) */

/* Bit 0 : Indicates if parity is added to the frame */
#define NFCT_TXD_FRAMECONFIG_PARITY_Pos (0UL) /*!< Position of PARITY field. */
#define NFCT_TXD_FRAMECONFIG_PARITY_Msk (0x1UL << NFCT_TXD_FRAMECONFIG_PARITY_Pos) /*!< Bit mask of PARITY field. */
#define NFCT_TXD_FRAMECONFIG_PARITY_NoParity (0UL) /*!< Parity is not added to TX frames */
#define NFCT_TXD_FRAMECONFIG_PARITY_Parity (1UL) /*!< Parity is added to TX frames */

/* Register: NFCT_TXD_AMOUNT */
/* Description: Size of outgoing frame */

/* Bits 11..3 : Number of complete bytes that shall be included in the frame, excluding CRC, parity and framing */
#define NFCT_TXD_AMOUNT_TXDATABYTES_Pos (3UL) /*!< Position of TXDATABYTES field. */
#define NFCT_TXD_AMOUNT_TXDATABYTES_Msk (0x1FFUL << NFCT_TXD_AMOUNT_TXDATABYTES_Pos) /*!< Bit mask of TXDATABYTES field. */

/* Bits 2..0 : Number of bits in the last or first byte read from RAM that shall be included in the frame (excluding parity bit). */
#define NFCT_TXD_AMOUNT_TXDATABITS_Pos (0UL) /*!< Position of TXDATABITS field. */
#define NFCT_TXD_AMOUNT_TXDATABITS_Msk (0x7UL << NFCT_TXD_AMOUNT_TXDATABITS_Pos) /*!< Bit mask of TXDATABITS field. */

/* Register: NFCT_RXD_FRAMECONFIG */
/* Description: Configuration of incoming frames */

/* Bit 4 : CRC mode for incoming frames */
#define NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos (4UL) /*!< Position of CRCMODERX field. */
#define NFCT_RXD_FRAMECONFIG_CRCMODERX_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos) /*!< Bit mask of CRCMODERX field. */
#define NFCT_RXD_FRAMECONFIG_CRCMODERX_NoCRCRX (0UL) /*!< CRC is not expected in RX frames */
#define NFCT_RXD_FRAMECONFIG_CRCMODERX_CRC16RX (1UL) /*!< Last 16 bits in RX frame is CRC, CRC is checked and CRCSTATUS updated */

/* Bit 2 : SoF expected or not in RX frames */
#define NFCT_RXD_FRAMECONFIG_SOF_Pos (2UL) /*!< Position of SOF field. */
#define NFCT_RXD_FRAMECONFIG_SOF_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_SOF_Pos) /*!< Bit mask of SOF field. */
#define NFCT_RXD_FRAMECONFIG_SOF_NoSoF (0UL) /*!< SoF symbol is not expected in RX frames */
#define NFCT_RXD_FRAMECONFIG_SOF_SoF (1UL) /*!< SoF symbol is expected in RX frames */

/* Bit 0 : Indicates if parity expected in RX frame */
#define NFCT_RXD_FRAMECONFIG_PARITY_Pos (0UL) /*!< Position of PARITY field. */
#define NFCT_RXD_FRAMECONFIG_PARITY_Msk (0x1UL << NFCT_RXD_FRAMECONFIG_PARITY_Pos) /*!< Bit mask of PARITY field. */
#define NFCT_RXD_FRAMECONFIG_PARITY_NoParity (0UL) /*!< Parity is not expected in RX frames */
#define NFCT_RXD_FRAMECONFIG_PARITY_Parity (1UL) /*!< Parity is expected in RX frames */

/* Register: NFCT_RXD_AMOUNT */
/* Description: Size of last incoming frame */

/* Bits 11..3 : Number of complete bytes received in the frame (including CRC, but excluding parity and SoF/EoF framing) */
#define NFCT_RXD_AMOUNT_RXDATABYTES_Pos (3UL) /*!< Position of RXDATABYTES field. */
#define NFCT_RXD_AMOUNT_RXDATABYTES_Msk (0x1FFUL << NFCT_RXD_AMOUNT_RXDATABYTES_Pos) /*!< Bit mask of RXDATABYTES field. */

/* Bits 2..0 : Number of bits in the last byte in the frame, if less than 8 (including CRC, but excluding parity and SoF/EoF framing). */
#define NFCT_RXD_AMOUNT_RXDATABITS_Pos (0UL) /*!< Position of RXDATABITS field. */
#define NFCT_RXD_AMOUNT_RXDATABITS_Msk (0x7UL << NFCT_RXD_AMOUNT_RXDATABITS_Pos) /*!< Bit mask of RXDATABITS field. */

/* Register: NFCT_FRAMEDELAYSHIFT */
/* Description: Correction for the frame delay reference */

/* Bits 3..0 : Fine offset for the reference time for frame timing controller counter, measured
        in carrier frequency periods. Value 8 is no offset. Values greater than 8 means the frame
        timing controller counter reaches FRAMEDELAYMIN early and values less than 8 means the
        counter reaches FRAMEDELAYMIN late. */
#define NFCT_FRAMEDELAYSHIFT_FRAMEDELAYSHIFT_Pos (0UL) /*!< Position of FRAMEDELAYSHIFT field. */
#define NFCT_FRAMEDELAYSHIFT_FRAMEDELAYSHIFT_Msk (0xFUL << NFCT_FRAMEDELAYSHIFT_FRAMEDELAYSHIFT_Pos) /*!< Bit mask of FRAMEDELAYSHIFT field. */

/* Register: NFCT_MODULATIONCTRL */
/* Description: Enables the modulation output to a GPIO pin which can be connected to a second external antenna. */

/* Bits 1..0 : Configuration of modulation control. */
#define NFCT_MODULATIONCTRL_MODULATIONCTRL_Pos (0UL) /*!< Position of MODULATIONCTRL field. */
#define NFCT_MODULATIONCTRL_MODULATIONCTRL_Msk (0x3UL << NFCT_MODULATIONCTRL_MODULATIONCTRL_Pos) /*!< Bit mask of MODULATIONCTRL field. */
#define NFCT_MODULATIONCTRL_MODULATIONCTRL_Invalid (0x0UL) /*!< Invalid, defaults to same behaviour as for Internal */
#define NFCT_MODULATIONCTRL_MODULATIONCTRL_Internal (0x1UL) /*!< Use internal modulator only */
#define NFCT_MODULATIONCTRL_MODULATIONCTRL_ModToGpio (0x2UL) /*!< Output digital modulation signal to a GPIO pin. */
#define NFCT_MODULATIONCTRL_MODULATIONCTRL_InternalAndModToGpio (0x3UL) /*!< Use internal modulator and output digital modulation signal to a GPIO pin. */

/* Register: NFCT_CRCPOLY */
/* Description: CRC polynomial */

/* Bits 15..0 : CRC polynomial. Each term in the CRC polynomial is mapped to a bit in this register which index corresponds to the term's exponent.
          The most significant term (bit 16) is hardwired to 1, and not reflected in the register. The following example is for a 16-bit CRC polynomial: (x16 +) x12 + x5 + 1 = (1) 0001 0000 0010 0001 = 0x1021 (x16 is implicitly 1 and does not need to be written to the register) */
#define NFCT_CRCPOLY_CRCPOLY_Pos (0UL) /*!< Position of CRCPOLY field. */
#define NFCT_CRCPOLY_CRCPOLY_Msk (0xFFFFUL << NFCT_CRCPOLY_CRCPOLY_Pos) /*!< Bit mask of CRCPOLY field. */

/* Register: NFCT_CRCINIT */
/* Description: CRC initial value */

/* Bits 15..0 : Initial value for CRC calculation */
#define NFCT_CRCINIT_CRCINIT_Pos (0UL) /*!< Position of CRCINIT field. */
#define NFCT_CRCINIT_CRCINIT_Msk (0xFFFFUL << NFCT_CRCINIT_CRCINIT_Pos) /*!< Bit mask of CRCINIT field. */
#define NFCT_CRCINIT_CRCINIT_NFCA (0x6363UL) /*!< Initial value for NFC-A */
#define NFCT_CRCINIT_CRCINIT_NFCBF (0xFFFFUL) /*!< Initial value for NFC-B and NFC-F */

/* Register: NFCT_MODULATIONPSEL */
/* Description: Pin select for Modulation control. */

/* Bit 31 : Connection */
#define NFCT_MODULATIONPSEL_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define NFCT_MODULATIONPSEL_CONNECT_Msk (0x1UL << NFCT_MODULATIONPSEL_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define NFCT_MODULATIONPSEL_CONNECT_Connected (0UL) /*!< Connect */
#define NFCT_MODULATIONPSEL_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bits 6..5 : Port number */
#define NFCT_MODULATIONPSEL_PORT_Pos (5UL) /*!< Position of PORT field. */
#define NFCT_MODULATIONPSEL_PORT_Msk (0x3UL << NFCT_MODULATIONPSEL_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define NFCT_MODULATIONPSEL_PIN_Pos (0UL) /*!< Position of PIN field. */
#define NFCT_MODULATIONPSEL_PIN_Msk (0x1FUL << NFCT_MODULATIONPSEL_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: NFCT_NFCID1_LAST */
/* Description: Last NFCID1 part (4, 7 or 10 bytes ID) */

/* Bits 31..24 : NFCID1 byte W */
#define NFCT_NFCID1_LAST_NFCID1_W_Pos (24UL) /*!< Position of NFCID1_W field. */
#define NFCT_NFCID1_LAST_NFCID1_W_Msk (0xFFUL << NFCT_NFCID1_LAST_NFCID1_W_Pos) /*!< Bit mask of NFCID1_W field. */

/* Bits 23..16 : NFCID1 byte X */
#define NFCT_NFCID1_LAST_NFCID1_X_Pos (16UL) /*!< Position of NFCID1_X field. */
#define NFCT_NFCID1_LAST_NFCID1_X_Msk (0xFFUL << NFCT_NFCID1_LAST_NFCID1_X_Pos) /*!< Bit mask of NFCID1_X field. */

/* Bits 15..8 : NFCID1 byte Y */
#define NFCT_NFCID1_LAST_NFCID1_Y_Pos (8UL) /*!< Position of NFCID1_Y field. */
#define NFCT_NFCID1_LAST_NFCID1_Y_Msk (0xFFUL << NFCT_NFCID1_LAST_NFCID1_Y_Pos) /*!< Bit mask of NFCID1_Y field. */

/* Bits 7..0 : NFCID1 byte Z (very last byte sent) */
#define NFCT_NFCID1_LAST_NFCID1_Z_Pos (0UL) /*!< Position of NFCID1_Z field. */
#define NFCT_NFCID1_LAST_NFCID1_Z_Msk (0xFFUL << NFCT_NFCID1_LAST_NFCID1_Z_Pos) /*!< Bit mask of NFCID1_Z field. */

/* Register: NFCT_NFCID1_2ND_LAST */
/* Description: Second last NFCID1 part (7 or 10 bytes ID) */

/* Bits 23..16 : NFCID1 byte T */
#define NFCT_NFCID1_2ND_LAST_NFCID1_T_Pos (16UL) /*!< Position of NFCID1_T field. */
#define NFCT_NFCID1_2ND_LAST_NFCID1_T_Msk (0xFFUL << NFCT_NFCID1_2ND_LAST_NFCID1_T_Pos) /*!< Bit mask of NFCID1_T field. */

/* Bits 15..8 : NFCID1 byte U */
#define NFCT_NFCID1_2ND_LAST_NFCID1_U_Pos (8UL) /*!< Position of NFCID1_U field. */
#define NFCT_NFCID1_2ND_LAST_NFCID1_U_Msk (0xFFUL << NFCT_NFCID1_2ND_LAST_NFCID1_U_Pos) /*!< Bit mask of NFCID1_U field. */

/* Bits 7..0 : NFCID1 byte V */
#define NFCT_NFCID1_2ND_LAST_NFCID1_V_Pos (0UL) /*!< Position of NFCID1_V field. */
#define NFCT_NFCID1_2ND_LAST_NFCID1_V_Msk (0xFFUL << NFCT_NFCID1_2ND_LAST_NFCID1_V_Pos) /*!< Bit mask of NFCID1_V field. */

/* Register: NFCT_NFCID1_3RD_LAST */
/* Description: Third last NFCID1 part (10 bytes ID) */

/* Bits 23..16 : NFCID1 byte Q */
#define NFCT_NFCID1_3RD_LAST_NFCID1_Q_Pos (16UL) /*!< Position of NFCID1_Q field. */
#define NFCT_NFCID1_3RD_LAST_NFCID1_Q_Msk (0xFFUL << NFCT_NFCID1_3RD_LAST_NFCID1_Q_Pos) /*!< Bit mask of NFCID1_Q field. */

/* Bits 15..8 : NFCID1 byte R */
#define NFCT_NFCID1_3RD_LAST_NFCID1_R_Pos (8UL) /*!< Position of NFCID1_R field. */
#define NFCT_NFCID1_3RD_LAST_NFCID1_R_Msk (0xFFUL << NFCT_NFCID1_3RD_LAST_NFCID1_R_Pos) /*!< Bit mask of NFCID1_R field. */

/* Bits 7..0 : NFCID1 byte S */
#define NFCT_NFCID1_3RD_LAST_NFCID1_S_Pos (0UL) /*!< Position of NFCID1_S field. */
#define NFCT_NFCID1_3RD_LAST_NFCID1_S_Msk (0xFFUL << NFCT_NFCID1_3RD_LAST_NFCID1_S_Pos) /*!< Bit mask of NFCID1_S field. */

/* Register: NFCT_AUTOCOLRESCONFIG */
/* Description: Controls the auto collision resolution function. This setting must be done before the NFCT peripheral is activated. */

/* Bit 1 : Enables/disables auto collision resolution short frame (any frames less than 7 bits) noise filter */
#define NFCT_AUTOCOLRESCONFIG_FILTER_Pos (1UL) /*!< Position of FILTER field. */
#define NFCT_AUTOCOLRESCONFIG_FILTER_Msk (0x1UL << NFCT_AUTOCOLRESCONFIG_FILTER_Pos) /*!< Bit mask of FILTER field. */
#define NFCT_AUTOCOLRESCONFIG_FILTER_Off (0UL) /*!< Auto collision resolution short frame noise filter disabled */
#define NFCT_AUTOCOLRESCONFIG_FILTER_On (1UL) /*!< Auto collision resolution ignores any frames less than 7 bits */

/* Bit 0 : Enables/disables auto collision resolution */
#define NFCT_AUTOCOLRESCONFIG_MODE_Pos (0UL) /*!< Position of MODE field. */
#define NFCT_AUTOCOLRESCONFIG_MODE_Msk (0x1UL << NFCT_AUTOCOLRESCONFIG_MODE_Pos) /*!< Bit mask of MODE field. */
#define NFCT_AUTOCOLRESCONFIG_MODE_Enabled (0UL) /*!< Auto collision resolution enabled */
#define NFCT_AUTOCOLRESCONFIG_MODE_Disabled (1UL) /*!< Auto collision resolution disabled */

/* Register: NFCT_SENSRES */
/* Description: NFC-A SENS_RES auto-response settings */

/* Bits 15..12 : Reserved for future use. Shall be 0. */
#define NFCT_SENSRES_RFU74_Pos (12UL) /*!< Position of RFU74 field. */
#define NFCT_SENSRES_RFU74_Msk (0xFUL << NFCT_SENSRES_RFU74_Pos) /*!< Bit mask of RFU74 field. */

/* Bits 11..8 : Tag platform configuration as defined by the b4:b1 of byte 2 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification */
#define NFCT_SENSRES_PLATFCONFIG_Pos (8UL) /*!< Position of PLATFCONFIG field. */
#define NFCT_SENSRES_PLATFCONFIG_Msk (0xFUL << NFCT_SENSRES_PLATFCONFIG_Pos) /*!< Bit mask of PLATFCONFIG field. */

/* Bits 7..6 : NFCID1 size. This value is used by the auto collision resolution engine. */
#define NFCT_SENSRES_NFCIDSIZE_Pos (6UL) /*!< Position of NFCIDSIZE field. */
#define NFCT_SENSRES_NFCIDSIZE_Msk (0x3UL << NFCT_SENSRES_NFCIDSIZE_Pos) /*!< Bit mask of NFCIDSIZE field. */
#define NFCT_SENSRES_NFCIDSIZE_NFCID1Single (0UL) /*!< NFCID1 size: single (4 bytes) */
#define NFCT_SENSRES_NFCIDSIZE_NFCID1Double (1UL) /*!< NFCID1 size: double (7 bytes) */
#define NFCT_SENSRES_NFCIDSIZE_NFCID1Triple (2UL) /*!< NFCID1 size: triple (10 bytes) */

/* Bit 5 : Reserved for future use. Shall be 0. */
#define NFCT_SENSRES_RFU5_Pos (5UL) /*!< Position of RFU5 field. */
#define NFCT_SENSRES_RFU5_Msk (0x1UL << NFCT_SENSRES_RFU5_Pos) /*!< Bit mask of RFU5 field. */

/* Bits 4..0 : Bit frame SDD as defined by the b5:b1 of byte 1 in SENS_RES response in the NFC Forum, NFC Digital Protocol Technical Specification */
#define NFCT_SENSRES_BITFRAMESDD_Pos (0UL) /*!< Position of BITFRAMESDD field. */
#define NFCT_SENSRES_BITFRAMESDD_Msk (0x1FUL << NFCT_SENSRES_BITFRAMESDD_Pos) /*!< Bit mask of BITFRAMESDD field. */
#define NFCT_SENSRES_BITFRAMESDD_SDD00000 (0UL) /*!< SDD pattern 00000 */
#define NFCT_SENSRES_BITFRAMESDD_SDD00001 (1UL) /*!< SDD pattern 00001 */
#define NFCT_SENSRES_BITFRAMESDD_SDD00010 (2UL) /*!< SDD pattern 00010 */
#define NFCT_SENSRES_BITFRAMESDD_SDD00100 (4UL) /*!< SDD pattern 00100 */
#define NFCT_SENSRES_BITFRAMESDD_SDD01000 (8UL) /*!< SDD pattern 01000 */
#define NFCT_SENSRES_BITFRAMESDD_SDD10000 (16UL) /*!< SDD pattern 10000 */

/* Register: NFCT_SELRES */
/* Description: NFC-A SEL_RES auto-response settings */

/* Bit 7 : Reserved for future use. Shall be 0. */
#define NFCT_SELRES_RFU7_Pos (7UL) /*!< Position of RFU7 field. */
#define NFCT_SELRES_RFU7_Msk (0x1UL << NFCT_SELRES_RFU7_Pos) /*!< Bit mask of RFU7 field. */

/* Bits 6..5 : Protocol as defined by the b7:b6 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical Specification */
#define NFCT_SELRES_PROTOCOL_Pos (5UL) /*!< Position of PROTOCOL field. */
#define NFCT_SELRES_PROTOCOL_Msk (0x3UL << NFCT_SELRES_PROTOCOL_Pos) /*!< Bit mask of PROTOCOL field. */

/* Bits 4..3 : Reserved for future use. Shall be 0. */
#define NFCT_SELRES_RFU43_Pos (3UL) /*!< Position of RFU43 field. */
#define NFCT_SELRES_RFU43_Msk (0x3UL << NFCT_SELRES_RFU43_Pos) /*!< Bit mask of RFU43 field. */

/* Bit 2 : Cascade as defined by the b3 of SEL_RES response in the NFC Forum, NFC Digital Protocol Technical Specification (controlled by hardware, shall be 0) */
#define NFCT_SELRES_CASCADE_Pos (2UL) /*!< Position of CASCADE field. */
#define NFCT_SELRES_CASCADE_Msk (0x1UL << NFCT_SELRES_CASCADE_Pos) /*!< Bit mask of CASCADE field. */

/* Bits 1..0 : Reserved for future use. Shall be 0. */
#define NFCT_SELRES_RFU10_Pos (0UL) /*!< Position of RFU10 field. */
#define NFCT_SELRES_RFU10_Msk (0x3UL << NFCT_SELRES_RFU10_Pos) /*!< Bit mask of RFU10 field. */

/* Register: NFCT_DEMODCONFIG */
/* Description: Configuration settings for demodulation */

/* Bit 9 : Selects if an edge detector is enabled to detect the rising edge of an NFC pulse */
#define NFCT_DEMODCONFIG_DEMODEDGEDETECT_Pos (9UL) /*!< Position of DEMODEDGEDETECT field. */
#define NFCT_DEMODCONFIG_DEMODEDGEDETECT_Msk (0x1UL << NFCT_DEMODCONFIG_DEMODEDGEDETECT_Pos) /*!< Bit mask of DEMODEDGEDETECT field. */
#define NFCT_DEMODCONFIG_DEMODEDGEDETECT_Disabled (0UL) /*!< No edge detector - the rising edge of LOCKDETECT or DEMODLEV is used directly */
#define NFCT_DEMODCONFIG_DEMODEDGEDETECT_Enabled (1UL) /*!< Edge detector enabled on the rising edge of the NFC pulse */

/* Bits 4..0 : Time between the falling edge of the NFC pulse and the time when reset is applied, in number of 13.56 MHz clocks */
#define NFCT_DEMODCONFIG_EDGEDETRSTDELAY_Pos (0UL) /*!< Position of EDGEDETRSTDELAY field. */
#define NFCT_DEMODCONFIG_EDGEDETRSTDELAY_Msk (0x1FUL << NFCT_DEMODCONFIG_EDGEDETRSTDELAY_Pos) /*!< Bit mask of EDGEDETRSTDELAY field. */

/* Register: NFCT_FIELDDETECTCONFIG */
/* Description: Configuration for NFCT_FIELDDETECT_TSMC55N */

/* Bits 2..0 : Sets the fielddetect level to a value between 0 and 7 (not implemented) */
#define NFCT_FIELDDETECTCONFIG_FIELDDETECTLEVEL_Pos (0UL) /*!< Position of FIELDDETECTLEVEL field. */
#define NFCT_FIELDDETECTCONFIG_FIELDDETECTLEVEL_Msk (0x7UL << NFCT_FIELDDETECTCONFIG_FIELDDETECTLEVEL_Pos) /*!< Bit mask of FIELDDETECTLEVEL field. */

/* Register: NFCT_ANALOGTESTBUSEN */
/* Description: Analog Testbus Enable - ATB0 only */

/* Bits 2..0 : Analog Testbus Enable - ATB0 only */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_Pos (0UL) /*!< Position of ANALOGTESTBUSEN field. */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_Msk (0x7UL << NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_Pos) /*!< Bit mask of ANALOGTESTBUSEN field. */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_TRISTATE (0UL) /*!< Tristate */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_VCOTUNINGVOLTAGE (1UL) /*!< VCO tuning voltage */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_CMFBOFFSETCOMP (2UL) /*!< Divided Common mode of NFC1 and NFC2 at the CMFB OFFSET comparator */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_VREFPEAKDETECTORREF (3UL) /*!< VREF for peak detector reference */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_VREFPEAKFORPEAKDET (4UL) /*!< VREF_PEAK for peak detection */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_PEAKDETECTOROUTPUT (5UL) /*!< Peak detector output */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_V2IOUTPUTVOLTAGE (6UL) /*!< Divided V2I output voltage */
#define NFCT_ANALOGTESTBUSEN_ANALOGTESTBUSEN_INTEGRATOROUTPUT (7UL) /*!< Divided Integrator output */

/* Register: NFCT_SYMBOLTOLLOWER */
/* Description: Configuration register for the tolerance of the received NFC pulse width */

/* Bits 5..0 : Minimum allowable received NFC pulse width, given in pulses of 13.56 MHz clock */
#define NFCT_SYMBOLTOLLOWER_SYMBOLTOLLOWER_Pos (0UL) /*!< Position of SYMBOLTOLLOWER field. */
#define NFCT_SYMBOLTOLLOWER_SYMBOLTOLLOWER_Msk (0x3FUL << NFCT_SYMBOLTOLLOWER_SYMBOLTOLLOWER_Pos) /*!< Bit mask of SYMBOLTOLLOWER field. */

/* Register: NFCT_SYMBOLTOLUPPER */
/* Description: Configuration register for the tolerance of the received NFC pulse width */

/* Bits 5..0 : Maximum allowable received NFC pulse width, given in pulses of 13.56 MHz clock */
#define NFCT_SYMBOLTOLUPPER_SYMBOLTOLUPPER_Pos (0UL) /*!< Position of SYMBOLTOLUPPER field. */
#define NFCT_SYMBOLTOLUPPER_SYMBOLTOLUPPER_Msk (0x3FUL << NFCT_SYMBOLTOLUPPER_SYMBOLTOLUPPER_Pos) /*!< Bit mask of SYMBOLTOLUPPER field. */

/* Register: NFCT_CONTINUOUSSUBCARRIER */
/* Description: Selects continuous sub-carrier transmission */

/* Bit 0 : Selects continuous sub-carrier transmission */
#define NFCT_CONTINUOUSSUBCARRIER_CONTINUOUSSUBCARRIER_Pos (0UL) /*!< Position of CONTINUOUSSUBCARRIER field. */
#define NFCT_CONTINUOUSSUBCARRIER_CONTINUOUSSUBCARRIER_Msk (0x1UL << NFCT_CONTINUOUSSUBCARRIER_CONTINUOUSSUBCARRIER_Pos) /*!< Bit mask of CONTINUOUSSUBCARRIER field. */
#define NFCT_CONTINUOUSSUBCARRIER_CONTINUOUSSUBCARRIER_Normal (0UL) /*!< Normal modulation */
#define NFCT_CONTINUOUSSUBCARRIER_CONTINUOUSSUBCARRIER_Carrier (1UL) /*!< Continuous sub-carrier transmission */

/* Register: NFCT_CLOCKRECCONFIG */
/* Description: Configuration for NFCT_CLOCKREC_TSMC55N */

/* Bit 9 : Enables TX hysteresis in the sine-to-square converter */
#define NFCT_CLOCKRECCONFIG_ENABLETXHYSTERESIS_Pos (9UL) /*!< Position of ENABLETXHYSTERESIS field. */
#define NFCT_CLOCKRECCONFIG_ENABLETXHYSTERESIS_Msk (0x1UL << NFCT_CLOCKRECCONFIG_ENABLETXHYSTERESIS_Pos) /*!< Bit mask of ENABLETXHYSTERESIS field. */

/* Bit 8 : Enables RX hysteresis in the sine-to-square converter */
#define NFCT_CLOCKRECCONFIG_ENABLERXHYSTERESIS_Pos (8UL) /*!< Position of ENABLERXHYSTERESIS field. */
#define NFCT_CLOCKRECCONFIG_ENABLERXHYSTERESIS_Msk (0x1UL << NFCT_CLOCKRECCONFIG_ENABLERXHYSTERESIS_Pos) /*!< Bit mask of ENABLERXHYSTERESIS field. */

/* Bit 6 : Set the output of the phase to high-Z */
#define NFCT_CLOCKRECCONFIG_FLOATPHASEDETOUTPUT_Pos (6UL) /*!< Position of FLOATPHASEDETOUTPUT field. */
#define NFCT_CLOCKRECCONFIG_FLOATPHASEDETOUTPUT_Msk (0x1UL << NFCT_CLOCKRECCONFIG_FLOATPHASEDETOUTPUT_Pos) /*!< Bit mask of FLOATPHASEDETOUTPUT field. */

/* Bit 5 : Override the output of the XOR phase detector to 1 */
#define NFCT_CLOCKRECCONFIG_OVRXORPHASEDET_Pos (5UL) /*!< Position of OVRXORPHASEDET field. */
#define NFCT_CLOCKRECCONFIG_OVRXORPHASEDET_Msk (0x1UL << NFCT_CLOCKRECCONFIG_OVRXORPHASEDET_Pos) /*!< Bit mask of OVRXORPHASEDET field. */

/* Bit 4 : Sets the oscillator input of the phase detector to 0 */
#define NFCT_CLOCKRECCONFIG_PHASEDETOSCIN_0_Pos (4UL) /*!< Position of PHASEDETOSCIN_0 field. */
#define NFCT_CLOCKRECCONFIG_PHASEDETOSCIN_0_Msk (0x1UL << NFCT_CLOCKRECCONFIG_PHASEDETOSCIN_0_Pos) /*!< Bit mask of PHASEDETOSCIN_0 field. */

/* Bit 3 : Sets the reference input of the phase detector to 0 */
#define NFCT_CLOCKRECCONFIG_PHASEDETREFIN_0_Pos (3UL) /*!< Position of PHASEDETREFIN_0 field. */
#define NFCT_CLOCKRECCONFIG_PHASEDETREFIN_0_Msk (0x1UL << NFCT_CLOCKRECCONFIG_PHASEDETREFIN_0_Pos) /*!< Bit mask of PHASEDETREFIN_0 field. */

/* Bit 2 : Enables the nfcRef13M56 reference clock output */
#define NFCT_CLOCKRECCONFIG_REF13M56OUTPUTENABLE_Pos (2UL) /*!< Position of REF13M56OUTPUTENABLE field. */
#define NFCT_CLOCKRECCONFIG_REF13M56OUTPUTENABLE_Msk (0x1UL << NFCT_CLOCKRECCONFIG_REF13M56OUTPUTENABLE_Pos) /*!< Bit mask of REF13M56OUTPUTENABLE field. */

/* Bit 1 : Selects the hysteresis level */
#define NFCT_CLOCKRECCONFIG_HYSTERESISLEVELSELECT_Pos (1UL) /*!< Position of HYSTERESISLEVELSELECT field. */
#define NFCT_CLOCKRECCONFIG_HYSTERESISLEVELSELECT_Msk (0x1UL << NFCT_CLOCKRECCONFIG_HYSTERESISLEVELSELECT_Pos) /*!< Bit mask of HYSTERESISLEVELSELECT field. */

/* Register: NFCT_CLOCKSOURCE */
/* Description: Deprecated register - Clock source */

/* Bit 0 : Clock source */
#define NFCT_CLOCKSOURCE_CLOCKSOURCE_Pos (0UL) /*!< Position of CLOCKSOURCE field. */
#define NFCT_CLOCKSOURCE_CLOCKSOURCE_Msk (0x1UL << NFCT_CLOCKSOURCE_CLOCKSOURCE_Pos) /*!< Bit mask of CLOCKSOURCE field. */
#define NFCT_CLOCKSOURCE_CLOCKSOURCE_Normal (0UL) /*!< Normal mode - Use 13.56 MHz and 16 MHz clocks */
#define NFCT_CLOCKSOURCE_CLOCKSOURCE_16MHz (1UL) /*!< Use 16 MHz clock only */

/* Register: NFCT_FRAMECONTENT1 */
/* Description: Deprecated register - Buffer for custom-frame autoresponse frame-content, when no DMA is available */

/* Bits 31..0 : Buffer for custom-frame autoresponse (AUTORESPONSEMODE=CustomFrame), when no DMA is available */
#define NFCT_FRAMECONTENT1_FRAMECONTENT1_Pos (0UL) /*!< Position of FRAMECONTENT1 field. */
#define NFCT_FRAMECONTENT1_FRAMECONTENT1_Msk (0xFFFFFFFFUL << NFCT_FRAMECONTENT1_FRAMECONTENT1_Pos) /*!< Bit mask of FRAMECONTENT1 field. */

/* Register: NFCT_FRAMECONTENT2 */
/* Description: Deprecated register - Buffer for custom-frame autoresponse, when no DMA is available */

/* Bits 31..0 : Buffer for custom-frame autoresponse (AUTORESPONSEMODE=CustomFrame), when no DMA is available */
#define NFCT_FRAMECONTENT2_FRAMECONTENT2_Pos (0UL) /*!< Position of FRAMECONTENT2 field. */
#define NFCT_FRAMECONTENT2_FRAMECONTENT2_Msk (0xFFFFFFFFUL << NFCT_FRAMECONTENT2_FRAMECONTENT2_Pos) /*!< Bit mask of FRAMECONTENT2 field. */

/* Register: NFCT_OVERRIDEENABLE */
/* Description: Enables override functionality. */

/* Bit 12 : Override enable for power up resistor in the analog pad. Uses value from OVRVALPWRUPRES. */
#define NFCT_OVERRIDEENABLE_OVRENPWRUPRES_Pos (12UL) /*!< Position of OVRENPWRUPRES field. */
#define NFCT_OVERRIDEENABLE_OVRENPWRUPRES_Msk (0x1UL << NFCT_OVERRIDEENABLE_OVRENPWRUPRES_Pos) /*!< Bit mask of OVRENPWRUPRES field. */

/* Bit 11 : Override enable for peak detect reference voltage. Uses value from OVRVALPEAKDETECTREF. */
#define NFCT_OVERRIDEENABLE_OVRENPEAKDETECTREF_Pos (11UL) /*!< Position of OVRENPEAKDETECTREF field. */
#define NFCT_OVERRIDEENABLE_OVRENPEAKDETECTREF_Msk (0x1UL << NFCT_OVERRIDEENABLE_OVRENPEAKDETECTREF_Pos) /*!< Bit mask of OVRENPEAKDETECTREF field. */

/* Bit 8 : Override enable for the 3V6 clamp */
#define NFCT_OVERRIDEENABLE_OVRENCLAMPEN3V6_Pos (8UL) /*!< Position of OVRENCLAMPEN3V6 field. */
#define NFCT_OVERRIDEENABLE_OVRENCLAMPEN3V6_Msk (0x1UL << NFCT_OVERRIDEENABLE_OVRENCLAMPEN3V6_Pos) /*!< Bit mask of OVRENCLAMPEN3V6 field. */

/* Bit 7 : Override enable for the 2V2 clamp */
#define NFCT_OVERRIDEENABLE_OVRENCLAMPEN2V2_Pos (7UL) /*!< Position of OVRENCLAMPEN2V2 field. */
#define NFCT_OVERRIDEENABLE_OVRENCLAMPEN2V2_Msk (0x1UL << NFCT_OVERRIDEENABLE_OVRENCLAMPEN2V2_Pos) /*!< Bit mask of OVRENCLAMPEN2V2 field. */

/* Bit 6 : Override enable for OVERRIDE_ROSCCALEN */
#define NFCT_OVERRIDEENABLE_OVRENROSCCALEN_Pos (6UL) /*!< Position of OVRENROSCCALEN field. */
#define NFCT_OVERRIDEENABLE_OVRENROSCCALEN_Msk (0x1UL << NFCT_OVERRIDEENABLE_OVRENROSCCALEN_Pos) /*!< Bit mask of OVRENROSCCALEN field. */

/* Bit 5 : Override enable for OVERRIDE_ROSCCALCODE */
#define NFCT_OVERRIDEENABLE_OVRENROSCCALCODE_Pos (5UL) /*!< Position of OVRENROSCCALCODE field. */
#define NFCT_OVERRIDEENABLE_OVRENROSCCALCODE_Msk (0x1UL << NFCT_OVERRIDEENABLE_OVRENROSCCALCODE_Pos) /*!< Bit mask of OVRENROSCCALCODE field. */

/* Bit 1 : Override enable for modulation on/off */
#define NFCT_OVERRIDEENABLE_OVRENMODULATION_Pos (1UL) /*!< Position of OVRENMODULATION field. */
#define NFCT_OVERRIDEENABLE_OVRENMODULATION_Msk (0x1UL << NFCT_OVERRIDEENABLE_OVRENMODULATION_Pos) /*!< Bit mask of OVRENMODULATION field. */

/* Bit 0 : Override enable for OVERRIDE_PWRUP */
#define NFCT_OVERRIDEENABLE_OVRENPWRUP_Pos (0UL) /*!< Position of OVRENPWRUP field. */
#define NFCT_OVERRIDEENABLE_OVRENPWRUP_Msk (0x1UL << NFCT_OVERRIDEENABLE_OVRENPWRUP_Pos) /*!< Bit mask of OVRENPWRUP field. */

/* Register: NFCT_OVRVALPWRUPNFC */
/* Description: Override value for pwrupNfc */

/* Bits 1..0 : Override value for pwrupNfc */
#define NFCT_OVRVALPWRUPNFC_OVRVALPWRUPNFC_Pos (0UL) /*!< Position of OVRVALPWRUPNFC field. */
#define NFCT_OVRVALPWRUPNFC_OVRVALPWRUPNFC_Msk (0x3UL << NFCT_OVRVALPWRUPNFC_OVRVALPWRUPNFC_Pos) /*!< Bit mask of OVRVALPWRUPNFC field. */

/* Register: NFCT_OVRVALMODULATION */
/* Description: Override value for modulation on/off */

/* Bit 0 : Override value for modulation on/off */
#define NFCT_OVRVALMODULATION_OVRVALMODULATION_Pos (0UL) /*!< Position of OVRVALMODULATION field. */
#define NFCT_OVRVALMODULATION_OVRVALMODULATION_Msk (0x1UL << NFCT_OVRVALMODULATION_OVRVALMODULATION_Pos) /*!< Bit mask of OVRVALMODULATION field. */

/* Register: NFCT_OVRVALLOADINACTIVE */
/* Description: Override value for the load control when modulation is off */

/* Bits 5..0 : Override value for the load control when modulation is off */
#define NFCT_OVRVALLOADINACTIVE_OVRVALLOADINACTIVE_Pos (0UL) /*!< Position of OVRVALLOADINACTIVE field. */
#define NFCT_OVRVALLOADINACTIVE_OVRVALLOADINACTIVE_Msk (0x3FUL << NFCT_OVRVALLOADINACTIVE_OVRVALLOADINACTIVE_Pos) /*!< Bit mask of OVRVALLOADINACTIVE field. */

/* Register: NFCT_OVRVALLOADACTIVE */
/* Description: Override value for the load control when modulation is on */

/* Bits 5..0 : Override value for the load control when modulation is on */
#define NFCT_OVRVALLOADACTIVE_OVRVALLOADACTIVE_Pos (0UL) /*!< Position of OVRVALLOADACTIVE field. */
#define NFCT_OVRVALLOADACTIVE_OVRVALLOADACTIVE_Msk (0x3FUL << NFCT_OVRVALLOADACTIVE_OVRVALLOADACTIVE_Pos) /*!< Bit mask of OVRVALLOADACTIVE field. */

/* Register: NFCT_OVRVALPWRUPRES */
/* Description: Override value for power up resistor in the analog pad */

/* Bit 0 : Override value for power up resistor in the analog pad */
#define NFCT_OVRVALPWRUPRES_OVRVALPWRUPRES_Pos (0UL) /*!< Position of OVRVALPWRUPRES field. */
#define NFCT_OVRVALPWRUPRES_OVRVALPWRUPRES_Msk (0x1UL << NFCT_OVRVALPWRUPRES_OVRVALPWRUPRES_Pos) /*!< Bit mask of OVRVALPWRUPRES field. */

/* Register: NFCT_OVRVALROSCCALCODE */
/* Description: Override value for the calibration word for the oscillator */

/* Bits 4..0 : Override value for the calibration word for the oscillator */
#define NFCT_OVRVALROSCCALCODE_OVRVALROSCCALCODE_Pos (0UL) /*!< Position of OVRVALROSCCALCODE field. */
#define NFCT_OVRVALROSCCALCODE_OVRVALROSCCALCODE_Msk (0x1FUL << NFCT_OVRVALROSCCALCODE_OVRVALROSCCALCODE_Pos) /*!< Bit mask of OVRVALROSCCALCODE field. */

/* Register: NFCT_OVRVALROSCCALEN */
/* Description: Override value for the signal CALEN going to the oscillator */

/* Bit 0 : Override value for the calibration word for the oscillator */
#define NFCT_OVRVALROSCCALEN_OVRVALROSCCALEN_Pos (0UL) /*!< Position of OVRVALROSCCALEN field. */
#define NFCT_OVRVALROSCCALEN_OVRVALROSCCALEN_Msk (0x1UL << NFCT_OVRVALROSCCALEN_OVRVALROSCCALEN_Pos) /*!< Bit mask of OVRVALROSCCALEN field. */

/* Register: NFCT_OVRVALCLAMPEN2V2 */
/* Description: Override value for the 2V2 clamp */

/* Bit 0 : Override value for the 2V2 clamp */
#define NFCT_OVRVALCLAMPEN2V2_OVRVALCLAMPEN2V2_Pos (0UL) /*!< Position of OVRVALCLAMPEN2V2 field. */
#define NFCT_OVRVALCLAMPEN2V2_OVRVALCLAMPEN2V2_Msk (0x1UL << NFCT_OVRVALCLAMPEN2V2_OVRVALCLAMPEN2V2_Pos) /*!< Bit mask of OVRVALCLAMPEN2V2 field. */

/* Register: NFCT_OVRVALCLAMPEN3V6 */
/* Description: Override value for the 3V6 clamp */

/* Bit 0 : Override value for the 3V6 clamp */
#define NFCT_OVRVALCLAMPEN3V6_OVRVALCLAMPEN3V6_Pos (0UL) /*!< Position of OVRVALCLAMPEN3V6 field. */
#define NFCT_OVRVALCLAMPEN3V6_OVRVALCLAMPEN3V6_Msk (0x1UL << NFCT_OVRVALCLAMPEN3V6_OVRVALCLAMPEN3V6_Pos) /*!< Bit mask of OVRVALCLAMPEN3V6 field. */

/* Register: NFCT_AUTOCAL */
/* Description: Controls auto-calibration at NFCT module enabling */

/* Bit 0 : Controls auto-calibration at NFCT module enabling */
#define NFCT_AUTOCAL_ROSCEN_Pos (0UL) /*!< Position of ROSCEN field. */
#define NFCT_AUTOCAL_ROSCEN_Msk (0x1UL << NFCT_AUTOCAL_ROSCEN_Pos) /*!< Bit mask of ROSCEN field. */
#define NFCT_AUTOCAL_ROSCEN_Disabled (0UL) /*!< No auto-calibration at module enablin */
#define NFCT_AUTOCAL_ROSCEN_Enabled (1UL) /*!< Enable auto-calibration at module enabling */

/* Register: NFCT_SHUNTREGCONFIG */
/* Description: Configuration for NFCT_SHUNTREG_TSMC55N */

/* Bit 17 : Enable the CMFB offset from the CMFB circuit */
#define NFCT_SHUNTREGCONFIG_CMFBOFFSETEN_Pos (17UL) /*!< Position of CMFBOFFSETEN field. */
#define NFCT_SHUNTREGCONFIG_CMFBOFFSETEN_Msk (0x1UL << NFCT_SHUNTREGCONFIG_CMFBOFFSETEN_Pos) /*!< Bit mask of CMFBOFFSETEN field. */
#define NFCT_SHUNTREGCONFIG_CMFBOFFSETEN_Disabled (0UL) /*!< Feature disabled */
#define NFCT_SHUNTREGCONFIG_CMFBOFFSETEN_Enabled (1UL) /*!< Feature enabled */

/* Bit 16 : Enable CMFB circuit */
#define NFCT_SHUNTREGCONFIG_CMFBEN_Pos (16UL) /*!< Position of CMFBEN field. */
#define NFCT_SHUNTREGCONFIG_CMFBEN_Msk (0x1UL << NFCT_SHUNTREGCONFIG_CMFBEN_Pos) /*!< Bit mask of CMFBEN field. */
#define NFCT_SHUNTREGCONFIG_CMFBEN_Disabled (0UL) /*!< Feature disabled */
#define NFCT_SHUNTREGCONFIG_CMFBEN_Enabled (1UL) /*!< Feature enabled */

/* Bits 15..13 : Common mode reference for CMFB circuit */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_Pos (13UL) /*!< Position of CMFBCMREF field. */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_Msk (0x7UL << NFCT_SHUNTREGCONFIG_CMFBCMREF_Pos) /*!< Bit mask of CMFBCMREF field. */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_CMFBCMREF_0 (0UL) /*!< 0.7 * Vdd */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_CMFBCMREF_1 (1UL) /*!< 0.65 * Vdd */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_CMFBCMREF_2 (2UL) /*!< 0.6 * Vdd */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_CMFBCMREF_3 (3UL) /*!< 0.55 * Vdd */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_CMFBCMREF_4 (4UL) /*!< 0.5 * Vdd */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_CMFBCMREF_5 (5UL) /*!< 0.45 * Vdd */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_CMFBCMREF_6 (6UL) /*!< 0.4 * Vdd */
#define NFCT_SHUNTREGCONFIG_CMFBCMREF_CMFBCMREF_7 (7UL) /*!< 0.35 * Vdd */

/* Bits 12..11 : Set the gate voltage on shunt NMOS */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOPGATECTRL_Pos (11UL) /*!< Position of SELOPENLOOPGATECTRL field. */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOPGATECTRL_Msk (0x3UL << NFCT_SHUNTREGCONFIG_SELOPENLOOPGATECTRL_Pos) /*!< Bit mask of SELOPENLOOPGATECTRL field. */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOPGATECTRL_SELOPENLOOPGATECTRL_0 (0UL) /*!< Vdd */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOPGATECTRL_SELOPENLOOPGATECTRL_1 (1UL) /*!< 0.75 * Vdd */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOPGATECTRL_SELOPENLOOPGATECTRL_2 (2UL) /*!< 0.5 * Vdd */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOPGATECTRL_SELOPENLOOPGATECTRL_3 (3UL) /*!< 0 mV */

/* Bit 10 : This sets the shunt regulation in open loop mode */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOP_Pos (10UL) /*!< Position of SELOPENLOOP field. */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOP_Msk (0x1UL << NFCT_SHUNTREGCONFIG_SELOPENLOOP_Pos) /*!< Bit mask of SELOPENLOOP field. */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOP_SELOPENLOOP_Disabled (0UL) /*!< Closed loop mode */
#define NFCT_SHUNTREGCONFIG_SELOPENLOOP_SELOPENLOOP_Enabled (1UL) /*!< Open loop mode */

/* Bit 9 : Reserved for future use */
#define NFCT_SHUNTREGCONFIG_RFU1_Pos (9UL) /*!< Position of RFU1 field. */
#define NFCT_SHUNTREGCONFIG_RFU1_Msk (0x1UL << NFCT_SHUNTREGCONFIG_RFU1_Pos) /*!< Bit mask of RFU1 field. */

/* Bits 8..7 : Peak detector common mode voltage tuning */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTORCMVOLTAGE_Pos (7UL) /*!< Position of PEAKDETECTORCMVOLTAGE field. */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTORCMVOLTAGE_Msk (0x3UL << NFCT_SHUNTREGCONFIG_PEAKDETECTORCMVOLTAGE_Pos) /*!< Bit mask of PEAKDETECTORCMVOLTAGE field. */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTORCMVOLTAGE_PEAKDETECTORCMVOLTAGE_0 (0UL) /*!< 120 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTORCMVOLTAGE_PEAKDETECTORCMVOLTAGE_1 (1UL) /*!< 80 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTORCMVOLTAGE_PEAKDETECTORCMVOLTAGE_2 (2UL) /*!< 40 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTORCMVOLTAGE_PEAKDETECTORCMVOLTAGE_3 (3UL) /*!< 0 mV */

/* Bits 6..4 : Initial peak detect reference value */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_Pos (4UL) /*!< Position of PEAKDETECTREFINIT field. */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_Msk (0x7UL << NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_Pos) /*!< Bit mask of PEAKDETECTREFINIT field. */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_PEAKDETECTREFINIT_0 (0UL) /*!< 1040 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_PEAKDETECTREFINIT_1 (1UL) /*!< 1000 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_PEAKDETECTREFINIT_2 (2UL) /*!< 960 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_PEAKDETECTREFINIT_3 (3UL) /*!< 920 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_PEAKDETECTREFINIT_4 (4UL) /*!< 880 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_PEAKDETECTREFINIT_5 (5UL) /*!< 840 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_PEAKDETECTREFINIT_6 (6UL) /*!< 800 mV */
#define NFCT_SHUNTREGCONFIG_PEAKDETECTREFINIT_PEAKDETECTREFINIT_7 (7UL) /*!< 760 mV */

/* Bits 3..2 : Capacitance tuning in peak detection block for swing programmability. The C1 and C2 are coming from, Vpeak-swing = Vref * ((C1 + C2) / C1),  Vpeak-swing is NFC swing, Vref is from PEAKDETECTREFINIT */
#define NFCT_SHUNTREGCONFIG_PEAKKDETECTCAPTUNE_Pos (2UL) /*!< Position of PEAKKDETECTCAPTUNE field. */
#define NFCT_SHUNTREGCONFIG_PEAKKDETECTCAPTUNE_Msk (0x3UL << NFCT_SHUNTREGCONFIG_PEAKKDETECTCAPTUNE_Pos) /*!< Bit mask of PEAKKDETECTCAPTUNE field. */
#define NFCT_SHUNTREGCONFIG_PEAKKDETECTCAPTUNE_PEAKKDETECTCAPTUNE_0 (0UL) /*!< C2=96fF,C1=266fF */
#define NFCT_SHUNTREGCONFIG_PEAKKDETECTCAPTUNE_PEAKKDETECTCAPTUNE_1 (1UL) /*!< C2=116fF,C1=266fF (highest swing) */
#define NFCT_SHUNTREGCONFIG_PEAKKDETECTCAPTUNE_PEAKKDETECTCAPTUNE_2 (2UL) /*!< C2=22fF,C1=266fF (lowest swing) */
#define NFCT_SHUNTREGCONFIG_PEAKKDETECTCAPTUNE_PEAKKDETECTCAPTUNE_3 (3UL) /*!< C2=52fF,C1=266fF */

/* Bits 1..0 : Reserved for future use */
#define NFCT_SHUNTREGCONFIG_RFU_Pos (0UL) /*!< Position of RFU field. */
#define NFCT_SHUNTREGCONFIG_RFU_Msk (0x3UL << NFCT_SHUNTREGCONFIG_RFU_Pos) /*!< Bit mask of RFU field. */

/* Register: NFCT_LOADMODCONFIG */
/* Description: Configuration for load modulation */

/* Bits 11..6 : Load modulation value when modulation is on */
#define NFCT_LOADMODCONFIG_LOADMODCONFIGON_Pos (6UL) /*!< Position of LOADMODCONFIGON field. */
#define NFCT_LOADMODCONFIG_LOADMODCONFIGON_Msk (0x3FUL << NFCT_LOADMODCONFIG_LOADMODCONFIGON_Pos) /*!< Bit mask of LOADMODCONFIGON field. */

/* Bits 5..0 : Load modulation value when modulation is off. The value has to be 0. Changing
        it would give undesired results. */
#define NFCT_LOADMODCONFIG_LOADMODCONFIGOFF_Pos (0UL) /*!< Position of LOADMODCONFIGOFF field. */
#define NFCT_LOADMODCONFIG_LOADMODCONFIGOFF_Msk (0x3FUL << NFCT_LOADMODCONFIG_LOADMODCONFIGOFF_Pos) /*!< Bit mask of LOADMODCONFIGOFF field. */

/* Register: NFCT_SHUNTNMOSADJUST */
/* Description: Size adjustment for the shunt NMOS in shunt regulator */

/* Bits 1..0 : Size adjustment for shunt NMOS in shunt regulator */
#define NFCT_SHUNTNMOSADJUST_SHUNTNMOSADJUST_Pos (0UL) /*!< Position of SHUNTNMOSADJUST field. */
#define NFCT_SHUNTNMOSADJUST_SHUNTNMOSADJUST_Msk (0x3UL << NFCT_SHUNTNMOSADJUST_SHUNTNMOSADJUST_Pos) /*!< Bit mask of SHUNTNMOSADJUST field. */

/* Register: NFCT_RSHUNTCTRL */
/* Description: Adjust internal shunt resistance */

/* Bits 2..0 : Adjust internal shunt resistance */
#define NFCT_RSHUNTCTRL_RSHUNTCTRL_Pos (0UL) /*!< Position of RSHUNTCTRL field. */
#define NFCT_RSHUNTCTRL_RSHUNTCTRL_Msk (0x7UL << NFCT_RSHUNTCTRL_RSHUNTCTRL_Pos) /*!< Bit mask of RSHUNTCTRL field. */

/* Register: NFCT_OVRVALPEAKDETECTREF */
/* Description: Override value for the peak detect reference voltage */

/* Bits 2..0 : Override value for the peak detect reference voltage */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_Pos (0UL) /*!< Position of OVRVALPEAKDETECTREF field. */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_Msk (0x7UL << NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_Pos) /*!< Bit mask of OVRVALPEAKDETECTREF field. */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_0 (0UL) /*!< 1240 mV */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_1 (1UL) /*!< 1200 mV */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_2 (2UL) /*!< 1160 mV */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_3 (3UL) /*!< 1120 mV */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_4 (4UL) /*!< 1080 mV */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_5 (5UL) /*!< 1040 mV */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_6 (6UL) /*!< 1000 mV */
#define NFCT_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_OVRVALPEAKDETECTREF_7 (7UL) /*!< 960 mV */

/* Register: NFCT_LOCKDETECTWINDOW */
/* Description: Adjust window size on falling edge of lock detect filter used for demodulation */

/* Bits 2..0 : Adjust window size on falling edge of lock detect filter used for demodulation */
#define NFCT_LOCKDETECTWINDOW_LOCKDETECTWINDOW_Pos (0UL) /*!< Position of LOCKDETECTWINDOW field. */
#define NFCT_LOCKDETECTWINDOW_LOCKDETECTWINDOW_Msk (0x7UL << NFCT_LOCKDETECTWINDOW_LOCKDETECTWINDOW_Pos) /*!< Bit mask of LOCKDETECTWINDOW field. */


/* Peripheral: NVMC */
/* Description: Non-volatile memory controller 0 */

/* Register: NVMC_READY */
/* Description: Ready flag */

/* Bit 0 : NVMC is ready or busy */
#define NVMC_READY_READY_Pos (0UL) /*!< Position of READY field. */
#define NVMC_READY_READY_Msk (0x1UL << NVMC_READY_READY_Pos) /*!< Bit mask of READY field. */
#define NVMC_READY_READY_Busy (0UL) /*!< NVMC is busy (on-going write or erase operation) */
#define NVMC_READY_READY_Ready (1UL) /*!< NVMC is ready */

/* Register: NVMC_READYNEXT */
/* Description: Ready flag */

/* Bit 0 : NVMC can accept a new write operation */
#define NVMC_READYNEXT_READYNEXT_Pos (0UL) /*!< Position of READYNEXT field. */
#define NVMC_READYNEXT_READYNEXT_Msk (0x1UL << NVMC_READYNEXT_READYNEXT_Pos) /*!< Bit mask of READYNEXT field. */
#define NVMC_READYNEXT_READYNEXT_Busy (0UL) /*!< NVMC cannot accept any write operation */
#define NVMC_READYNEXT_READYNEXT_Ready (1UL) /*!< NVMC is ready */

/* Register: NVMC_CONFIG */
/* Description: Configuration register */

/* Bits 2..0 : Program memory access mode. It is strongly recommended to only activate erase and write modes when they are actively used. */
#define NVMC_CONFIG_WEN_Pos (0UL) /*!< Position of WEN field. */
#define NVMC_CONFIG_WEN_Msk (0x7UL << NVMC_CONFIG_WEN_Pos) /*!< Bit mask of WEN field. */
#define NVMC_CONFIG_WEN_Ren (0UL) /*!< Read only access */
#define NVMC_CONFIG_WEN_Wen (1UL) /*!< Write enabled */
#define NVMC_CONFIG_WEN_Een (2UL) /*!< Erase enabled */
#define NVMC_CONFIG_WEN_PEen (4UL) /*!< Partial erase enabled */

/* Register: NVMC_ERASEALL */
/* Description: Register for erasing all non-volatile user memory */

/* Bit 0 : Erase all non-volatile memory including UICR registers. Note that erasing must be enabled by setting CONFIG.WEN = Een before the non-volatile memory can be erased. */
#define NVMC_ERASEALL_ERASEALL_Pos (0UL) /*!< Position of ERASEALL field. */
#define NVMC_ERASEALL_ERASEALL_Msk (0x1UL << NVMC_ERASEALL_ERASEALL_Pos) /*!< Bit mask of ERASEALL field. */
#define NVMC_ERASEALL_ERASEALL_NoOperation (0UL) /*!< No operation */
#define NVMC_ERASEALL_ERASEALL_Erase (1UL) /*!< Start chip erase */

/* Register: NVMC_ERASEPAGEPARTIALCFG */
/* Description: Register for partial erase configuration */

/* Bits 6..0 : Duration of the partial erase in milliseconds */
#define NVMC_ERASEPAGEPARTIALCFG_DURATION_Pos (0UL) /*!< Position of DURATION field. */
#define NVMC_ERASEPAGEPARTIALCFG_DURATION_Msk (0x7FUL << NVMC_ERASEPAGEPARTIALCFG_DURATION_Pos) /*!< Bit mask of DURATION field. */

/* Register: NVMC_WAITSTATENUM */
/* Description: Register to set the number of wait-state for flash access. To update the WAITSTATENUM field, the ACCESSCODE must be correct. */

/* Bits 31..16 : Access code for modifying this register */
#define NVMC_WAITSTATENUM_ACCESSCODE_Pos (16UL) /*!< Position of ACCESSCODE field. */
#define NVMC_WAITSTATENUM_ACCESSCODE_Msk (0xFFFFUL << NVMC_WAITSTATENUM_ACCESSCODE_Pos) /*!< Bit mask of ACCESSCODE field. */

/* Bits 7..4 : Flash wait-states for fast clock */
#define NVMC_WAITSTATENUM_WAITSTATENUMFAST_Pos (4UL) /*!< Position of WAITSTATENUMFAST field. */
#define NVMC_WAITSTATENUM_WAITSTATENUMFAST_Msk (0xFUL << NVMC_WAITSTATENUM_WAITSTATENUMFAST_Pos) /*!< Bit mask of WAITSTATENUMFAST field. */

/* Bits 3..0 : Flash wait-states */
#define NVMC_WAITSTATENUM_WAITSTATENUM_Pos (0UL) /*!< Position of WAITSTATENUM field. */
#define NVMC_WAITSTATENUM_WAITSTATENUM_Msk (0xFUL << NVMC_WAITSTATENUM_WAITSTATENUM_Pos) /*!< Bit mask of WAITSTATENUM field. */

/* Register: NVMC_CONFIGNS */
/* Description: Unspecified */

/* Bits 1..0 : Program memory access mode. It is strongly recommended to only activate erase and write modes when they are actively used. */
#define NVMC_CONFIGNS_WEN_Pos (0UL) /*!< Position of WEN field. */
#define NVMC_CONFIGNS_WEN_Msk (0x3UL << NVMC_CONFIGNS_WEN_Pos) /*!< Bit mask of WEN field. */
#define NVMC_CONFIGNS_WEN_Ren (0UL) /*!< Read only access */
#define NVMC_CONFIGNS_WEN_Wen (1UL) /*!< Write enabled */
#define NVMC_CONFIGNS_WEN_Een (2UL) /*!< Erase enabled */

/* Register: NVMC_WRITEUICRNS */
/* Description: Non-secure APPROTECT enable register */

/* Bits 31..4 : Key to write in order to validate the write operation */
#define NVMC_WRITEUICRNS_KEY_Pos (4UL) /*!< Position of KEY field. */
#define NVMC_WRITEUICRNS_KEY_Msk (0xFFFFFFFUL << NVMC_WRITEUICRNS_KEY_Pos) /*!< Bit mask of KEY field. */
#define NVMC_WRITEUICRNS_KEY_Keyvalid (0xAFBE5A7UL) /*!< Key value */

/* Bit 0 : Allow non-secure code to set APPROTECT */
#define NVMC_WRITEUICRNS_SET_Pos (0UL) /*!< Position of SET field. */
#define NVMC_WRITEUICRNS_SET_Msk (0x1UL << NVMC_WRITEUICRNS_SET_Pos) /*!< Bit mask of SET field. */
#define NVMC_WRITEUICRNS_SET_Set (1UL) /*!< Set value */

/* Register: NVMC_TESTMODE */
/* Description: Register for entering test mode. Refer to the flash IP test documentation for more details. */

/* Bits 15..0 : Register for entering test mode. Refer to the flash IP test documentation for more details. This register does not return the same value as written. */
#define NVMC_TESTMODE_TESTMODE_Pos (0UL) /*!< Position of TESTMODE field. */
#define NVMC_TESTMODE_TESTMODE_Msk (0xFFFFUL << NVMC_TESTMODE_TESTMODE_Pos) /*!< Bit mask of TESTMODE field. */
#define NVMC_TESTMODE_TESTMODE_NORMAL (0UL) /*!< Read: Not in test mode */
#define NVMC_TESTMODE_TESTMODE_TESTMODE1 (1UL) /*!< Read: In test mode 1 */
#define NVMC_TESTMODE_TESTMODE_TESTMODE2 (2UL) /*!< Read: In test mode 2 */
#define NVMC_TESTMODE_TESTMODE_TESTMODE3 (4UL) /*!< Read: In test mode 3 */
#define NVMC_TESTMODE_TESTMODE_SetNORMAL (0UL) /*!< Write: Sets normal mode */
#define NVMC_TESTMODE_TESTMODE_SetTESTMODE2 (0xABCDUL) /*!< Write: Sets test mode 2 */
#define NVMC_TESTMODE_TESTMODE_SetTESTMODE1 (0xBCDEUL) /*!< Write: Sets test mode 1 */
#define NVMC_TESTMODE_TESTMODE_SetTESTMODE3 (0xCDEFUL) /*!< Write: Sets test mode 3 */

/* Register: NVMC_LVEN */
/* Description: Low voltage mode */

/* Bits 31..0 :   */
#define NVMC_LVEN_LVEN_Pos (0UL) /*!< Position of LVEN field. */
#define NVMC_LVEN_LVEN_Msk (0xFFFFFFFFUL << NVMC_LVEN_LVEN_Pos) /*!< Bit mask of LVEN field. */
#define NVMC_LVEN_LVEN_Auto (0UL) /*!< Automatic mode */
#define NVMC_LVEN_LVEN_Disable (0x60050000UL) /*!< Disable low voltage mode */
#define NVMC_LVEN_LVEN_Enable (0x6005EA5EUL) /*!< Enable low voltage mode */

/* Register: NVMC_TESTMASSERASE */
/* Description: Self-timed mass-erase operation */

/* Bits 1..0 : Self-timed mass-erase operation */
#define NVMC_TESTMASSERASE_TESTMASSERASE_Pos (0UL) /*!< Position of TESTMASSERASE field. */
#define NVMC_TESTMASSERASE_TESTMASSERASE_Msk (0x3UL << NVMC_TESTMASSERASE_TESTMASSERASE_Pos) /*!< Bit mask of TESTMASSERASE field. */
#define NVMC_TESTMASSERASE_TESTMASSERASE_NOOPERATION0 (0UL) /*!< No operation */
#define NVMC_TESTMASSERASE_TESTMASSERASE_NOOPERATION1 (1UL) /*!< No operation */
#define NVMC_TESTMASSERASE_TESTMASSERASE_MAIN (2UL) /*!< Erase only the main block */
#define NVMC_TESTMASSERASE_TESTMASSERASE_EVERYTHING (3UL) /*!< Erase everything (all information pages and main block) */

/* Register: NVMC_TESTERASEREFCELL */
/* Description: Self-timed erase reference cell operation */

/* Bit 0 : Self-timed erase reference cell operation */
#define NVMC_TESTERASEREFCELL_TESTERASEREFCELL_Pos (0UL) /*!< Position of TESTERASEREFCELL field. */
#define NVMC_TESTERASEREFCELL_TESTERASEREFCELL_Msk (0x1UL << NVMC_TESTERASEREFCELL_TESTERASEREFCELL_Pos) /*!< Bit mask of TESTERASEREFCELL field. */
#define NVMC_TESTERASEREFCELL_TESTERASEREFCELL_NOOPERATION (0UL) /*!< No operation */
#define NVMC_TESTERASEREFCELL_TESTERASEREFCELL_START (1UL) /*!< Start the erase reference cell operation */

/* Register: NVMC_TESTTC */
/* Description: Observe the TC output from the flash macro */

/* Bits 12..0 : TC output */
#define NVMC_TESTTC_TC_Pos (0UL) /*!< Position of TC field. */
#define NVMC_TESTTC_TC_Msk (0x1FFFUL << NVMC_TESTTC_TC_Pos) /*!< Bit mask of TC field. */

/* Register: NVMC_TESTDATA128 */
/* Description: Description collection: Direct flash test data word n */

/* Bits 31..0 : Returns data out from flash when reading. Sets flash data in when writing. */
#define NVMC_TESTDATA128_TESTDATA_Pos (0UL) /*!< Position of TESTDATA field. */
#define NVMC_TESTDATA128_TESTDATA_Msk (0xFFFFFFFFUL << NVMC_TESTDATA128_TESTDATA_Pos) /*!< Bit mask of TESTDATA field. */

/* Register: NVMC_TESTDATA128INC */
/* Description: Description collection: Direct flash test data word n. Post-increments TESTCONTROLADDR. */

/* Bits 31..0 : Returns data out from flash when reading. Use TESTDATA128[3:0] registers to set the compared data. Post-increments TESTCONTROLADDR. If TESTCONTROLLINES.SE is high, the read starts by pulsing the SE line low for Tnws. If TESTCONTROLLINES.SE is low, SE remains low for the whole access. */
#define NVMC_TESTDATA128INC_TESTDATA_Pos (0UL) /*!< Position of TESTDATA field. */
#define NVMC_TESTDATA128INC_TESTDATA_Msk (0xFFFFFFFFUL << NVMC_TESTDATA128INC_TESTDATA_Pos) /*!< Bit mask of TESTDATA field. */

/* Register: NVMC_TESTCMPINC */
/* Description: Reads and compares last flash row to TESTDATA128 content. Post-increments TESTCONTROLADDR. */

/* Bit 1 : Reads and compares last flash row (latched lines) to TESTDATA128 content. Post-increments TESTCONTROLADDR. If TESTCONTROLLINES.SE is high, the read starts by pulsing the SE line low for Tnws. If TESTCONTROLLINES.SE is low, SE remains low for the whole access. */
#define NVMC_TESTCMPINC_LATCHED_Pos (1UL) /*!< Position of LATCHED field. */
#define NVMC_TESTCMPINC_LATCHED_Msk (0x1UL << NVMC_TESTCMPINC_LATCHED_Pos) /*!< Bit mask of LATCHED field. */
#define NVMC_TESTCMPINC_LATCHED_Equal (0UL) /*!< Latched TESTDATA128 content and flash row read are equal */
#define NVMC_TESTCMPINC_LATCHED_NotEqual (1UL) /*!< Latched TESTDATA128 content and flash row read are different */

/* Bit 0 : Reads and compares last flash row (direct lines) to TESTDATA128 content. Post-increments TESTCONTROLADDR. If TESTCONTROLLINES.SE is high, the read starts by pulsing the SE line low for Tnws. If TESTCONTROLLINES.SE is low, SE remains low for the whole access. */
#define NVMC_TESTCMPINC_DIRECT_Pos (0UL) /*!< Position of DIRECT field. */
#define NVMC_TESTCMPINC_DIRECT_Msk (0x1UL << NVMC_TESTCMPINC_DIRECT_Pos) /*!< Bit mask of DIRECT field. */
#define NVMC_TESTCMPINC_DIRECT_Equal (0UL) /*!< Direct TESTDATA128 content and flash row read are equal */
#define NVMC_TESTCMPINC_DIRECT_NotEqual (1UL) /*!< Direct TESTDATA128 content and flash row read are different */

/* Register: NVMC_TESTNCMPINC */
/* Description: Reads and compares last flash row to complement of TESTDATA128 content. Post-increments TESTCONTROLADDR. */

/* Bit 1 : Reads and compares last flash row (latched lines) to the complement of TESTDATA128 content (all bits inverted). Post-increments TESTCONTROLADDR. If TESTCONTROLLINES.SE is high, the read starts by pulsing the SE line low for Tnws. If TESTCONTROLLINES.SE is low, SE remains low for the whole access. */
#define NVMC_TESTNCMPINC_LATCHED_Pos (1UL) /*!< Position of LATCHED field. */
#define NVMC_TESTNCMPINC_LATCHED_Msk (0x1UL << NVMC_TESTNCMPINC_LATCHED_Pos) /*!< Bit mask of LATCHED field. */
#define NVMC_TESTNCMPINC_LATCHED_Complement (0UL) /*!< Latched TESTDATA128 content and flash row read are each other's complements */
#define NVMC_TESTNCMPINC_LATCHED_NotComplement (1UL) /*!< Latched TESTDATA128 content and flash row read are not each other's complements */

/* Bit 0 : Reads and compares last flash row (direct lines) to the complement of TESTDATA128 content (all bits inverted). Post-increments TESTCONTROLADDR. If TESTCONTROLLINES.SE is high, the read starts by pulsing the SE line low for Tnws. If TESTCONTROLLINES.SE is low, SE remains low for the whole access. */
#define NVMC_TESTNCMPINC_DIRECT_Pos (0UL) /*!< Position of DIRECT field. */
#define NVMC_TESTNCMPINC_DIRECT_Msk (0x1UL << NVMC_TESTNCMPINC_DIRECT_Pos) /*!< Bit mask of DIRECT field. */
#define NVMC_TESTNCMPINC_DIRECT_Complement (0UL) /*!< Direct TESTDATA128 content and flash row read are each other's complements */
#define NVMC_TESTNCMPINC_DIRECT_NotComplement (1UL) /*!< Direct TESTDATA128 content and flash row read are not each other's complements */

/* Register: NVMC_TESTCONTROLLINES */
/* Description: Direct flash test, control lines. Refer to the flash IP test documentation for more details. */

/* Bit 31 : Control the TMR signal */
#define NVMC_TESTCONTROLLINES_TMR_Pos (31UL) /*!< Position of TMR field. */
#define NVMC_TESTCONTROLLINES_TMR_Msk (0x1UL << NVMC_TESTCONTROLLINES_TMR_Pos) /*!< Bit mask of TMR field. */

/* Bit 30 : Control the NVSTR signal */
#define NVMC_TESTCONTROLLINES_NVSTR_Pos (30UL) /*!< Position of NVSTR field. */
#define NVMC_TESTCONTROLLINES_NVSTR_Msk (0x1UL << NVMC_TESTCONTROLLINES_NVSTR_Pos) /*!< Bit mask of NVSTR field. */

/* Bit 29 : Control the PROG signal */
#define NVMC_TESTCONTROLLINES_PROG_Pos (29UL) /*!< Position of PROG field. */
#define NVMC_TESTCONTROLLINES_PROG_Msk (0x1UL << NVMC_TESTCONTROLLINES_PROG_Pos) /*!< Bit mask of PROG field. */

/* Bit 28 : Control the MAS1 signal */
#define NVMC_TESTCONTROLLINES_MAS1_Pos (28UL) /*!< Position of MAS1 field. */
#define NVMC_TESTCONTROLLINES_MAS1_Msk (0x1UL << NVMC_TESTCONTROLLINES_MAS1_Pos) /*!< Bit mask of MAS1 field. */

/* Bit 27 : Control the ERASE signal */
#define NVMC_TESTCONTROLLINES_ERASE_Pos (27UL) /*!< Position of ERASE field. */
#define NVMC_TESTCONTROLLINES_ERASE_Msk (0x1UL << NVMC_TESTCONTROLLINES_ERASE_Pos) /*!< Bit mask of ERASE field. */

/* Bit 26 : Control the IFREN signal */
#define NVMC_TESTCONTROLLINES_IFREN_Pos (26UL) /*!< Position of IFREN field. */
#define NVMC_TESTCONTROLLINES_IFREN_Msk (0x1UL << NVMC_TESTCONTROLLINES_IFREN_Pos) /*!< Bit mask of IFREN field. */

/* Bit 25 : Control the SE signal. This signal is delayed by hardware by Tas, so that it can be written simultaneously to XE and YE. */
#define NVMC_TESTCONTROLLINES_SE_Pos (25UL) /*!< Position of SE field. */
#define NVMC_TESTCONTROLLINES_SE_Msk (0x1UL << NVMC_TESTCONTROLLINES_SE_Pos) /*!< Bit mask of SE field. */

/* Bit 24 : Control the YE signal */
#define NVMC_TESTCONTROLLINES_YE_Pos (24UL) /*!< Position of YE field. */
#define NVMC_TESTCONTROLLINES_YE_Msk (0x1UL << NVMC_TESTCONTROLLINES_YE_Pos) /*!< Bit mask of YE field. */

/* Bit 23 : Control the XE signal */
#define NVMC_TESTCONTROLLINES_XE_Pos (23UL) /*!< Position of XE field. */
#define NVMC_TESTCONTROLLINES_XE_Msk (0x1UL << NVMC_TESTCONTROLLINES_XE_Pos) /*!< Bit mask of XE field. */

/* Bit 22 : Control the PV signal */
#define NVMC_TESTCONTROLLINES_PV_Pos (22UL) /*!< Position of PV field. */
#define NVMC_TESTCONTROLLINES_PV_Msk (0x1UL << NVMC_TESTCONTROLLINES_PV_Pos) /*!< Bit mask of PV field. */

/* Bit 21 : Control the EV signal */
#define NVMC_TESTCONTROLLINES_EV_Pos (21UL) /*!< Position of EV field. */
#define NVMC_TESTCONTROLLINES_EV_Msk (0x1UL << NVMC_TESTCONTROLLINES_EV_Pos) /*!< Bit mask of EV field. */

/* Bit 20 : Control the IFREN1 signal */
#define NVMC_TESTCONTROLLINES_IFREN1_Pos (20UL) /*!< Position of IFREN1 field. */
#define NVMC_TESTCONTROLLINES_IFREN1_Msk (0x1UL << NVMC_TESTCONTROLLINES_IFREN1_Pos) /*!< Bit mask of IFREN1 field. */

/* Bits 19..18 : Control the REDEN signal */
#define NVMC_TESTCONTROLLINES_REDEN_Pos (18UL) /*!< Position of REDEN field. */
#define NVMC_TESTCONTROLLINES_REDEN_Msk (0x3UL << NVMC_TESTCONTROLLINES_REDEN_Pos) /*!< Bit mask of REDEN field. */

/* Bit 17 : Control the PDM25 signal */
#define NVMC_TESTCONTROLLINES_PDM25_Pos (17UL) /*!< Position of PDM25 field. */
#define NVMC_TESTCONTROLLINES_PDM25_Msk (0x1UL << NVMC_TESTCONTROLLINES_PDM25_Pos) /*!< Bit mask of PDM25 field. */

/* Bit 16 : Control the LVEN signal */
#define NVMC_TESTCONTROLLINES_LVEN_Pos (16UL) /*!< Position of LVEN field. */
#define NVMC_TESTCONTROLLINES_LVEN_Msk (0x1UL << NVMC_TESTCONTROLLINES_LVEN_Pos) /*!< Bit mask of LVEN field. */

/* Register: NVMC_TESTCONTROLADDR */
/* Description: Direct flash test control, address lines */

/* Bits 15..5 : Control the XADDR signal */
#define NVMC_TESTCONTROLADDR_XADDR_Pos (5UL) /*!< Position of XADDR field. */
#define NVMC_TESTCONTROLADDR_XADDR_Msk (0x7FFUL << NVMC_TESTCONTROLADDR_XADDR_Pos) /*!< Bit mask of XADDR field. */

/* Bits 4..0 : Control the YADDR signal */
#define NVMC_TESTCONTROLADDR_YADDR_Pos (0UL) /*!< Position of YADDR field. */
#define NVMC_TESTCONTROLADDR_YADDR_Msk (0x1FUL << NVMC_TESTCONTROLADDR_YADDR_Pos) /*!< Bit mask of YADDR field. */

/* Register: NVMC_TESTCOUNTERRELOAD */
/* Description: Counter reload value, used when counting from SE or YE rising edge to latching of data */

/* Bits 11..0 : Counter reload value, in MCU bus cycles, used when counting from SE or YE rising edge to latching of data. Value of 0 has no effect (counter will not latch). */
#define NVMC_TESTCOUNTERRELOAD_RELOAD_Pos (0UL) /*!< Position of RELOAD field. */
#define NVMC_TESTCOUNTERRELOAD_RELOAD_Msk (0xFFFUL << NVMC_TESTCOUNTERRELOAD_RELOAD_Pos) /*!< Bit mask of RELOAD field. */

/* Register: NVMC_TESTCOUNTERRUNNING */
/* Description: Returns the state (counting or not) of the counter */

/* Bit 0 : Returns the state of the counter */
#define NVMC_TESTCOUNTERRUNNING_RUNNING_Pos (0UL) /*!< Position of RUNNING field. */
#define NVMC_TESTCOUNTERRUNNING_RUNNING_Msk (0x1UL << NVMC_TESTCOUNTERRUNNING_RUNNING_Pos) /*!< Bit mask of RUNNING field. */
#define NVMC_TESTCOUNTERRUNNING_RUNNING_NotRunning (0UL) /*!< Counter is not running */
#define NVMC_TESTCOUNTERRUNNING_RUNNING_Running (1UL) /*!< Counter is running */

/* Register: NVMC_TESTCONFIG */
/* Description: Mode of operation of the counter */

/* Bit 3 : Disables the automatic increment or decrement of the address */
#define NVMC_TESTCONFIG_AUTOINCEN_Pos (3UL) /*!< Position of AUTOINCEN field. */
#define NVMC_TESTCONFIG_AUTOINCEN_Msk (0x1UL << NVMC_TESTCONFIG_AUTOINCEN_Pos) /*!< Bit mask of AUTOINCEN field. */
#define NVMC_TESTCONFIG_AUTOINCEN_Enable (0UL) /*!< Automatic increment/decrement of the address is enabled */
#define NVMC_TESTCONFIG_AUTOINCEN_Disable (1UL) /*!< Automatic increment/decrement of the address is disabled */

/* Bit 2 : Controls the automatic increment or decrement of the address */
#define NVMC_TESTCONFIG_AUTOINC_Pos (2UL) /*!< Position of AUTOINC field. */
#define NVMC_TESTCONFIG_AUTOINC_Msk (0x1UL << NVMC_TESTCONFIG_AUTOINC_Pos) /*!< Bit mask of AUTOINC field. */
#define NVMC_TESTCONFIG_AUTOINC_Increment (0UL) /*!< Address is automatically incremented */
#define NVMC_TESTCONFIG_AUTOINC_Decrement (1UL) /*!< Address is automatically decremented */

/* Bit 1 : Defines the starting point of the counter */
#define NVMC_TESTCONFIG_START_Pos (1UL) /*!< Position of START field. */
#define NVMC_TESTCONFIG_START_Msk (0x1UL << NVMC_TESTCONFIG_START_Pos) /*!< Bit mask of START field. */
#define NVMC_TESTCONFIG_START_SE (0UL) /*!< Counter starts on SE rising edge */
#define NVMC_TESTCONFIG_START_YE (1UL) /*!< Counter starts on YE rising edge */

/* Bit 0 : Returns the state of the counter */
#define NVMC_TESTCONFIG_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define NVMC_TESTCONFIG_ENABLE_Msk (0x1UL << NVMC_TESTCONFIG_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define NVMC_TESTCONFIG_ENABLE_Disabled (0UL) /*!< Counter is disabled */
#define NVMC_TESTCONFIG_ENABLE_Enabled (1UL) /*!< Counter is enabled */

/* Register: NVMC_TESTTMVPPANAEN */
/* Description: Controls analog signals for flash measurements */

/* Bit 4 : Enable the VPPDIV pad. Needs to be set when measuring VPPDIV and when applying
        high-voltage on VPP pad. */
#define NVMC_TESTTMVPPANAEN_VPPDIVEN_Pos (4UL) /*!< Position of VPPDIVEN field. */
#define NVMC_TESTTMVPPANAEN_VPPDIVEN_Msk (0x1UL << NVMC_TESTTMVPPANAEN_VPPDIVEN_Pos) /*!< Bit mask of VPPDIVEN field. */
#define NVMC_TESTTMVPPANAEN_VPPDIVEN_Disabled (0UL) /*!< VPPDIV pad disabled */
#define NVMC_TESTTMVPPANAEN_VPPDIVEN_Enabled (1UL) /*!< VPPDIV pad enabled */

/* Bits 3..0 : Analog enable for TM measurement. Needs to be set when measuring TM[3:0] pins. */
#define NVMC_TESTTMVPPANAEN_TMANAEN_Pos (0UL) /*!< Position of TMANAEN field. */
#define NVMC_TESTTMVPPANAEN_TMANAEN_Msk (0xFUL << NVMC_TESTTMVPPANAEN_TMANAEN_Pos) /*!< Bit mask of TMANAEN field. */
#define NVMC_TESTTMVPPANAEN_TMANAEN_Disabled (0x0UL) /*!< All pads disabled */
#define NVMC_TESTTMVPPANAEN_TMANAEN_Enabled (0xFUL) /*!< All pads enabled */

/* Register: NVMC_FORCEONNVM */
/* Description: Force on all NVM supplies. Also see the internal section in the NVMC chapter. */

/* Bit 0 : Force on all NVM supplies. Also see the internal section in the NVMC chapter. */
#define NVMC_FORCEONNVM_FORCEONNVM_Pos (0UL) /*!< Position of FORCEONNVM field. */
#define NVMC_FORCEONNVM_FORCEONNVM_Msk (0x1UL << NVMC_FORCEONNVM_FORCEONNVM_Pos) /*!< Bit mask of FORCEONNVM field. */
#define NVMC_FORCEONNVM_FORCEONNVM_DoNotForceOn (0UL) /*!< Do not force on NVM supply */
#define NVMC_FORCEONNVM_FORCEONNVM_ForceOn (1UL) /*!< Force on NVM supply */

/* Register: NVMC_FORCEOFFNVM */
/* Description: Force off NVM supply. Also see the internal section in the NVMC chapter. */

/* Bits 31..8 : KEY */
#define NVMC_FORCEOFFNVM_KEY_Pos (8UL) /*!< Position of KEY field. */
#define NVMC_FORCEOFFNVM_KEY_Msk (0xFFFFFFUL << NVMC_FORCEOFFNVM_KEY_Pos) /*!< Bit mask of KEY field. */
#define NVMC_FORCEOFFNVM_KEY_EnableWrite (0xACCE55UL) /*!< Must be written in order to write to bits 0-7. Any other value will ignore writes to this register. Read as zero. */

/* Bit 1 : Force off NVM supply 1. Also see the internal section in the NVMC chapter. */
#define NVMC_FORCEOFFNVM_FORCEOFFNVM1_Pos (1UL) /*!< Position of FORCEOFFNVM1 field. */
#define NVMC_FORCEOFFNVM_FORCEOFFNVM1_Msk (0x1UL << NVMC_FORCEOFFNVM_FORCEOFFNVM1_Pos) /*!< Bit mask of FORCEOFFNVM1 field. */
#define NVMC_FORCEOFFNVM_FORCEOFFNVM1_DoNotForceOff (0UL) /*!< Do not force off supply */
#define NVMC_FORCEOFFNVM_FORCEOFFNVM1_ForceOff (1UL) /*!< Force off supply */

/* Bit 0 : Force off NVM supply 0. Also see the internal section in the NVMC chapter. */
#define NVMC_FORCEOFFNVM_FORCEOFFNVM0_Pos (0UL) /*!< Position of FORCEOFFNVM0 field. */
#define NVMC_FORCEOFFNVM_FORCEOFFNVM0_Msk (0x1UL << NVMC_FORCEOFFNVM_FORCEOFFNVM0_Pos) /*!< Bit mask of FORCEOFFNVM0 field. */
#define NVMC_FORCEOFFNVM_FORCEOFFNVM0_DoNotForceOff (0UL) /*!< Do not force off supply */
#define NVMC_FORCEOFFNVM_FORCEOFFNVM0_ForceOff (1UL) /*!< Force off supply */


/* Peripheral: OSCILLATORS */
/* Description: Oscillator control 0 */

/* Register: OSCILLATORS_ATECLOCK */
/* Description: Analog test bus control for clock modules */

/* Bits 10..9 : Configure connection of the AUDIO PLL to analog test bus */
#define OSCILLATORS_ATECLOCK_AUDIOPLL_Pos (9UL) /*!< Position of AUDIOPLL field. */
#define OSCILLATORS_ATECLOCK_AUDIOPLL_Msk (0x3UL << OSCILLATORS_ATECLOCK_AUDIOPLL_Pos) /*!< Bit mask of AUDIOPLL field. */
#define OSCILLATORS_ATECLOCK_AUDIOPLL_Disconnected (0UL) /*!< ATB0 in high impedance */
#define OSCILLATORS_ATECLOCK_AUDIOPLL_VTUNE (1UL) /*!< Tune voltage VTUNE on ATB0 */
#define OSCILLATORS_ATECLOCK_AUDIOPLL_OSCPLL (2UL) /*!< OSC_PLL_0V9 on ATB0 */
#define OSCILLATORS_ATECLOCK_AUDIOPLL_OSCPLL140M (3UL) /*!< OSC_PLL_140M_1V2 on ATB0 */

/* Bits 8..7 : Configure connection of the XOSC32K oscillator to analog test bus */
#define OSCILLATORS_ATECLOCK_XOSC32K_Pos (7UL) /*!< Position of XOSC32K field. */
#define OSCILLATORS_ATECLOCK_XOSC32K_Msk (0x3UL << OSCILLATORS_ATECLOCK_XOSC32K_Pos) /*!< Bit mask of XOSC32K field. */

/* Bits 6..5 : Configure connection of the 192 MHz PLL to analog test bus */
#define OSCILLATORS_ATECLOCK_PLL192M_Pos (5UL) /*!< Position of PLL192M field. */
#define OSCILLATORS_ATECLOCK_PLL192M_Msk (0x3UL << OSCILLATORS_ATECLOCK_PLL192M_Pos) /*!< Bit mask of PLL192M field. */
#define OSCILLATORS_ATECLOCK_PLL192M_Disconnected (0UL) /*!< ATB0 in high impedance */
#define OSCILLATORS_ATECLOCK_PLL192M_VTUNE (1UL) /*!< Tune voltage VTUNE on ATB0 */
#define OSCILLATORS_ATECLOCK_PLL192M_OSCPLLVHF (2UL) /*!< OSC_PLL_VHF_0V9 on ATB0 */
#define OSCILLATORS_ATECLOCK_PLL192M_Forbidden (3UL) /*!< Forbidden */

/* Bits 4..3 : Configure connection of the CPU PLL to analog test bus */
#define OSCILLATORS_ATECLOCK_CPUPLL_Pos (3UL) /*!< Position of CPUPLL field. */
#define OSCILLATORS_ATECLOCK_CPUPLL_Msk (0x3UL << OSCILLATORS_ATECLOCK_CPUPLL_Pos) /*!< Bit mask of CPUPLL field. */
#define OSCILLATORS_ATECLOCK_CPUPLL_Disconnected (0UL) /*!< ATB0 in high impedance */
#define OSCILLATORS_ATECLOCK_CPUPLL_VTUNE (1UL) /*!< Tune voltage VTUNE on ATB0 */
#define OSCILLATORS_ATECLOCK_CPUPLL_OSCPLLVHF (2UL) /*!< OSC_PLL_VHF_0V9 on ATB0 */
#define OSCILLATORS_ATECLOCK_CPUPLL_Forbidden (3UL) /*!< Forbidden */

/* Bits 2..1 : Configure connection of PLL to analog test bus */
#define OSCILLATORS_ATECLOCK_PLL_Pos (1UL) /*!< Position of PLL field. */
#define OSCILLATORS_ATECLOCK_PLL_Msk (0x3UL << OSCILLATORS_ATECLOCK_PLL_Pos) /*!< Bit mask of PLL field. */
#define OSCILLATORS_ATECLOCK_PLL_Disconnected (0UL) /*!< Disconnect */
#define OSCILLATORS_ATECLOCK_PLL_VC (1UL) /*!< Connect loop filter voltage to ATB0 */
#define OSCILLATORS_ATECLOCK_PLL_Osc32MDiv (2UL) /*!< Connect 32 MHz divided clock to ATB1 */
#define OSCILLATORS_ATECLOCK_PLL_Both (3UL) /*!< Connect both VC and Osc32MDiv */

/* Bit 0 : Configure connection of the ROSC32K oscillator to analog test bus */
#define OSCILLATORS_ATECLOCK_ROSC32K_Pos (0UL) /*!< Position of ROSC32K field. */
#define OSCILLATORS_ATECLOCK_ROSC32K_Msk (0x1UL << OSCILLATORS_ATECLOCK_ROSC32K_Pos) /*!< Bit mask of ROSC32K field. */

/* Register: OSCILLATORS_XOSC32MCAPS */
/* Description: Programmable capacitance of XC1 and XC2 */

/* Bit 8 : Enable on-chip capacitors on XC1 and XC2 */
#define OSCILLATORS_XOSC32MCAPS_ENABLE_Pos (8UL) /*!< Position of ENABLE field. */
#define OSCILLATORS_XOSC32MCAPS_ENABLE_Msk (0x1UL << OSCILLATORS_XOSC32MCAPS_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define OSCILLATORS_XOSC32MCAPS_ENABLE_Disabled (0UL) /*!< Capacitor disabled (use external caps) */
#define OSCILLATORS_XOSC32MCAPS_ENABLE_Enabled (1UL) /*!< Capacitor enabled */

/* Bits 4..0 : Value representing capacitance, calculated using provided equation If disabled, capacitor value = 3.3 [pF] */
#define OSCILLATORS_XOSC32MCAPS_CAPVALUE_Pos (0UL) /*!< Position of CAPVALUE field. */
#define OSCILLATORS_XOSC32MCAPS_CAPVALUE_Msk (0x1FUL << OSCILLATORS_XOSC32MCAPS_CAPVALUE_Pos) /*!< Bit mask of CAPVALUE field. */

/* Register: OSCILLATORS_BYPASSHFXOSC */
/* Description: Enable or disable bypass of HFCLK crystal oscillator with external clock source */

/* Bit 0 : Enable or disable bypass of HFCLK crystal oscillator with external clock source */
#define OSCILLATORS_BYPASSHFXOSC_BYPASS_Pos (0UL) /*!< Position of BYPASS field. */
#define OSCILLATORS_BYPASSHFXOSC_BYPASS_Msk (0x1UL << OSCILLATORS_BYPASSHFXOSC_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
#define OSCILLATORS_BYPASSHFXOSC_BYPASS_Disabled (0UL) /*!< Disable (use with crystal or low-swing external source) */
#define OSCILLATORS_BYPASSHFXOSC_BYPASS_Enabled (1UL) /*!< Enable (use with rail-to-rail external source) */

/* Register: OSCILLATORS_GPIOBYPASS */
/* Description: Enable bypass from GPIO */

/* Bit 2 : Enable bypass from GPIO for the AUDIO PLL */
#define OSCILLATORS_GPIOBYPASS_AUDIOPLL_Pos (2UL) /*!< Position of AUDIOPLL field. */
#define OSCILLATORS_GPIOBYPASS_AUDIOPLL_Msk (0x1UL << OSCILLATORS_GPIOBYPASS_AUDIOPLL_Pos) /*!< Bit mask of AUDIOPLL field. */
#define OSCILLATORS_GPIOBYPASS_AUDIOPLL_Disabled (0UL) /*!< Bypass is disabled - AUDIO PLL is operating normally */
#define OSCILLATORS_GPIOBYPASS_AUDIOPLL_Enabled (1UL) /*!< Bypass is enabled - the output signal of the AUDIO PLL is replaced by the signal applied to the pad */

/* Bit 1 : Enable bypass from GPIO for the 192 MHz PLL */
#define OSCILLATORS_GPIOBYPASS_PLL192M_Pos (1UL) /*!< Position of PLL192M field. */
#define OSCILLATORS_GPIOBYPASS_PLL192M_Msk (0x1UL << OSCILLATORS_GPIOBYPASS_PLL192M_Pos) /*!< Bit mask of PLL192M field. */
#define OSCILLATORS_GPIOBYPASS_PLL192M_Disabled (0UL) /*!< Bypass is disabled - 192 MHz PLL is operating normally */
#define OSCILLATORS_GPIOBYPASS_PLL192M_Enabled (1UL) /*!< Bypass is enabled - the output signal of the 192 MHz PLL is replaced by the signal applied to the pad */

/* Bit 0 : Enable bypass from GPIO for the CPU PLL */
#define OSCILLATORS_GPIOBYPASS_CPUPLL_Pos (0UL) /*!< Position of CPUPLL field. */
#define OSCILLATORS_GPIOBYPASS_CPUPLL_Msk (0x1UL << OSCILLATORS_GPIOBYPASS_CPUPLL_Pos) /*!< Bit mask of CPUPLL field. */
#define OSCILLATORS_GPIOBYPASS_CPUPLL_Disabled (0UL) /*!< Bypass is disabled - CPU PLL is operating normally */
#define OSCILLATORS_GPIOBYPASS_CPUPLL_Enabled (1UL) /*!< Bypass is enabled - the output signal of the CPU PLL is replaced by the signal applied to the pad */

/* Register: OSCILLATORS_AUDIOPLL_BYPASS */
/* Description: AUDIO PLL bypass control */

/* Bit 0 : Enable or disable bypass of AUDIOPLL by an external clock source */
#define OSCILLATORS_AUDIOPLL_BYPASS_BYPASS_Pos (0UL) /*!< Position of BYPASS field. */
#define OSCILLATORS_AUDIOPLL_BYPASS_BYPASS_Msk (0x1UL << OSCILLATORS_AUDIOPLL_BYPASS_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
#define OSCILLATORS_AUDIOPLL_BYPASS_BYPASS_Disabled (0UL) /*!< Disable */
#define OSCILLATORS_AUDIOPLL_BYPASS_BYPASS_Enabled (1UL) /*!< Enable */

/* Register: OSCILLATORS_AUDIOPLL_MUTE */
/* Description: Mute the AUDIO PLL */

/* Bit 0 : Mute output clock */
#define OSCILLATORS_AUDIOPLL_MUTE_MUTE_Pos (0UL) /*!< Position of MUTE field. */
#define OSCILLATORS_AUDIOPLL_MUTE_MUTE_Msk (0x1UL << OSCILLATORS_AUDIOPLL_MUTE_MUTE_Pos) /*!< Bit mask of MUTE field. */
#define OSCILLATORS_AUDIOPLL_MUTE_MUTE_Disabled (0UL) /*!< Disable */
#define OSCILLATORS_AUDIOPLL_MUTE_MUTE_Enabled (1UL) /*!< Enable */

/* Register: OSCILLATORS_AUDIOPLL_CTRL */
/* Description: Collection of test/debug signals */

/* Bit 7 :   */
#define OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTAMODULATION_Pos (7UL) /*!< Position of DISABLESIGMADELTAMODULATION field. */
#define OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTAMODULATION_Msk (0x1UL << OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTAMODULATION_Pos) /*!< Bit mask of DISABLESIGMADELTAMODULATION field. */
#define OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTAMODULATION_NormalOperation (0UL) /*!< Normal operation */
#define OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTAMODULATION_Disabled (1UL) /*!< Turn off sigma-delta modulation, output is held constant at 0 (auPllSdmOff) */

/* Bit 6 :   */
#define OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTADITHER_Pos (6UL) /*!< Position of DISABLESIGMADELTADITHER field. */
#define OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTADITHER_Msk (0x1UL << OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTADITHER_Pos) /*!< Bit mask of DISABLESIGMADELTADITHER field. */
#define OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTADITHER_NormalOperation (0UL) /*!< Normal operation */
#define OSCILLATORS_AUDIOPLL_CTRL_DISABLESIGMADELTADITHER_Disabled (1UL) /*!< Turn off dither in sigma-delta modulation (auPllDitherOff) */

/* Bit 5 : Program charge pump current (only used for debugging) */
#define OSCILLATORS_AUDIOPLL_CTRL_PROGCHPUMP_Pos (5UL) /*!< Position of PROGCHPUMP field. */
#define OSCILLATORS_AUDIOPLL_CTRL_PROGCHPUMP_Msk (0x1UL << OSCILLATORS_AUDIOPLL_CTRL_PROGCHPUMP_Pos) /*!< Bit mask of PROGCHPUMP field. */
#define OSCILLATORS_AUDIOPLL_CTRL_PROGCHPUMP_1uA (0UL) /*!< 1 uA (default) */
#define OSCILLATORS_AUDIOPLL_CTRL_PROGCHPUMP_2uA (1UL) /*!< 2 uA */

/* Bits 4..2 : VCO frequency selection (non-default values are only used for debugging) */
#define OSCILLATORS_AUDIOPLL_CTRL_VCOFREQ_Pos (2UL) /*!< Position of VCOFREQ field. */
#define OSCILLATORS_AUDIOPLL_CTRL_VCOFREQ_Msk (0x7UL << OSCILLATORS_AUDIOPLL_CTRL_VCOFREQ_Pos) /*!< Bit mask of VCOFREQ field. */
#define OSCILLATORS_AUDIOPLL_CTRL_VCOFREQ_144MHz (0UL) /*!< 144 MHz(default) */
#define OSCILLATORS_AUDIOPLL_CTRL_VCOFREQ_128MHz (1UL) /*!< 128 MHz */
#define OSCILLATORS_AUDIOPLL_CTRL_VCOFREQ_160MHz (2UL) /*!< 160 MHz */
#define OSCILLATORS_AUDIOPLL_CTRL_VCOFREQ_176MHz (3UL) /*!< 176 MHz */
#define OSCILLATORS_AUDIOPLL_CTRL_VCOFREQ_192MHz (4UL) /*!< 192 MHz */

/* Bits 1..0 : Adjust internal PFD delay/CP minimum UP/DN pulse length */
#define OSCILLATORS_AUDIOPLL_CTRL_PFDDELAY_Pos (0UL) /*!< Position of PFDDELAY field. */
#define OSCILLATORS_AUDIOPLL_CTRL_PFDDELAY_Msk (0x3UL << OSCILLATORS_AUDIOPLL_CTRL_PFDDELAY_Pos) /*!< Bit mask of PFDDELAY field. */
#define OSCILLATORS_AUDIOPLL_CTRL_PFDDELAY_Min (0UL) /*!< Min delay (default) */
#define OSCILLATORS_AUDIOPLL_CTRL_PFDDELAY_50ps (1UL) /*!< 50 ps delay */
#define OSCILLATORS_AUDIOPLL_CTRL_PFDDELAY_100ps (2UL) /*!< 100 ps delay */
#define OSCILLATORS_AUDIOPLL_CTRL_PFDDELAY_150ps (3UL) /*!< 150 ps delay (max) */

/* Register: OSCILLATORS_AUDIOPLL_VCOTRIM */
/* Description: VCO trim value for the AUDIO PLL */

/* Bits 5..0 : VCO trim value for the AUDIO PLL */
#define OSCILLATORS_AUDIOPLL_VCOTRIM_VCOTRIM_Pos (0UL) /*!< Position of VCOTRIM field. */
#define OSCILLATORS_AUDIOPLL_VCOTRIM_VCOTRIM_Msk (0x3FUL << OSCILLATORS_AUDIOPLL_VCOTRIM_VCOTRIM_Pos) /*!< Bit mask of VCOTRIM field. */

/* Register: OSCILLATORS_AUDIOPLL_VCOTRIMOVERRIDE */
/* Description: Control overriding of the VCO trim values */

/* Bit 0 : VCO trim value for the AUDIO PLL */
#define OSCILLATORS_AUDIOPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Pos (0UL) /*!< Position of VCOTRIMOVERRIDE field. */
#define OSCILLATORS_AUDIOPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Msk (0x1UL << OSCILLATORS_AUDIOPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Pos) /*!< Bit mask of VCOTRIMOVERRIDE field. */
#define OSCILLATORS_AUDIOPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Disabled (0UL) /*!< VCO trim values are coming from FICR */
#define OSCILLATORS_AUDIOPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Enabled (1UL) /*!< VCO trim values are coming from the VCOTRIM register */

/* Register: OSCILLATORS_CPUPLL_BYPASS */
/* Description: CPU PLL bypass control */

/* Bit 0 : Enable or disable bypass of CPUPLL by an external clock source */
#define OSCILLATORS_CPUPLL_BYPASS_BYPASS_Pos (0UL) /*!< Position of BYPASS field. */
#define OSCILLATORS_CPUPLL_BYPASS_BYPASS_Msk (0x1UL << OSCILLATORS_CPUPLL_BYPASS_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
#define OSCILLATORS_CPUPLL_BYPASS_BYPASS_Disabled (0UL) /*!< Disable */
#define OSCILLATORS_CPUPLL_BYPASS_BYPASS_Enabled (1UL) /*!< Enable */

/* Register: OSCILLATORS_CPUPLL_MUTE */
/* Description: Mute the CPU PLL */

/* Bit 0 : Mute output clock */
#define OSCILLATORS_CPUPLL_MUTE_MUTE_Pos (0UL) /*!< Position of MUTE field. */
#define OSCILLATORS_CPUPLL_MUTE_MUTE_Msk (0x1UL << OSCILLATORS_CPUPLL_MUTE_MUTE_Pos) /*!< Bit mask of MUTE field. */
#define OSCILLATORS_CPUPLL_MUTE_MUTE_Disabled (0UL) /*!< Disable */
#define OSCILLATORS_CPUPLL_MUTE_MUTE_Enabled (1UL) /*!< Enable */

/* Register: OSCILLATORS_CPUPLL_CTRL */
/* Description: Control the behavior of the PFD */

/* Bit 3 : Reserved for future use */
#define OSCILLATORS_CPUPLL_CTRL_UNUSED_Pos (3UL) /*!< Position of UNUSED field. */
#define OSCILLATORS_CPUPLL_CTRL_UNUSED_Msk (0x1UL << OSCILLATORS_CPUPLL_CTRL_UNUSED_Pos) /*!< Bit mask of UNUSED field. */

/* Bit 2 : Adjust internal PFD delay */
#define OSCILLATORS_CPUPLL_CTRL_DISABLEPHASEALLIGNMENT_Pos (2UL) /*!< Position of DISABLEPHASEALLIGNMENT field. */
#define OSCILLATORS_CPUPLL_CTRL_DISABLEPHASEALLIGNMENT_Msk (0x1UL << OSCILLATORS_CPUPLL_CTRL_DISABLEPHASEALLIGNMENT_Pos) /*!< Bit mask of DISABLEPHASEALLIGNMENT field. */

/* Bits 1..0 : Adjust internal PFD delay/CP minimum UP/DN pulse length */
#define OSCILLATORS_CPUPLL_CTRL_PFDDELAY_Pos (0UL) /*!< Position of PFDDELAY field. */
#define OSCILLATORS_CPUPLL_CTRL_PFDDELAY_Msk (0x3UL << OSCILLATORS_CPUPLL_CTRL_PFDDELAY_Pos) /*!< Bit mask of PFDDELAY field. */
#define OSCILLATORS_CPUPLL_CTRL_PFDDELAY_Min (0UL) /*!< Min delay (default) */
#define OSCILLATORS_CPUPLL_CTRL_PFDDELAY_50ps (1UL) /*!< 50 ps delay */
#define OSCILLATORS_CPUPLL_CTRL_PFDDELAY_100ps (2UL) /*!< 100 ps delay */
#define OSCILLATORS_CPUPLL_CTRL_PFDDELAY_150ps (3UL) /*!< 150 ps delay (max) */

/* Register: OSCILLATORS_CPUPLL_PROGCHPUMP */
/* Description: Program charge pump current */

/* Bit 0 : Program charge pump current (only used for debugging) */
#define OSCILLATORS_CPUPLL_PROGCHPUMP_PROGCHPUMP_Pos (0UL) /*!< Position of PROGCHPUMP field. */
#define OSCILLATORS_CPUPLL_PROGCHPUMP_PROGCHPUMP_Msk (0x1UL << OSCILLATORS_CPUPLL_PROGCHPUMP_PROGCHPUMP_Pos) /*!< Bit mask of PROGCHPUMP field. */
#define OSCILLATORS_CPUPLL_PROGCHPUMP_PROGCHPUMP_1uA (0UL) /*!< 1 uA (default) */
#define OSCILLATORS_CPUPLL_PROGCHPUMP_PROGCHPUMP_2uA (1UL) /*!< 2 uA */

/* Register: OSCILLATORS_CPUPLL_VCOTRIM */
/* Description: VCO trim value for the CPU PLL */

/* Bits 5..0 : VCO trim value for the CPU PLL */
#define OSCILLATORS_CPUPLL_VCOTRIM_VCOTRIM_Pos (0UL) /*!< Position of VCOTRIM field. */
#define OSCILLATORS_CPUPLL_VCOTRIM_VCOTRIM_Msk (0x3FUL << OSCILLATORS_CPUPLL_VCOTRIM_VCOTRIM_Pos) /*!< Bit mask of VCOTRIM field. */

/* Register: OSCILLATORS_CPUPLL_VCOTRIMOVERRIDE */
/* Description: Control overriding of the VCO trim values */

/* Bit 0 : VCO trim value for the CPU PLL */
#define OSCILLATORS_CPUPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Pos (0UL) /*!< Position of VCOTRIMOVERRIDE field. */
#define OSCILLATORS_CPUPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Msk (0x1UL << OSCILLATORS_CPUPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Pos) /*!< Bit mask of VCOTRIMOVERRIDE field. */
#define OSCILLATORS_CPUPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Disabled (0UL) /*!< VCO trim values are coming from FICR */
#define OSCILLATORS_CPUPLL_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Enabled (1UL) /*!< VCO trim values are coming from the VCOTRIM register */

/* Register: OSCILLATORS_PLL64M_BYPASS */
/* Description: PLL64M bypass control */

/* Bit 0 : Enable or disable bypass of PLL64M by an external clock source */
#define OSCILLATORS_PLL64M_BYPASS_BYPASS_Pos (0UL) /*!< Position of BYPASS field. */
#define OSCILLATORS_PLL64M_BYPASS_BYPASS_Msk (0x1UL << OSCILLATORS_PLL64M_BYPASS_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
#define OSCILLATORS_PLL64M_BYPASS_BYPASS_Disabled (0UL) /*!< Disable */
#define OSCILLATORS_PLL64M_BYPASS_BYPASS_Enabled (1UL) /*!< Enable */

/* Register: OSCILLATORS_PLL64M_MUTE */
/* Description: Mute the PLL64M */

/* Bit 0 : Mute output clock */
#define OSCILLATORS_PLL64M_MUTE_MUTE_Pos (0UL) /*!< Position of MUTE field. */
#define OSCILLATORS_PLL64M_MUTE_MUTE_Msk (0x1UL << OSCILLATORS_PLL64M_MUTE_MUTE_Pos) /*!< Bit mask of MUTE field. */
#define OSCILLATORS_PLL64M_MUTE_MUTE_Disabled (0UL) /*!< Disable */
#define OSCILLATORS_PLL64M_MUTE_MUTE_Enabled (1UL) /*!< Enable */

/* Register: OSCILLATORS_PLL64M_PROGCHPUMP */
/* Description: Program charge pump current */

/* Bit 0 : Program charge pump current (only used for debugging) */
#define OSCILLATORS_PLL64M_PROGCHPUMP_PROGCHPUMP_Pos (0UL) /*!< Position of PROGCHPUMP field. */
#define OSCILLATORS_PLL64M_PROGCHPUMP_PROGCHPUMP_Msk (0x1UL << OSCILLATORS_PLL64M_PROGCHPUMP_PROGCHPUMP_Pos) /*!< Bit mask of PROGCHPUMP field. */

/* Register: OSCILLATORS_PLL64M_VCOTRIM */
/* Description: VCO trim value for the 64 MHz PLL */

/* Bits 5..0 : VCO trim value for the 64 MHz PLL */
#define OSCILLATORS_PLL64M_VCOTRIM_VCOTRIM_Pos (0UL) /*!< Position of VCOTRIM field. */
#define OSCILLATORS_PLL64M_VCOTRIM_VCOTRIM_Msk (0x3FUL << OSCILLATORS_PLL64M_VCOTRIM_VCOTRIM_Pos) /*!< Bit mask of VCOTRIM field. */

/* Register: OSCILLATORS_PLL64M_VCOTRIMOVERRIDE */
/* Description: Control overriding of the VCO trim values */

/* Bit 0 : VCO trim value for the 64 MHz PLL */
#define OSCILLATORS_PLL64M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Pos (0UL) /*!< Position of VCOTRIMOVERRIDE field. */
#define OSCILLATORS_PLL64M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Msk (0x1UL << OSCILLATORS_PLL64M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Pos) /*!< Bit mask of VCOTRIMOVERRIDE field. */
#define OSCILLATORS_PLL64M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Disabled (0UL) /*!< VCO trim values are coming from FICR */
#define OSCILLATORS_PLL64M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Enabled (1UL) /*!< VCO trim values are coming from the VCOTRIM register */

/* Register: OSCILLATORS_PLL192M_BYPASS */
/* Description: 192 MHz PLL bypass control */

/* Bit 0 : Enable or disable bypass of PLL192M by an external clock source */
#define OSCILLATORS_PLL192M_BYPASS_BYPASS_Pos (0UL) /*!< Position of BYPASS field. */
#define OSCILLATORS_PLL192M_BYPASS_BYPASS_Msk (0x1UL << OSCILLATORS_PLL192M_BYPASS_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
#define OSCILLATORS_PLL192M_BYPASS_BYPASS_Disabled (0UL) /*!< Disable */
#define OSCILLATORS_PLL192M_BYPASS_BYPASS_Enabled (1UL) /*!< Enable */

/* Register: OSCILLATORS_PLL192M_MUTE */
/* Description: Mute the 192 MHz PLL */

/* Bit 0 : Mute output clock */
#define OSCILLATORS_PLL192M_MUTE_MUTE_Pos (0UL) /*!< Position of MUTE field. */
#define OSCILLATORS_PLL192M_MUTE_MUTE_Msk (0x1UL << OSCILLATORS_PLL192M_MUTE_MUTE_Pos) /*!< Bit mask of MUTE field. */
#define OSCILLATORS_PLL192M_MUTE_MUTE_Disabled (0UL) /*!< Disable */
#define OSCILLATORS_PLL192M_MUTE_MUTE_Enabled (1UL) /*!< Enable */

/* Register: OSCILLATORS_PLL192M_FREQ */
/* Description: Frequency selection */

/* Bits 2..0 : Frequency selection for the 192 MHz PLL */
#define OSCILLATORS_PLL192M_FREQ_FREQ_Pos (0UL) /*!< Position of FREQ field. */
#define OSCILLATORS_PLL192M_FREQ_FREQ_Msk (0x7UL << OSCILLATORS_PLL192M_FREQ_FREQ_Pos) /*!< Bit mask of FREQ field. */
#define OSCILLATORS_PLL192M_FREQ_FREQ_128MHz (0UL) /*!< 128 MHz */
#define OSCILLATORS_PLL192M_FREQ_FREQ_144MHz (1UL) /*!< 144 MHz */
#define OSCILLATORS_PLL192M_FREQ_FREQ_160MHz (2UL) /*!< 160 MHz */
#define OSCILLATORS_PLL192M_FREQ_FREQ_176MHz (3UL) /*!< 176 MHz */
#define OSCILLATORS_PLL192M_FREQ_FREQ_192MHz (4UL) /*!< 192 MHz (default) */

/* Register: OSCILLATORS_PLL192M_CTRL */
/* Description: Control the behavior of the PFD */

/* Bit 3 : Reserved for future use */
#define OSCILLATORS_PLL192M_CTRL_UNUSED_Pos (3UL) /*!< Position of UNUSED field. */
#define OSCILLATORS_PLL192M_CTRL_UNUSED_Msk (0x1UL << OSCILLATORS_PLL192M_CTRL_UNUSED_Pos) /*!< Bit mask of UNUSED field. */

/* Bit 2 : Adjust internal PFD delay */
#define OSCILLATORS_PLL192M_CTRL_DISABLEPHASEALLIGNMENT_Pos (2UL) /*!< Position of DISABLEPHASEALLIGNMENT field. */
#define OSCILLATORS_PLL192M_CTRL_DISABLEPHASEALLIGNMENT_Msk (0x1UL << OSCILLATORS_PLL192M_CTRL_DISABLEPHASEALLIGNMENT_Pos) /*!< Bit mask of DISABLEPHASEALLIGNMENT field. */

/* Bits 1..0 : Adjust internal PFD delay/CP minimum UP/DN pulse length */
#define OSCILLATORS_PLL192M_CTRL_PFDDELAY_Pos (0UL) /*!< Position of PFDDELAY field. */
#define OSCILLATORS_PLL192M_CTRL_PFDDELAY_Msk (0x3UL << OSCILLATORS_PLL192M_CTRL_PFDDELAY_Pos) /*!< Bit mask of PFDDELAY field. */
#define OSCILLATORS_PLL192M_CTRL_PFDDELAY_Min (0UL) /*!< Min delay (default) */
#define OSCILLATORS_PLL192M_CTRL_PFDDELAY_50ps (1UL) /*!< 50 ps delay */
#define OSCILLATORS_PLL192M_CTRL_PFDDELAY_100ps (2UL) /*!< 100 ps delay */
#define OSCILLATORS_PLL192M_CTRL_PFDDELAY_150ps (3UL) /*!< 150 ps delay (max) */

/* Register: OSCILLATORS_PLL192M_PROGCHPUMP */
/* Description: Program charge pump current */

/* Bit 0 : Program charge pump current (only used for debugging) */
#define OSCILLATORS_PLL192M_PROGCHPUMP_PROGCHPUMP_Pos (0UL) /*!< Position of PROGCHPUMP field. */
#define OSCILLATORS_PLL192M_PROGCHPUMP_PROGCHPUMP_Msk (0x1UL << OSCILLATORS_PLL192M_PROGCHPUMP_PROGCHPUMP_Pos) /*!< Bit mask of PROGCHPUMP field. */
#define OSCILLATORS_PLL192M_PROGCHPUMP_PROGCHPUMP_1uA (0UL) /*!< 1 uA (default) */
#define OSCILLATORS_PLL192M_PROGCHPUMP_PROGCHPUMP_2uA (1UL) /*!< 2 uA */

/* Register: OSCILLATORS_PLL192M_VCOTRIM */
/* Description: VCO trim value for the 192 MHz PLL */

/* Bits 5..0 : VCO trim value for the 192 MHz PLL */
#define OSCILLATORS_PLL192M_VCOTRIM_VCOTRIM_Pos (0UL) /*!< Position of VCOTRIM field. */
#define OSCILLATORS_PLL192M_VCOTRIM_VCOTRIM_Msk (0x3FUL << OSCILLATORS_PLL192M_VCOTRIM_VCOTRIM_Pos) /*!< Bit mask of VCOTRIM field. */

/* Register: OSCILLATORS_PLL192M_VCOTRIMOVERRIDE */
/* Description: Control overriding of the VCO trim values */

/* Bit 0 : VCO trim value for the 192 MHz PLL */
#define OSCILLATORS_PLL192M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Pos (0UL) /*!< Position of VCOTRIMOVERRIDE field. */
#define OSCILLATORS_PLL192M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Msk (0x1UL << OSCILLATORS_PLL192M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Pos) /*!< Bit mask of VCOTRIMOVERRIDE field. */
#define OSCILLATORS_PLL192M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Disabled (0UL) /*!< VCO trim values are coming from FICR */
#define OSCILLATORS_PLL192M_VCOTRIMOVERRIDE_VCOTRIMOVERRIDE_Enabled (1UL) /*!< VCO trim values are coming from the VCOTRIM register */

/* Register: OSCILLATORS_XOSC32KI_BYPASS */
/* Description: Enable or disable bypass of LFCLK crystal oscillator with external clock source */

/* Bit 0 : Enable or disable bypass of LFCLK crystal oscillator with external clock source */
#define OSCILLATORS_XOSC32KI_BYPASS_BYPASS_Pos (0UL) /*!< Position of BYPASS field. */
#define OSCILLATORS_XOSC32KI_BYPASS_BYPASS_Msk (0x1UL << OSCILLATORS_XOSC32KI_BYPASS_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
#define OSCILLATORS_XOSC32KI_BYPASS_BYPASS_Disabled (0UL) /*!< Disable (use with crystal or low-swing external source) */
#define OSCILLATORS_XOSC32KI_BYPASS_BYPASS_Enabled (1UL) /*!< Enable (use with rail-to-rail external source) */

/* Register: OSCILLATORS_XOSC32KI_POWERDOWN */
/* Description: Power-up or power-down of LFCLK crystal oscillator */

/* Bit 0 : Power-up or power-down LFCLK crystal oscillator */
#define OSCILLATORS_XOSC32KI_POWERDOWN_POWERDOWN_Pos (0UL) /*!< Position of POWERDOWN field. */
#define OSCILLATORS_XOSC32KI_POWERDOWN_POWERDOWN_Msk (0x1UL << OSCILLATORS_XOSC32KI_POWERDOWN_POWERDOWN_Pos) /*!< Bit mask of POWERDOWN field. */
#define OSCILLATORS_XOSC32KI_POWERDOWN_POWERDOWN_PowerUp (0UL) /*!< Power-up LFCLK crystal oscillator */
#define OSCILLATORS_XOSC32KI_POWERDOWN_POWERDOWN_PowerDown (1UL) /*!< Power-down LFCLK crystal oscillator */

/* Register: OSCILLATORS_XOSC32KI_EXTBIAS */
/* Description: Control the use of a external bias current */

/* Bit 0 : Control the use of a external bias current */
#define OSCILLATORS_XOSC32KI_EXTBIAS_EXTBIAS_Pos (0UL) /*!< Position of EXTBIAS field. */
#define OSCILLATORS_XOSC32KI_EXTBIAS_EXTBIAS_Msk (0x1UL << OSCILLATORS_XOSC32KI_EXTBIAS_EXTBIAS_Pos) /*!< Bit mask of EXTBIAS field. */
#define OSCILLATORS_XOSC32KI_EXTBIAS_EXTBIAS_Disabled (0UL) /*!< Internal bias current is used */
#define OSCILLATORS_XOSC32KI_EXTBIAS_EXTBIAS_Enabled (1UL) /*!< External bias current is used */

/* Register: OSCILLATORS_XOSC32KI_MUTE */
/* Description: Disable clock output */

/* Bit 0 : Disable clock output */
#define OSCILLATORS_XOSC32KI_MUTE_MUTE_Pos (0UL) /*!< Position of MUTE field. */
#define OSCILLATORS_XOSC32KI_MUTE_MUTE_Msk (0x1UL << OSCILLATORS_XOSC32KI_MUTE_MUTE_Pos) /*!< Bit mask of MUTE field. */
#define OSCILLATORS_XOSC32KI_MUTE_MUTE_NotMuted (0UL) /*!< Clock output on OSC_32K_0V9 */
#define OSCILLATORS_XOSC32KI_MUTE_MUTE_Muted (1UL) /*!< Clock is muted. OSC_32K_0V9 is zero. */

/* Register: OSCILLATORS_XOSC32KI_INTCAP */
/* Description: Control usage of internal load capacitors */

/* Bits 1..0 : Control usage of internal load capacitors */
#define OSCILLATORS_XOSC32KI_INTCAP_INTCAP_Pos (0UL) /*!< Position of INTCAP field. */
#define OSCILLATORS_XOSC32KI_INTCAP_INTCAP_Msk (0x3UL << OSCILLATORS_XOSC32KI_INTCAP_INTCAP_Pos) /*!< Bit mask of INTCAP field. */
#define OSCILLATORS_XOSC32KI_INTCAP_INTCAP_External (0UL) /*!< Use external load capacitors */
#define OSCILLATORS_XOSC32KI_INTCAP_INTCAP_C6PF (1UL) /*!< 6 pF internal load capacitance */
#define OSCILLATORS_XOSC32KI_INTCAP_INTCAP_C7PF (2UL) /*!< 7 pF internal load capacitance */
#define OSCILLATORS_XOSC32KI_INTCAP_INTCAP_C11PF (3UL) /*!< 11 pF internal load capacitance */

/* Register: OSCILLATORS_XOSC32KI_CAPTRIM */
/* Description: On-chip capacitance trimming */

/* Bits 2..0 : On-chip capacitance trimming */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_Pos (0UL) /*!< Position of CAPTRIM field. */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_Msk (0x7UL << OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_Pos) /*!< Bit mask of CAPTRIM field. */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_TRIM0 (0UL) /*!< 0  percent */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_TRIM12P5 (1UL) /*!< +12.5  percent */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_TRIM25 (2UL) /*!< +25  percent */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_UNUSED0 (3UL) /*!< Reserved for future use */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_UNUSED1 (4UL) /*!< Reserved for future use */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_UNUSED2 (5UL) /*!< Reserved for future use */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_TRIMM25 (6UL) /*!< -25  percent */
#define OSCILLATORS_XOSC32KI_CAPTRIM_CAPTRIM_TRIMM12P5 (7UL) /*!< -12.5  percent */

/* Register: OSCILLATORS_XOSC32KI_CONSTCURR */
/* Description: Control pierce inverter bias current */

/* Bit 0 : Select bias current control */
#define OSCILLATORS_XOSC32KI_CONSTCURR_CONSTCURR_Pos (0UL) /*!< Position of CONSTCURR field. */
#define OSCILLATORS_XOSC32KI_CONSTCURR_CONSTCURR_Msk (0x1UL << OSCILLATORS_XOSC32KI_CONSTCURR_CONSTCURR_Pos) /*!< Bit mask of CONSTCURR field. */
#define OSCILLATORS_XOSC32KI_CONSTCURR_CONSTCURR_Regulated (0UL) /*!< Bias current is controlled by the amplitude regulator */
#define OSCILLATORS_XOSC32KI_CONSTCURR_CONSTCURR_Constant (1UL) /*!< Bias current is constant */

/* Register: OSCILLATORS_XOSC32KI_CONSTCURRTRIM */
/* Description: Control current bias when CONSTCURR == 1 */

/* Bits 3..0 : Control current bias when CONSTCURR == 1 */
#define OSCILLATORS_XOSC32KI_CONSTCURRTRIM_CONSTCURRTRIM_Pos (0UL) /*!< Position of CONSTCURRTRIM field. */
#define OSCILLATORS_XOSC32KI_CONSTCURRTRIM_CONSTCURRTRIM_Msk (0xFUL << OSCILLATORS_XOSC32KI_CONSTCURRTRIM_CONSTCURRTRIM_Pos) /*!< Bit mask of CONSTCURRTRIM field. */

/* Register: OSCILLATORS_XOSC32KI_AREGHIGHCURR */
/* Description: Increase current in amplitude regulator */

/* Bit 0 : Increase current in amplitude regulator */
#define OSCILLATORS_XOSC32KI_AREGHIGHCURR_AREGHIGHCURR_Pos (0UL) /*!< Position of AREGHIGHCURR field. */
#define OSCILLATORS_XOSC32KI_AREGHIGHCURR_AREGHIGHCURR_Msk (0x1UL << OSCILLATORS_XOSC32KI_AREGHIGHCURR_AREGHIGHCURR_Pos) /*!< Bit mask of AREGHIGHCURR field. */


/* Peripheral: GPIO */
/* Description: GPIO Port 0 */

/* Register: GPIO_OUT */
/* Description: Write GPIO port */

/* Bit 31 : Pin 31 */
#define GPIO_OUT_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define GPIO_OUT_PIN31_Msk (0x1UL << GPIO_OUT_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define GPIO_OUT_PIN31_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN31_High (1UL) /*!< Pin driver is high */

/* Bit 30 : Pin 30 */
#define GPIO_OUT_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define GPIO_OUT_PIN30_Msk (0x1UL << GPIO_OUT_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define GPIO_OUT_PIN30_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN30_High (1UL) /*!< Pin driver is high */

/* Bit 29 : Pin 29 */
#define GPIO_OUT_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define GPIO_OUT_PIN29_Msk (0x1UL << GPIO_OUT_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define GPIO_OUT_PIN29_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN29_High (1UL) /*!< Pin driver is high */

/* Bit 28 : Pin 28 */
#define GPIO_OUT_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define GPIO_OUT_PIN28_Msk (0x1UL << GPIO_OUT_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define GPIO_OUT_PIN28_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN28_High (1UL) /*!< Pin driver is high */

/* Bit 27 : Pin 27 */
#define GPIO_OUT_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define GPIO_OUT_PIN27_Msk (0x1UL << GPIO_OUT_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define GPIO_OUT_PIN27_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN27_High (1UL) /*!< Pin driver is high */

/* Bit 26 : Pin 26 */
#define GPIO_OUT_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define GPIO_OUT_PIN26_Msk (0x1UL << GPIO_OUT_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define GPIO_OUT_PIN26_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN26_High (1UL) /*!< Pin driver is high */

/* Bit 25 : Pin 25 */
#define GPIO_OUT_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define GPIO_OUT_PIN25_Msk (0x1UL << GPIO_OUT_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define GPIO_OUT_PIN25_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN25_High (1UL) /*!< Pin driver is high */

/* Bit 24 : Pin 24 */
#define GPIO_OUT_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define GPIO_OUT_PIN24_Msk (0x1UL << GPIO_OUT_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define GPIO_OUT_PIN24_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN24_High (1UL) /*!< Pin driver is high */

/* Bit 23 : Pin 23 */
#define GPIO_OUT_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define GPIO_OUT_PIN23_Msk (0x1UL << GPIO_OUT_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define GPIO_OUT_PIN23_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN23_High (1UL) /*!< Pin driver is high */

/* Bit 22 : Pin 22 */
#define GPIO_OUT_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define GPIO_OUT_PIN22_Msk (0x1UL << GPIO_OUT_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define GPIO_OUT_PIN22_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN22_High (1UL) /*!< Pin driver is high */

/* Bit 21 : Pin 21 */
#define GPIO_OUT_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define GPIO_OUT_PIN21_Msk (0x1UL << GPIO_OUT_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define GPIO_OUT_PIN21_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN21_High (1UL) /*!< Pin driver is high */

/* Bit 20 : Pin 20 */
#define GPIO_OUT_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define GPIO_OUT_PIN20_Msk (0x1UL << GPIO_OUT_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define GPIO_OUT_PIN20_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN20_High (1UL) /*!< Pin driver is high */

/* Bit 19 : Pin 19 */
#define GPIO_OUT_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define GPIO_OUT_PIN19_Msk (0x1UL << GPIO_OUT_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define GPIO_OUT_PIN19_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN19_High (1UL) /*!< Pin driver is high */

/* Bit 18 : Pin 18 */
#define GPIO_OUT_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define GPIO_OUT_PIN18_Msk (0x1UL << GPIO_OUT_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define GPIO_OUT_PIN18_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN18_High (1UL) /*!< Pin driver is high */

/* Bit 17 : Pin 17 */
#define GPIO_OUT_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define GPIO_OUT_PIN17_Msk (0x1UL << GPIO_OUT_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define GPIO_OUT_PIN17_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN17_High (1UL) /*!< Pin driver is high */

/* Bit 16 : Pin 16 */
#define GPIO_OUT_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define GPIO_OUT_PIN16_Msk (0x1UL << GPIO_OUT_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define GPIO_OUT_PIN16_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN16_High (1UL) /*!< Pin driver is high */

/* Bit 15 : Pin 15 */
#define GPIO_OUT_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define GPIO_OUT_PIN15_Msk (0x1UL << GPIO_OUT_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define GPIO_OUT_PIN15_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN15_High (1UL) /*!< Pin driver is high */

/* Bit 14 : Pin 14 */
#define GPIO_OUT_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define GPIO_OUT_PIN14_Msk (0x1UL << GPIO_OUT_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define GPIO_OUT_PIN14_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN14_High (1UL) /*!< Pin driver is high */

/* Bit 13 : Pin 13 */
#define GPIO_OUT_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define GPIO_OUT_PIN13_Msk (0x1UL << GPIO_OUT_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define GPIO_OUT_PIN13_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN13_High (1UL) /*!< Pin driver is high */

/* Bit 12 : Pin 12 */
#define GPIO_OUT_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define GPIO_OUT_PIN12_Msk (0x1UL << GPIO_OUT_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define GPIO_OUT_PIN12_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN12_High (1UL) /*!< Pin driver is high */

/* Bit 11 : Pin 11 */
#define GPIO_OUT_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define GPIO_OUT_PIN11_Msk (0x1UL << GPIO_OUT_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define GPIO_OUT_PIN11_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN11_High (1UL) /*!< Pin driver is high */

/* Bit 10 : Pin 10 */
#define GPIO_OUT_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define GPIO_OUT_PIN10_Msk (0x1UL << GPIO_OUT_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define GPIO_OUT_PIN10_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN10_High (1UL) /*!< Pin driver is high */

/* Bit 9 : Pin 9 */
#define GPIO_OUT_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define GPIO_OUT_PIN9_Msk (0x1UL << GPIO_OUT_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define GPIO_OUT_PIN9_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN9_High (1UL) /*!< Pin driver is high */

/* Bit 8 : Pin 8 */
#define GPIO_OUT_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define GPIO_OUT_PIN8_Msk (0x1UL << GPIO_OUT_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define GPIO_OUT_PIN8_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN8_High (1UL) /*!< Pin driver is high */

/* Bit 7 : Pin 7 */
#define GPIO_OUT_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define GPIO_OUT_PIN7_Msk (0x1UL << GPIO_OUT_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define GPIO_OUT_PIN7_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN7_High (1UL) /*!< Pin driver is high */

/* Bit 6 : Pin 6 */
#define GPIO_OUT_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define GPIO_OUT_PIN6_Msk (0x1UL << GPIO_OUT_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define GPIO_OUT_PIN6_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN6_High (1UL) /*!< Pin driver is high */

/* Bit 5 : Pin 5 */
#define GPIO_OUT_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define GPIO_OUT_PIN5_Msk (0x1UL << GPIO_OUT_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define GPIO_OUT_PIN5_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN5_High (1UL) /*!< Pin driver is high */

/* Bit 4 : Pin 4 */
#define GPIO_OUT_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define GPIO_OUT_PIN4_Msk (0x1UL << GPIO_OUT_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define GPIO_OUT_PIN4_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN4_High (1UL) /*!< Pin driver is high */

/* Bit 3 : Pin 3 */
#define GPIO_OUT_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define GPIO_OUT_PIN3_Msk (0x1UL << GPIO_OUT_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define GPIO_OUT_PIN3_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN3_High (1UL) /*!< Pin driver is high */

/* Bit 2 : Pin 2 */
#define GPIO_OUT_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define GPIO_OUT_PIN2_Msk (0x1UL << GPIO_OUT_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define GPIO_OUT_PIN2_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN2_High (1UL) /*!< Pin driver is high */

/* Bit 1 : Pin 1 */
#define GPIO_OUT_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define GPIO_OUT_PIN1_Msk (0x1UL << GPIO_OUT_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define GPIO_OUT_PIN1_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN1_High (1UL) /*!< Pin driver is high */

/* Bit 0 : Pin 0 */
#define GPIO_OUT_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define GPIO_OUT_PIN0_Msk (0x1UL << GPIO_OUT_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define GPIO_OUT_PIN0_Low (0UL) /*!< Pin driver is low */
#define GPIO_OUT_PIN0_High (1UL) /*!< Pin driver is high */

/* Register: GPIO_OUTSET */
/* Description: Set individual bits in GPIO port */

/* Bit 31 : Pin 31 */
#define GPIO_OUTSET_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define GPIO_OUTSET_PIN31_Msk (0x1UL << GPIO_OUTSET_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define GPIO_OUTSET_PIN31_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN31_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN31_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 30 : Pin 30 */
#define GPIO_OUTSET_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define GPIO_OUTSET_PIN30_Msk (0x1UL << GPIO_OUTSET_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define GPIO_OUTSET_PIN30_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN30_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN30_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 29 : Pin 29 */
#define GPIO_OUTSET_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define GPIO_OUTSET_PIN29_Msk (0x1UL << GPIO_OUTSET_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define GPIO_OUTSET_PIN29_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN29_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN29_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 28 : Pin 28 */
#define GPIO_OUTSET_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define GPIO_OUTSET_PIN28_Msk (0x1UL << GPIO_OUTSET_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define GPIO_OUTSET_PIN28_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN28_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN28_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 27 : Pin 27 */
#define GPIO_OUTSET_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define GPIO_OUTSET_PIN27_Msk (0x1UL << GPIO_OUTSET_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define GPIO_OUTSET_PIN27_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN27_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN27_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 26 : Pin 26 */
#define GPIO_OUTSET_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define GPIO_OUTSET_PIN26_Msk (0x1UL << GPIO_OUTSET_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define GPIO_OUTSET_PIN26_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN26_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN26_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 25 : Pin 25 */
#define GPIO_OUTSET_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define GPIO_OUTSET_PIN25_Msk (0x1UL << GPIO_OUTSET_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define GPIO_OUTSET_PIN25_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN25_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN25_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 24 : Pin 24 */
#define GPIO_OUTSET_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define GPIO_OUTSET_PIN24_Msk (0x1UL << GPIO_OUTSET_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define GPIO_OUTSET_PIN24_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN24_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN24_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 23 : Pin 23 */
#define GPIO_OUTSET_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define GPIO_OUTSET_PIN23_Msk (0x1UL << GPIO_OUTSET_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define GPIO_OUTSET_PIN23_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN23_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN23_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 22 : Pin 22 */
#define GPIO_OUTSET_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define GPIO_OUTSET_PIN22_Msk (0x1UL << GPIO_OUTSET_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define GPIO_OUTSET_PIN22_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN22_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN22_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 21 : Pin 21 */
#define GPIO_OUTSET_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define GPIO_OUTSET_PIN21_Msk (0x1UL << GPIO_OUTSET_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define GPIO_OUTSET_PIN21_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN21_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN21_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 20 : Pin 20 */
#define GPIO_OUTSET_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define GPIO_OUTSET_PIN20_Msk (0x1UL << GPIO_OUTSET_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define GPIO_OUTSET_PIN20_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN20_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN20_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 19 : Pin 19 */
#define GPIO_OUTSET_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define GPIO_OUTSET_PIN19_Msk (0x1UL << GPIO_OUTSET_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define GPIO_OUTSET_PIN19_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN19_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN19_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 18 : Pin 18 */
#define GPIO_OUTSET_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define GPIO_OUTSET_PIN18_Msk (0x1UL << GPIO_OUTSET_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define GPIO_OUTSET_PIN18_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN18_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN18_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 17 : Pin 17 */
#define GPIO_OUTSET_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define GPIO_OUTSET_PIN17_Msk (0x1UL << GPIO_OUTSET_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define GPIO_OUTSET_PIN17_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN17_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN17_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 16 : Pin 16 */
#define GPIO_OUTSET_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define GPIO_OUTSET_PIN16_Msk (0x1UL << GPIO_OUTSET_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define GPIO_OUTSET_PIN16_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN16_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN16_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 15 : Pin 15 */
#define GPIO_OUTSET_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define GPIO_OUTSET_PIN15_Msk (0x1UL << GPIO_OUTSET_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define GPIO_OUTSET_PIN15_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN15_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN15_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 14 : Pin 14 */
#define GPIO_OUTSET_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define GPIO_OUTSET_PIN14_Msk (0x1UL << GPIO_OUTSET_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define GPIO_OUTSET_PIN14_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN14_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN14_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 13 : Pin 13 */
#define GPIO_OUTSET_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define GPIO_OUTSET_PIN13_Msk (0x1UL << GPIO_OUTSET_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define GPIO_OUTSET_PIN13_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN13_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN13_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 12 : Pin 12 */
#define GPIO_OUTSET_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define GPIO_OUTSET_PIN12_Msk (0x1UL << GPIO_OUTSET_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define GPIO_OUTSET_PIN12_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN12_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN12_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 11 : Pin 11 */
#define GPIO_OUTSET_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define GPIO_OUTSET_PIN11_Msk (0x1UL << GPIO_OUTSET_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define GPIO_OUTSET_PIN11_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN11_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN11_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 10 : Pin 10 */
#define GPIO_OUTSET_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define GPIO_OUTSET_PIN10_Msk (0x1UL << GPIO_OUTSET_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define GPIO_OUTSET_PIN10_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN10_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN10_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 9 : Pin 9 */
#define GPIO_OUTSET_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define GPIO_OUTSET_PIN9_Msk (0x1UL << GPIO_OUTSET_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define GPIO_OUTSET_PIN9_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN9_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN9_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 8 : Pin 8 */
#define GPIO_OUTSET_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define GPIO_OUTSET_PIN8_Msk (0x1UL << GPIO_OUTSET_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define GPIO_OUTSET_PIN8_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN8_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN8_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 7 : Pin 7 */
#define GPIO_OUTSET_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define GPIO_OUTSET_PIN7_Msk (0x1UL << GPIO_OUTSET_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define GPIO_OUTSET_PIN7_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN7_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN7_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 6 : Pin 6 */
#define GPIO_OUTSET_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define GPIO_OUTSET_PIN6_Msk (0x1UL << GPIO_OUTSET_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define GPIO_OUTSET_PIN6_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN6_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN6_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 5 : Pin 5 */
#define GPIO_OUTSET_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define GPIO_OUTSET_PIN5_Msk (0x1UL << GPIO_OUTSET_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define GPIO_OUTSET_PIN5_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN5_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN5_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 4 : Pin 4 */
#define GPIO_OUTSET_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define GPIO_OUTSET_PIN4_Msk (0x1UL << GPIO_OUTSET_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define GPIO_OUTSET_PIN4_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN4_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN4_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 3 : Pin 3 */
#define GPIO_OUTSET_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define GPIO_OUTSET_PIN3_Msk (0x1UL << GPIO_OUTSET_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define GPIO_OUTSET_PIN3_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN3_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN3_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 2 : Pin 2 */
#define GPIO_OUTSET_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define GPIO_OUTSET_PIN2_Msk (0x1UL << GPIO_OUTSET_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define GPIO_OUTSET_PIN2_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN2_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN2_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 1 : Pin 1 */
#define GPIO_OUTSET_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define GPIO_OUTSET_PIN1_Msk (0x1UL << GPIO_OUTSET_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define GPIO_OUTSET_PIN1_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN1_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN1_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Bit 0 : Pin 0 */
#define GPIO_OUTSET_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define GPIO_OUTSET_PIN0_Msk (0x1UL << GPIO_OUTSET_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define GPIO_OUTSET_PIN0_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTSET_PIN0_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTSET_PIN0_Set (1UL) /*!< Write: writing a '1' sets the pin high; writing a '0' has no effect */

/* Register: GPIO_OUTCLR */
/* Description: Clear individual bits in GPIO port */

/* Bit 31 : Pin 31 */
#define GPIO_OUTCLR_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define GPIO_OUTCLR_PIN31_Msk (0x1UL << GPIO_OUTCLR_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define GPIO_OUTCLR_PIN31_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN31_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN31_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 30 : Pin 30 */
#define GPIO_OUTCLR_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define GPIO_OUTCLR_PIN30_Msk (0x1UL << GPIO_OUTCLR_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define GPIO_OUTCLR_PIN30_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN30_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN30_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 29 : Pin 29 */
#define GPIO_OUTCLR_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define GPIO_OUTCLR_PIN29_Msk (0x1UL << GPIO_OUTCLR_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define GPIO_OUTCLR_PIN29_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN29_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN29_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 28 : Pin 28 */
#define GPIO_OUTCLR_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define GPIO_OUTCLR_PIN28_Msk (0x1UL << GPIO_OUTCLR_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define GPIO_OUTCLR_PIN28_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN28_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN28_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 27 : Pin 27 */
#define GPIO_OUTCLR_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define GPIO_OUTCLR_PIN27_Msk (0x1UL << GPIO_OUTCLR_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define GPIO_OUTCLR_PIN27_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN27_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN27_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 26 : Pin 26 */
#define GPIO_OUTCLR_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define GPIO_OUTCLR_PIN26_Msk (0x1UL << GPIO_OUTCLR_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define GPIO_OUTCLR_PIN26_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN26_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN26_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 25 : Pin 25 */
#define GPIO_OUTCLR_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define GPIO_OUTCLR_PIN25_Msk (0x1UL << GPIO_OUTCLR_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define GPIO_OUTCLR_PIN25_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN25_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN25_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 24 : Pin 24 */
#define GPIO_OUTCLR_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define GPIO_OUTCLR_PIN24_Msk (0x1UL << GPIO_OUTCLR_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define GPIO_OUTCLR_PIN24_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN24_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN24_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 23 : Pin 23 */
#define GPIO_OUTCLR_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define GPIO_OUTCLR_PIN23_Msk (0x1UL << GPIO_OUTCLR_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define GPIO_OUTCLR_PIN23_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN23_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN23_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 22 : Pin 22 */
#define GPIO_OUTCLR_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define GPIO_OUTCLR_PIN22_Msk (0x1UL << GPIO_OUTCLR_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define GPIO_OUTCLR_PIN22_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN22_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN22_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 21 : Pin 21 */
#define GPIO_OUTCLR_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define GPIO_OUTCLR_PIN21_Msk (0x1UL << GPIO_OUTCLR_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define GPIO_OUTCLR_PIN21_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN21_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN21_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 20 : Pin 20 */
#define GPIO_OUTCLR_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define GPIO_OUTCLR_PIN20_Msk (0x1UL << GPIO_OUTCLR_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define GPIO_OUTCLR_PIN20_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN20_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN20_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 19 : Pin 19 */
#define GPIO_OUTCLR_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define GPIO_OUTCLR_PIN19_Msk (0x1UL << GPIO_OUTCLR_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define GPIO_OUTCLR_PIN19_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN19_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN19_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 18 : Pin 18 */
#define GPIO_OUTCLR_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define GPIO_OUTCLR_PIN18_Msk (0x1UL << GPIO_OUTCLR_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define GPIO_OUTCLR_PIN18_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN18_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN18_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 17 : Pin 17 */
#define GPIO_OUTCLR_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define GPIO_OUTCLR_PIN17_Msk (0x1UL << GPIO_OUTCLR_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define GPIO_OUTCLR_PIN17_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN17_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN17_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 16 : Pin 16 */
#define GPIO_OUTCLR_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define GPIO_OUTCLR_PIN16_Msk (0x1UL << GPIO_OUTCLR_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define GPIO_OUTCLR_PIN16_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN16_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN16_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 15 : Pin 15 */
#define GPIO_OUTCLR_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define GPIO_OUTCLR_PIN15_Msk (0x1UL << GPIO_OUTCLR_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define GPIO_OUTCLR_PIN15_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN15_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN15_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 14 : Pin 14 */
#define GPIO_OUTCLR_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define GPIO_OUTCLR_PIN14_Msk (0x1UL << GPIO_OUTCLR_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define GPIO_OUTCLR_PIN14_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN14_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN14_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 13 : Pin 13 */
#define GPIO_OUTCLR_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define GPIO_OUTCLR_PIN13_Msk (0x1UL << GPIO_OUTCLR_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define GPIO_OUTCLR_PIN13_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN13_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN13_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 12 : Pin 12 */
#define GPIO_OUTCLR_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define GPIO_OUTCLR_PIN12_Msk (0x1UL << GPIO_OUTCLR_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define GPIO_OUTCLR_PIN12_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN12_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN12_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 11 : Pin 11 */
#define GPIO_OUTCLR_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define GPIO_OUTCLR_PIN11_Msk (0x1UL << GPIO_OUTCLR_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define GPIO_OUTCLR_PIN11_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN11_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN11_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 10 : Pin 10 */
#define GPIO_OUTCLR_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define GPIO_OUTCLR_PIN10_Msk (0x1UL << GPIO_OUTCLR_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define GPIO_OUTCLR_PIN10_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN10_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN10_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 9 : Pin 9 */
#define GPIO_OUTCLR_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define GPIO_OUTCLR_PIN9_Msk (0x1UL << GPIO_OUTCLR_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define GPIO_OUTCLR_PIN9_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN9_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN9_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 8 : Pin 8 */
#define GPIO_OUTCLR_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define GPIO_OUTCLR_PIN8_Msk (0x1UL << GPIO_OUTCLR_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define GPIO_OUTCLR_PIN8_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN8_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN8_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 7 : Pin 7 */
#define GPIO_OUTCLR_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define GPIO_OUTCLR_PIN7_Msk (0x1UL << GPIO_OUTCLR_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define GPIO_OUTCLR_PIN7_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN7_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN7_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 6 : Pin 6 */
#define GPIO_OUTCLR_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define GPIO_OUTCLR_PIN6_Msk (0x1UL << GPIO_OUTCLR_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define GPIO_OUTCLR_PIN6_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN6_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN6_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 5 : Pin 5 */
#define GPIO_OUTCLR_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define GPIO_OUTCLR_PIN5_Msk (0x1UL << GPIO_OUTCLR_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define GPIO_OUTCLR_PIN5_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN5_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN5_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 4 : Pin 4 */
#define GPIO_OUTCLR_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define GPIO_OUTCLR_PIN4_Msk (0x1UL << GPIO_OUTCLR_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define GPIO_OUTCLR_PIN4_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN4_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN4_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 3 : Pin 3 */
#define GPIO_OUTCLR_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define GPIO_OUTCLR_PIN3_Msk (0x1UL << GPIO_OUTCLR_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define GPIO_OUTCLR_PIN3_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN3_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN3_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 2 : Pin 2 */
#define GPIO_OUTCLR_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define GPIO_OUTCLR_PIN2_Msk (0x1UL << GPIO_OUTCLR_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define GPIO_OUTCLR_PIN2_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN2_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN2_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 1 : Pin 1 */
#define GPIO_OUTCLR_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define GPIO_OUTCLR_PIN1_Msk (0x1UL << GPIO_OUTCLR_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define GPIO_OUTCLR_PIN1_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN1_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN1_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Bit 0 : Pin 0 */
#define GPIO_OUTCLR_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define GPIO_OUTCLR_PIN0_Msk (0x1UL << GPIO_OUTCLR_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define GPIO_OUTCLR_PIN0_Low (0UL) /*!< Read: pin driver is low */
#define GPIO_OUTCLR_PIN0_High (1UL) /*!< Read: pin driver is high */
#define GPIO_OUTCLR_PIN0_Clear (1UL) /*!< Write: writing a '1' sets the pin low; writing a '0' has no effect */

/* Register: GPIO_IN */
/* Description: Read GPIO port */

/* Bit 31 : Pin 31 */
#define GPIO_IN_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define GPIO_IN_PIN31_Msk (0x1UL << GPIO_IN_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define GPIO_IN_PIN31_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN31_High (1UL) /*!< Pin input is high */

/* Bit 30 : Pin 30 */
#define GPIO_IN_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define GPIO_IN_PIN30_Msk (0x1UL << GPIO_IN_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define GPIO_IN_PIN30_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN30_High (1UL) /*!< Pin input is high */

/* Bit 29 : Pin 29 */
#define GPIO_IN_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define GPIO_IN_PIN29_Msk (0x1UL << GPIO_IN_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define GPIO_IN_PIN29_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN29_High (1UL) /*!< Pin input is high */

/* Bit 28 : Pin 28 */
#define GPIO_IN_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define GPIO_IN_PIN28_Msk (0x1UL << GPIO_IN_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define GPIO_IN_PIN28_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN28_High (1UL) /*!< Pin input is high */

/* Bit 27 : Pin 27 */
#define GPIO_IN_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define GPIO_IN_PIN27_Msk (0x1UL << GPIO_IN_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define GPIO_IN_PIN27_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN27_High (1UL) /*!< Pin input is high */

/* Bit 26 : Pin 26 */
#define GPIO_IN_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define GPIO_IN_PIN26_Msk (0x1UL << GPIO_IN_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define GPIO_IN_PIN26_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN26_High (1UL) /*!< Pin input is high */

/* Bit 25 : Pin 25 */
#define GPIO_IN_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define GPIO_IN_PIN25_Msk (0x1UL << GPIO_IN_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define GPIO_IN_PIN25_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN25_High (1UL) /*!< Pin input is high */

/* Bit 24 : Pin 24 */
#define GPIO_IN_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define GPIO_IN_PIN24_Msk (0x1UL << GPIO_IN_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define GPIO_IN_PIN24_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN24_High (1UL) /*!< Pin input is high */

/* Bit 23 : Pin 23 */
#define GPIO_IN_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define GPIO_IN_PIN23_Msk (0x1UL << GPIO_IN_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define GPIO_IN_PIN23_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN23_High (1UL) /*!< Pin input is high */

/* Bit 22 : Pin 22 */
#define GPIO_IN_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define GPIO_IN_PIN22_Msk (0x1UL << GPIO_IN_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define GPIO_IN_PIN22_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN22_High (1UL) /*!< Pin input is high */

/* Bit 21 : Pin 21 */
#define GPIO_IN_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define GPIO_IN_PIN21_Msk (0x1UL << GPIO_IN_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define GPIO_IN_PIN21_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN21_High (1UL) /*!< Pin input is high */

/* Bit 20 : Pin 20 */
#define GPIO_IN_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define GPIO_IN_PIN20_Msk (0x1UL << GPIO_IN_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define GPIO_IN_PIN20_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN20_High (1UL) /*!< Pin input is high */

/* Bit 19 : Pin 19 */
#define GPIO_IN_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define GPIO_IN_PIN19_Msk (0x1UL << GPIO_IN_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define GPIO_IN_PIN19_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN19_High (1UL) /*!< Pin input is high */

/* Bit 18 : Pin 18 */
#define GPIO_IN_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define GPIO_IN_PIN18_Msk (0x1UL << GPIO_IN_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define GPIO_IN_PIN18_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN18_High (1UL) /*!< Pin input is high */

/* Bit 17 : Pin 17 */
#define GPIO_IN_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define GPIO_IN_PIN17_Msk (0x1UL << GPIO_IN_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define GPIO_IN_PIN17_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN17_High (1UL) /*!< Pin input is high */

/* Bit 16 : Pin 16 */
#define GPIO_IN_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define GPIO_IN_PIN16_Msk (0x1UL << GPIO_IN_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define GPIO_IN_PIN16_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN16_High (1UL) /*!< Pin input is high */

/* Bit 15 : Pin 15 */
#define GPIO_IN_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define GPIO_IN_PIN15_Msk (0x1UL << GPIO_IN_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define GPIO_IN_PIN15_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN15_High (1UL) /*!< Pin input is high */

/* Bit 14 : Pin 14 */
#define GPIO_IN_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define GPIO_IN_PIN14_Msk (0x1UL << GPIO_IN_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define GPIO_IN_PIN14_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN14_High (1UL) /*!< Pin input is high */

/* Bit 13 : Pin 13 */
#define GPIO_IN_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define GPIO_IN_PIN13_Msk (0x1UL << GPIO_IN_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define GPIO_IN_PIN13_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN13_High (1UL) /*!< Pin input is high */

/* Bit 12 : Pin 12 */
#define GPIO_IN_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define GPIO_IN_PIN12_Msk (0x1UL << GPIO_IN_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define GPIO_IN_PIN12_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN12_High (1UL) /*!< Pin input is high */

/* Bit 11 : Pin 11 */
#define GPIO_IN_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define GPIO_IN_PIN11_Msk (0x1UL << GPIO_IN_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define GPIO_IN_PIN11_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN11_High (1UL) /*!< Pin input is high */

/* Bit 10 : Pin 10 */
#define GPIO_IN_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define GPIO_IN_PIN10_Msk (0x1UL << GPIO_IN_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define GPIO_IN_PIN10_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN10_High (1UL) /*!< Pin input is high */

/* Bit 9 : Pin 9 */
#define GPIO_IN_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define GPIO_IN_PIN9_Msk (0x1UL << GPIO_IN_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define GPIO_IN_PIN9_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN9_High (1UL) /*!< Pin input is high */

/* Bit 8 : Pin 8 */
#define GPIO_IN_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define GPIO_IN_PIN8_Msk (0x1UL << GPIO_IN_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define GPIO_IN_PIN8_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN8_High (1UL) /*!< Pin input is high */

/* Bit 7 : Pin 7 */
#define GPIO_IN_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define GPIO_IN_PIN7_Msk (0x1UL << GPIO_IN_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define GPIO_IN_PIN7_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN7_High (1UL) /*!< Pin input is high */

/* Bit 6 : Pin 6 */
#define GPIO_IN_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define GPIO_IN_PIN6_Msk (0x1UL << GPIO_IN_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define GPIO_IN_PIN6_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN6_High (1UL) /*!< Pin input is high */

/* Bit 5 : Pin 5 */
#define GPIO_IN_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define GPIO_IN_PIN5_Msk (0x1UL << GPIO_IN_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define GPIO_IN_PIN5_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN5_High (1UL) /*!< Pin input is high */

/* Bit 4 : Pin 4 */
#define GPIO_IN_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define GPIO_IN_PIN4_Msk (0x1UL << GPIO_IN_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define GPIO_IN_PIN4_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN4_High (1UL) /*!< Pin input is high */

/* Bit 3 : Pin 3 */
#define GPIO_IN_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define GPIO_IN_PIN3_Msk (0x1UL << GPIO_IN_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define GPIO_IN_PIN3_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN3_High (1UL) /*!< Pin input is high */

/* Bit 2 : Pin 2 */
#define GPIO_IN_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define GPIO_IN_PIN2_Msk (0x1UL << GPIO_IN_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define GPIO_IN_PIN2_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN2_High (1UL) /*!< Pin input is high */

/* Bit 1 : Pin 1 */
#define GPIO_IN_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define GPIO_IN_PIN1_Msk (0x1UL << GPIO_IN_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define GPIO_IN_PIN1_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN1_High (1UL) /*!< Pin input is high */

/* Bit 0 : Pin 0 */
#define GPIO_IN_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define GPIO_IN_PIN0_Msk (0x1UL << GPIO_IN_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define GPIO_IN_PIN0_Low (0UL) /*!< Pin input is low */
#define GPIO_IN_PIN0_High (1UL) /*!< Pin input is high */

/* Register: GPIO_DIR */
/* Description: Direction of GPIO pins */

/* Bit 31 : Pin 31 */
#define GPIO_DIR_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define GPIO_DIR_PIN31_Msk (0x1UL << GPIO_DIR_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define GPIO_DIR_PIN31_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN31_Output (1UL) /*!< Pin set as output */

/* Bit 30 : Pin 30 */
#define GPIO_DIR_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define GPIO_DIR_PIN30_Msk (0x1UL << GPIO_DIR_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define GPIO_DIR_PIN30_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN30_Output (1UL) /*!< Pin set as output */

/* Bit 29 : Pin 29 */
#define GPIO_DIR_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define GPIO_DIR_PIN29_Msk (0x1UL << GPIO_DIR_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define GPIO_DIR_PIN29_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN29_Output (1UL) /*!< Pin set as output */

/* Bit 28 : Pin 28 */
#define GPIO_DIR_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define GPIO_DIR_PIN28_Msk (0x1UL << GPIO_DIR_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define GPIO_DIR_PIN28_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN28_Output (1UL) /*!< Pin set as output */

/* Bit 27 : Pin 27 */
#define GPIO_DIR_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define GPIO_DIR_PIN27_Msk (0x1UL << GPIO_DIR_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define GPIO_DIR_PIN27_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN27_Output (1UL) /*!< Pin set as output */

/* Bit 26 : Pin 26 */
#define GPIO_DIR_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define GPIO_DIR_PIN26_Msk (0x1UL << GPIO_DIR_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define GPIO_DIR_PIN26_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN26_Output (1UL) /*!< Pin set as output */

/* Bit 25 : Pin 25 */
#define GPIO_DIR_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define GPIO_DIR_PIN25_Msk (0x1UL << GPIO_DIR_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define GPIO_DIR_PIN25_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN25_Output (1UL) /*!< Pin set as output */

/* Bit 24 : Pin 24 */
#define GPIO_DIR_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define GPIO_DIR_PIN24_Msk (0x1UL << GPIO_DIR_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define GPIO_DIR_PIN24_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN24_Output (1UL) /*!< Pin set as output */

/* Bit 23 : Pin 23 */
#define GPIO_DIR_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define GPIO_DIR_PIN23_Msk (0x1UL << GPIO_DIR_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define GPIO_DIR_PIN23_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN23_Output (1UL) /*!< Pin set as output */

/* Bit 22 : Pin 22 */
#define GPIO_DIR_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define GPIO_DIR_PIN22_Msk (0x1UL << GPIO_DIR_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define GPIO_DIR_PIN22_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN22_Output (1UL) /*!< Pin set as output */

/* Bit 21 : Pin 21 */
#define GPIO_DIR_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define GPIO_DIR_PIN21_Msk (0x1UL << GPIO_DIR_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define GPIO_DIR_PIN21_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN21_Output (1UL) /*!< Pin set as output */

/* Bit 20 : Pin 20 */
#define GPIO_DIR_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define GPIO_DIR_PIN20_Msk (0x1UL << GPIO_DIR_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define GPIO_DIR_PIN20_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN20_Output (1UL) /*!< Pin set as output */

/* Bit 19 : Pin 19 */
#define GPIO_DIR_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define GPIO_DIR_PIN19_Msk (0x1UL << GPIO_DIR_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define GPIO_DIR_PIN19_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN19_Output (1UL) /*!< Pin set as output */

/* Bit 18 : Pin 18 */
#define GPIO_DIR_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define GPIO_DIR_PIN18_Msk (0x1UL << GPIO_DIR_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define GPIO_DIR_PIN18_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN18_Output (1UL) /*!< Pin set as output */

/* Bit 17 : Pin 17 */
#define GPIO_DIR_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define GPIO_DIR_PIN17_Msk (0x1UL << GPIO_DIR_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define GPIO_DIR_PIN17_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN17_Output (1UL) /*!< Pin set as output */

/* Bit 16 : Pin 16 */
#define GPIO_DIR_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define GPIO_DIR_PIN16_Msk (0x1UL << GPIO_DIR_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define GPIO_DIR_PIN16_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN16_Output (1UL) /*!< Pin set as output */

/* Bit 15 : Pin 15 */
#define GPIO_DIR_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define GPIO_DIR_PIN15_Msk (0x1UL << GPIO_DIR_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define GPIO_DIR_PIN15_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN15_Output (1UL) /*!< Pin set as output */

/* Bit 14 : Pin 14 */
#define GPIO_DIR_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define GPIO_DIR_PIN14_Msk (0x1UL << GPIO_DIR_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define GPIO_DIR_PIN14_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN14_Output (1UL) /*!< Pin set as output */

/* Bit 13 : Pin 13 */
#define GPIO_DIR_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define GPIO_DIR_PIN13_Msk (0x1UL << GPIO_DIR_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define GPIO_DIR_PIN13_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN13_Output (1UL) /*!< Pin set as output */

/* Bit 12 : Pin 12 */
#define GPIO_DIR_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define GPIO_DIR_PIN12_Msk (0x1UL << GPIO_DIR_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define GPIO_DIR_PIN12_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN12_Output (1UL) /*!< Pin set as output */

/* Bit 11 : Pin 11 */
#define GPIO_DIR_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define GPIO_DIR_PIN11_Msk (0x1UL << GPIO_DIR_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define GPIO_DIR_PIN11_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN11_Output (1UL) /*!< Pin set as output */

/* Bit 10 : Pin 10 */
#define GPIO_DIR_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define GPIO_DIR_PIN10_Msk (0x1UL << GPIO_DIR_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define GPIO_DIR_PIN10_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN10_Output (1UL) /*!< Pin set as output */

/* Bit 9 : Pin 9 */
#define GPIO_DIR_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define GPIO_DIR_PIN9_Msk (0x1UL << GPIO_DIR_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define GPIO_DIR_PIN9_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN9_Output (1UL) /*!< Pin set as output */

/* Bit 8 : Pin 8 */
#define GPIO_DIR_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define GPIO_DIR_PIN8_Msk (0x1UL << GPIO_DIR_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define GPIO_DIR_PIN8_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN8_Output (1UL) /*!< Pin set as output */

/* Bit 7 : Pin 7 */
#define GPIO_DIR_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define GPIO_DIR_PIN7_Msk (0x1UL << GPIO_DIR_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define GPIO_DIR_PIN7_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN7_Output (1UL) /*!< Pin set as output */

/* Bit 6 : Pin 6 */
#define GPIO_DIR_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define GPIO_DIR_PIN6_Msk (0x1UL << GPIO_DIR_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define GPIO_DIR_PIN6_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN6_Output (1UL) /*!< Pin set as output */

/* Bit 5 : Pin 5 */
#define GPIO_DIR_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define GPIO_DIR_PIN5_Msk (0x1UL << GPIO_DIR_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define GPIO_DIR_PIN5_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN5_Output (1UL) /*!< Pin set as output */

/* Bit 4 : Pin 4 */
#define GPIO_DIR_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define GPIO_DIR_PIN4_Msk (0x1UL << GPIO_DIR_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define GPIO_DIR_PIN4_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN4_Output (1UL) /*!< Pin set as output */

/* Bit 3 : Pin 3 */
#define GPIO_DIR_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define GPIO_DIR_PIN3_Msk (0x1UL << GPIO_DIR_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define GPIO_DIR_PIN3_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN3_Output (1UL) /*!< Pin set as output */

/* Bit 2 : Pin 2 */
#define GPIO_DIR_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define GPIO_DIR_PIN2_Msk (0x1UL << GPIO_DIR_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define GPIO_DIR_PIN2_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN2_Output (1UL) /*!< Pin set as output */

/* Bit 1 : Pin 1 */
#define GPIO_DIR_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define GPIO_DIR_PIN1_Msk (0x1UL << GPIO_DIR_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define GPIO_DIR_PIN1_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN1_Output (1UL) /*!< Pin set as output */

/* Bit 0 : Pin 0 */
#define GPIO_DIR_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define GPIO_DIR_PIN0_Msk (0x1UL << GPIO_DIR_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define GPIO_DIR_PIN0_Input (0UL) /*!< Pin set as input */
#define GPIO_DIR_PIN0_Output (1UL) /*!< Pin set as output */

/* Register: GPIO_DIRSET */
/* Description: DIR set register */

/* Bit 31 : Set as output pin 31 */
#define GPIO_DIRSET_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define GPIO_DIRSET_PIN31_Msk (0x1UL << GPIO_DIRSET_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define GPIO_DIRSET_PIN31_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN31_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN31_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 30 : Set as output pin 30 */
#define GPIO_DIRSET_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define GPIO_DIRSET_PIN30_Msk (0x1UL << GPIO_DIRSET_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define GPIO_DIRSET_PIN30_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN30_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN30_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 29 : Set as output pin 29 */
#define GPIO_DIRSET_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define GPIO_DIRSET_PIN29_Msk (0x1UL << GPIO_DIRSET_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define GPIO_DIRSET_PIN29_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN29_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN29_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 28 : Set as output pin 28 */
#define GPIO_DIRSET_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define GPIO_DIRSET_PIN28_Msk (0x1UL << GPIO_DIRSET_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define GPIO_DIRSET_PIN28_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN28_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN28_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 27 : Set as output pin 27 */
#define GPIO_DIRSET_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define GPIO_DIRSET_PIN27_Msk (0x1UL << GPIO_DIRSET_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define GPIO_DIRSET_PIN27_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN27_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN27_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 26 : Set as output pin 26 */
#define GPIO_DIRSET_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define GPIO_DIRSET_PIN26_Msk (0x1UL << GPIO_DIRSET_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define GPIO_DIRSET_PIN26_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN26_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN26_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 25 : Set as output pin 25 */
#define GPIO_DIRSET_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define GPIO_DIRSET_PIN25_Msk (0x1UL << GPIO_DIRSET_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define GPIO_DIRSET_PIN25_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN25_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN25_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 24 : Set as output pin 24 */
#define GPIO_DIRSET_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define GPIO_DIRSET_PIN24_Msk (0x1UL << GPIO_DIRSET_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define GPIO_DIRSET_PIN24_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN24_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN24_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 23 : Set as output pin 23 */
#define GPIO_DIRSET_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define GPIO_DIRSET_PIN23_Msk (0x1UL << GPIO_DIRSET_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define GPIO_DIRSET_PIN23_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN23_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN23_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 22 : Set as output pin 22 */
#define GPIO_DIRSET_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define GPIO_DIRSET_PIN22_Msk (0x1UL << GPIO_DIRSET_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define GPIO_DIRSET_PIN22_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN22_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN22_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 21 : Set as output pin 21 */
#define GPIO_DIRSET_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define GPIO_DIRSET_PIN21_Msk (0x1UL << GPIO_DIRSET_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define GPIO_DIRSET_PIN21_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN21_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN21_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 20 : Set as output pin 20 */
#define GPIO_DIRSET_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define GPIO_DIRSET_PIN20_Msk (0x1UL << GPIO_DIRSET_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define GPIO_DIRSET_PIN20_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN20_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN20_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 19 : Set as output pin 19 */
#define GPIO_DIRSET_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define GPIO_DIRSET_PIN19_Msk (0x1UL << GPIO_DIRSET_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define GPIO_DIRSET_PIN19_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN19_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN19_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 18 : Set as output pin 18 */
#define GPIO_DIRSET_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define GPIO_DIRSET_PIN18_Msk (0x1UL << GPIO_DIRSET_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define GPIO_DIRSET_PIN18_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN18_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN18_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 17 : Set as output pin 17 */
#define GPIO_DIRSET_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define GPIO_DIRSET_PIN17_Msk (0x1UL << GPIO_DIRSET_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define GPIO_DIRSET_PIN17_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN17_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN17_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 16 : Set as output pin 16 */
#define GPIO_DIRSET_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define GPIO_DIRSET_PIN16_Msk (0x1UL << GPIO_DIRSET_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define GPIO_DIRSET_PIN16_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN16_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN16_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 15 : Set as output pin 15 */
#define GPIO_DIRSET_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define GPIO_DIRSET_PIN15_Msk (0x1UL << GPIO_DIRSET_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define GPIO_DIRSET_PIN15_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN15_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN15_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 14 : Set as output pin 14 */
#define GPIO_DIRSET_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define GPIO_DIRSET_PIN14_Msk (0x1UL << GPIO_DIRSET_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define GPIO_DIRSET_PIN14_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN14_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN14_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 13 : Set as output pin 13 */
#define GPIO_DIRSET_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define GPIO_DIRSET_PIN13_Msk (0x1UL << GPIO_DIRSET_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define GPIO_DIRSET_PIN13_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN13_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN13_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 12 : Set as output pin 12 */
#define GPIO_DIRSET_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define GPIO_DIRSET_PIN12_Msk (0x1UL << GPIO_DIRSET_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define GPIO_DIRSET_PIN12_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN12_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN12_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 11 : Set as output pin 11 */
#define GPIO_DIRSET_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define GPIO_DIRSET_PIN11_Msk (0x1UL << GPIO_DIRSET_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define GPIO_DIRSET_PIN11_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN11_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN11_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 10 : Set as output pin 10 */
#define GPIO_DIRSET_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define GPIO_DIRSET_PIN10_Msk (0x1UL << GPIO_DIRSET_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define GPIO_DIRSET_PIN10_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN10_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN10_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 9 : Set as output pin 9 */
#define GPIO_DIRSET_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define GPIO_DIRSET_PIN9_Msk (0x1UL << GPIO_DIRSET_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define GPIO_DIRSET_PIN9_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN9_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN9_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 8 : Set as output pin 8 */
#define GPIO_DIRSET_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define GPIO_DIRSET_PIN8_Msk (0x1UL << GPIO_DIRSET_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define GPIO_DIRSET_PIN8_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN8_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN8_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 7 : Set as output pin 7 */
#define GPIO_DIRSET_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define GPIO_DIRSET_PIN7_Msk (0x1UL << GPIO_DIRSET_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define GPIO_DIRSET_PIN7_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN7_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN7_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 6 : Set as output pin 6 */
#define GPIO_DIRSET_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define GPIO_DIRSET_PIN6_Msk (0x1UL << GPIO_DIRSET_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define GPIO_DIRSET_PIN6_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN6_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN6_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 5 : Set as output pin 5 */
#define GPIO_DIRSET_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define GPIO_DIRSET_PIN5_Msk (0x1UL << GPIO_DIRSET_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define GPIO_DIRSET_PIN5_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN5_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN5_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 4 : Set as output pin 4 */
#define GPIO_DIRSET_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define GPIO_DIRSET_PIN4_Msk (0x1UL << GPIO_DIRSET_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define GPIO_DIRSET_PIN4_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN4_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN4_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 3 : Set as output pin 3 */
#define GPIO_DIRSET_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define GPIO_DIRSET_PIN3_Msk (0x1UL << GPIO_DIRSET_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define GPIO_DIRSET_PIN3_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN3_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN3_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 2 : Set as output pin 2 */
#define GPIO_DIRSET_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define GPIO_DIRSET_PIN2_Msk (0x1UL << GPIO_DIRSET_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define GPIO_DIRSET_PIN2_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN2_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN2_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 1 : Set as output pin 1 */
#define GPIO_DIRSET_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define GPIO_DIRSET_PIN1_Msk (0x1UL << GPIO_DIRSET_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define GPIO_DIRSET_PIN1_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN1_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN1_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Bit 0 : Set as output pin 0 */
#define GPIO_DIRSET_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define GPIO_DIRSET_PIN0_Msk (0x1UL << GPIO_DIRSET_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define GPIO_DIRSET_PIN0_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRSET_PIN0_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRSET_PIN0_Set (1UL) /*!< Write: writing a '1' sets pin to output; writing a '0' has no effect */

/* Register: GPIO_DIRCLR */
/* Description: DIR clear register */

/* Bit 31 : Set as input pin 31 */
#define GPIO_DIRCLR_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define GPIO_DIRCLR_PIN31_Msk (0x1UL << GPIO_DIRCLR_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define GPIO_DIRCLR_PIN31_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN31_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN31_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 30 : Set as input pin 30 */
#define GPIO_DIRCLR_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define GPIO_DIRCLR_PIN30_Msk (0x1UL << GPIO_DIRCLR_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define GPIO_DIRCLR_PIN30_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN30_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN30_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 29 : Set as input pin 29 */
#define GPIO_DIRCLR_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define GPIO_DIRCLR_PIN29_Msk (0x1UL << GPIO_DIRCLR_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define GPIO_DIRCLR_PIN29_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN29_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN29_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 28 : Set as input pin 28 */
#define GPIO_DIRCLR_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define GPIO_DIRCLR_PIN28_Msk (0x1UL << GPIO_DIRCLR_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define GPIO_DIRCLR_PIN28_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN28_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN28_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 27 : Set as input pin 27 */
#define GPIO_DIRCLR_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define GPIO_DIRCLR_PIN27_Msk (0x1UL << GPIO_DIRCLR_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define GPIO_DIRCLR_PIN27_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN27_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN27_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 26 : Set as input pin 26 */
#define GPIO_DIRCLR_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define GPIO_DIRCLR_PIN26_Msk (0x1UL << GPIO_DIRCLR_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define GPIO_DIRCLR_PIN26_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN26_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN26_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 25 : Set as input pin 25 */
#define GPIO_DIRCLR_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define GPIO_DIRCLR_PIN25_Msk (0x1UL << GPIO_DIRCLR_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define GPIO_DIRCLR_PIN25_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN25_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN25_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 24 : Set as input pin 24 */
#define GPIO_DIRCLR_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define GPIO_DIRCLR_PIN24_Msk (0x1UL << GPIO_DIRCLR_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define GPIO_DIRCLR_PIN24_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN24_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN24_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 23 : Set as input pin 23 */
#define GPIO_DIRCLR_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define GPIO_DIRCLR_PIN23_Msk (0x1UL << GPIO_DIRCLR_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define GPIO_DIRCLR_PIN23_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN23_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN23_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 22 : Set as input pin 22 */
#define GPIO_DIRCLR_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define GPIO_DIRCLR_PIN22_Msk (0x1UL << GPIO_DIRCLR_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define GPIO_DIRCLR_PIN22_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN22_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN22_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 21 : Set as input pin 21 */
#define GPIO_DIRCLR_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define GPIO_DIRCLR_PIN21_Msk (0x1UL << GPIO_DIRCLR_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define GPIO_DIRCLR_PIN21_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN21_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN21_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 20 : Set as input pin 20 */
#define GPIO_DIRCLR_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define GPIO_DIRCLR_PIN20_Msk (0x1UL << GPIO_DIRCLR_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define GPIO_DIRCLR_PIN20_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN20_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN20_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 19 : Set as input pin 19 */
#define GPIO_DIRCLR_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define GPIO_DIRCLR_PIN19_Msk (0x1UL << GPIO_DIRCLR_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define GPIO_DIRCLR_PIN19_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN19_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN19_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 18 : Set as input pin 18 */
#define GPIO_DIRCLR_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define GPIO_DIRCLR_PIN18_Msk (0x1UL << GPIO_DIRCLR_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define GPIO_DIRCLR_PIN18_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN18_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN18_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 17 : Set as input pin 17 */
#define GPIO_DIRCLR_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define GPIO_DIRCLR_PIN17_Msk (0x1UL << GPIO_DIRCLR_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define GPIO_DIRCLR_PIN17_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN17_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN17_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 16 : Set as input pin 16 */
#define GPIO_DIRCLR_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define GPIO_DIRCLR_PIN16_Msk (0x1UL << GPIO_DIRCLR_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define GPIO_DIRCLR_PIN16_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN16_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN16_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 15 : Set as input pin 15 */
#define GPIO_DIRCLR_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define GPIO_DIRCLR_PIN15_Msk (0x1UL << GPIO_DIRCLR_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define GPIO_DIRCLR_PIN15_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN15_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN15_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 14 : Set as input pin 14 */
#define GPIO_DIRCLR_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define GPIO_DIRCLR_PIN14_Msk (0x1UL << GPIO_DIRCLR_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define GPIO_DIRCLR_PIN14_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN14_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN14_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 13 : Set as input pin 13 */
#define GPIO_DIRCLR_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define GPIO_DIRCLR_PIN13_Msk (0x1UL << GPIO_DIRCLR_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define GPIO_DIRCLR_PIN13_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN13_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN13_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 12 : Set as input pin 12 */
#define GPIO_DIRCLR_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define GPIO_DIRCLR_PIN12_Msk (0x1UL << GPIO_DIRCLR_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define GPIO_DIRCLR_PIN12_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN12_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN12_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 11 : Set as input pin 11 */
#define GPIO_DIRCLR_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define GPIO_DIRCLR_PIN11_Msk (0x1UL << GPIO_DIRCLR_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define GPIO_DIRCLR_PIN11_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN11_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN11_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 10 : Set as input pin 10 */
#define GPIO_DIRCLR_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define GPIO_DIRCLR_PIN10_Msk (0x1UL << GPIO_DIRCLR_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define GPIO_DIRCLR_PIN10_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN10_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN10_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 9 : Set as input pin 9 */
#define GPIO_DIRCLR_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define GPIO_DIRCLR_PIN9_Msk (0x1UL << GPIO_DIRCLR_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define GPIO_DIRCLR_PIN9_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN9_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN9_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 8 : Set as input pin 8 */
#define GPIO_DIRCLR_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define GPIO_DIRCLR_PIN8_Msk (0x1UL << GPIO_DIRCLR_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define GPIO_DIRCLR_PIN8_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN8_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN8_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 7 : Set as input pin 7 */
#define GPIO_DIRCLR_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define GPIO_DIRCLR_PIN7_Msk (0x1UL << GPIO_DIRCLR_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define GPIO_DIRCLR_PIN7_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN7_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN7_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 6 : Set as input pin 6 */
#define GPIO_DIRCLR_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define GPIO_DIRCLR_PIN6_Msk (0x1UL << GPIO_DIRCLR_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define GPIO_DIRCLR_PIN6_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN6_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN6_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 5 : Set as input pin 5 */
#define GPIO_DIRCLR_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define GPIO_DIRCLR_PIN5_Msk (0x1UL << GPIO_DIRCLR_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define GPIO_DIRCLR_PIN5_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN5_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN5_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 4 : Set as input pin 4 */
#define GPIO_DIRCLR_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define GPIO_DIRCLR_PIN4_Msk (0x1UL << GPIO_DIRCLR_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define GPIO_DIRCLR_PIN4_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN4_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN4_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 3 : Set as input pin 3 */
#define GPIO_DIRCLR_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define GPIO_DIRCLR_PIN3_Msk (0x1UL << GPIO_DIRCLR_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define GPIO_DIRCLR_PIN3_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN3_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN3_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 2 : Set as input pin 2 */
#define GPIO_DIRCLR_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define GPIO_DIRCLR_PIN2_Msk (0x1UL << GPIO_DIRCLR_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define GPIO_DIRCLR_PIN2_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN2_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN2_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 1 : Set as input pin 1 */
#define GPIO_DIRCLR_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define GPIO_DIRCLR_PIN1_Msk (0x1UL << GPIO_DIRCLR_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define GPIO_DIRCLR_PIN1_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN1_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN1_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Bit 0 : Set as input pin 0 */
#define GPIO_DIRCLR_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define GPIO_DIRCLR_PIN0_Msk (0x1UL << GPIO_DIRCLR_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define GPIO_DIRCLR_PIN0_Input (0UL) /*!< Read: pin set as input */
#define GPIO_DIRCLR_PIN0_Output (1UL) /*!< Read: pin set as output */
#define GPIO_DIRCLR_PIN0_Clear (1UL) /*!< Write: writing a '1' sets pin to input; writing a '0' has no effect */

/* Register: GPIO_LATCH */
/* Description: Latch register indicating what GPIO pins that have met the criteria set in the PIN_CNF[n].SENSE registers */

/* Bit 31 : Status on whether PIN31 has met criteria set in PIN_CNF31.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define GPIO_LATCH_PIN31_Msk (0x1UL << GPIO_LATCH_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define GPIO_LATCH_PIN31_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN31_Latched (1UL) /*!< Criteria has been met */

/* Bit 30 : Status on whether PIN30 has met criteria set in PIN_CNF30.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define GPIO_LATCH_PIN30_Msk (0x1UL << GPIO_LATCH_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define GPIO_LATCH_PIN30_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN30_Latched (1UL) /*!< Criteria has been met */

/* Bit 29 : Status on whether PIN29 has met criteria set in PIN_CNF29.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define GPIO_LATCH_PIN29_Msk (0x1UL << GPIO_LATCH_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define GPIO_LATCH_PIN29_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN29_Latched (1UL) /*!< Criteria has been met */

/* Bit 28 : Status on whether PIN28 has met criteria set in PIN_CNF28.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define GPIO_LATCH_PIN28_Msk (0x1UL << GPIO_LATCH_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define GPIO_LATCH_PIN28_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN28_Latched (1UL) /*!< Criteria has been met */

/* Bit 27 : Status on whether PIN27 has met criteria set in PIN_CNF27.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define GPIO_LATCH_PIN27_Msk (0x1UL << GPIO_LATCH_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define GPIO_LATCH_PIN27_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN27_Latched (1UL) /*!< Criteria has been met */

/* Bit 26 : Status on whether PIN26 has met criteria set in PIN_CNF26.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define GPIO_LATCH_PIN26_Msk (0x1UL << GPIO_LATCH_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define GPIO_LATCH_PIN26_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN26_Latched (1UL) /*!< Criteria has been met */

/* Bit 25 : Status on whether PIN25 has met criteria set in PIN_CNF25.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define GPIO_LATCH_PIN25_Msk (0x1UL << GPIO_LATCH_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define GPIO_LATCH_PIN25_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN25_Latched (1UL) /*!< Criteria has been met */

/* Bit 24 : Status on whether PIN24 has met criteria set in PIN_CNF24.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define GPIO_LATCH_PIN24_Msk (0x1UL << GPIO_LATCH_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define GPIO_LATCH_PIN24_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN24_Latched (1UL) /*!< Criteria has been met */

/* Bit 23 : Status on whether PIN23 has met criteria set in PIN_CNF23.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define GPIO_LATCH_PIN23_Msk (0x1UL << GPIO_LATCH_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define GPIO_LATCH_PIN23_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN23_Latched (1UL) /*!< Criteria has been met */

/* Bit 22 : Status on whether PIN22 has met criteria set in PIN_CNF22.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define GPIO_LATCH_PIN22_Msk (0x1UL << GPIO_LATCH_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define GPIO_LATCH_PIN22_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN22_Latched (1UL) /*!< Criteria has been met */

/* Bit 21 : Status on whether PIN21 has met criteria set in PIN_CNF21.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define GPIO_LATCH_PIN21_Msk (0x1UL << GPIO_LATCH_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define GPIO_LATCH_PIN21_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN21_Latched (1UL) /*!< Criteria has been met */

/* Bit 20 : Status on whether PIN20 has met criteria set in PIN_CNF20.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define GPIO_LATCH_PIN20_Msk (0x1UL << GPIO_LATCH_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define GPIO_LATCH_PIN20_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN20_Latched (1UL) /*!< Criteria has been met */

/* Bit 19 : Status on whether PIN19 has met criteria set in PIN_CNF19.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define GPIO_LATCH_PIN19_Msk (0x1UL << GPIO_LATCH_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define GPIO_LATCH_PIN19_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN19_Latched (1UL) /*!< Criteria has been met */

/* Bit 18 : Status on whether PIN18 has met criteria set in PIN_CNF18.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define GPIO_LATCH_PIN18_Msk (0x1UL << GPIO_LATCH_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define GPIO_LATCH_PIN18_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN18_Latched (1UL) /*!< Criteria has been met */

/* Bit 17 : Status on whether PIN17 has met criteria set in PIN_CNF17.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define GPIO_LATCH_PIN17_Msk (0x1UL << GPIO_LATCH_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define GPIO_LATCH_PIN17_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN17_Latched (1UL) /*!< Criteria has been met */

/* Bit 16 : Status on whether PIN16 has met criteria set in PIN_CNF16.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define GPIO_LATCH_PIN16_Msk (0x1UL << GPIO_LATCH_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define GPIO_LATCH_PIN16_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN16_Latched (1UL) /*!< Criteria has been met */

/* Bit 15 : Status on whether PIN15 has met criteria set in PIN_CNF15.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define GPIO_LATCH_PIN15_Msk (0x1UL << GPIO_LATCH_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define GPIO_LATCH_PIN15_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN15_Latched (1UL) /*!< Criteria has been met */

/* Bit 14 : Status on whether PIN14 has met criteria set in PIN_CNF14.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define GPIO_LATCH_PIN14_Msk (0x1UL << GPIO_LATCH_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define GPIO_LATCH_PIN14_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN14_Latched (1UL) /*!< Criteria has been met */

/* Bit 13 : Status on whether PIN13 has met criteria set in PIN_CNF13.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define GPIO_LATCH_PIN13_Msk (0x1UL << GPIO_LATCH_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define GPIO_LATCH_PIN13_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN13_Latched (1UL) /*!< Criteria has been met */

/* Bit 12 : Status on whether PIN12 has met criteria set in PIN_CNF12.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define GPIO_LATCH_PIN12_Msk (0x1UL << GPIO_LATCH_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define GPIO_LATCH_PIN12_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN12_Latched (1UL) /*!< Criteria has been met */

/* Bit 11 : Status on whether PIN11 has met criteria set in PIN_CNF11.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define GPIO_LATCH_PIN11_Msk (0x1UL << GPIO_LATCH_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define GPIO_LATCH_PIN11_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN11_Latched (1UL) /*!< Criteria has been met */

/* Bit 10 : Status on whether PIN10 has met criteria set in PIN_CNF10.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define GPIO_LATCH_PIN10_Msk (0x1UL << GPIO_LATCH_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define GPIO_LATCH_PIN10_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN10_Latched (1UL) /*!< Criteria has been met */

/* Bit 9 : Status on whether PIN9 has met criteria set in PIN_CNF9.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define GPIO_LATCH_PIN9_Msk (0x1UL << GPIO_LATCH_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define GPIO_LATCH_PIN9_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN9_Latched (1UL) /*!< Criteria has been met */

/* Bit 8 : Status on whether PIN8 has met criteria set in PIN_CNF8.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define GPIO_LATCH_PIN8_Msk (0x1UL << GPIO_LATCH_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define GPIO_LATCH_PIN8_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN8_Latched (1UL) /*!< Criteria has been met */

/* Bit 7 : Status on whether PIN7 has met criteria set in PIN_CNF7.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define GPIO_LATCH_PIN7_Msk (0x1UL << GPIO_LATCH_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define GPIO_LATCH_PIN7_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN7_Latched (1UL) /*!< Criteria has been met */

/* Bit 6 : Status on whether PIN6 has met criteria set in PIN_CNF6.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define GPIO_LATCH_PIN6_Msk (0x1UL << GPIO_LATCH_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define GPIO_LATCH_PIN6_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN6_Latched (1UL) /*!< Criteria has been met */

/* Bit 5 : Status on whether PIN5 has met criteria set in PIN_CNF5.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define GPIO_LATCH_PIN5_Msk (0x1UL << GPIO_LATCH_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define GPIO_LATCH_PIN5_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN5_Latched (1UL) /*!< Criteria has been met */

/* Bit 4 : Status on whether PIN4 has met criteria set in PIN_CNF4.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define GPIO_LATCH_PIN4_Msk (0x1UL << GPIO_LATCH_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define GPIO_LATCH_PIN4_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN4_Latched (1UL) /*!< Criteria has been met */

/* Bit 3 : Status on whether PIN3 has met criteria set in PIN_CNF3.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define GPIO_LATCH_PIN3_Msk (0x1UL << GPIO_LATCH_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define GPIO_LATCH_PIN3_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN3_Latched (1UL) /*!< Criteria has been met */

/* Bit 2 : Status on whether PIN2 has met criteria set in PIN_CNF2.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define GPIO_LATCH_PIN2_Msk (0x1UL << GPIO_LATCH_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define GPIO_LATCH_PIN2_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN2_Latched (1UL) /*!< Criteria has been met */

/* Bit 1 : Status on whether PIN1 has met criteria set in PIN_CNF1.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define GPIO_LATCH_PIN1_Msk (0x1UL << GPIO_LATCH_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define GPIO_LATCH_PIN1_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN1_Latched (1UL) /*!< Criteria has been met */

/* Bit 0 : Status on whether PIN0 has met criteria set in PIN_CNF0.SENSE register. Write '1' to clear. */
#define GPIO_LATCH_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define GPIO_LATCH_PIN0_Msk (0x1UL << GPIO_LATCH_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define GPIO_LATCH_PIN0_NotLatched (0UL) /*!< Criteria has not been met */
#define GPIO_LATCH_PIN0_Latched (1UL) /*!< Criteria has been met */

/* Register: GPIO_DETECTMODE */
/* Description: Select between default DETECT signal behavior and LDETECT mode (For non-secure pin only) */

/* Bit 0 : Select between default DETECT signal behavior and LDETECT mode */
#define GPIO_DETECTMODE_DETECTMODE_Pos (0UL) /*!< Position of DETECTMODE field. */
#define GPIO_DETECTMODE_DETECTMODE_Msk (0x1UL << GPIO_DETECTMODE_DETECTMODE_Pos) /*!< Bit mask of DETECTMODE field. */
#define GPIO_DETECTMODE_DETECTMODE_Default (0UL) /*!< DETECT directly connected to PIN DETECT signals */
#define GPIO_DETECTMODE_DETECTMODE_LDETECT (1UL) /*!< Use the latched LDETECT behavior */

/* Register: GPIO_DETECTMODE_SEC */
/* Description: Select between default DETECT signal behavior and LDETECT mode (For secure pin only) */

/* Bit 0 : Select between default DETECT signal behavior and LDETECT mode */
#define GPIO_DETECTMODE_SEC_DETECTMODE_Pos (0UL) /*!< Position of DETECTMODE field. */
#define GPIO_DETECTMODE_SEC_DETECTMODE_Msk (0x1UL << GPIO_DETECTMODE_SEC_DETECTMODE_Pos) /*!< Bit mask of DETECTMODE field. */
#define GPIO_DETECTMODE_SEC_DETECTMODE_Default (0UL) /*!< DETECT directly connected to PIN DETECT signals */
#define GPIO_DETECTMODE_SEC_DETECTMODE_LDETECT (1UL) /*!< Use the latched LDETECT behavior */

/* Register: GPIO_PIN_OUT */
/* Description: Description cluster: Pin n direct access output register */

/* Bit 0 : Direct access */
#define GPIO_PIN_OUT_OUT_Pos (0UL) /*!< Position of OUT field. */
#define GPIO_PIN_OUT_OUT_Msk (0x1UL << GPIO_PIN_OUT_OUT_Pos) /*!< Bit mask of OUT field. */

/* Register: GPIO_PIN_IN */
/* Description: Description cluster: Pin n direct access input register */

/* Bit 0 : Direct access */
#define GPIO_PIN_IN_IN_Pos (0UL) /*!< Position of IN field. */
#define GPIO_PIN_IN_IN_Msk (0x1UL << GPIO_PIN_IN_IN_Pos) /*!< Bit mask of IN field. */

/* Register: GPIO_PIN_CNF */
/* Description: Description collection: Configuration of GPIO pins */

/* Bits 30..28 : Select which MCU/Subsystem controls this pin Note: this field is only accessible from secure code. */
#define GPIO_PIN_CNF_MCUSEL_Pos (28UL) /*!< Position of MCUSEL field. */
#define GPIO_PIN_CNF_MCUSEL_Msk (0x7UL << GPIO_PIN_CNF_MCUSEL_Pos) /*!< Bit mask of MCUSEL field. */
#define GPIO_PIN_CNF_MCUSEL_AppMCU (0x0UL) /*!< Application MCU */
#define GPIO_PIN_CNF_MCUSEL_NetworkMCU (0x1UL) /*!< Network MCU */
#define GPIO_PIN_CNF_MCUSEL_Peripheral (0x3UL) /*!< Peripheral with dedicated pins */
#define GPIO_PIN_CNF_MCUSEL_TND (0x7UL) /*!< Trace and Debug Subsystem */

/* Bit 24 : Override of analog mux enable signals for pads with analog functionality */
#define GPIO_PIN_CNF_ANAEN_Pos (24UL) /*!< Position of ANAEN field. */
#define GPIO_PIN_CNF_ANAEN_Msk (0x1UL << GPIO_PIN_CNF_ANAEN_Pos) /*!< Bit mask of ANAEN field. */
#define GPIO_PIN_CNF_ANAEN_Disabled (0x0UL) /*!< Override of analog mux is disabled */
#define GPIO_PIN_CNF_ANAEN_AE0 (0x1UL) /*!< Enable analog signal 0 (analog test bus) */

/* Bits 17..16 : Pin sensing mechanism */
#define GPIO_PIN_CNF_SENSE_Pos (16UL) /*!< Position of SENSE field. */
#define GPIO_PIN_CNF_SENSE_Msk (0x3UL << GPIO_PIN_CNF_SENSE_Pos) /*!< Bit mask of SENSE field. */
#define GPIO_PIN_CNF_SENSE_Disabled (0UL) /*!< Disabled */
#define GPIO_PIN_CNF_SENSE_High (2UL) /*!< Sense for high level */
#define GPIO_PIN_CNF_SENSE_Low (3UL) /*!< Sense for low level */

/* Bits 11..8 : Drive configuration */
#define GPIO_PIN_CNF_DRIVE_Pos (8UL) /*!< Position of DRIVE field. */
#define GPIO_PIN_CNF_DRIVE_Msk (0xFUL << GPIO_PIN_CNF_DRIVE_Pos) /*!< Bit mask of DRIVE field. */
#define GPIO_PIN_CNF_DRIVE_S0S1 (0UL) /*!< Standard '0', standard '1' */
#define GPIO_PIN_CNF_DRIVE_H0S1 (1UL) /*!< High drive '0', standard '1' */
#define GPIO_PIN_CNF_DRIVE_S0H1 (2UL) /*!< Standard '0', high drive '1' */
#define GPIO_PIN_CNF_DRIVE_H0H1 (3UL) /*!< High drive '0', high 'drive '1'' */
#define GPIO_PIN_CNF_DRIVE_D0S1 (4UL) /*!< Disconnect '0', standard '1' (normally used for wired-or connections) */
#define GPIO_PIN_CNF_DRIVE_D0H1 (5UL) /*!< Disconnect '0', high drive '1' (normally used for wired-or connections) */
#define GPIO_PIN_CNF_DRIVE_S0D1 (6UL) /*!< Standard '0', disconnect '1' (normally used for wired-and connections) */
#define GPIO_PIN_CNF_DRIVE_H0D1 (7UL) /*!< High drive '0', disconnect '1' (normally used for wired-and connections) */
#define GPIO_PIN_CNF_DRIVE_E0E1 (11UL) /*!< Extra high drive '0', extra high drive '1' */

/* Bits 3..2 : Pull configuration */
#define GPIO_PIN_CNF_PULL_Pos (2UL) /*!< Position of PULL field. */
#define GPIO_PIN_CNF_PULL_Msk (0x3UL << GPIO_PIN_CNF_PULL_Pos) /*!< Bit mask of PULL field. */
#define GPIO_PIN_CNF_PULL_Disabled (0UL) /*!< No pull */
#define GPIO_PIN_CNF_PULL_Pulldown (1UL) /*!< Pull down on pin */
#define GPIO_PIN_CNF_PULL_Pullup (3UL) /*!< Pull up on pin */

/* Bit 1 : Connect or disconnect input buffer */
#define GPIO_PIN_CNF_INPUT_Pos (1UL) /*!< Position of INPUT field. */
#define GPIO_PIN_CNF_INPUT_Msk (0x1UL << GPIO_PIN_CNF_INPUT_Pos) /*!< Bit mask of INPUT field. */
#define GPIO_PIN_CNF_INPUT_Connect (0UL) /*!< Connect input buffer */
#define GPIO_PIN_CNF_INPUT_Disconnect (1UL) /*!< Disconnect input buffer */

/* Bit 0 : Pin direction. Same physical register as DIR register */
#define GPIO_PIN_CNF_DIR_Pos (0UL) /*!< Position of DIR field. */
#define GPIO_PIN_CNF_DIR_Msk (0x1UL << GPIO_PIN_CNF_DIR_Pos) /*!< Bit mask of DIR field. */
#define GPIO_PIN_CNF_DIR_Input (0UL) /*!< Configure pin as an input pin */
#define GPIO_PIN_CNF_DIR_Output (1UL) /*!< Configure pin as an output pin */


/* Peripheral: PAMLI */
/* Description: Peripheral AHB Multi-Layer Interface 0 */

/* Register: PAMLI_DMAMODESET */
/* Description: Set all bits in DMAMODE register */

/* Bit 0 :   */
#define PAMLI_DMAMODESET_DMAMODESET_Pos (0UL) /*!< Position of DMAMODESET field. */
#define PAMLI_DMAMODESET_DMAMODESET_Msk (0x1UL << PAMLI_DMAMODESET_DMAMODESET_Pos) /*!< Bit mask of DMAMODESET field. */
#define PAMLI_DMAMODESET_DMAMODESET_NoChange (0UL) /*!< Writing a zero has no effect */
#define PAMLI_DMAMODESET_DMAMODESET_SetAllBits (1UL) /*!< Writing a one sets all bits in DMAMODE register */

/* Register: PAMLI_DMAMODECLEAR */
/* Description: Clear all bits in DMAMODE register */

/* Bit 0 :   */
#define PAMLI_DMAMODECLEAR_DMAMODECLEAR_Pos (0UL) /*!< Position of DMAMODECLEAR field. */
#define PAMLI_DMAMODECLEAR_DMAMODECLEAR_Msk (0x1UL << PAMLI_DMAMODECLEAR_DMAMODECLEAR_Pos) /*!< Bit mask of DMAMODECLEAR field. */
#define PAMLI_DMAMODECLEAR_DMAMODECLEAR_NoChange (0UL) /*!< Writing a zero has no effect */
#define PAMLI_DMAMODECLEAR_DMAMODECLEAR_ClearAllBits (1UL) /*!< Writing a one clears all bits in DMAMODE register */

/* Register: PAMLI_DMAMODE */
/* Description: DMA mode configuration */

/* Bit 1 : DMA mode for SPIM/SPIS, TWIM/TWIS, UARTE, NFCT, PDM, I2S, SAADC, and PWM. */
#define PAMLI_DMAMODE_GROUP1_Pos (1UL) /*!< Position of GROUP1 field. */
#define PAMLI_DMAMODE_GROUP1_Msk (0x1UL << PAMLI_DMAMODE_GROUP1_Pos) /*!< Bit mask of GROUP1 field. */
#define PAMLI_DMAMODE_GROUP1_LowPower (0UL) /*!< Low power DMA mode */
#define PAMLI_DMAMODE_GROUP1_LowLatency (1UL) /*!< Low latency DMA mode */

/* Bit 0 : DMA mode for SPIM4 */
#define PAMLI_DMAMODE_GROUP0_Pos (0UL) /*!< Position of GROUP0 field. */
#define PAMLI_DMAMODE_GROUP0_Msk (0x1UL << PAMLI_DMAMODE_GROUP0_Pos) /*!< Bit mask of GROUP0 field. */
#define PAMLI_DMAMODE_GROUP0_LowPower (0UL) /*!< Low power DMA mode */
#define PAMLI_DMAMODE_GROUP0_LowLatency (1UL) /*!< Low latency DMA mode */

/* Register: PAMLI_RAMPRI_SERIAL0 */
/* Description: AHB bus master priority register for SPIM0, SPIS0, TWIM0, TWIS0 and UARTE0 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Msk (0xFUL << PAMLI_RAMPRI_SERIAL0_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Msk (0xFUL << PAMLI_RAMPRI_SERIAL0_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Msk (0xFUL << PAMLI_RAMPRI_SERIAL0_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Msk (0xFUL << PAMLI_RAMPRI_SERIAL0_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Msk (0xFUL << PAMLI_RAMPRI_SERIAL0_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Msk (0xFUL << PAMLI_RAMPRI_SERIAL0_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Msk (0xFUL << PAMLI_RAMPRI_SERIAL0_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Msk (0xFUL << PAMLI_RAMPRI_SERIAL0_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL0_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_SERIAL1 */
/* Description: AHB bus master priority register for SPIM1, SPIS1, TWIM1, TWIS1 and UARTE1 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Msk (0xFUL << PAMLI_RAMPRI_SERIAL1_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Msk (0xFUL << PAMLI_RAMPRI_SERIAL1_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Msk (0xFUL << PAMLI_RAMPRI_SERIAL1_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Msk (0xFUL << PAMLI_RAMPRI_SERIAL1_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Msk (0xFUL << PAMLI_RAMPRI_SERIAL1_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Msk (0xFUL << PAMLI_RAMPRI_SERIAL1_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Msk (0xFUL << PAMLI_RAMPRI_SERIAL1_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Msk (0xFUL << PAMLI_RAMPRI_SERIAL1_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL1_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_SERIAL2 */
/* Description: AHB bus master priority register for SPIM2, SPIS2, TWIM2, TWIS2 and UARTE2 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Msk (0xFUL << PAMLI_RAMPRI_SERIAL2_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Msk (0xFUL << PAMLI_RAMPRI_SERIAL2_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Msk (0xFUL << PAMLI_RAMPRI_SERIAL2_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Msk (0xFUL << PAMLI_RAMPRI_SERIAL2_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Msk (0xFUL << PAMLI_RAMPRI_SERIAL2_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Msk (0xFUL << PAMLI_RAMPRI_SERIAL2_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Msk (0xFUL << PAMLI_RAMPRI_SERIAL2_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Msk (0xFUL << PAMLI_RAMPRI_SERIAL2_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL2_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_SERIAL3 */
/* Description: AHB bus master priority register for SPIM3, SPIS3, TWIM3, TWIS3 and UARTE3 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Msk (0xFUL << PAMLI_RAMPRI_SERIAL3_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Msk (0xFUL << PAMLI_RAMPRI_SERIAL3_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Msk (0xFUL << PAMLI_RAMPRI_SERIAL3_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Msk (0xFUL << PAMLI_RAMPRI_SERIAL3_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Msk (0xFUL << PAMLI_RAMPRI_SERIAL3_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Msk (0xFUL << PAMLI_RAMPRI_SERIAL3_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Msk (0xFUL << PAMLI_RAMPRI_SERIAL3_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Msk (0xFUL << PAMLI_RAMPRI_SERIAL3_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SERIAL3_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_I2S0 */
/* Description: AHB bus master priority register for I2S0 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_I2S0_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_I2S0_RAM7_Msk (0xFUL << PAMLI_RAMPRI_I2S0_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_I2S0_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_I2S0_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_I2S0_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_I2S0_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_I2S0_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_I2S0_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_I2S0_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_I2S0_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_I2S0_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_I2S0_RAM6_Msk (0xFUL << PAMLI_RAMPRI_I2S0_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_I2S0_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_I2S0_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_I2S0_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_I2S0_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_I2S0_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_I2S0_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_I2S0_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_I2S0_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_I2S0_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_I2S0_RAM5_Msk (0xFUL << PAMLI_RAMPRI_I2S0_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_I2S0_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_I2S0_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_I2S0_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_I2S0_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_I2S0_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_I2S0_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_I2S0_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_I2S0_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_I2S0_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_I2S0_RAM4_Msk (0xFUL << PAMLI_RAMPRI_I2S0_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_I2S0_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_I2S0_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_I2S0_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_I2S0_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_I2S0_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_I2S0_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_I2S0_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_I2S0_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_I2S0_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_I2S0_RAM3_Msk (0xFUL << PAMLI_RAMPRI_I2S0_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_I2S0_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_I2S0_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_I2S0_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_I2S0_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_I2S0_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_I2S0_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_I2S0_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_I2S0_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_I2S0_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_I2S0_RAM2_Msk (0xFUL << PAMLI_RAMPRI_I2S0_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_I2S0_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_I2S0_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_I2S0_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_I2S0_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_I2S0_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_I2S0_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_I2S0_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_I2S0_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_I2S0_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_I2S0_RAM1_Msk (0xFUL << PAMLI_RAMPRI_I2S0_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_I2S0_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_I2S0_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_I2S0_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_I2S0_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_I2S0_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_I2S0_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_I2S0_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_I2S0_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_I2S0_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_I2S0_RAM0_Msk (0xFUL << PAMLI_RAMPRI_I2S0_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_I2S0_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_I2S0_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_I2S0_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_I2S0_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_I2S0_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_I2S0_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_I2S0_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_I2S0_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_PDM */
/* Description: AHB bus master priority register for PDM */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_PDM_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_PDM_RAM7_Msk (0xFUL << PAMLI_RAMPRI_PDM_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_PDM_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PDM_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PDM_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PDM_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PDM_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PDM_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PDM_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PDM_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_PDM_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_PDM_RAM6_Msk (0xFUL << PAMLI_RAMPRI_PDM_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_PDM_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PDM_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PDM_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PDM_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PDM_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PDM_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PDM_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PDM_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_PDM_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_PDM_RAM5_Msk (0xFUL << PAMLI_RAMPRI_PDM_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_PDM_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PDM_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PDM_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PDM_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PDM_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PDM_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PDM_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PDM_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_PDM_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_PDM_RAM4_Msk (0xFUL << PAMLI_RAMPRI_PDM_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_PDM_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PDM_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PDM_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PDM_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PDM_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PDM_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PDM_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PDM_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_PDM_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_PDM_RAM3_Msk (0xFUL << PAMLI_RAMPRI_PDM_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_PDM_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PDM_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PDM_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PDM_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PDM_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PDM_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PDM_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PDM_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_PDM_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_PDM_RAM2_Msk (0xFUL << PAMLI_RAMPRI_PDM_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_PDM_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PDM_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PDM_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PDM_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PDM_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PDM_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PDM_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PDM_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_PDM_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_PDM_RAM1_Msk (0xFUL << PAMLI_RAMPRI_PDM_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_PDM_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PDM_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PDM_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PDM_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PDM_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PDM_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PDM_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PDM_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_PDM_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_PDM_RAM0_Msk (0xFUL << PAMLI_RAMPRI_PDM_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_PDM_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PDM_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PDM_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PDM_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PDM_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PDM_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PDM_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PDM_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_PWM0 */
/* Description: AHB bus master priority register for PWM0 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_PWM0_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_PWM0_RAM7_Msk (0xFUL << PAMLI_RAMPRI_PWM0_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_PWM0_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM0_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM0_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM0_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM0_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM0_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM0_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM0_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_PWM0_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_PWM0_RAM6_Msk (0xFUL << PAMLI_RAMPRI_PWM0_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_PWM0_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM0_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM0_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM0_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM0_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM0_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM0_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM0_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_PWM0_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_PWM0_RAM5_Msk (0xFUL << PAMLI_RAMPRI_PWM0_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_PWM0_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM0_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM0_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM0_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM0_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM0_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM0_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM0_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_PWM0_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_PWM0_RAM4_Msk (0xFUL << PAMLI_RAMPRI_PWM0_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_PWM0_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM0_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM0_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM0_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM0_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM0_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM0_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM0_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_PWM0_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_PWM0_RAM3_Msk (0xFUL << PAMLI_RAMPRI_PWM0_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_PWM0_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM0_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM0_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM0_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM0_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM0_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM0_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM0_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_PWM0_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_PWM0_RAM2_Msk (0xFUL << PAMLI_RAMPRI_PWM0_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_PWM0_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM0_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM0_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM0_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM0_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM0_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM0_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM0_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_PWM0_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_PWM0_RAM1_Msk (0xFUL << PAMLI_RAMPRI_PWM0_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_PWM0_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM0_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM0_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM0_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM0_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM0_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM0_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM0_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_PWM0_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_PWM0_RAM0_Msk (0xFUL << PAMLI_RAMPRI_PWM0_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_PWM0_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM0_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM0_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM0_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM0_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM0_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM0_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM0_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_PWM1 */
/* Description: AHB bus master priority register for PWM1 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_PWM1_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_PWM1_RAM7_Msk (0xFUL << PAMLI_RAMPRI_PWM1_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_PWM1_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM1_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM1_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM1_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM1_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM1_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM1_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM1_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_PWM1_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_PWM1_RAM6_Msk (0xFUL << PAMLI_RAMPRI_PWM1_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_PWM1_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM1_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM1_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM1_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM1_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM1_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM1_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM1_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_PWM1_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_PWM1_RAM5_Msk (0xFUL << PAMLI_RAMPRI_PWM1_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_PWM1_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM1_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM1_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM1_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM1_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM1_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM1_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM1_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_PWM1_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_PWM1_RAM4_Msk (0xFUL << PAMLI_RAMPRI_PWM1_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_PWM1_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM1_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM1_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM1_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM1_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM1_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM1_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM1_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_PWM1_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_PWM1_RAM3_Msk (0xFUL << PAMLI_RAMPRI_PWM1_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_PWM1_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM1_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM1_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM1_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM1_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM1_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM1_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM1_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_PWM1_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_PWM1_RAM2_Msk (0xFUL << PAMLI_RAMPRI_PWM1_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_PWM1_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM1_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM1_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM1_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM1_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM1_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM1_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM1_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_PWM1_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_PWM1_RAM1_Msk (0xFUL << PAMLI_RAMPRI_PWM1_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_PWM1_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM1_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM1_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM1_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM1_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM1_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM1_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM1_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_PWM1_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_PWM1_RAM0_Msk (0xFUL << PAMLI_RAMPRI_PWM1_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_PWM1_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM1_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM1_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM1_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM1_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM1_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM1_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM1_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_PWM2 */
/* Description: AHB bus master priority register for PWM2 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_PWM2_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_PWM2_RAM7_Msk (0xFUL << PAMLI_RAMPRI_PWM2_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_PWM2_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM2_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM2_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM2_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM2_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM2_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM2_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM2_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_PWM2_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_PWM2_RAM6_Msk (0xFUL << PAMLI_RAMPRI_PWM2_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_PWM2_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM2_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM2_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM2_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM2_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM2_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM2_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM2_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_PWM2_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_PWM2_RAM5_Msk (0xFUL << PAMLI_RAMPRI_PWM2_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_PWM2_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM2_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM2_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM2_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM2_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM2_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM2_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM2_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_PWM2_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_PWM2_RAM4_Msk (0xFUL << PAMLI_RAMPRI_PWM2_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_PWM2_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM2_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM2_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM2_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM2_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM2_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM2_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM2_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_PWM2_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_PWM2_RAM3_Msk (0xFUL << PAMLI_RAMPRI_PWM2_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_PWM2_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM2_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM2_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM2_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM2_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM2_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM2_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM2_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_PWM2_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_PWM2_RAM2_Msk (0xFUL << PAMLI_RAMPRI_PWM2_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_PWM2_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM2_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM2_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM2_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM2_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM2_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM2_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM2_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_PWM2_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_PWM2_RAM1_Msk (0xFUL << PAMLI_RAMPRI_PWM2_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_PWM2_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM2_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM2_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM2_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM2_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM2_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM2_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM2_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_PWM2_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_PWM2_RAM0_Msk (0xFUL << PAMLI_RAMPRI_PWM2_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_PWM2_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM2_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM2_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM2_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM2_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM2_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM2_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM2_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_PWM3 */
/* Description: AHB bus master priority register for PWM2 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_PWM3_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_PWM3_RAM7_Msk (0xFUL << PAMLI_RAMPRI_PWM3_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_PWM3_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM3_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM3_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM3_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM3_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM3_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM3_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM3_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_PWM3_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_PWM3_RAM6_Msk (0xFUL << PAMLI_RAMPRI_PWM3_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_PWM3_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM3_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM3_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM3_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM3_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM3_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM3_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM3_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_PWM3_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_PWM3_RAM5_Msk (0xFUL << PAMLI_RAMPRI_PWM3_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_PWM3_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM3_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM3_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM3_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM3_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM3_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM3_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM3_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_PWM3_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_PWM3_RAM4_Msk (0xFUL << PAMLI_RAMPRI_PWM3_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_PWM3_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM3_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM3_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM3_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM3_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM3_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM3_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM3_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_PWM3_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_PWM3_RAM3_Msk (0xFUL << PAMLI_RAMPRI_PWM3_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_PWM3_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM3_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM3_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM3_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM3_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM3_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM3_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM3_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_PWM3_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_PWM3_RAM2_Msk (0xFUL << PAMLI_RAMPRI_PWM3_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_PWM3_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM3_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM3_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM3_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM3_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM3_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM3_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM3_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_PWM3_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_PWM3_RAM1_Msk (0xFUL << PAMLI_RAMPRI_PWM3_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_PWM3_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM3_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM3_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM3_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM3_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM3_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM3_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM3_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_PWM3_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_PWM3_RAM0_Msk (0xFUL << PAMLI_RAMPRI_PWM3_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_PWM3_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_PWM3_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_PWM3_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_PWM3_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_PWM3_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_PWM3_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_PWM3_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_PWM3_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_SAADC */
/* Description: AHB bus master priority register for SAADC */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_SAADC_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_SAADC_RAM7_Msk (0xFUL << PAMLI_RAMPRI_SAADC_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_SAADC_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SAADC_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SAADC_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SAADC_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SAADC_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SAADC_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SAADC_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SAADC_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_SAADC_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_SAADC_RAM6_Msk (0xFUL << PAMLI_RAMPRI_SAADC_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_SAADC_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SAADC_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SAADC_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SAADC_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SAADC_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SAADC_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SAADC_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SAADC_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_SAADC_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_SAADC_RAM5_Msk (0xFUL << PAMLI_RAMPRI_SAADC_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_SAADC_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SAADC_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SAADC_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SAADC_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SAADC_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SAADC_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SAADC_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SAADC_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_SAADC_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_SAADC_RAM4_Msk (0xFUL << PAMLI_RAMPRI_SAADC_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_SAADC_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SAADC_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SAADC_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SAADC_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SAADC_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SAADC_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SAADC_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SAADC_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_SAADC_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_SAADC_RAM3_Msk (0xFUL << PAMLI_RAMPRI_SAADC_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_SAADC_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SAADC_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SAADC_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SAADC_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SAADC_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SAADC_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SAADC_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SAADC_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_SAADC_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_SAADC_RAM2_Msk (0xFUL << PAMLI_RAMPRI_SAADC_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_SAADC_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SAADC_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SAADC_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SAADC_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SAADC_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SAADC_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SAADC_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SAADC_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_SAADC_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_SAADC_RAM1_Msk (0xFUL << PAMLI_RAMPRI_SAADC_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_SAADC_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SAADC_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SAADC_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SAADC_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SAADC_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SAADC_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SAADC_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SAADC_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_SAADC_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_SAADC_RAM0_Msk (0xFUL << PAMLI_RAMPRI_SAADC_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_SAADC_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SAADC_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SAADC_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SAADC_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SAADC_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SAADC_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SAADC_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SAADC_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_SPIM4 */
/* Description: AHB bus master priority register for high-speed SPIM4 */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_SPIM4_RAM7_Msk (0xFUL << PAMLI_RAMPRI_SPIM4_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SPIM4_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_SPIM4_RAM6_Msk (0xFUL << PAMLI_RAMPRI_SPIM4_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SPIM4_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_SPIM4_RAM5_Msk (0xFUL << PAMLI_RAMPRI_SPIM4_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SPIM4_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_SPIM4_RAM4_Msk (0xFUL << PAMLI_RAMPRI_SPIM4_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SPIM4_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_SPIM4_RAM3_Msk (0xFUL << PAMLI_RAMPRI_SPIM4_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SPIM4_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_SPIM4_RAM2_Msk (0xFUL << PAMLI_RAMPRI_SPIM4_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SPIM4_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_SPIM4_RAM1_Msk (0xFUL << PAMLI_RAMPRI_SPIM4_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SPIM4_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_SPIM4_RAM0_Msk (0xFUL << PAMLI_RAMPRI_SPIM4_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_SPIM4_RAM0_Pri7 (7UL) /*!< Priority 7 */

/* Register: PAMLI_RAMPRI_NFCT */
/* Description: AHB bus master priority register for NFCT */

/* Bits 31..28 : Priority register for RAM AHB slave 7 */
#define PAMLI_RAMPRI_NFCT_RAM7_Pos (28UL) /*!< Position of RAM7 field. */
#define PAMLI_RAMPRI_NFCT_RAM7_Msk (0xFUL << PAMLI_RAMPRI_NFCT_RAM7_Pos) /*!< Bit mask of RAM7 field. */
#define PAMLI_RAMPRI_NFCT_RAM7_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_NFCT_RAM7_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_NFCT_RAM7_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_NFCT_RAM7_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_NFCT_RAM7_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_NFCT_RAM7_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_NFCT_RAM7_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_NFCT_RAM7_Pri7 (7UL) /*!< Priority 7 */

/* Bits 27..24 : Priority register for RAM AHB slave 6 */
#define PAMLI_RAMPRI_NFCT_RAM6_Pos (24UL) /*!< Position of RAM6 field. */
#define PAMLI_RAMPRI_NFCT_RAM6_Msk (0xFUL << PAMLI_RAMPRI_NFCT_RAM6_Pos) /*!< Bit mask of RAM6 field. */
#define PAMLI_RAMPRI_NFCT_RAM6_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_NFCT_RAM6_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_NFCT_RAM6_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_NFCT_RAM6_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_NFCT_RAM6_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_NFCT_RAM6_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_NFCT_RAM6_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_NFCT_RAM6_Pri7 (7UL) /*!< Priority 7 */

/* Bits 23..20 : Priority register for RAM AHB slave 5 */
#define PAMLI_RAMPRI_NFCT_RAM5_Pos (20UL) /*!< Position of RAM5 field. */
#define PAMLI_RAMPRI_NFCT_RAM5_Msk (0xFUL << PAMLI_RAMPRI_NFCT_RAM5_Pos) /*!< Bit mask of RAM5 field. */
#define PAMLI_RAMPRI_NFCT_RAM5_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_NFCT_RAM5_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_NFCT_RAM5_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_NFCT_RAM5_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_NFCT_RAM5_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_NFCT_RAM5_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_NFCT_RAM5_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_NFCT_RAM5_Pri7 (7UL) /*!< Priority 7 */

/* Bits 19..16 : Priority register for RAM AHB slave 4 */
#define PAMLI_RAMPRI_NFCT_RAM4_Pos (16UL) /*!< Position of RAM4 field. */
#define PAMLI_RAMPRI_NFCT_RAM4_Msk (0xFUL << PAMLI_RAMPRI_NFCT_RAM4_Pos) /*!< Bit mask of RAM4 field. */
#define PAMLI_RAMPRI_NFCT_RAM4_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_NFCT_RAM4_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_NFCT_RAM4_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_NFCT_RAM4_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_NFCT_RAM4_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_NFCT_RAM4_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_NFCT_RAM4_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_NFCT_RAM4_Pri7 (7UL) /*!< Priority 7 */

/* Bits 15..12 : Priority register for RAM AHB slave 3 */
#define PAMLI_RAMPRI_NFCT_RAM3_Pos (12UL) /*!< Position of RAM3 field. */
#define PAMLI_RAMPRI_NFCT_RAM3_Msk (0xFUL << PAMLI_RAMPRI_NFCT_RAM3_Pos) /*!< Bit mask of RAM3 field. */
#define PAMLI_RAMPRI_NFCT_RAM3_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_NFCT_RAM3_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_NFCT_RAM3_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_NFCT_RAM3_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_NFCT_RAM3_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_NFCT_RAM3_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_NFCT_RAM3_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_NFCT_RAM3_Pri7 (7UL) /*!< Priority 7 */

/* Bits 11..8 : Priority register for RAM AHB slave 2 */
#define PAMLI_RAMPRI_NFCT_RAM2_Pos (8UL) /*!< Position of RAM2 field. */
#define PAMLI_RAMPRI_NFCT_RAM2_Msk (0xFUL << PAMLI_RAMPRI_NFCT_RAM2_Pos) /*!< Bit mask of RAM2 field. */
#define PAMLI_RAMPRI_NFCT_RAM2_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_NFCT_RAM2_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_NFCT_RAM2_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_NFCT_RAM2_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_NFCT_RAM2_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_NFCT_RAM2_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_NFCT_RAM2_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_NFCT_RAM2_Pri7 (7UL) /*!< Priority 7 */

/* Bits 7..4 : Priority register for RAM AHB slave 1 */
#define PAMLI_RAMPRI_NFCT_RAM1_Pos (4UL) /*!< Position of RAM1 field. */
#define PAMLI_RAMPRI_NFCT_RAM1_Msk (0xFUL << PAMLI_RAMPRI_NFCT_RAM1_Pos) /*!< Bit mask of RAM1 field. */
#define PAMLI_RAMPRI_NFCT_RAM1_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_NFCT_RAM1_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_NFCT_RAM1_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_NFCT_RAM1_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_NFCT_RAM1_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_NFCT_RAM1_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_NFCT_RAM1_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_NFCT_RAM1_Pri7 (7UL) /*!< Priority 7 */

/* Bits 3..0 : Priority register for RAM AHB slave 0 */
#define PAMLI_RAMPRI_NFCT_RAM0_Pos (0UL) /*!< Position of RAM0 field. */
#define PAMLI_RAMPRI_NFCT_RAM0_Msk (0xFUL << PAMLI_RAMPRI_NFCT_RAM0_Pos) /*!< Bit mask of RAM0 field. */
#define PAMLI_RAMPRI_NFCT_RAM0_Pri0 (0UL) /*!< Priority 0 */
#define PAMLI_RAMPRI_NFCT_RAM0_Pri1 (1UL) /*!< Priority 1 */
#define PAMLI_RAMPRI_NFCT_RAM0_Pri2 (2UL) /*!< Priority 2 */
#define PAMLI_RAMPRI_NFCT_RAM0_Pri3 (3UL) /*!< Priority 3 */
#define PAMLI_RAMPRI_NFCT_RAM0_Pri4 (4UL) /*!< Priority 4 */
#define PAMLI_RAMPRI_NFCT_RAM0_Pri5 (5UL) /*!< Priority 5 */
#define PAMLI_RAMPRI_NFCT_RAM0_Pri6 (6UL) /*!< Priority 6 */
#define PAMLI_RAMPRI_NFCT_RAM0_Pri7 (7UL) /*!< Priority 7 */


/* Peripheral: PCGCMASTER */
/* Description: PCGC Master 0 */

/* Register: PCGCMASTER_SETPWRCONTHRESHOLDBASE */
/* Description: Description collection: Set power consumption threshold base for power source / regulator n */

/* Bits 3..0 : SETPWRCONTHRESHOLDBASE */
#define PCGCMASTER_SETPWRCONTHRESHOLDBASE_SETPWRCONTHRESHOLDBASE_Pos (0UL) /*!< Position of SETPWRCONTHRESHOLDBASE field. */
#define PCGCMASTER_SETPWRCONTHRESHOLDBASE_SETPWRCONTHRESHOLDBASE_Msk (0xFUL << PCGCMASTER_SETPWRCONTHRESHOLDBASE_SETPWRCONTHRESHOLDBASE_Pos) /*!< Bit mask of SETPWRCONTHRESHOLDBASE field. */

/* Register: PCGCMASTER_SETPOWERCONSUMPTIONBASE */
/* Description: Description collection: Set power consumption base for power/clock pair n */

/* Bits 3..0 : POWERREQUIREMENT */
#define PCGCMASTER_SETPOWERCONSUMPTIONBASE_POWERREQUIREMENT_Pos (0UL) /*!< Position of POWERREQUIREMENT field. */
#define PCGCMASTER_SETPOWERCONSUMPTIONBASE_POWERREQUIREMENT_Msk (0xFUL << PCGCMASTER_SETPOWERCONSUMPTIONBASE_POWERREQUIREMENT_Pos) /*!< Bit mask of POWERREQUIREMENT field. */

/* Register: PCGCMASTER_UNLOCKBACKDOORS */
/* Description: Unlock backdoors */

/* Bits 15..0 : Write: 0x00009375 to lock/unlock backdoors Read:  0x00000001 if backdoors is enabled Read:  0x00000000 if backdoors is disabled */
#define PCGCMASTER_UNLOCKBACKDOORS_UNLOCKBACKDOORS_Pos (0UL) /*!< Position of UNLOCKBACKDOORS field. */
#define PCGCMASTER_UNLOCKBACKDOORS_UNLOCKBACKDOORS_Msk (0xFFFFUL << PCGCMASTER_UNLOCKBACKDOORS_UNLOCKBACKDOORS_Pos) /*!< Bit mask of UNLOCKBACKDOORS field. */

/* Register: PCGCMASTER_ENABLEPOWERREGFORCE */
/* Description: Enable power reg force */

/* Bits 2..0 : ENABLEPOWERREGFORCE */
#define PCGCMASTER_ENABLEPOWERREGFORCE_ENABLEPOWERREGFORCE_Pos (0UL) /*!< Position of ENABLEPOWERREGFORCE field. */
#define PCGCMASTER_ENABLEPOWERREGFORCE_ENABLEPOWERREGFORCE_Msk (0x7UL << PCGCMASTER_ENABLEPOWERREGFORCE_ENABLEPOWERREGFORCE_Pos) /*!< Bit mask of ENABLEPOWERREGFORCE field. */

/* Register: PCGCMASTER_POWERREGFORCE */
/* Description: Force reg */

/* Bits 2..0 : POWERREGFORCEREG */
#define PCGCMASTER_POWERREGFORCE_POWERREGFORCEREG_Pos (0UL) /*!< Position of POWERREGFORCEREG field. */
#define PCGCMASTER_POWERREGFORCE_POWERREGFORCEREG_Msk (0x7UL << PCGCMASTER_POWERREGFORCE_POWERREGFORCEREG_Pos) /*!< Bit mask of POWERREGFORCEREG field. */

/* Register: PCGCMASTER_MASTERFORCEREG */
/* Description: Force reg */

/* Bit 7 : POWERONFORCEPRE */
#define PCGCMASTER_MASTERFORCEREG_POWERONFORCEPRE_Pos (7UL) /*!< Position of POWERONFORCEPRE field. */
#define PCGCMASTER_MASTERFORCEREG_POWERONFORCEPRE_Msk (0x1UL << PCGCMASTER_MASTERFORCEREG_POWERONFORCEPRE_Pos) /*!< Bit mask of POWERONFORCEPRE field. */

/* Bit 6 : ENABLEPOWERONFORCE */
#define PCGCMASTER_MASTERFORCEREG_ENABLEPOWERONFORCE_Pos (6UL) /*!< Position of ENABLEPOWERONFORCE field. */
#define PCGCMASTER_MASTERFORCEREG_ENABLEPOWERONFORCE_Msk (0x1UL << PCGCMASTER_MASTERFORCEREG_ENABLEPOWERONFORCE_Pos) /*!< Bit mask of ENABLEPOWERONFORCE field. */

/* Bit 5 : VALUEARSTFORCEPRE */
#define PCGCMASTER_MASTERFORCEREG_VALUEARSTFORCEPRE_Pos (5UL) /*!< Position of VALUEARSTFORCEPRE field. */
#define PCGCMASTER_MASTERFORCEREG_VALUEARSTFORCEPRE_Msk (0x1UL << PCGCMASTER_MASTERFORCEREG_VALUEARSTFORCEPRE_Pos) /*!< Bit mask of VALUEARSTFORCEPRE field. */

/* Bit 4 : ENABLEARSTFORCE */
#define PCGCMASTER_MASTERFORCEREG_ENABLEARSTFORCE_Pos (4UL) /*!< Position of ENABLEARSTFORCE field. */
#define PCGCMASTER_MASTERFORCEREG_ENABLEARSTFORCE_Msk (0x1UL << PCGCMASTER_MASTERFORCEREG_ENABLEARSTFORCE_Pos) /*!< Bit mask of ENABLEARSTFORCE field. */

/* Bit 3 : ISOLATIONFORCEPRE */
#define PCGCMASTER_MASTERFORCEREG_ISOLATIONFORCEPRE_Pos (3UL) /*!< Position of ISOLATIONFORCEPRE field. */
#define PCGCMASTER_MASTERFORCEREG_ISOLATIONFORCEPRE_Msk (0x1UL << PCGCMASTER_MASTERFORCEREG_ISOLATIONFORCEPRE_Pos) /*!< Bit mask of ISOLATIONFORCEPRE field. */

/* Bit 2 : ENABLEISOLATIONFORCE */
#define PCGCMASTER_MASTERFORCEREG_ENABLEISOLATIONFORCE_Pos (2UL) /*!< Position of ENABLEISOLATIONFORCE field. */
#define PCGCMASTER_MASTERFORCEREG_ENABLEISOLATIONFORCE_Msk (0x1UL << PCGCMASTER_MASTERFORCEREG_ENABLEISOLATIONFORCE_Pos) /*!< Bit mask of ENABLEISOLATIONFORCE field. */

/* Bit 1 : PSWITCHFORCEPRE */
#define PCGCMASTER_MASTERFORCEREG_PSWITCHFORCEPRE_Pos (1UL) /*!< Position of PSWITCHFORCEPRE field. */
#define PCGCMASTER_MASTERFORCEREG_PSWITCHFORCEPRE_Msk (0x1UL << PCGCMASTER_MASTERFORCEREG_PSWITCHFORCEPRE_Pos) /*!< Bit mask of PSWITCHFORCEPRE field. */

/* Bit 0 : ENABLEPSWITCHFORCE */
#define PCGCMASTER_MASTERFORCEREG_ENABLEPSWITCHFORCE_Pos (0UL) /*!< Position of ENABLEPSWITCHFORCE field. */
#define PCGCMASTER_MASTERFORCEREG_ENABLEPSWITCHFORCE_Msk (0x1UL << PCGCMASTER_MASTERFORCEREG_ENABLEPSWITCHFORCE_Pos) /*!< Bit mask of ENABLEPSWITCHFORCE field. */

/* Register: PCGCMASTER_CLOCKFORCEREG */
/* Description: Description collection: Force clock n */

/* Bits 4..2 : CLOCKSOURCEFORCING */
#define PCGCMASTER_CLOCKFORCEREG_CLOCKSOURCEFORCING_Pos (2UL) /*!< Position of CLOCKSOURCEFORCING field. */
#define PCGCMASTER_CLOCKFORCEREG_CLOCKSOURCEFORCING_Msk (0x7UL << PCGCMASTER_CLOCKFORCEREG_CLOCKSOURCEFORCING_Pos) /*!< Bit mask of CLOCKSOURCEFORCING field. */

/* Bit 1 : CLOCKFORCING */
#define PCGCMASTER_CLOCKFORCEREG_CLOCKFORCING_Pos (1UL) /*!< Position of CLOCKFORCING field. */
#define PCGCMASTER_CLOCKFORCEREG_CLOCKFORCING_Msk (0x1UL << PCGCMASTER_CLOCKFORCEREG_CLOCKFORCING_Pos) /*!< Bit mask of CLOCKFORCING field. */

/* Bit 0 : Enable clock forcing */
#define PCGCMASTER_CLOCKFORCEREG_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define PCGCMASTER_CLOCKFORCEREG_ENABLE_Msk (0x1UL << PCGCMASTER_CLOCKFORCEREG_ENABLE_Pos) /*!< Bit mask of ENABLE field. */


/* Peripheral: PDM */
/* Description: Pulse Density Modulation (Digital Microphone) Interface 0 */

/* Register: PDM_TASKS_START */
/* Description: Starts continuous PDM transfer */

/* Bit 0 : Starts continuous PDM transfer */
#define PDM_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define PDM_TASKS_START_TASKS_START_Msk (0x1UL << PDM_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define PDM_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: PDM_TASKS_STOP */
/* Description: Stops PDM transfer */

/* Bit 0 : Stops PDM transfer */
#define PDM_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define PDM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << PDM_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define PDM_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: PDM_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define PDM_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define PDM_SUBSCRIBE_START_EN_Msk (0x1UL << PDM_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define PDM_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define PDM_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define PDM_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PDM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << PDM_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PDM_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define PDM_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define PDM_SUBSCRIBE_STOP_EN_Msk (0x1UL << PDM_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define PDM_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define PDM_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define PDM_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PDM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << PDM_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PDM_EVENTS_STARTED */
/* Description: PDM transfer has started */

/* Bit 0 : PDM transfer has started */
#define PDM_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL) /*!< Position of EVENTS_STARTED field. */
#define PDM_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << PDM_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of EVENTS_STARTED field. */
#define PDM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0UL) /*!< Event not generated */
#define PDM_EVENTS_STARTED_EVENTS_STARTED_Generated (1UL) /*!< Event generated */

/* Register: PDM_EVENTS_STOPPED */
/* Description: PDM transfer has finished */

/* Bit 0 : PDM transfer has finished */
#define PDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define PDM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << PDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define PDM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define PDM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: PDM_EVENTS_END */
/* Description: The PDM has written the last sample specified by SAMPLE.MAXCNT (or the last sample after a STOP task has been received) to Data RAM */

/* Bit 0 : The PDM has written the last sample specified by SAMPLE.MAXCNT (or the last sample after a STOP task has been received) to Data RAM */
#define PDM_EVENTS_END_EVENTS_END_Pos (0UL) /*!< Position of EVENTS_END field. */
#define PDM_EVENTS_END_EVENTS_END_Msk (0x1UL << PDM_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field. */
#define PDM_EVENTS_END_EVENTS_END_NotGenerated (0UL) /*!< Event not generated */
#define PDM_EVENTS_END_EVENTS_END_Generated (1UL) /*!< Event generated */

/* Register: PDM_EVENTS_OVERRUN */
/* Description: PDM samples lost due to DMA destination not available */

/* Bit 0 : PDM samples lost due to DMA destination not available */
#define PDM_EVENTS_OVERRUN_EVENTS_OVERRUN_Pos (0UL) /*!< Position of EVENTS_OVERRUN field. */
#define PDM_EVENTS_OVERRUN_EVENTS_OVERRUN_Msk (0x1UL << PDM_EVENTS_OVERRUN_EVENTS_OVERRUN_Pos) /*!< Bit mask of EVENTS_OVERRUN field. */
#define PDM_EVENTS_OVERRUN_EVENTS_OVERRUN_NotGenerated (0UL) /*!< Event not generated */
#define PDM_EVENTS_OVERRUN_EVENTS_OVERRUN_Generated (1UL) /*!< Event generated */

/* Register: PDM_PUBLISH_STARTED */
/* Description: Publish configuration for event STARTED */

/* Bit 31 :   */
#define PDM_PUBLISH_STARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define PDM_PUBLISH_STARTED_EN_Msk (0x1UL << PDM_PUBLISH_STARTED_EN_Pos) /*!< Bit mask of EN field. */
#define PDM_PUBLISH_STARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define PDM_PUBLISH_STARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STARTED will publish to. */
#define PDM_PUBLISH_STARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PDM_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << PDM_PUBLISH_STARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PDM_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define PDM_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define PDM_PUBLISH_STOPPED_EN_Msk (0x1UL << PDM_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define PDM_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define PDM_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define PDM_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PDM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << PDM_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PDM_PUBLISH_END */
/* Description: Publish configuration for event END */

/* Bit 31 :   */
#define PDM_PUBLISH_END_EN_Pos (31UL) /*!< Position of EN field. */
#define PDM_PUBLISH_END_EN_Msk (0x1UL << PDM_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field. */
#define PDM_PUBLISH_END_EN_Disabled (0UL) /*!< Disable publishing */
#define PDM_PUBLISH_END_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event END will publish to. */
#define PDM_PUBLISH_END_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PDM_PUBLISH_END_CHIDX_Msk (0xFFUL << PDM_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PDM_PUBLISH_OVERRUN */
/* Description: Publish configuration for event OVERRUN */

/* Bit 31 :   */
#define PDM_PUBLISH_OVERRUN_EN_Pos (31UL) /*!< Position of EN field. */
#define PDM_PUBLISH_OVERRUN_EN_Msk (0x1UL << PDM_PUBLISH_OVERRUN_EN_Pos) /*!< Bit mask of EN field. */
#define PDM_PUBLISH_OVERRUN_EN_Disabled (0UL) /*!< Disable publishing */
#define PDM_PUBLISH_OVERRUN_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event OVERRUN will publish to. */
#define PDM_PUBLISH_OVERRUN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PDM_PUBLISH_OVERRUN_CHIDX_Msk (0xFFUL << PDM_PUBLISH_OVERRUN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PDM_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 3 : Enable or disable interrupt for event OVERRUN */
#define PDM_INTEN_OVERRUN_Pos (3UL) /*!< Position of OVERRUN field. */
#define PDM_INTEN_OVERRUN_Msk (0x1UL << PDM_INTEN_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
#define PDM_INTEN_OVERRUN_Disabled (0UL) /*!< Disable */
#define PDM_INTEN_OVERRUN_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event END */
#define PDM_INTEN_END_Pos (2UL) /*!< Position of END field. */
#define PDM_INTEN_END_Msk (0x1UL << PDM_INTEN_END_Pos) /*!< Bit mask of END field. */
#define PDM_INTEN_END_Disabled (0UL) /*!< Disable */
#define PDM_INTEN_END_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event STOPPED */
#define PDM_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define PDM_INTEN_STOPPED_Msk (0x1UL << PDM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define PDM_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define PDM_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event STARTED */
#define PDM_INTEN_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define PDM_INTEN_STARTED_Msk (0x1UL << PDM_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define PDM_INTEN_STARTED_Disabled (0UL) /*!< Disable */
#define PDM_INTEN_STARTED_Enabled (1UL) /*!< Enable */

/* Register: PDM_INTENSET */
/* Description: Enable interrupt */

/* Bit 3 : Write '1' to enable interrupt for event OVERRUN */
#define PDM_INTENSET_OVERRUN_Pos (3UL) /*!< Position of OVERRUN field. */
#define PDM_INTENSET_OVERRUN_Msk (0x1UL << PDM_INTENSET_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
#define PDM_INTENSET_OVERRUN_Disabled (0UL) /*!< Read: Disabled */
#define PDM_INTENSET_OVERRUN_Enabled (1UL) /*!< Read: Enabled */
#define PDM_INTENSET_OVERRUN_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event END */
#define PDM_INTENSET_END_Pos (2UL) /*!< Position of END field. */
#define PDM_INTENSET_END_Msk (0x1UL << PDM_INTENSET_END_Pos) /*!< Bit mask of END field. */
#define PDM_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
#define PDM_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
#define PDM_INTENSET_END_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event STOPPED */
#define PDM_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define PDM_INTENSET_STOPPED_Msk (0x1UL << PDM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define PDM_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define PDM_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define PDM_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event STARTED */
#define PDM_INTENSET_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define PDM_INTENSET_STARTED_Msk (0x1UL << PDM_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define PDM_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define PDM_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define PDM_INTENSET_STARTED_Set (1UL) /*!< Enable */

/* Register: PDM_INTENCLR */
/* Description: Disable interrupt */

/* Bit 3 : Write '1' to disable interrupt for event OVERRUN */
#define PDM_INTENCLR_OVERRUN_Pos (3UL) /*!< Position of OVERRUN field. */
#define PDM_INTENCLR_OVERRUN_Msk (0x1UL << PDM_INTENCLR_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
#define PDM_INTENCLR_OVERRUN_Disabled (0UL) /*!< Read: Disabled */
#define PDM_INTENCLR_OVERRUN_Enabled (1UL) /*!< Read: Enabled */
#define PDM_INTENCLR_OVERRUN_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event END */
#define PDM_INTENCLR_END_Pos (2UL) /*!< Position of END field. */
#define PDM_INTENCLR_END_Msk (0x1UL << PDM_INTENCLR_END_Pos) /*!< Bit mask of END field. */
#define PDM_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
#define PDM_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
#define PDM_INTENCLR_END_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event STOPPED */
#define PDM_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define PDM_INTENCLR_STOPPED_Msk (0x1UL << PDM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define PDM_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define PDM_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define PDM_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event STARTED */
#define PDM_INTENCLR_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define PDM_INTENCLR_STARTED_Msk (0x1UL << PDM_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define PDM_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define PDM_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define PDM_INTENCLR_STARTED_Clear (1UL) /*!< Disable */

/* Register: PDM_ENABLE */
/* Description: PDM module enable register */

/* Bit 0 : Enable or disable PDM module */
#define PDM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define PDM_ENABLE_ENABLE_Msk (0x1UL << PDM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define PDM_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
#define PDM_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */

/* Register: PDM_PDMCLKCTRL */
/* Description: PDM clock generator control */

/* Bits 31..0 : PDM_CLK frequency configuration. Enumerations are deprecated, use
        PDMCLKCTRL equation to find the register value. The 12 least significant bits of the
        register are ignored and shall be set to zero. */
#define PDM_PDMCLKCTRL_FREQ_Pos (0UL) /*!< Position of FREQ field. */
#define PDM_PDMCLKCTRL_FREQ_Msk (0xFFFFFFFFUL << PDM_PDMCLKCTRL_FREQ_Pos) /*!< Bit mask of FREQ field. */
#define PDM_PDMCLKCTRL_FREQ_1000K (0x08000000UL) /*!< PDM_CLK = 32 MHz / 32 = 1.000 MHz */
#define PDM_PDMCLKCTRL_FREQ_Default (0x08400000UL) /*!< PDM_CLK = 32 MHz / 31 = 1.032 MHz. Nominal clock for RATIO=Ratio64. Assumes a 20 bit Baud Rate Generator (BRG) dividing the 32 MHz clock. Output of BRG is connected to PDM_CLK, the filter source clock requires twice that rate, a frequency doubler is built in the module to provide 2.048 MHz, which implies a filter clockdiv ratio hardcoded at x2 to the IP. */
#define PDM_PDMCLKCTRL_FREQ_1067K (0x08800000UL) /*!< PDM_CLK = 32 MHz / 30 = 1.067 MHz */
#define PDM_PDMCLKCTRL_FREQ_1231K (0x09800000UL) /*!< PDM_CLK = 32 MHz / 26 = 1.231 MHz */
#define PDM_PDMCLKCTRL_FREQ_1280K (0x0A000000UL) /*!< PDM_CLK = 32 MHz / 25 = 1.280 MHz. Nominal clock for RATIO=Ratio80. */
#define PDM_PDMCLKCTRL_FREQ_1333K (0x0A800000UL) /*!< PDM_CLK = 32 MHz / 24 = 1.333 MHz */

/* Register: PDM_MODE */
/* Description: Defines the routing of the connected PDM microphones' signals */

/* Bit 1 : Defines on which PDM_CLK edge left (or mono) is sampled */
#define PDM_MODE_EDGE_Pos (1UL) /*!< Position of EDGE field. */
#define PDM_MODE_EDGE_Msk (0x1UL << PDM_MODE_EDGE_Pos) /*!< Bit mask of EDGE field. */
#define PDM_MODE_EDGE_LeftFalling (0UL) /*!< Left (or mono) is sampled on falling edge of PDM_CLK */
#define PDM_MODE_EDGE_LeftRising (1UL) /*!< Left (or mono) is sampled on rising edge of PDM_CLK */

/* Bit 0 : Mono or stereo operation Mono also disables the gated clock to the right filter bank */
#define PDM_MODE_OPERATION_Pos (0UL) /*!< Position of OPERATION field. */
#define PDM_MODE_OPERATION_Msk (0x1UL << PDM_MODE_OPERATION_Pos) /*!< Bit mask of OPERATION field. */
#define PDM_MODE_OPERATION_Stereo (0UL) /*!< Sample and store one pair (left + right) of 16-bit samples per RAM word R=[31:16]; L=[15:0] */
#define PDM_MODE_OPERATION_Mono (1UL) /*!< Sample and store two successive left samples (16 bits each) per RAM word L1=[31:16]; L0=[15:0] */

/* Register: PDM_FDBYPASS */
/* Description: Bypass the frequency doubler in the PDM clock generation */

/* Bit 0 : Bypass the frequency doubler in the PDM clock generation, and revert to a simple divider structure. */
#define PDM_FDBYPASS_BYPASS_Pos (0UL) /*!< Position of BYPASS field. */
#define PDM_FDBYPASS_BYPASS_Msk (0x1UL << PDM_FDBYPASS_BYPASS_Pos) /*!< Bit mask of BYPASS field. */
#define PDM_FDBYPASS_BYPASS_DoublerActive (0UL) /*!< PDMCLKCTRL determines directly the PDM_CLK frequency. A doubler is used to provide twice that clock to the filters. This allows better accuracy on PDM_CLK. */
#define PDM_FDBYPASS_BYPASS_DividerActive (1UL) /*!< PDMCLKCTRL determines the clock provided to the filters, PDM_CLK is generated by dividing that clock by two. This results in less accuracy on PDM_CLK. */

/* Register: PDM_RXDLDATA */
/* Description: Left sample from filter output */

/* Bits 15..0 : Left sample from filter output */
#define PDM_RXDLDATA_RXDLDATA_Pos (0UL) /*!< Position of RXDLDATA field. */
#define PDM_RXDLDATA_RXDLDATA_Msk (0xFFFFUL << PDM_RXDLDATA_RXDLDATA_Pos) /*!< Bit mask of RXDLDATA field. */

/* Register: PDM_RXDRDATA */
/* Description: Right sample from filter output */

/* Bits 15..0 : Right sample from filter output */
#define PDM_RXDRDATA_RXDRDATA_Pos (0UL) /*!< Position of RXDRDATA field. */
#define PDM_RXDRDATA_RXDRDATA_Msk (0xFFFFUL << PDM_RXDRDATA_RXDRDATA_Pos) /*!< Bit mask of RXDRDATA field. */

/* Register: PDM_GAINL */
/* Description: Left output gain adjustment */

/* Bits 6..0 : Left output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters) 0x00    -20 dB gain adjust 0x01  -19.5 dB gain adjust (...) 0x27   -0.5 dB gain adjust 0x28      0 dB gain adjust 0x29   +0.5 dB gain adjust (...) 0x4F  +19.5 dB gain adjust 0x50    +20 dB gain adjust 0x51    +20 dB gain adjust 0x52    +20 dB gain adjust (...) */
#define PDM_GAINL_GAINL_Pos (0UL) /*!< Position of GAINL field. */
#define PDM_GAINL_GAINL_Msk (0x7FUL << PDM_GAINL_GAINL_Pos) /*!< Bit mask of GAINL field. */
#define PDM_GAINL_GAINL_MinGain (0x00UL) /*!< -20 dB gain adjustment (minimum) */
#define PDM_GAINL_GAINL_DefaultGain (0x28UL) /*!< 0 dB gain adjustment */
#define PDM_GAINL_GAINL_MaxGain (0x50UL) /*!< +20 dB gain adjustment (maximum) */

/* Register: PDM_GAINR */
/* Description: Right output gain adjustment */

/* Bits 6..0 : Right output gain adjustment, in 0.5 dB steps, around the default module gain (see electrical parameters) */
#define PDM_GAINR_GAINR_Pos (0UL) /*!< Position of GAINR field. */
#define PDM_GAINR_GAINR_Msk (0x7FUL << PDM_GAINR_GAINR_Pos) /*!< Bit mask of GAINR field. */
#define PDM_GAINR_GAINR_MinGain (0x00UL) /*!< -20 dB gain adjustment (minimum) */
#define PDM_GAINR_GAINR_DefaultGain (0x28UL) /*!< 0 dB gain adjustment */
#define PDM_GAINR_GAINR_MaxGain (0x50UL) /*!< +20 dB gain adjustment (maximum) */

/* Register: PDM_RATIO */
/* Description: Selects the ratio between PDM_CLK and output sample rate. Change PDMCLKCTRL accordingly. */

/* Bit 0 : Selects the ratio between PDM_CLK and output sample rate */
#define PDM_RATIO_RATIO_Pos (0UL) /*!< Position of RATIO field. */
#define PDM_RATIO_RATIO_Msk (0x1UL << PDM_RATIO_RATIO_Pos) /*!< Bit mask of RATIO field. */
#define PDM_RATIO_RATIO_Ratio64 (0UL) /*!< Ratio of 64 */
#define PDM_RATIO_RATIO_Ratio80 (1UL) /*!< Ratio of 80 */

/* Register: PDM_FILTER_HPPOLE */
/* Description: Settings for the high-pass filter */

/* Bits 3..0 : Settings for the high-pass filter -3dB gain pole, assuming filter source clock of 2.048 MHz */
#define PDM_FILTER_HPPOLE_HPPOLE_Pos (0UL) /*!< Position of HPPOLE field. */
#define PDM_FILTER_HPPOLE_HPPOLE_Msk (0xFUL << PDM_FILTER_HPPOLE_HPPOLE_Pos) /*!< Bit mask of HPPOLE field. */
#define PDM_FILTER_HPPOLE_HPPOLE_p134k (1UL) /*!< 134010 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p73k (2UL) /*!< 73037 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p38k (3UL) /*!< 38436 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p19k (4UL) /*!< 19767 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p10k (5UL) /*!< 10031 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p5k (6UL) /*!< 5054 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p2k5 (7UL) /*!< 2537 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p1k2 (8UL) /*!< 1271 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p640 (9UL) /*!< 636 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p320 (10UL) /*!< 318 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p160 (11UL) /*!< 159 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p80 (12UL) /*!< 80 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p40 (13UL) /*!< 40 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p20 (14UL) /*!< 20 Hz */
#define PDM_FILTER_HPPOLE_HPPOLE_p10 (15UL) /*!< 10 Hz */

/* Register: PDM_FILTER_HPDISABLE */
/* Description: High pass filter disable */

/* Bit 0 : High pass filter disable */
#define PDM_FILTER_HPDISABLE_DISABLE_Pos (0UL) /*!< Position of DISABLE field. */
#define PDM_FILTER_HPDISABLE_DISABLE_Msk (0x1UL << PDM_FILTER_HPDISABLE_DISABLE_Pos) /*!< Bit mask of DISABLE field. */
#define PDM_FILTER_HPDISABLE_DISABLE_Enable (0UL) /*!< High pass filter enabled */
#define PDM_FILTER_HPDISABLE_DISABLE_Disable (1UL) /*!< High pass filter disabled */

/* Register: PDM_FILTER_SOFTMUTE */
/* Description: Soft mute function */

/* Bit 0 : Soft mute function */
#define PDM_FILTER_SOFTMUTE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define PDM_FILTER_SOFTMUTE_ENABLE_Msk (0x1UL << PDM_FILTER_SOFTMUTE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define PDM_FILTER_SOFTMUTE_ENABLE_Disabled (0UL) /*!< Disable soft mute function */
#define PDM_FILTER_SOFTMUTE_ENABLE_Enabled (1UL) /*!< Enable soft mute function */

/* Register: PDM_FILTER_SOFTCYCLES */
/* Description: Soft mute settings */

/* Bits 2..0 : Soft mute settings: amount of cycles for transition */
#define PDM_FILTER_SOFTCYCLES_DISABLE_Pos (0UL) /*!< Position of DISABLE field. */
#define PDM_FILTER_SOFTCYCLES_DISABLE_Msk (0x7UL << PDM_FILTER_SOFTCYCLES_DISABLE_Pos) /*!< Bit mask of DISABLE field. */
#define PDM_FILTER_SOFTCYCLES_DISABLE_s16 (0UL) /*!< 16 filter source clock cycles */
#define PDM_FILTER_SOFTCYCLES_DISABLE_s32 (1UL) /*!< 32 filter source clock cycles */
#define PDM_FILTER_SOFTCYCLES_DISABLE_s48 (2UL) /*!< 48 filter source clock cycles */
#define PDM_FILTER_SOFTCYCLES_DISABLE_s64 (3UL) /*!< 64 filter source clock cycles */
#define PDM_FILTER_SOFTCYCLES_DISABLE_s80 (4UL) /*!< 80 filter source clock cycles */
#define PDM_FILTER_SOFTCYCLES_DISABLE_s96 (5UL) /*!< 96 filter source clock cycles */
#define PDM_FILTER_SOFTCYCLES_DISABLE_s112 (6UL) /*!< 112 filter source clock cycles */
#define PDM_FILTER_SOFTCYCLES_DISABLE_s128 (7UL) /*!< 128 filter source clock cycles */

/* Register: PDM_FILTER_SAMPLEDELAY */
/* Description: Input Data Sampling with Number of PDM_CLK Clock Cycle Delay */

/* Bit 0 : Input Data Sampling with Number of PDM_CLK Clock Cycle Delay */
#define PDM_FILTER_SAMPLEDELAY_DELAY_Pos (0UL) /*!< Position of DELAY field. */
#define PDM_FILTER_SAMPLEDELAY_DELAY_Msk (0x1UL << PDM_FILTER_SAMPLEDELAY_DELAY_Pos) /*!< Bit mask of DELAY field. */
#define PDM_FILTER_SAMPLEDELAY_DELAY_x2 (0UL) /*!< 2x cycles */
#define PDM_FILTER_SAMPLEDELAY_DELAY_x4 (1UL) /*!< 4x cycles */

/* Register: PDM_PHASE */
/* Description: Selection of delay on the clock line (to avoid potential setup&amp;hold timing violation on input data) */

/* Bits 3..0 : To avoid potential setup&amp;hold timing violation on input data, this register provides selection between 14 phase delay registers (15 taps), which each provide an additional 31.25ns delay of pdmClockToPad relative to pdmClockToFilter. */
#define PDM_PHASE_PHASE_Pos (0UL) /*!< Position of PHASE field. */
#define PDM_PHASE_PHASE_Msk (0xFUL << PDM_PHASE_PHASE_Pos) /*!< Bit mask of PHASE field. */

/* Register: PDM_PSEL_CLK */
/* Description: Pin number configuration for PDM CLK signal */

/* Bit 31 : Connection */
#define PDM_PSEL_CLK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define PDM_PSEL_CLK_CONNECT_Msk (0x1UL << PDM_PSEL_CLK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define PDM_PSEL_CLK_CONNECT_Connected (0UL) /*!< Connect */
#define PDM_PSEL_CLK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define PDM_PSEL_CLK_PORT_Pos (5UL) /*!< Position of PORT field. */
#define PDM_PSEL_CLK_PORT_Msk (0x1UL << PDM_PSEL_CLK_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define PDM_PSEL_CLK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define PDM_PSEL_CLK_PIN_Msk (0x1FUL << PDM_PSEL_CLK_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: PDM_PSEL_DIN */
/* Description: Pin number configuration for PDM DIN signal */

/* Bit 31 : Connection */
#define PDM_PSEL_DIN_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define PDM_PSEL_DIN_CONNECT_Msk (0x1UL << PDM_PSEL_DIN_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define PDM_PSEL_DIN_CONNECT_Connected (0UL) /*!< Connect */
#define PDM_PSEL_DIN_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define PDM_PSEL_DIN_PORT_Pos (5UL) /*!< Position of PORT field. */
#define PDM_PSEL_DIN_PORT_Msk (0x1UL << PDM_PSEL_DIN_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define PDM_PSEL_DIN_PIN_Pos (0UL) /*!< Position of PIN field. */
#define PDM_PSEL_DIN_PIN_Msk (0x1FUL << PDM_PSEL_DIN_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: PDM_RAMCONFIG */
/* Description: Trim value for internal PDM RAM */

/* Bits 6..3 : Source Bias Trim Adjustment */
#define PDM_RAMCONFIG_BTRIM_Pos (3UL) /*!< Position of BTRIM field. */
#define PDM_RAMCONFIG_BTRIM_Msk (0xFUL << PDM_RAMCONFIG_BTRIM_Pos) /*!< Bit mask of BTRIM field. */

/* Bit 2 : Read Margin Adjustment */
#define PDM_RAMCONFIG_RM_Pos (2UL) /*!< Position of RM field. */
#define PDM_RAMCONFIG_RM_Msk (0x1UL << PDM_RAMCONFIG_RM_Pos) /*!< Bit mask of RM field. */

/* Bit 1 : Read/Write Margin Adjustment */
#define PDM_RAMCONFIG_RWM_Pos (1UL) /*!< Position of RWM field. */
#define PDM_RAMCONFIG_RWM_Msk (0x1UL << PDM_RAMCONFIG_RWM_Pos) /*!< Bit mask of RWM field. */

/* Bit 0 : Write Margin Adjustment */
#define PDM_RAMCONFIG_WM_Pos (0UL) /*!< Position of WM field. */
#define PDM_RAMCONFIG_WM_Msk (0x1UL << PDM_RAMCONFIG_WM_Pos) /*!< Bit mask of WM field. */

/* Register: PDM_MCLKCONFIG */
/* Description: Master clock generator configuration */

/* Bit 9 : Enable jittering master clock. */
#define PDM_MCLKCONFIG_JITTER_Pos (9UL) /*!< Position of JITTER field. */
#define PDM_MCLKCONFIG_JITTER_Msk (0x1UL << PDM_MCLKCONFIG_JITTER_Pos) /*!< Bit mask of JITTER field. */
#define PDM_MCLKCONFIG_JITTER_Disable (0UL) /*!< Disable jitter */
#define PDM_MCLKCONFIG_JITTER_Enable (1UL) /*!< Enable jitter */

/* Bit 0 : Master clock source selection */
#define PDM_MCLKCONFIG_SRC_Pos (0UL) /*!< Position of SRC field. */
#define PDM_MCLKCONFIG_SRC_Msk (0x1UL << PDM_MCLKCONFIG_SRC_Pos) /*!< Bit mask of SRC field. */
#define PDM_MCLKCONFIG_SRC_PCLK32M (0UL) /*!< 32 MHz peripheral clock */
#define PDM_MCLKCONFIG_SRC_ACLK (1UL) /*!< Audio PLL clock */

/* Register: PDM_SAMPLE_PTR */
/* Description: RAM address pointer to write samples to with EasyDMA */

/* Bits 31..0 : Address to write PDM samples to over DMA */
#define PDM_SAMPLE_PTR_SAMPLEPTR_Pos (0UL) /*!< Position of SAMPLEPTR field. */
#define PDM_SAMPLE_PTR_SAMPLEPTR_Msk (0xFFFFFFFFUL << PDM_SAMPLE_PTR_SAMPLEPTR_Pos) /*!< Bit mask of SAMPLEPTR field. */

/* Register: PDM_SAMPLE_MAXCNT */
/* Description: Number of samples to allocate memory for in EasyDMA mode */

/* Bits 14..0 : Length of DMA RAM allocation in number of samples */
#define PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos (0UL) /*!< Position of BUFFSIZE field. */
#define PDM_SAMPLE_MAXCNT_BUFFSIZE_Msk (0x7FFFUL << PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos) /*!< Bit mask of BUFFSIZE field. */

/* Register: PDM_SAMPLE_AMOUNT */
/* Description: Number of samples transferred into Data RAM since last START task */

/* Bits 14..0 : Number of samples transferred into Data RAM since last START task */
#define PDM_SAMPLE_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define PDM_SAMPLE_AMOUNT_AMOUNT_Msk (0x7FFFUL << PDM_SAMPLE_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */


/* Peripheral: POWER */
/* Description: Power control 0 */

/* Register: POWER_TASKS_CONSTLAT */
/* Description: Enable Constant Latency mode When going to sleep: CPU is clock gated, but regulators, oscillators and clock tree is kept on. */

/* Bit 0 : Enable Constant Latency mode When going to sleep: CPU is clock gated, but regulators, oscillators and clock tree is kept on. */
#define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos (0UL) /*!< Position of TASKS_CONSTLAT field. */
#define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Msk (0x1UL << POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos) /*!< Bit mask of TASKS_CONSTLAT field. */
#define POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Trigger (1UL) /*!< Trigger task */

/* Register: POWER_TASKS_LOWPWR */
/* Description: Enable Low-Power mode (variable latency) When going to sleep: Oscillators are switched off (if nothing else is requesting clocks). Regulators are switched off (if nothing else is requesting power). */

/* Bit 0 : Enable Low-Power mode (variable latency) When going to sleep: Oscillators are switched off (if nothing else is requesting clocks). Regulators are switched off (if nothing else is requesting power). */
#define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos (0UL) /*!< Position of TASKS_LOWPWR field. */
#define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Msk (0x1UL << POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos) /*!< Bit mask of TASKS_LOWPWR field. */
#define POWER_TASKS_LOWPWR_TASKS_LOWPWR_Trigger (1UL) /*!< Trigger task */

/* Register: POWER_SUBSCRIBE_CONSTLAT */
/* Description: Subscribe configuration for task CONSTLAT */

/* Bit 31 :   */
#define POWER_SUBSCRIBE_CONSTLAT_EN_Pos (31UL) /*!< Position of EN field. */
#define POWER_SUBSCRIBE_CONSTLAT_EN_Msk (0x1UL << POWER_SUBSCRIBE_CONSTLAT_EN_Pos) /*!< Bit mask of EN field. */
#define POWER_SUBSCRIBE_CONSTLAT_EN_Disabled (0UL) /*!< Disable subscription */
#define POWER_SUBSCRIBE_CONSTLAT_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CONSTLAT will subscribe to */
#define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define POWER_SUBSCRIBE_CONSTLAT_CHIDX_Msk (0xFFUL << POWER_SUBSCRIBE_CONSTLAT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: POWER_SUBSCRIBE_LOWPWR */
/* Description: Subscribe configuration for task LOWPWR */

/* Bit 31 :   */
#define POWER_SUBSCRIBE_LOWPWR_EN_Pos (31UL) /*!< Position of EN field. */
#define POWER_SUBSCRIBE_LOWPWR_EN_Msk (0x1UL << POWER_SUBSCRIBE_LOWPWR_EN_Pos) /*!< Bit mask of EN field. */
#define POWER_SUBSCRIBE_LOWPWR_EN_Disabled (0UL) /*!< Disable subscription */
#define POWER_SUBSCRIBE_LOWPWR_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task LOWPWR will subscribe to */
#define POWER_SUBSCRIBE_LOWPWR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define POWER_SUBSCRIBE_LOWPWR_CHIDX_Msk (0xFFUL << POWER_SUBSCRIBE_LOWPWR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: POWER_EVENTS_POFWARN */
/* Description: Power failure warning */

/* Bit 0 : Power failure warning */
#define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos (0UL) /*!< Position of EVENTS_POFWARN field. */
#define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Msk (0x1UL << POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos) /*!< Bit mask of EVENTS_POFWARN field. */
#define POWER_EVENTS_POFWARN_EVENTS_POFWARN_NotGenerated (0UL) /*!< Event not generated */
#define POWER_EVENTS_POFWARN_EVENTS_POFWARN_Generated (1UL) /*!< Event generated */

/* Register: POWER_EVENTS_SLEEPENTER */
/* Description: CPU entered WFI/WFE sleep */

/* Bit 0 : CPU entered WFI/WFE sleep */
#define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos (0UL) /*!< Position of EVENTS_SLEEPENTER field. */
#define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Msk (0x1UL << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos) /*!< Bit mask of EVENTS_SLEEPENTER field. */
#define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated (0UL) /*!< Event not generated */
#define POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Generated (1UL) /*!< Event generated */

/* Register: POWER_EVENTS_SLEEPEXIT */
/* Description: CPU exited WFI/WFE sleep */

/* Bit 0 : CPU exited WFI/WFE sleep */
#define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos (0UL) /*!< Position of EVENTS_SLEEPEXIT field. */
#define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Msk (0x1UL << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos) /*!< Bit mask of EVENTS_SLEEPEXIT field. */
#define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated (0UL) /*!< Event not generated */
#define POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Generated (1UL) /*!< Event generated */

/* Register: POWER_PUBLISH_POFWARN */
/* Description: Publish configuration for event POFWARN */

/* Bit 31 :   */
#define POWER_PUBLISH_POFWARN_EN_Pos (31UL) /*!< Position of EN field. */
#define POWER_PUBLISH_POFWARN_EN_Msk (0x1UL << POWER_PUBLISH_POFWARN_EN_Pos) /*!< Bit mask of EN field. */
#define POWER_PUBLISH_POFWARN_EN_Disabled (0UL) /*!< Disable publishing */
#define POWER_PUBLISH_POFWARN_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event POFWARN will publish to. */
#define POWER_PUBLISH_POFWARN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define POWER_PUBLISH_POFWARN_CHIDX_Msk (0xFFUL << POWER_PUBLISH_POFWARN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: POWER_PUBLISH_SLEEPENTER */
/* Description: Publish configuration for event SLEEPENTER */

/* Bit 31 :   */
#define POWER_PUBLISH_SLEEPENTER_EN_Pos (31UL) /*!< Position of EN field. */
#define POWER_PUBLISH_SLEEPENTER_EN_Msk (0x1UL << POWER_PUBLISH_SLEEPENTER_EN_Pos) /*!< Bit mask of EN field. */
#define POWER_PUBLISH_SLEEPENTER_EN_Disabled (0UL) /*!< Disable publishing */
#define POWER_PUBLISH_SLEEPENTER_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SLEEPENTER will publish to. */
#define POWER_PUBLISH_SLEEPENTER_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define POWER_PUBLISH_SLEEPENTER_CHIDX_Msk (0xFFUL << POWER_PUBLISH_SLEEPENTER_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: POWER_PUBLISH_SLEEPEXIT */
/* Description: Publish configuration for event SLEEPEXIT */

/* Bit 31 :   */
#define POWER_PUBLISH_SLEEPEXIT_EN_Pos (31UL) /*!< Position of EN field. */
#define POWER_PUBLISH_SLEEPEXIT_EN_Msk (0x1UL << POWER_PUBLISH_SLEEPEXIT_EN_Pos) /*!< Bit mask of EN field. */
#define POWER_PUBLISH_SLEEPEXIT_EN_Disabled (0UL) /*!< Disable publishing */
#define POWER_PUBLISH_SLEEPEXIT_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SLEEPEXIT will publish to. */
#define POWER_PUBLISH_SLEEPEXIT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define POWER_PUBLISH_SLEEPEXIT_CHIDX_Msk (0xFFUL << POWER_PUBLISH_SLEEPEXIT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: POWER_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 6 : Enable or disable interrupt for event SLEEPEXIT */
#define POWER_INTEN_SLEEPEXIT_Pos (6UL) /*!< Position of SLEEPEXIT field. */
#define POWER_INTEN_SLEEPEXIT_Msk (0x1UL << POWER_INTEN_SLEEPEXIT_Pos) /*!< Bit mask of SLEEPEXIT field. */
#define POWER_INTEN_SLEEPEXIT_Disabled (0UL) /*!< Disable */
#define POWER_INTEN_SLEEPEXIT_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event SLEEPENTER */
#define POWER_INTEN_SLEEPENTER_Pos (5UL) /*!< Position of SLEEPENTER field. */
#define POWER_INTEN_SLEEPENTER_Msk (0x1UL << POWER_INTEN_SLEEPENTER_Pos) /*!< Bit mask of SLEEPENTER field. */
#define POWER_INTEN_SLEEPENTER_Disabled (0UL) /*!< Disable */
#define POWER_INTEN_SLEEPENTER_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event POFWARN */
#define POWER_INTEN_POFWARN_Pos (2UL) /*!< Position of POFWARN field. */
#define POWER_INTEN_POFWARN_Msk (0x1UL << POWER_INTEN_POFWARN_Pos) /*!< Bit mask of POFWARN field. */
#define POWER_INTEN_POFWARN_Disabled (0UL) /*!< Disable */
#define POWER_INTEN_POFWARN_Enabled (1UL) /*!< Enable */

/* Register: POWER_INTENSET */
/* Description: Enable interrupt */

/* Bit 6 : Write '1' to enable interrupt for event SLEEPEXIT */
#define POWER_INTENSET_SLEEPEXIT_Pos (6UL) /*!< Position of SLEEPEXIT field. */
#define POWER_INTENSET_SLEEPEXIT_Msk (0x1UL << POWER_INTENSET_SLEEPEXIT_Pos) /*!< Bit mask of SLEEPEXIT field. */
#define POWER_INTENSET_SLEEPEXIT_Disabled (0UL) /*!< Read: Disabled */
#define POWER_INTENSET_SLEEPEXIT_Enabled (1UL) /*!< Read: Enabled */
#define POWER_INTENSET_SLEEPEXIT_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event SLEEPENTER */
#define POWER_INTENSET_SLEEPENTER_Pos (5UL) /*!< Position of SLEEPENTER field. */
#define POWER_INTENSET_SLEEPENTER_Msk (0x1UL << POWER_INTENSET_SLEEPENTER_Pos) /*!< Bit mask of SLEEPENTER field. */
#define POWER_INTENSET_SLEEPENTER_Disabled (0UL) /*!< Read: Disabled */
#define POWER_INTENSET_SLEEPENTER_Enabled (1UL) /*!< Read: Enabled */
#define POWER_INTENSET_SLEEPENTER_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event POFWARN */
#define POWER_INTENSET_POFWARN_Pos (2UL) /*!< Position of POFWARN field. */
#define POWER_INTENSET_POFWARN_Msk (0x1UL << POWER_INTENSET_POFWARN_Pos) /*!< Bit mask of POFWARN field. */
#define POWER_INTENSET_POFWARN_Disabled (0UL) /*!< Read: Disabled */
#define POWER_INTENSET_POFWARN_Enabled (1UL) /*!< Read: Enabled */
#define POWER_INTENSET_POFWARN_Set (1UL) /*!< Enable */

/* Register: POWER_INTENCLR */
/* Description: Disable interrupt */

/* Bit 6 : Write '1' to disable interrupt for event SLEEPEXIT */
#define POWER_INTENCLR_SLEEPEXIT_Pos (6UL) /*!< Position of SLEEPEXIT field. */
#define POWER_INTENCLR_SLEEPEXIT_Msk (0x1UL << POWER_INTENCLR_SLEEPEXIT_Pos) /*!< Bit mask of SLEEPEXIT field. */
#define POWER_INTENCLR_SLEEPEXIT_Disabled (0UL) /*!< Read: Disabled */
#define POWER_INTENCLR_SLEEPEXIT_Enabled (1UL) /*!< Read: Enabled */
#define POWER_INTENCLR_SLEEPEXIT_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event SLEEPENTER */
#define POWER_INTENCLR_SLEEPENTER_Pos (5UL) /*!< Position of SLEEPENTER field. */
#define POWER_INTENCLR_SLEEPENTER_Msk (0x1UL << POWER_INTENCLR_SLEEPENTER_Pos) /*!< Bit mask of SLEEPENTER field. */
#define POWER_INTENCLR_SLEEPENTER_Disabled (0UL) /*!< Read: Disabled */
#define POWER_INTENCLR_SLEEPENTER_Enabled (1UL) /*!< Read: Enabled */
#define POWER_INTENCLR_SLEEPENTER_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event POFWARN */
#define POWER_INTENCLR_POFWARN_Pos (2UL) /*!< Position of POFWARN field. */
#define POWER_INTENCLR_POFWARN_Msk (0x1UL << POWER_INTENCLR_POFWARN_Pos) /*!< Bit mask of POFWARN field. */
#define POWER_INTENCLR_POFWARN_Disabled (0UL) /*!< Read: Disabled */
#define POWER_INTENCLR_POFWARN_Enabled (1UL) /*!< Read: Enabled */
#define POWER_INTENCLR_POFWARN_Clear (1UL) /*!< Disable */

/* Register: POWER_GPREGRET */
/* Description: Description collection: General purpose retention register */

/* Bits 7..0 : General purpose retention register */
#define POWER_GPREGRET_GPREGRET_Pos (0UL) /*!< Position of GPREGRET field. */
#define POWER_GPREGRET_GPREGRET_Msk (0xFFUL << POWER_GPREGRET_GPREGRET_Pos) /*!< Bit mask of GPREGRET field. */


/* Peripheral: PWM */
/* Description: Pulse width modulation unit 0 */

/* Register: PWM_TASKS_START */
/* Description: Starts PWM pulse generation with the last loaded values */

/* Bit 0 : Starts PWM pulse generation with the last loaded values */
#define PWM_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define PWM_TASKS_START_TASKS_START_Msk (0x1UL << PWM_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define PWM_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: PWM_TASKS_STOP */
/* Description: Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback */

/* Bit 0 : Stops PWM pulse generation on all channels at the end of current PWM period, and stops sequence playback */
#define PWM_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define PWM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << PWM_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define PWM_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: PWM_TASKS_SEQSTART */
/* Description: Description collection: Loads the first PWM value on all enabled channels from sequence n, and starts playing that sequence at the rate defined in SEQ[n]REFRESH and/or DECODER.MODE. Causes PWM generation to start if not running. Triggering a SEQSTART[n] task while a sequence is already playing back will gracefully (i.e. glitch-free) abort that sequence at the earliest opportunity and start sequence n. */

/* Bit 0 : Loads the first PWM value on all enabled channels from sequence n, and starts playing that sequence at the rate defined in SEQ[n]REFRESH and/or DECODER.MODE. Causes PWM generation to start if not running. Triggering a SEQSTART[n] task while a sequence is already playing back will gracefully (i.e. glitch-free) abort that sequence at the earliest opportunity and start sequence n. */
#define PWM_TASKS_SEQSTART_TASKS_SEQSTART_Pos (0UL) /*!< Position of TASKS_SEQSTART field. */
#define PWM_TASKS_SEQSTART_TASKS_SEQSTART_Msk (0x1UL << PWM_TASKS_SEQSTART_TASKS_SEQSTART_Pos) /*!< Bit mask of TASKS_SEQSTART field. */
#define PWM_TASKS_SEQSTART_TASKS_SEQSTART_Trigger (1UL) /*!< Trigger task */

/* Register: PWM_TASKS_NEXTSTEP */
/* Description: Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not cause PWM generation to start if not running. */

/* Bit 0 : Steps by one value in the current sequence on all enabled channels if DECODER.MODE=NextStep. Does not cause PWM generation to start if not running. */
#define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos (0UL) /*!< Position of TASKS_NEXTSTEP field. */
#define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Msk (0x1UL << PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos) /*!< Bit mask of TASKS_NEXTSTEP field. */
#define PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Trigger (1UL) /*!< Trigger task */

/* Register: PWM_TASKS_SEQABORT */
/* Description: (Gracefully) aborts the playback of the current sequence or the current end delay */

/* Bit 0 : (Gracefully) aborts the playback of the current sequence or the current end delay */
#define PWM_TASKS_SEQABORT_TASKS_SEQABORT_Pos (0UL) /*!< Position of TASKS_SEQABORT field. */
#define PWM_TASKS_SEQABORT_TASKS_SEQABORT_Msk (0x1UL << PWM_TASKS_SEQABORT_TASKS_SEQABORT_Pos) /*!< Bit mask of TASKS_SEQABORT field. */
#define PWM_TASKS_SEQABORT_TASKS_SEQABORT_Trigger (1UL) /*!< Trigger task */

/* Register: PWM_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define PWM_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_SUBSCRIBE_START_EN_Msk (0x1UL << PWM_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define PWM_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define PWM_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define PWM_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_SUBSCRIBE_STOP_EN_Msk (0x1UL << PWM_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define PWM_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define PWM_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_SUBSCRIBE_SEQSTART */
/* Description: Description collection: Subscribe configuration for task SEQSTART[n] */

/* Bit 31 :   */
#define PWM_SUBSCRIBE_SEQSTART_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_SUBSCRIBE_SEQSTART_EN_Msk (0x1UL << PWM_SUBSCRIBE_SEQSTART_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_SUBSCRIBE_SEQSTART_EN_Disabled (0UL) /*!< Disable subscription */
#define PWM_SUBSCRIBE_SEQSTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SEQSTART[n] will subscribe to */
#define PWM_SUBSCRIBE_SEQSTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_SUBSCRIBE_SEQSTART_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_SEQSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_SUBSCRIBE_NEXTSTEP */
/* Description: Subscribe configuration for task NEXTSTEP */

/* Bit 31 :   */
#define PWM_SUBSCRIBE_NEXTSTEP_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_SUBSCRIBE_NEXTSTEP_EN_Msk (0x1UL << PWM_SUBSCRIBE_NEXTSTEP_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_SUBSCRIBE_NEXTSTEP_EN_Disabled (0UL) /*!< Disable subscription */
#define PWM_SUBSCRIBE_NEXTSTEP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task NEXTSTEP will subscribe to */
#define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_NEXTSTEP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_SUBSCRIBE_SEQABORT */
/* Description: Subscribe configuration for task SEQABORT */

/* Bit 31 :   */
#define PWM_SUBSCRIBE_SEQABORT_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_SUBSCRIBE_SEQABORT_EN_Msk (0x1UL << PWM_SUBSCRIBE_SEQABORT_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_SUBSCRIBE_SEQABORT_EN_Disabled (0UL) /*!< Disable subscription */
#define PWM_SUBSCRIBE_SEQABORT_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SEQABORT will subscribe to */
#define PWM_SUBSCRIBE_SEQABORT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_SUBSCRIBE_SEQABORT_CHIDX_Msk (0xFFUL << PWM_SUBSCRIBE_SEQABORT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_EVENTS_STARTED */
/* Description: Response to START task, emitted when the PWM pulse generation starts */

/* Bit 0 : Response to START task, emitted when the PWM pulse generation starts */
#define PWM_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL) /*!< Position of EVENTS_STARTED field. */
#define PWM_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << PWM_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of EVENTS_STARTED field. */
#define PWM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_STARTED_EVENTS_STARTED_Generated (1UL) /*!< Event generated */

/* Register: PWM_EVENTS_STOPPED */
/* Description: Response to STOP task, emitted when PWM pulses are no longer generated */

/* Bit 0 : Response to STOP task, emitted when PWM pulses are no longer generated */
#define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define PWM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: PWM_EVENTS_SEQSTARTED */
/* Description: Description collection: First PWM period started on sequence n */

/* Bit 0 : First PWM period started on sequence n */
#define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos (0UL) /*!< Position of EVENTS_SEQSTARTED field. */
#define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Msk (0x1UL << PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos) /*!< Bit mask of EVENTS_SEQSTARTED field. */
#define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Generated (1UL) /*!< Event generated */

/* Register: PWM_EVENTS_SEQEND */
/* Description: Description collection: Emitted at end of every sequence n, when last value from RAM has been applied to wave counter */

/* Bit 0 : Emitted at end of every sequence n, when last value from RAM has been applied to wave counter */
#define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos (0UL) /*!< Position of EVENTS_SEQEND field. */
#define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Msk (0x1UL << PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos) /*!< Bit mask of EVENTS_SEQEND field. */
#define PWM_EVENTS_SEQEND_EVENTS_SEQEND_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_SEQEND_EVENTS_SEQEND_Generated (1UL) /*!< Event generated */

/* Register: PWM_EVENTS_PWMPERIODEND */
/* Description: Emitted at the end of each PWM period */

/* Bit 0 : Emitted at the end of each PWM period */
#define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos (0UL) /*!< Position of EVENTS_PWMPERIODEND field. */
#define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Msk (0x1UL << PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos) /*!< Bit mask of EVENTS_PWMPERIODEND field. */
#define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Generated (1UL) /*!< Event generated */

/* Register: PWM_EVENTS_LOOPSDONE */
/* Description: Concatenated sequences have been played the amount of times defined in LOOP.CNT */

/* Bit 0 : Concatenated sequences have been played the amount of times defined in LOOP.CNT */
#define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos (0UL) /*!< Position of EVENTS_LOOPSDONE field. */
#define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Msk (0x1UL << PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos) /*!< Bit mask of EVENTS_LOOPSDONE field. */
#define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Generated (1UL) /*!< Event generated */

/* Register: PWM_EVENTS_RAMUNDERFLOW */
/* Description: Emitted when retrieving from RAM does not complete in time for the PWM module */

/* Bit 0 : Emitted when retrieving from RAM does not complete in time for the PWM module */
#define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Pos (0UL) /*!< Position of EVENTS_RAMUNDERFLOW field. */
#define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Msk (0x1UL << PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Pos) /*!< Bit mask of EVENTS_RAMUNDERFLOW field. */
#define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_RAMUNDERFLOW_EVENTS_RAMUNDERFLOW_Generated (1UL) /*!< Event generated */

/* Register: PWM_EVENTS_DMAREADY */
/* Description: Description collection: Emitted when EasyDMA has retrieved the .PTR and .CNT registers for sequence n (they can be prepared for the next sequence) */

/* Bit 0 : Emitted when EasyDMA has retrieved the .PTR and .CNT registers for sequence n (they can be prepared for the next sequence) */
#define PWM_EVENTS_DMAREADY_EVENTS_DMAREADY_Pos (0UL) /*!< Position of EVENTS_DMAREADY field. */
#define PWM_EVENTS_DMAREADY_EVENTS_DMAREADY_Msk (0x1UL << PWM_EVENTS_DMAREADY_EVENTS_DMAREADY_Pos) /*!< Bit mask of EVENTS_DMAREADY field. */
#define PWM_EVENTS_DMAREADY_EVENTS_DMAREADY_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_DMAREADY_EVENTS_DMAREADY_Generated (1UL) /*!< Event generated */

/* Register: PWM_EVENTS_DMAEND */
/* Description: Description collection: Emitted when EasyDMA has completed retrieving the values of sequence n from RAM buffer */

/* Bit 0 : Emitted when EasyDMA has completed retrieving the values of sequence n from RAM buffer */
#define PWM_EVENTS_DMAEND_EVENTS_DMAEND_Pos (0UL) /*!< Position of EVENTS_DMAEND field. */
#define PWM_EVENTS_DMAEND_EVENTS_DMAEND_Msk (0x1UL << PWM_EVENTS_DMAEND_EVENTS_DMAEND_Pos) /*!< Bit mask of EVENTS_DMAEND field. */
#define PWM_EVENTS_DMAEND_EVENTS_DMAEND_NotGenerated (0UL) /*!< Event not generated */
#define PWM_EVENTS_DMAEND_EVENTS_DMAEND_Generated (1UL) /*!< Event generated */

/* Register: PWM_PUBLISH_STARTED */
/* Description: Publish configuration for event STARTED */

/* Bit 31 :   */
#define PWM_PUBLISH_STARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_STARTED_EN_Msk (0x1UL << PWM_PUBLISH_STARTED_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_STARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_STARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STARTED will publish to. */
#define PWM_PUBLISH_STARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << PWM_PUBLISH_STARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define PWM_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_STOPPED_EN_Msk (0x1UL << PWM_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define PWM_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << PWM_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_PUBLISH_SEQSTARTED */
/* Description: Description collection: Publish configuration for event SEQSTARTED[n] */

/* Bit 31 :   */
#define PWM_PUBLISH_SEQSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_SEQSTARTED_EN_Msk (0x1UL << PWM_PUBLISH_SEQSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_SEQSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_SEQSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SEQSTARTED[n] will publish to. */
#define PWM_PUBLISH_SEQSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_SEQSTARTED_CHIDX_Msk (0xFFUL << PWM_PUBLISH_SEQSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_PUBLISH_SEQEND */
/* Description: Description collection: Publish configuration for event SEQEND[n] */

/* Bit 31 :   */
#define PWM_PUBLISH_SEQEND_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_SEQEND_EN_Msk (0x1UL << PWM_PUBLISH_SEQEND_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_SEQEND_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_SEQEND_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SEQEND[n] will publish to. */
#define PWM_PUBLISH_SEQEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_SEQEND_CHIDX_Msk (0xFFUL << PWM_PUBLISH_SEQEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_PUBLISH_PWMPERIODEND */
/* Description: Publish configuration for event PWMPERIODEND */

/* Bit 31 :   */
#define PWM_PUBLISH_PWMPERIODEND_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_PWMPERIODEND_EN_Msk (0x1UL << PWM_PUBLISH_PWMPERIODEND_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_PWMPERIODEND_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_PWMPERIODEND_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event PWMPERIODEND will publish to. */
#define PWM_PUBLISH_PWMPERIODEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_PWMPERIODEND_CHIDX_Msk (0xFFUL << PWM_PUBLISH_PWMPERIODEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_PUBLISH_LOOPSDONE */
/* Description: Publish configuration for event LOOPSDONE */

/* Bit 31 :   */
#define PWM_PUBLISH_LOOPSDONE_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_LOOPSDONE_EN_Msk (0x1UL << PWM_PUBLISH_LOOPSDONE_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_LOOPSDONE_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_LOOPSDONE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event LOOPSDONE will publish to. */
#define PWM_PUBLISH_LOOPSDONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_LOOPSDONE_CHIDX_Msk (0xFFUL << PWM_PUBLISH_LOOPSDONE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_PUBLISH_RAMUNDERFLOW */
/* Description: Publish configuration for event RAMUNDERFLOW */

/* Bit 31 :   */
#define PWM_PUBLISH_RAMUNDERFLOW_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_RAMUNDERFLOW_EN_Msk (0x1UL << PWM_PUBLISH_RAMUNDERFLOW_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_RAMUNDERFLOW_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_RAMUNDERFLOW_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RAMUNDERFLOW will publish to. */
#define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Msk (0xFFUL << PWM_PUBLISH_RAMUNDERFLOW_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_PUBLISH_DMAREADY */
/* Description: Description collection: Publish configuration for event DMAREADY[n] */

/* Bit 31 :   */
#define PWM_PUBLISH_DMAREADY_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_DMAREADY_EN_Msk (0x1UL << PWM_PUBLISH_DMAREADY_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_DMAREADY_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_DMAREADY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DMAREADY[n] will publish to. */
#define PWM_PUBLISH_DMAREADY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_DMAREADY_CHIDX_Msk (0xFFUL << PWM_PUBLISH_DMAREADY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_PUBLISH_DMAEND */
/* Description: Description collection: Publish configuration for event DMAEND[n] */

/* Bit 31 :   */
#define PWM_PUBLISH_DMAEND_EN_Pos (31UL) /*!< Position of EN field. */
#define PWM_PUBLISH_DMAEND_EN_Msk (0x1UL << PWM_PUBLISH_DMAEND_EN_Pos) /*!< Bit mask of EN field. */
#define PWM_PUBLISH_DMAEND_EN_Disabled (0UL) /*!< Disable publishing */
#define PWM_PUBLISH_DMAEND_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DMAEND[n] will publish to. */
#define PWM_PUBLISH_DMAEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define PWM_PUBLISH_DMAEND_CHIDX_Msk (0xFFUL << PWM_PUBLISH_DMAEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: PWM_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 5 : Shortcut between event RAMUNDERFLOW and task STOP */
#define PWM_SHORTS_RAMUNDERFLOW_STOP_Pos (5UL) /*!< Position of RAMUNDERFLOW_STOP field. */
#define PWM_SHORTS_RAMUNDERFLOW_STOP_Msk (0x1UL << PWM_SHORTS_RAMUNDERFLOW_STOP_Pos) /*!< Bit mask of RAMUNDERFLOW_STOP field. */
#define PWM_SHORTS_RAMUNDERFLOW_STOP_Disabled (0UL) /*!< Disable shortcut */
#define PWM_SHORTS_RAMUNDERFLOW_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 4 : Shortcut between event LOOPSDONE and task STOP */
#define PWM_SHORTS_LOOPSDONE_STOP_Pos (4UL) /*!< Position of LOOPSDONE_STOP field. */
#define PWM_SHORTS_LOOPSDONE_STOP_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_STOP_Pos) /*!< Bit mask of LOOPSDONE_STOP field. */
#define PWM_SHORTS_LOOPSDONE_STOP_Disabled (0UL) /*!< Disable shortcut */
#define PWM_SHORTS_LOOPSDONE_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event LOOPSDONE and task SEQSTART[1] */
#define PWM_SHORTS_LOOPSDONE_SEQSTART1_Pos (3UL) /*!< Position of LOOPSDONE_SEQSTART1 field. */
#define PWM_SHORTS_LOOPSDONE_SEQSTART1_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_SEQSTART1_Pos) /*!< Bit mask of LOOPSDONE_SEQSTART1 field. */
#define PWM_SHORTS_LOOPSDONE_SEQSTART1_Disabled (0UL) /*!< Disable shortcut */
#define PWM_SHORTS_LOOPSDONE_SEQSTART1_Enabled (1UL) /*!< Enable shortcut */

/* Bit 2 : Shortcut between event LOOPSDONE and task SEQSTART[0] */
#define PWM_SHORTS_LOOPSDONE_SEQSTART0_Pos (2UL) /*!< Position of LOOPSDONE_SEQSTART0 field. */
#define PWM_SHORTS_LOOPSDONE_SEQSTART0_Msk (0x1UL << PWM_SHORTS_LOOPSDONE_SEQSTART0_Pos) /*!< Bit mask of LOOPSDONE_SEQSTART0 field. */
#define PWM_SHORTS_LOOPSDONE_SEQSTART0_Disabled (0UL) /*!< Disable shortcut */
#define PWM_SHORTS_LOOPSDONE_SEQSTART0_Enabled (1UL) /*!< Enable shortcut */

/* Bit 1 : Shortcut between event SEQEND[1] and task STOP */
#define PWM_SHORTS_SEQEND1_STOP_Pos (1UL) /*!< Position of SEQEND1_STOP field. */
#define PWM_SHORTS_SEQEND1_STOP_Msk (0x1UL << PWM_SHORTS_SEQEND1_STOP_Pos) /*!< Bit mask of SEQEND1_STOP field. */
#define PWM_SHORTS_SEQEND1_STOP_Disabled (0UL) /*!< Disable shortcut */
#define PWM_SHORTS_SEQEND1_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event SEQEND[0] and task STOP */
#define PWM_SHORTS_SEQEND0_STOP_Pos (0UL) /*!< Position of SEQEND0_STOP field. */
#define PWM_SHORTS_SEQEND0_STOP_Msk (0x1UL << PWM_SHORTS_SEQEND0_STOP_Pos) /*!< Bit mask of SEQEND0_STOP field. */
#define PWM_SHORTS_SEQEND0_STOP_Disabled (0UL) /*!< Disable shortcut */
#define PWM_SHORTS_SEQEND0_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Register: PWM_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 12 : Enable or disable interrupt for event DMAEND[1] */
#define PWM_INTEN_DMAEND1_Pos (12UL) /*!< Position of DMAEND1 field. */
#define PWM_INTEN_DMAEND1_Msk (0x1UL << PWM_INTEN_DMAEND1_Pos) /*!< Bit mask of DMAEND1 field. */
#define PWM_INTEN_DMAEND1_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_DMAEND1_Enabled (1UL) /*!< Enable */

/* Bit 11 : Enable or disable interrupt for event DMAEND[0] */
#define PWM_INTEN_DMAEND0_Pos (11UL) /*!< Position of DMAEND0 field. */
#define PWM_INTEN_DMAEND0_Msk (0x1UL << PWM_INTEN_DMAEND0_Pos) /*!< Bit mask of DMAEND0 field. */
#define PWM_INTEN_DMAEND0_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_DMAEND0_Enabled (1UL) /*!< Enable */

/* Bit 10 : Enable or disable interrupt for event DMAREADY[1] */
#define PWM_INTEN_DMAREADY1_Pos (10UL) /*!< Position of DMAREADY1 field. */
#define PWM_INTEN_DMAREADY1_Msk (0x1UL << PWM_INTEN_DMAREADY1_Pos) /*!< Bit mask of DMAREADY1 field. */
#define PWM_INTEN_DMAREADY1_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_DMAREADY1_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event DMAREADY[0] */
#define PWM_INTEN_DMAREADY0_Pos (9UL) /*!< Position of DMAREADY0 field. */
#define PWM_INTEN_DMAREADY0_Msk (0x1UL << PWM_INTEN_DMAREADY0_Pos) /*!< Bit mask of DMAREADY0 field. */
#define PWM_INTEN_DMAREADY0_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_DMAREADY0_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event RAMUNDERFLOW */
#define PWM_INTEN_RAMUNDERFLOW_Pos (8UL) /*!< Position of RAMUNDERFLOW field. */
#define PWM_INTEN_RAMUNDERFLOW_Msk (0x1UL << PWM_INTEN_RAMUNDERFLOW_Pos) /*!< Bit mask of RAMUNDERFLOW field. */
#define PWM_INTEN_RAMUNDERFLOW_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_RAMUNDERFLOW_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event LOOPSDONE */
#define PWM_INTEN_LOOPSDONE_Pos (7UL) /*!< Position of LOOPSDONE field. */
#define PWM_INTEN_LOOPSDONE_Msk (0x1UL << PWM_INTEN_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field. */
#define PWM_INTEN_LOOPSDONE_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_LOOPSDONE_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event PWMPERIODEND */
#define PWM_INTEN_PWMPERIODEND_Pos (6UL) /*!< Position of PWMPERIODEND field. */
#define PWM_INTEN_PWMPERIODEND_Msk (0x1UL << PWM_INTEN_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field. */
#define PWM_INTEN_PWMPERIODEND_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_PWMPERIODEND_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event SEQEND[1] */
#define PWM_INTEN_SEQEND1_Pos (5UL) /*!< Position of SEQEND1 field. */
#define PWM_INTEN_SEQEND1_Msk (0x1UL << PWM_INTEN_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field. */
#define PWM_INTEN_SEQEND1_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_SEQEND1_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event SEQEND[0] */
#define PWM_INTEN_SEQEND0_Pos (4UL) /*!< Position of SEQEND0 field. */
#define PWM_INTEN_SEQEND0_Msk (0x1UL << PWM_INTEN_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field. */
#define PWM_INTEN_SEQEND0_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_SEQEND0_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event SEQSTARTED[1] */
#define PWM_INTEN_SEQSTARTED1_Pos (3UL) /*!< Position of SEQSTARTED1 field. */
#define PWM_INTEN_SEQSTARTED1_Msk (0x1UL << PWM_INTEN_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field. */
#define PWM_INTEN_SEQSTARTED1_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_SEQSTARTED1_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event SEQSTARTED[0] */
#define PWM_INTEN_SEQSTARTED0_Pos (2UL) /*!< Position of SEQSTARTED0 field. */
#define PWM_INTEN_SEQSTARTED0_Msk (0x1UL << PWM_INTEN_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field. */
#define PWM_INTEN_SEQSTARTED0_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_SEQSTARTED0_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event STOPPED */
#define PWM_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define PWM_INTEN_STOPPED_Msk (0x1UL << PWM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define PWM_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event STARTED */
#define PWM_INTEN_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define PWM_INTEN_STARTED_Msk (0x1UL << PWM_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define PWM_INTEN_STARTED_Disabled (0UL) /*!< Disable */
#define PWM_INTEN_STARTED_Enabled (1UL) /*!< Enable */

/* Register: PWM_INTENSET */
/* Description: Enable interrupt */

/* Bit 12 : Write '1' to enable interrupt for event DMAEND[1] */
#define PWM_INTENSET_DMAEND1_Pos (12UL) /*!< Position of DMAEND1 field. */
#define PWM_INTENSET_DMAEND1_Msk (0x1UL << PWM_INTENSET_DMAEND1_Pos) /*!< Bit mask of DMAEND1 field. */
#define PWM_INTENSET_DMAEND1_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_DMAEND1_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_DMAEND1_Set (1UL) /*!< Enable */

/* Bit 11 : Write '1' to enable interrupt for event DMAEND[0] */
#define PWM_INTENSET_DMAEND0_Pos (11UL) /*!< Position of DMAEND0 field. */
#define PWM_INTENSET_DMAEND0_Msk (0x1UL << PWM_INTENSET_DMAEND0_Pos) /*!< Bit mask of DMAEND0 field. */
#define PWM_INTENSET_DMAEND0_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_DMAEND0_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_DMAEND0_Set (1UL) /*!< Enable */

/* Bit 10 : Write '1' to enable interrupt for event DMAREADY[1] */
#define PWM_INTENSET_DMAREADY1_Pos (10UL) /*!< Position of DMAREADY1 field. */
#define PWM_INTENSET_DMAREADY1_Msk (0x1UL << PWM_INTENSET_DMAREADY1_Pos) /*!< Bit mask of DMAREADY1 field. */
#define PWM_INTENSET_DMAREADY1_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_DMAREADY1_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_DMAREADY1_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event DMAREADY[0] */
#define PWM_INTENSET_DMAREADY0_Pos (9UL) /*!< Position of DMAREADY0 field. */
#define PWM_INTENSET_DMAREADY0_Msk (0x1UL << PWM_INTENSET_DMAREADY0_Pos) /*!< Bit mask of DMAREADY0 field. */
#define PWM_INTENSET_DMAREADY0_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_DMAREADY0_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_DMAREADY0_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event RAMUNDERFLOW */
#define PWM_INTENSET_RAMUNDERFLOW_Pos (8UL) /*!< Position of RAMUNDERFLOW field. */
#define PWM_INTENSET_RAMUNDERFLOW_Msk (0x1UL << PWM_INTENSET_RAMUNDERFLOW_Pos) /*!< Bit mask of RAMUNDERFLOW field. */
#define PWM_INTENSET_RAMUNDERFLOW_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_RAMUNDERFLOW_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_RAMUNDERFLOW_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event LOOPSDONE */
#define PWM_INTENSET_LOOPSDONE_Pos (7UL) /*!< Position of LOOPSDONE field. */
#define PWM_INTENSET_LOOPSDONE_Msk (0x1UL << PWM_INTENSET_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field. */
#define PWM_INTENSET_LOOPSDONE_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_LOOPSDONE_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_LOOPSDONE_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event PWMPERIODEND */
#define PWM_INTENSET_PWMPERIODEND_Pos (6UL) /*!< Position of PWMPERIODEND field. */
#define PWM_INTENSET_PWMPERIODEND_Msk (0x1UL << PWM_INTENSET_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field. */
#define PWM_INTENSET_PWMPERIODEND_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_PWMPERIODEND_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_PWMPERIODEND_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event SEQEND[1] */
#define PWM_INTENSET_SEQEND1_Pos (5UL) /*!< Position of SEQEND1 field. */
#define PWM_INTENSET_SEQEND1_Msk (0x1UL << PWM_INTENSET_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field. */
#define PWM_INTENSET_SEQEND1_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_SEQEND1_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_SEQEND1_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event SEQEND[0] */
#define PWM_INTENSET_SEQEND0_Pos (4UL) /*!< Position of SEQEND0 field. */
#define PWM_INTENSET_SEQEND0_Msk (0x1UL << PWM_INTENSET_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field. */
#define PWM_INTENSET_SEQEND0_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_SEQEND0_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_SEQEND0_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event SEQSTARTED[1] */
#define PWM_INTENSET_SEQSTARTED1_Pos (3UL) /*!< Position of SEQSTARTED1 field. */
#define PWM_INTENSET_SEQSTARTED1_Msk (0x1UL << PWM_INTENSET_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field. */
#define PWM_INTENSET_SEQSTARTED1_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_SEQSTARTED1_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_SEQSTARTED1_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event SEQSTARTED[0] */
#define PWM_INTENSET_SEQSTARTED0_Pos (2UL) /*!< Position of SEQSTARTED0 field. */
#define PWM_INTENSET_SEQSTARTED0_Msk (0x1UL << PWM_INTENSET_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field. */
#define PWM_INTENSET_SEQSTARTED0_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_SEQSTARTED0_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_SEQSTARTED0_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event STOPPED */
#define PWM_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define PWM_INTENSET_STOPPED_Msk (0x1UL << PWM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define PWM_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event STARTED */
#define PWM_INTENSET_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define PWM_INTENSET_STARTED_Msk (0x1UL << PWM_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define PWM_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENSET_STARTED_Set (1UL) /*!< Enable */

/* Register: PWM_INTENCLR */
/* Description: Disable interrupt */

/* Bit 12 : Write '1' to disable interrupt for event DMAEND[1] */
#define PWM_INTENCLR_DMAEND1_Pos (12UL) /*!< Position of DMAEND1 field. */
#define PWM_INTENCLR_DMAEND1_Msk (0x1UL << PWM_INTENCLR_DMAEND1_Pos) /*!< Bit mask of DMAEND1 field. */
#define PWM_INTENCLR_DMAEND1_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_DMAEND1_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_DMAEND1_Clear (1UL) /*!< Disable */

/* Bit 11 : Write '1' to disable interrupt for event DMAEND[0] */
#define PWM_INTENCLR_DMAEND0_Pos (11UL) /*!< Position of DMAEND0 field. */
#define PWM_INTENCLR_DMAEND0_Msk (0x1UL << PWM_INTENCLR_DMAEND0_Pos) /*!< Bit mask of DMAEND0 field. */
#define PWM_INTENCLR_DMAEND0_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_DMAEND0_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_DMAEND0_Clear (1UL) /*!< Disable */

/* Bit 10 : Write '1' to disable interrupt for event DMAREADY[1] */
#define PWM_INTENCLR_DMAREADY1_Pos (10UL) /*!< Position of DMAREADY1 field. */
#define PWM_INTENCLR_DMAREADY1_Msk (0x1UL << PWM_INTENCLR_DMAREADY1_Pos) /*!< Bit mask of DMAREADY1 field. */
#define PWM_INTENCLR_DMAREADY1_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_DMAREADY1_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_DMAREADY1_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event DMAREADY[0] */
#define PWM_INTENCLR_DMAREADY0_Pos (9UL) /*!< Position of DMAREADY0 field. */
#define PWM_INTENCLR_DMAREADY0_Msk (0x1UL << PWM_INTENCLR_DMAREADY0_Pos) /*!< Bit mask of DMAREADY0 field. */
#define PWM_INTENCLR_DMAREADY0_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_DMAREADY0_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_DMAREADY0_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event RAMUNDERFLOW */
#define PWM_INTENCLR_RAMUNDERFLOW_Pos (8UL) /*!< Position of RAMUNDERFLOW field. */
#define PWM_INTENCLR_RAMUNDERFLOW_Msk (0x1UL << PWM_INTENCLR_RAMUNDERFLOW_Pos) /*!< Bit mask of RAMUNDERFLOW field. */
#define PWM_INTENCLR_RAMUNDERFLOW_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_RAMUNDERFLOW_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_RAMUNDERFLOW_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event LOOPSDONE */
#define PWM_INTENCLR_LOOPSDONE_Pos (7UL) /*!< Position of LOOPSDONE field. */
#define PWM_INTENCLR_LOOPSDONE_Msk (0x1UL << PWM_INTENCLR_LOOPSDONE_Pos) /*!< Bit mask of LOOPSDONE field. */
#define PWM_INTENCLR_LOOPSDONE_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_LOOPSDONE_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_LOOPSDONE_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event PWMPERIODEND */
#define PWM_INTENCLR_PWMPERIODEND_Pos (6UL) /*!< Position of PWMPERIODEND field. */
#define PWM_INTENCLR_PWMPERIODEND_Msk (0x1UL << PWM_INTENCLR_PWMPERIODEND_Pos) /*!< Bit mask of PWMPERIODEND field. */
#define PWM_INTENCLR_PWMPERIODEND_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_PWMPERIODEND_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_PWMPERIODEND_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event SEQEND[1] */
#define PWM_INTENCLR_SEQEND1_Pos (5UL) /*!< Position of SEQEND1 field. */
#define PWM_INTENCLR_SEQEND1_Msk (0x1UL << PWM_INTENCLR_SEQEND1_Pos) /*!< Bit mask of SEQEND1 field. */
#define PWM_INTENCLR_SEQEND1_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_SEQEND1_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_SEQEND1_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event SEQEND[0] */
#define PWM_INTENCLR_SEQEND0_Pos (4UL) /*!< Position of SEQEND0 field. */
#define PWM_INTENCLR_SEQEND0_Msk (0x1UL << PWM_INTENCLR_SEQEND0_Pos) /*!< Bit mask of SEQEND0 field. */
#define PWM_INTENCLR_SEQEND0_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_SEQEND0_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_SEQEND0_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event SEQSTARTED[1] */
#define PWM_INTENCLR_SEQSTARTED1_Pos (3UL) /*!< Position of SEQSTARTED1 field. */
#define PWM_INTENCLR_SEQSTARTED1_Msk (0x1UL << PWM_INTENCLR_SEQSTARTED1_Pos) /*!< Bit mask of SEQSTARTED1 field. */
#define PWM_INTENCLR_SEQSTARTED1_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_SEQSTARTED1_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_SEQSTARTED1_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event SEQSTARTED[0] */
#define PWM_INTENCLR_SEQSTARTED0_Pos (2UL) /*!< Position of SEQSTARTED0 field. */
#define PWM_INTENCLR_SEQSTARTED0_Msk (0x1UL << PWM_INTENCLR_SEQSTARTED0_Pos) /*!< Bit mask of SEQSTARTED0 field. */
#define PWM_INTENCLR_SEQSTARTED0_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_SEQSTARTED0_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_SEQSTARTED0_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event STOPPED */
#define PWM_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define PWM_INTENCLR_STOPPED_Msk (0x1UL << PWM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define PWM_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event STARTED */
#define PWM_INTENCLR_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define PWM_INTENCLR_STARTED_Msk (0x1UL << PWM_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define PWM_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define PWM_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define PWM_INTENCLR_STARTED_Clear (1UL) /*!< Disable */

/* Register: PWM_ENABLE */
/* Description: PWM module enable register */

/* Bit 0 : Enable or disable PWM module */
#define PWM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define PWM_ENABLE_ENABLE_Msk (0x1UL << PWM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define PWM_ENABLE_ENABLE_Disabled (0UL) /*!< Disabled */
#define PWM_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */

/* Register: PWM_MODE */
/* Description: Selects operating mode of the wave counter */

/* Bit 0 : Selects up mode or up-and-down mode for the counter */
#define PWM_MODE_UPDOWN_Pos (0UL) /*!< Position of UPDOWN field. */
#define PWM_MODE_UPDOWN_Msk (0x1UL << PWM_MODE_UPDOWN_Pos) /*!< Bit mask of UPDOWN field. */
#define PWM_MODE_UPDOWN_Up (0UL) /*!< Up counter, edge-aligned PWM duty cycle */
#define PWM_MODE_UPDOWN_UpAndDown (1UL) /*!< Up and down counter, center-aligned PWM duty cycle */

/* Register: PWM_COUNTERTOP */
/* Description: Value up to which the pulse generator counter counts */

/* Bits 14..0 : Value up to which the pulse generator counter counts. This register is ignored when DECODER.MODE=WaveForm and only values from RAM are used. */
#define PWM_COUNTERTOP_COUNTERTOP_Pos (0UL) /*!< Position of COUNTERTOP field. */
#define PWM_COUNTERTOP_COUNTERTOP_Msk (0x7FFFUL << PWM_COUNTERTOP_COUNTERTOP_Pos) /*!< Bit mask of COUNTERTOP field. */

/* Register: PWM_PRESCALER */
/* Description: Configuration for PWM_CLK */

/* Bits 2..0 : Prescaler of PWM_CLK */
#define PWM_PRESCALER_PRESCALER_Pos (0UL) /*!< Position of PRESCALER field. */
#define PWM_PRESCALER_PRESCALER_Msk (0x7UL << PWM_PRESCALER_PRESCALER_Pos) /*!< Bit mask of PRESCALER field. */
#define PWM_PRESCALER_PRESCALER_DIV_1 (0UL) /*!< Divide by 1 (16 MHz) */
#define PWM_PRESCALER_PRESCALER_DIV_2 (1UL) /*!< Divide by 2 (8 MHz) */
#define PWM_PRESCALER_PRESCALER_DIV_4 (2UL) /*!< Divide by 4 (4 MHz) */
#define PWM_PRESCALER_PRESCALER_DIV_8 (3UL) /*!< Divide by 8 (2 MHz) */
#define PWM_PRESCALER_PRESCALER_DIV_16 (4UL) /*!< Divide by 16 (1 MHz) */
#define PWM_PRESCALER_PRESCALER_DIV_32 (5UL) /*!< Divide by 32 (500 kHz) */
#define PWM_PRESCALER_PRESCALER_DIV_64 (6UL) /*!< Divide by 64 (250 kHz) */
#define PWM_PRESCALER_PRESCALER_DIV_128 (7UL) /*!< Divide by 128 (125 kHz) */

/* Register: PWM_DECODER */
/* Description: Configuration of the decoder */

/* Bit 8 : Selects source for advancing the active sequence */
#define PWM_DECODER_MODE_Pos (8UL) /*!< Position of MODE field. */
#define PWM_DECODER_MODE_Msk (0x1UL << PWM_DECODER_MODE_Pos) /*!< Bit mask of MODE field. */
#define PWM_DECODER_MODE_RefreshCount (0UL) /*!< SEQ[n].REFRESH is used to determine loading internal compare registers */
#define PWM_DECODER_MODE_NextStep (1UL) /*!< NEXTSTEP task causes a new value to be loaded to internal compare registers */

/* Bits 1..0 : How a sequence is read from RAM and spread to the compare register */
#define PWM_DECODER_LOAD_Pos (0UL) /*!< Position of LOAD field. */
#define PWM_DECODER_LOAD_Msk (0x3UL << PWM_DECODER_LOAD_Pos) /*!< Bit mask of LOAD field. */
#define PWM_DECODER_LOAD_Common (0UL) /*!< 1st half word (16-bit) used in all PWM channels 0..3 */
#define PWM_DECODER_LOAD_Grouped (1UL) /*!< 1st half word (16-bit) used in channel 0..1; 2nd word in channel 2..3 */
#define PWM_DECODER_LOAD_Individual (2UL) /*!< 1st half word (16-bit) in ch.0; 2nd in ch.1; ...; 4th in ch.3 */
#define PWM_DECODER_LOAD_WaveForm (3UL) /*!< 1st half word (16-bit) in ch.0; 2nd in ch.1; ...; 4th in COUNTERTOP */

/* Register: PWM_LOOP */
/* Description: Number of playbacks of a loop */

/* Bits 15..0 : Number of playbacks of pattern cycles */
#define PWM_LOOP_CNT_Pos (0UL) /*!< Position of CNT field. */
#define PWM_LOOP_CNT_Msk (0xFFFFUL << PWM_LOOP_CNT_Pos) /*!< Bit mask of CNT field. */
#define PWM_LOOP_CNT_Disabled (0UL) /*!< Looping disabled (stop at the end of the sequence) */

/* Register: PWM_SEQ_PTR */
/* Description: Description cluster: Beginning address in RAM of this sequence */

/* Bits 31..0 : Beginning address in RAM of this sequence */
#define PWM_SEQ_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define PWM_SEQ_PTR_PTR_Msk (0xFFFFFFFFUL << PWM_SEQ_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: PWM_SEQ_CNT */
/* Description: Description cluster: Number of values (duty cycles) in this sequence */

/* Bits 14..0 : Number of values (duty cycles) in this sequence */
#define PWM_SEQ_CNT_CNT_Pos (0UL) /*!< Position of CNT field. */
#define PWM_SEQ_CNT_CNT_Msk (0x7FFFUL << PWM_SEQ_CNT_CNT_Pos) /*!< Bit mask of CNT field. */
#define PWM_SEQ_CNT_CNT_Disabled (0UL) /*!< Sequence is disabled, and shall not be started as it is empty */

/* Register: PWM_SEQ_REFRESH */
/* Description: Description cluster: Number of additional PWM periods between samples loaded into compare register */

/* Bits 23..0 : Number of additional PWM periods between samples loaded into compare register (load every REFRESH.CNT+1 PWM periods) */
#define PWM_SEQ_REFRESH_CNT_Pos (0UL) /*!< Position of CNT field. */
#define PWM_SEQ_REFRESH_CNT_Msk (0xFFFFFFUL << PWM_SEQ_REFRESH_CNT_Pos) /*!< Bit mask of CNT field. */
#define PWM_SEQ_REFRESH_CNT_Continuous (0UL) /*!< Update every PWM period */

/* Register: PWM_SEQ_ENDDELAY */
/* Description: Description cluster: Time added after the sequence */

/* Bits 23..0 : Time added after the sequence in PWM periods */
#define PWM_SEQ_ENDDELAY_CNT_Pos (0UL) /*!< Position of CNT field. */
#define PWM_SEQ_ENDDELAY_CNT_Msk (0xFFFFFFUL << PWM_SEQ_ENDDELAY_CNT_Pos) /*!< Bit mask of CNT field. */

/* Register: PWM_PSEL_OUT */
/* Description: Description collection: Output pin select for PWM channel n */

/* Bit 31 : Connection */
#define PWM_PSEL_OUT_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define PWM_PSEL_OUT_CONNECT_Msk (0x1UL << PWM_PSEL_OUT_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define PWM_PSEL_OUT_CONNECT_Connected (0UL) /*!< Connect */
#define PWM_PSEL_OUT_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define PWM_PSEL_OUT_PORT_Pos (5UL) /*!< Position of PORT field. */
#define PWM_PSEL_OUT_PORT_Msk (0x1UL << PWM_PSEL_OUT_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define PWM_PSEL_OUT_PIN_Pos (0UL) /*!< Position of PIN field. */
#define PWM_PSEL_OUT_PIN_Msk (0x1FUL << PWM_PSEL_OUT_PIN_Pos) /*!< Bit mask of PIN field. */


/* Peripheral: QDEC */
/* Description: Quadrature Decoder 0 */

/* Register: QDEC_TASKS_START */
/* Description: Task starting the quadrature decoder */

/* Bit 0 : Task starting the quadrature decoder */
#define QDEC_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define QDEC_TASKS_START_TASKS_START_Msk (0x1UL << QDEC_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define QDEC_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: QDEC_TASKS_STOP */
/* Description: Task stopping the quadrature decoder */

/* Bit 0 : Task stopping the quadrature decoder */
#define QDEC_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define QDEC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << QDEC_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define QDEC_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: QDEC_TASKS_READCLRACC */
/* Description: Read and clear ACC and ACCDBL */

/* Bit 0 : Read and clear ACC and ACCDBL */
#define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos (0UL) /*!< Position of TASKS_READCLRACC field. */
#define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Msk (0x1UL << QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos) /*!< Bit mask of TASKS_READCLRACC field. */
#define QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Trigger (1UL) /*!< Trigger task */

/* Register: QDEC_TASKS_RDCLRACC */
/* Description: Read and clear ACC */

/* Bit 0 : Read and clear ACC */
#define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos (0UL) /*!< Position of TASKS_RDCLRACC field. */
#define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Msk (0x1UL << QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos) /*!< Bit mask of TASKS_RDCLRACC field. */
#define QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Trigger (1UL) /*!< Trigger task */

/* Register: QDEC_TASKS_RDCLRDBL */
/* Description: Read and clear ACCDBL */

/* Bit 0 : Read and clear ACCDBL */
#define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos (0UL) /*!< Position of TASKS_RDCLRDBL field. */
#define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Msk (0x1UL << QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos) /*!< Bit mask of TASKS_RDCLRDBL field. */
#define QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Trigger (1UL) /*!< Trigger task */

/* Register: QDEC_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define QDEC_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_SUBSCRIBE_START_EN_Msk (0x1UL << QDEC_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define QDEC_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define QDEC_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define QDEC_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_SUBSCRIBE_STOP_EN_Msk (0x1UL << QDEC_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define QDEC_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define QDEC_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_SUBSCRIBE_READCLRACC */
/* Description: Subscribe configuration for task READCLRACC */

/* Bit 31 :   */
#define QDEC_SUBSCRIBE_READCLRACC_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_SUBSCRIBE_READCLRACC_EN_Msk (0x1UL << QDEC_SUBSCRIBE_READCLRACC_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_SUBSCRIBE_READCLRACC_EN_Disabled (0UL) /*!< Disable subscription */
#define QDEC_SUBSCRIBE_READCLRACC_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task READCLRACC will subscribe to */
#define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_SUBSCRIBE_READCLRACC_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_READCLRACC_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_SUBSCRIBE_RDCLRACC */
/* Description: Subscribe configuration for task RDCLRACC */

/* Bit 31 :   */
#define QDEC_SUBSCRIBE_RDCLRACC_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_SUBSCRIBE_RDCLRACC_EN_Msk (0x1UL << QDEC_SUBSCRIBE_RDCLRACC_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_SUBSCRIBE_RDCLRACC_EN_Disabled (0UL) /*!< Disable subscription */
#define QDEC_SUBSCRIBE_RDCLRACC_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task RDCLRACC will subscribe to */
#define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_RDCLRACC_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_SUBSCRIBE_RDCLRDBL */
/* Description: Subscribe configuration for task RDCLRDBL */

/* Bit 31 :   */
#define QDEC_SUBSCRIBE_RDCLRDBL_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_SUBSCRIBE_RDCLRDBL_EN_Msk (0x1UL << QDEC_SUBSCRIBE_RDCLRDBL_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_SUBSCRIBE_RDCLRDBL_EN_Disabled (0UL) /*!< Disable subscription */
#define QDEC_SUBSCRIBE_RDCLRDBL_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task RDCLRDBL will subscribe to */
#define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Msk (0xFFUL << QDEC_SUBSCRIBE_RDCLRDBL_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_EVENTS_SAMPLERDY */
/* Description: Event being generated for every new sample value written to the SAMPLE register */

/* Bit 0 : Event being generated for every new sample value written to the SAMPLE register */
#define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos (0UL) /*!< Position of EVENTS_SAMPLERDY field. */
#define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Msk (0x1UL << QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos) /*!< Bit mask of EVENTS_SAMPLERDY field. */
#define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_NotGenerated (0UL) /*!< Event not generated */
#define QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Generated (1UL) /*!< Event generated */

/* Register: QDEC_EVENTS_REPORTRDY */
/* Description: Non-null report ready */

/* Bit 0 : Non-null report ready */
#define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos (0UL) /*!< Position of EVENTS_REPORTRDY field. */
#define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Msk (0x1UL << QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos) /*!< Bit mask of EVENTS_REPORTRDY field. */
#define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_NotGenerated (0UL) /*!< Event not generated */
#define QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Generated (1UL) /*!< Event generated */

/* Register: QDEC_EVENTS_ACCOF */
/* Description: ACC or ACCDBL register overflow */

/* Bit 0 : ACC or ACCDBL register overflow */
#define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos (0UL) /*!< Position of EVENTS_ACCOF field. */
#define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Msk (0x1UL << QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos) /*!< Bit mask of EVENTS_ACCOF field. */
#define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_NotGenerated (0UL) /*!< Event not generated */
#define QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Generated (1UL) /*!< Event generated */

/* Register: QDEC_EVENTS_DBLRDY */
/* Description: Double displacement(s) detected */

/* Bit 0 : Double displacement(s) detected */
#define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos (0UL) /*!< Position of EVENTS_DBLRDY field. */
#define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Msk (0x1UL << QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos) /*!< Bit mask of EVENTS_DBLRDY field. */
#define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_NotGenerated (0UL) /*!< Event not generated */
#define QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Generated (1UL) /*!< Event generated */

/* Register: QDEC_EVENTS_STOPPED */
/* Description: QDEC has been stopped */

/* Bit 0 : QDEC has been stopped */
#define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: QDEC_PUBLISH_SAMPLERDY */
/* Description: Publish configuration for event SAMPLERDY */

/* Bit 31 :   */
#define QDEC_PUBLISH_SAMPLERDY_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_PUBLISH_SAMPLERDY_EN_Msk (0x1UL << QDEC_PUBLISH_SAMPLERDY_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_PUBLISH_SAMPLERDY_EN_Disabled (0UL) /*!< Disable publishing */
#define QDEC_PUBLISH_SAMPLERDY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SAMPLERDY will publish to. */
#define QDEC_PUBLISH_SAMPLERDY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_PUBLISH_SAMPLERDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_SAMPLERDY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_PUBLISH_REPORTRDY */
/* Description: Publish configuration for event REPORTRDY */

/* Bit 31 :   */
#define QDEC_PUBLISH_REPORTRDY_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_PUBLISH_REPORTRDY_EN_Msk (0x1UL << QDEC_PUBLISH_REPORTRDY_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_PUBLISH_REPORTRDY_EN_Disabled (0UL) /*!< Disable publishing */
#define QDEC_PUBLISH_REPORTRDY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event REPORTRDY will publish to. */
#define QDEC_PUBLISH_REPORTRDY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_PUBLISH_REPORTRDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_REPORTRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_PUBLISH_ACCOF */
/* Description: Publish configuration for event ACCOF */

/* Bit 31 :   */
#define QDEC_PUBLISH_ACCOF_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_PUBLISH_ACCOF_EN_Msk (0x1UL << QDEC_PUBLISH_ACCOF_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_PUBLISH_ACCOF_EN_Disabled (0UL) /*!< Disable publishing */
#define QDEC_PUBLISH_ACCOF_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ACCOF will publish to. */
#define QDEC_PUBLISH_ACCOF_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_PUBLISH_ACCOF_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_ACCOF_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_PUBLISH_DBLRDY */
/* Description: Publish configuration for event DBLRDY */

/* Bit 31 :   */
#define QDEC_PUBLISH_DBLRDY_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_PUBLISH_DBLRDY_EN_Msk (0x1UL << QDEC_PUBLISH_DBLRDY_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_PUBLISH_DBLRDY_EN_Disabled (0UL) /*!< Disable publishing */
#define QDEC_PUBLISH_DBLRDY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DBLRDY will publish to. */
#define QDEC_PUBLISH_DBLRDY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_PUBLISH_DBLRDY_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_DBLRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define QDEC_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define QDEC_PUBLISH_STOPPED_EN_Msk (0x1UL << QDEC_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define QDEC_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define QDEC_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define QDEC_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QDEC_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << QDEC_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QDEC_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 6 : Shortcut between event SAMPLERDY and task READCLRACC */
#define QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos (6UL) /*!< Position of SAMPLERDY_READCLRACC field. */
#define QDEC_SHORTS_SAMPLERDY_READCLRACC_Msk (0x1UL << QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos) /*!< Bit mask of SAMPLERDY_READCLRACC field. */
#define QDEC_SHORTS_SAMPLERDY_READCLRACC_Disabled (0UL) /*!< Disable shortcut */
#define QDEC_SHORTS_SAMPLERDY_READCLRACC_Enabled (1UL) /*!< Enable shortcut */

/* Bit 5 : Shortcut between event DBLRDY and task STOP */
#define QDEC_SHORTS_DBLRDY_STOP_Pos (5UL) /*!< Position of DBLRDY_STOP field. */
#define QDEC_SHORTS_DBLRDY_STOP_Msk (0x1UL << QDEC_SHORTS_DBLRDY_STOP_Pos) /*!< Bit mask of DBLRDY_STOP field. */
#define QDEC_SHORTS_DBLRDY_STOP_Disabled (0UL) /*!< Disable shortcut */
#define QDEC_SHORTS_DBLRDY_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 4 : Shortcut between event DBLRDY and task RDCLRDBL */
#define QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos (4UL) /*!< Position of DBLRDY_RDCLRDBL field. */
#define QDEC_SHORTS_DBLRDY_RDCLRDBL_Msk (0x1UL << QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos) /*!< Bit mask of DBLRDY_RDCLRDBL field. */
#define QDEC_SHORTS_DBLRDY_RDCLRDBL_Disabled (0UL) /*!< Disable shortcut */
#define QDEC_SHORTS_DBLRDY_RDCLRDBL_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event REPORTRDY and task STOP */
#define QDEC_SHORTS_REPORTRDY_STOP_Pos (3UL) /*!< Position of REPORTRDY_STOP field. */
#define QDEC_SHORTS_REPORTRDY_STOP_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_STOP_Pos) /*!< Bit mask of REPORTRDY_STOP field. */
#define QDEC_SHORTS_REPORTRDY_STOP_Disabled (0UL) /*!< Disable shortcut */
#define QDEC_SHORTS_REPORTRDY_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 2 : Shortcut between event REPORTRDY and task RDCLRACC */
#define QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos (2UL) /*!< Position of REPORTRDY_RDCLRACC field. */
#define QDEC_SHORTS_REPORTRDY_RDCLRACC_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos) /*!< Bit mask of REPORTRDY_RDCLRACC field. */
#define QDEC_SHORTS_REPORTRDY_RDCLRACC_Disabled (0UL) /*!< Disable shortcut */
#define QDEC_SHORTS_REPORTRDY_RDCLRACC_Enabled (1UL) /*!< Enable shortcut */

/* Bit 1 : Shortcut between event SAMPLERDY and task STOP */
#define QDEC_SHORTS_SAMPLERDY_STOP_Pos (1UL) /*!< Position of SAMPLERDY_STOP field. */
#define QDEC_SHORTS_SAMPLERDY_STOP_Msk (0x1UL << QDEC_SHORTS_SAMPLERDY_STOP_Pos) /*!< Bit mask of SAMPLERDY_STOP field. */
#define QDEC_SHORTS_SAMPLERDY_STOP_Disabled (0UL) /*!< Disable shortcut */
#define QDEC_SHORTS_SAMPLERDY_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event REPORTRDY and task READCLRACC */
#define QDEC_SHORTS_REPORTRDY_READCLRACC_Pos (0UL) /*!< Position of REPORTRDY_READCLRACC field. */
#define QDEC_SHORTS_REPORTRDY_READCLRACC_Msk (0x1UL << QDEC_SHORTS_REPORTRDY_READCLRACC_Pos) /*!< Bit mask of REPORTRDY_READCLRACC field. */
#define QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled (0UL) /*!< Disable shortcut */
#define QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled (1UL) /*!< Enable shortcut */

/* Register: QDEC_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 4 : Enable or disable interrupt for event STOPPED */
#define QDEC_INTEN_STOPPED_Pos (4UL) /*!< Position of STOPPED field. */
#define QDEC_INTEN_STOPPED_Msk (0x1UL << QDEC_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define QDEC_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define QDEC_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event DBLRDY */
#define QDEC_INTEN_DBLRDY_Pos (3UL) /*!< Position of DBLRDY field. */
#define QDEC_INTEN_DBLRDY_Msk (0x1UL << QDEC_INTEN_DBLRDY_Pos) /*!< Bit mask of DBLRDY field. */
#define QDEC_INTEN_DBLRDY_Disabled (0UL) /*!< Disable */
#define QDEC_INTEN_DBLRDY_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event ACCOF */
#define QDEC_INTEN_ACCOF_Pos (2UL) /*!< Position of ACCOF field. */
#define QDEC_INTEN_ACCOF_Msk (0x1UL << QDEC_INTEN_ACCOF_Pos) /*!< Bit mask of ACCOF field. */
#define QDEC_INTEN_ACCOF_Disabled (0UL) /*!< Disable */
#define QDEC_INTEN_ACCOF_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event REPORTRDY */
#define QDEC_INTEN_REPORTRDY_Pos (1UL) /*!< Position of REPORTRDY field. */
#define QDEC_INTEN_REPORTRDY_Msk (0x1UL << QDEC_INTEN_REPORTRDY_Pos) /*!< Bit mask of REPORTRDY field. */
#define QDEC_INTEN_REPORTRDY_Disabled (0UL) /*!< Disable */
#define QDEC_INTEN_REPORTRDY_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event SAMPLERDY */
#define QDEC_INTEN_SAMPLERDY_Pos (0UL) /*!< Position of SAMPLERDY field. */
#define QDEC_INTEN_SAMPLERDY_Msk (0x1UL << QDEC_INTEN_SAMPLERDY_Pos) /*!< Bit mask of SAMPLERDY field. */
#define QDEC_INTEN_SAMPLERDY_Disabled (0UL) /*!< Disable */
#define QDEC_INTEN_SAMPLERDY_Enabled (1UL) /*!< Enable */

/* Register: QDEC_INTENSET */
/* Description: Enable interrupt */

/* Bit 4 : Write '1' to enable interrupt for event STOPPED */
#define QDEC_INTENSET_STOPPED_Pos (4UL) /*!< Position of STOPPED field. */
#define QDEC_INTENSET_STOPPED_Msk (0x1UL << QDEC_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define QDEC_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event DBLRDY */
#define QDEC_INTENSET_DBLRDY_Pos (3UL) /*!< Position of DBLRDY field. */
#define QDEC_INTENSET_DBLRDY_Msk (0x1UL << QDEC_INTENSET_DBLRDY_Pos) /*!< Bit mask of DBLRDY field. */
#define QDEC_INTENSET_DBLRDY_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENSET_DBLRDY_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENSET_DBLRDY_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event ACCOF */
#define QDEC_INTENSET_ACCOF_Pos (2UL) /*!< Position of ACCOF field. */
#define QDEC_INTENSET_ACCOF_Msk (0x1UL << QDEC_INTENSET_ACCOF_Pos) /*!< Bit mask of ACCOF field. */
#define QDEC_INTENSET_ACCOF_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENSET_ACCOF_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENSET_ACCOF_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event REPORTRDY */
#define QDEC_INTENSET_REPORTRDY_Pos (1UL) /*!< Position of REPORTRDY field. */
#define QDEC_INTENSET_REPORTRDY_Msk (0x1UL << QDEC_INTENSET_REPORTRDY_Pos) /*!< Bit mask of REPORTRDY field. */
#define QDEC_INTENSET_REPORTRDY_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENSET_REPORTRDY_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENSET_REPORTRDY_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event SAMPLERDY */
#define QDEC_INTENSET_SAMPLERDY_Pos (0UL) /*!< Position of SAMPLERDY field. */
#define QDEC_INTENSET_SAMPLERDY_Msk (0x1UL << QDEC_INTENSET_SAMPLERDY_Pos) /*!< Bit mask of SAMPLERDY field. */
#define QDEC_INTENSET_SAMPLERDY_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENSET_SAMPLERDY_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENSET_SAMPLERDY_Set (1UL) /*!< Enable */

/* Register: QDEC_INTENCLR */
/* Description: Disable interrupt */

/* Bit 4 : Write '1' to disable interrupt for event STOPPED */
#define QDEC_INTENCLR_STOPPED_Pos (4UL) /*!< Position of STOPPED field. */
#define QDEC_INTENCLR_STOPPED_Msk (0x1UL << QDEC_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define QDEC_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event DBLRDY */
#define QDEC_INTENCLR_DBLRDY_Pos (3UL) /*!< Position of DBLRDY field. */
#define QDEC_INTENCLR_DBLRDY_Msk (0x1UL << QDEC_INTENCLR_DBLRDY_Pos) /*!< Bit mask of DBLRDY field. */
#define QDEC_INTENCLR_DBLRDY_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENCLR_DBLRDY_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENCLR_DBLRDY_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event ACCOF */
#define QDEC_INTENCLR_ACCOF_Pos (2UL) /*!< Position of ACCOF field. */
#define QDEC_INTENCLR_ACCOF_Msk (0x1UL << QDEC_INTENCLR_ACCOF_Pos) /*!< Bit mask of ACCOF field. */
#define QDEC_INTENCLR_ACCOF_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENCLR_ACCOF_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENCLR_ACCOF_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event REPORTRDY */
#define QDEC_INTENCLR_REPORTRDY_Pos (1UL) /*!< Position of REPORTRDY field. */
#define QDEC_INTENCLR_REPORTRDY_Msk (0x1UL << QDEC_INTENCLR_REPORTRDY_Pos) /*!< Bit mask of REPORTRDY field. */
#define QDEC_INTENCLR_REPORTRDY_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENCLR_REPORTRDY_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENCLR_REPORTRDY_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event SAMPLERDY */
#define QDEC_INTENCLR_SAMPLERDY_Pos (0UL) /*!< Position of SAMPLERDY field. */
#define QDEC_INTENCLR_SAMPLERDY_Msk (0x1UL << QDEC_INTENCLR_SAMPLERDY_Pos) /*!< Bit mask of SAMPLERDY field. */
#define QDEC_INTENCLR_SAMPLERDY_Disabled (0UL) /*!< Read: Disabled */
#define QDEC_INTENCLR_SAMPLERDY_Enabled (1UL) /*!< Read: Enabled */
#define QDEC_INTENCLR_SAMPLERDY_Clear (1UL) /*!< Disable */

/* Register: QDEC_ENABLE */
/* Description: Enable the quadrature decoder */

/* Bits 1..0 : Enable or disable the quadrature decoder */
#define QDEC_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define QDEC_ENABLE_ENABLE_Msk (0x3UL << QDEC_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define QDEC_ENABLE_ENABLE_Disabled (0UL) /*!< Disable */
#define QDEC_ENABLE_ENABLE_Enabled (1UL) /*!< Enable */
#define QDEC_ENABLE_ENABLE_Rambo5 (2UL) /*!< Enable with Rambo5 support */

/* Register: QDEC_LEDPOL */
/* Description: LED output pin polarity */

/* Bit 0 : LED output pin polarity */
#define QDEC_LEDPOL_LEDPOL_Pos (0UL) /*!< Position of LEDPOL field. */
#define QDEC_LEDPOL_LEDPOL_Msk (0x1UL << QDEC_LEDPOL_LEDPOL_Pos) /*!< Bit mask of LEDPOL field. */
#define QDEC_LEDPOL_LEDPOL_ActiveLow (0UL) /*!< Led active on output pin low */
#define QDEC_LEDPOL_LEDPOL_ActiveHigh (1UL) /*!< Led active on output pin high */

/* Register: QDEC_SAMPLEPER */
/* Description: Sample period */

/* Bits 3..0 : Sample period. The SAMPLE register will be updated for every new sample */
#define QDEC_SAMPLEPER_SAMPLEPER_Pos (0UL) /*!< Position of SAMPLEPER field. */
#define QDEC_SAMPLEPER_SAMPLEPER_Msk (0xFUL << QDEC_SAMPLEPER_SAMPLEPER_Pos) /*!< Bit mask of SAMPLEPER field. */
#define QDEC_SAMPLEPER_SAMPLEPER_128us (0UL) /*!< 128 us */
#define QDEC_SAMPLEPER_SAMPLEPER_256us (1UL) /*!< 256 us */
#define QDEC_SAMPLEPER_SAMPLEPER_512us (2UL) /*!< 512 us */
#define QDEC_SAMPLEPER_SAMPLEPER_1024us (3UL) /*!< 1024 us */
#define QDEC_SAMPLEPER_SAMPLEPER_2048us (4UL) /*!< 2048 us */
#define QDEC_SAMPLEPER_SAMPLEPER_4096us (5UL) /*!< 4096 us */
#define QDEC_SAMPLEPER_SAMPLEPER_8192us (6UL) /*!< 8192 us */
#define QDEC_SAMPLEPER_SAMPLEPER_16384us (7UL) /*!< 16384 us */
#define QDEC_SAMPLEPER_SAMPLEPER_32ms (8UL) /*!< 32768 us */
#define QDEC_SAMPLEPER_SAMPLEPER_65ms (9UL) /*!< 65536 us */
#define QDEC_SAMPLEPER_SAMPLEPER_131ms (10UL) /*!< 131072 us */

/* Register: QDEC_SAMPLE */
/* Description: Motion sample value */

/* Bits 31..0 : Last motion sample */
#define QDEC_SAMPLE_SAMPLE_Pos (0UL) /*!< Position of SAMPLE field. */
#define QDEC_SAMPLE_SAMPLE_Msk (0xFFFFFFFFUL << QDEC_SAMPLE_SAMPLE_Pos) /*!< Bit mask of SAMPLE field. */

/* Register: QDEC_REPORTPER */
/* Description: Number of samples to be taken before REPORTRDY and DBLRDY events can be generated */

/* Bits 3..0 : Specifies the number of samples to be accumulated in the ACC register before the REPORTRDY and DBLRDY events can be generated. */
#define QDEC_REPORTPER_REPORTPER_Pos (0UL) /*!< Position of REPORTPER field. */
#define QDEC_REPORTPER_REPORTPER_Msk (0xFUL << QDEC_REPORTPER_REPORTPER_Pos) /*!< Bit mask of REPORTPER field. */
#define QDEC_REPORTPER_REPORTPER_10Smpl (0UL) /*!< 10 samples/report */
#define QDEC_REPORTPER_REPORTPER_40Smpl (1UL) /*!< 40 samples/report */
#define QDEC_REPORTPER_REPORTPER_80Smpl (2UL) /*!< 80 samples/report */
#define QDEC_REPORTPER_REPORTPER_120Smpl (3UL) /*!< 120 samples/report */
#define QDEC_REPORTPER_REPORTPER_160Smpl (4UL) /*!< 160 samples/report */
#define QDEC_REPORTPER_REPORTPER_200Smpl (5UL) /*!< 200 samples/report */
#define QDEC_REPORTPER_REPORTPER_240Smpl (6UL) /*!< 240 samples/report */
#define QDEC_REPORTPER_REPORTPER_280Smpl (7UL) /*!< 280 samples/report */
#define QDEC_REPORTPER_REPORTPER_1Smpl (8UL) /*!< 1 sample/report */

/* Register: QDEC_ACC */
/* Description: Register accumulating the valid transitions */

/* Bits 31..0 : Register accumulating all valid samples (not double transition) read from the SAMPLE register. */
#define QDEC_ACC_ACC_Pos (0UL) /*!< Position of ACC field. */
#define QDEC_ACC_ACC_Msk (0xFFFFFFFFUL << QDEC_ACC_ACC_Pos) /*!< Bit mask of ACC field. */

/* Register: QDEC_ACCREAD */
/* Description: Snapshot of the ACC register, updated by the READCLRACC or RDCLRACC task */

/* Bits 31..0 : Snapshot of the ACC register. */
#define QDEC_ACCREAD_ACCREAD_Pos (0UL) /*!< Position of ACCREAD field. */
#define QDEC_ACCREAD_ACCREAD_Msk (0xFFFFFFFFUL << QDEC_ACCREAD_ACCREAD_Pos) /*!< Bit mask of ACCREAD field. */

/* Register: QDEC_PSEL_LED */
/* Description: Pin select for LED signal */

/* Bit 31 : Connection */
#define QDEC_PSEL_LED_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QDEC_PSEL_LED_CONNECT_Msk (0x1UL << QDEC_PSEL_LED_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QDEC_PSEL_LED_CONNECT_Connected (0UL) /*!< Connect */
#define QDEC_PSEL_LED_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QDEC_PSEL_LED_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QDEC_PSEL_LED_PORT_Msk (0x1UL << QDEC_PSEL_LED_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QDEC_PSEL_LED_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QDEC_PSEL_LED_PIN_Msk (0x1FUL << QDEC_PSEL_LED_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QDEC_PSEL_A */
/* Description: Pin select for A signal */

/* Bit 31 : Connection */
#define QDEC_PSEL_A_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QDEC_PSEL_A_CONNECT_Msk (0x1UL << QDEC_PSEL_A_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QDEC_PSEL_A_CONNECT_Connected (0UL) /*!< Connect */
#define QDEC_PSEL_A_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QDEC_PSEL_A_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QDEC_PSEL_A_PORT_Msk (0x1UL << QDEC_PSEL_A_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QDEC_PSEL_A_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QDEC_PSEL_A_PIN_Msk (0x1FUL << QDEC_PSEL_A_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QDEC_PSEL_B */
/* Description: Pin select for B signal */

/* Bit 31 : Connection */
#define QDEC_PSEL_B_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QDEC_PSEL_B_CONNECT_Msk (0x1UL << QDEC_PSEL_B_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QDEC_PSEL_B_CONNECT_Connected (0UL) /*!< Connect */
#define QDEC_PSEL_B_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QDEC_PSEL_B_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QDEC_PSEL_B_PORT_Msk (0x1UL << QDEC_PSEL_B_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QDEC_PSEL_B_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QDEC_PSEL_B_PIN_Msk (0x1FUL << QDEC_PSEL_B_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QDEC_DBFEN */
/* Description: Enable input debounce filters */

/* Bit 0 : Enable input debounce filters */
#define QDEC_DBFEN_DBFEN_Pos (0UL) /*!< Position of DBFEN field. */
#define QDEC_DBFEN_DBFEN_Msk (0x1UL << QDEC_DBFEN_DBFEN_Pos) /*!< Bit mask of DBFEN field. */
#define QDEC_DBFEN_DBFEN_Disabled (0UL) /*!< Debounce input filters disabled */
#define QDEC_DBFEN_DBFEN_Enabled (1UL) /*!< Debounce input filters enabled */

/* Register: QDEC_LEDPRE */
/* Description: Time period the LED is switched ON prior to sampling */

/* Bits 8..0 : Period in us the LED is switched on prior to sampling */
#define QDEC_LEDPRE_LEDPRE_Pos (0UL) /*!< Position of LEDPRE field. */
#define QDEC_LEDPRE_LEDPRE_Msk (0x1FFUL << QDEC_LEDPRE_LEDPRE_Pos) /*!< Bit mask of LEDPRE field. */

/* Register: QDEC_ACCDBL */
/* Description: Register accumulating the number of detected double transitions */

/* Bits 3..0 : Register accumulating the number of detected double or illegal transitions. ( SAMPLE = 2 ). */
#define QDEC_ACCDBL_ACCDBL_Pos (0UL) /*!< Position of ACCDBL field. */
#define QDEC_ACCDBL_ACCDBL_Msk (0xFUL << QDEC_ACCDBL_ACCDBL_Pos) /*!< Bit mask of ACCDBL field. */

/* Register: QDEC_ACCDBLREAD */
/* Description: Snapshot of the ACCDBL, updated by the READCLRACC or RDCLRDBL task */

/* Bits 3..0 : Snapshot of the ACCDBL register. This field is updated when the READCLRACC or RDCLRDBL task is triggered. */
#define QDEC_ACCDBLREAD_ACCDBLREAD_Pos (0UL) /*!< Position of ACCDBLREAD field. */
#define QDEC_ACCDBLREAD_ACCDBLREAD_Msk (0xFUL << QDEC_ACCDBLREAD_ACCDBLREAD_Pos) /*!< Bit mask of ACCDBLREAD field. */


/* Peripheral: QSPI */
/* Description: External flash interface 0 */

/* Register: QSPI_TASKS_ACTIVATE */
/* Description: Activate QSPI interface */

/* Bit 0 : Activate QSPI interface */
#define QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos (0UL) /*!< Position of TASKS_ACTIVATE field. */
#define QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Msk (0x1UL << QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos) /*!< Bit mask of TASKS_ACTIVATE field. */
#define QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Trigger (1UL) /*!< Trigger task */

/* Register: QSPI_TASKS_READSTART */
/* Description: Start transfer from external flash memory to internal RAM */

/* Bit 0 : Start transfer from external flash memory to internal RAM */
#define QSPI_TASKS_READSTART_TASKS_READSTART_Pos (0UL) /*!< Position of TASKS_READSTART field. */
#define QSPI_TASKS_READSTART_TASKS_READSTART_Msk (0x1UL << QSPI_TASKS_READSTART_TASKS_READSTART_Pos) /*!< Bit mask of TASKS_READSTART field. */
#define QSPI_TASKS_READSTART_TASKS_READSTART_Trigger (1UL) /*!< Trigger task */

/* Register: QSPI_TASKS_WRITESTART */
/* Description: Start transfer from internal RAM to external flash memory */

/* Bit 0 : Start transfer from internal RAM to external flash memory */
#define QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Pos (0UL) /*!< Position of TASKS_WRITESTART field. */
#define QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Msk (0x1UL << QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Pos) /*!< Bit mask of TASKS_WRITESTART field. */
#define QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Trigger (1UL) /*!< Trigger task */

/* Register: QSPI_TASKS_ERASESTART */
/* Description: Start external flash memory erase operation */

/* Bit 0 : Start external flash memory erase operation */
#define QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Pos (0UL) /*!< Position of TASKS_ERASESTART field. */
#define QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Msk (0x1UL << QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Pos) /*!< Bit mask of TASKS_ERASESTART field. */
#define QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Trigger (1UL) /*!< Trigger task */

/* Register: QSPI_TASKS_DEACTIVATE */
/* Description: Deactivate QSPI interface */

/* Bit 0 : Deactivate QSPI interface */
#define QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Pos (0UL) /*!< Position of TASKS_DEACTIVATE field. */
#define QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Msk (0x1UL << QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Pos) /*!< Bit mask of TASKS_DEACTIVATE field. */
#define QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Trigger (1UL) /*!< Trigger task */

/* Register: QSPI_SUBSCRIBE_ACTIVATE */
/* Description: Subscribe configuration for task ACTIVATE */

/* Bit 31 :   */
#define QSPI_SUBSCRIBE_ACTIVATE_EN_Pos (31UL) /*!< Position of EN field. */
#define QSPI_SUBSCRIBE_ACTIVATE_EN_Msk (0x1UL << QSPI_SUBSCRIBE_ACTIVATE_EN_Pos) /*!< Bit mask of EN field. */
#define QSPI_SUBSCRIBE_ACTIVATE_EN_Disabled (0UL) /*!< Disable subscription */
#define QSPI_SUBSCRIBE_ACTIVATE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task ACTIVATE will subscribe to */
#define QSPI_SUBSCRIBE_ACTIVATE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QSPI_SUBSCRIBE_ACTIVATE_CHIDX_Msk (0xFFUL << QSPI_SUBSCRIBE_ACTIVATE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QSPI_SUBSCRIBE_READSTART */
/* Description: Subscribe configuration for task READSTART */

/* Bit 31 :   */
#define QSPI_SUBSCRIBE_READSTART_EN_Pos (31UL) /*!< Position of EN field. */
#define QSPI_SUBSCRIBE_READSTART_EN_Msk (0x1UL << QSPI_SUBSCRIBE_READSTART_EN_Pos) /*!< Bit mask of EN field. */
#define QSPI_SUBSCRIBE_READSTART_EN_Disabled (0UL) /*!< Disable subscription */
#define QSPI_SUBSCRIBE_READSTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task READSTART will subscribe to */
#define QSPI_SUBSCRIBE_READSTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QSPI_SUBSCRIBE_READSTART_CHIDX_Msk (0xFFUL << QSPI_SUBSCRIBE_READSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QSPI_SUBSCRIBE_WRITESTART */
/* Description: Subscribe configuration for task WRITESTART */

/* Bit 31 :   */
#define QSPI_SUBSCRIBE_WRITESTART_EN_Pos (31UL) /*!< Position of EN field. */
#define QSPI_SUBSCRIBE_WRITESTART_EN_Msk (0x1UL << QSPI_SUBSCRIBE_WRITESTART_EN_Pos) /*!< Bit mask of EN field. */
#define QSPI_SUBSCRIBE_WRITESTART_EN_Disabled (0UL) /*!< Disable subscription */
#define QSPI_SUBSCRIBE_WRITESTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task WRITESTART will subscribe to */
#define QSPI_SUBSCRIBE_WRITESTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QSPI_SUBSCRIBE_WRITESTART_CHIDX_Msk (0xFFUL << QSPI_SUBSCRIBE_WRITESTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QSPI_SUBSCRIBE_ERASESTART */
/* Description: Subscribe configuration for task ERASESTART */

/* Bit 31 :   */
#define QSPI_SUBSCRIBE_ERASESTART_EN_Pos (31UL) /*!< Position of EN field. */
#define QSPI_SUBSCRIBE_ERASESTART_EN_Msk (0x1UL << QSPI_SUBSCRIBE_ERASESTART_EN_Pos) /*!< Bit mask of EN field. */
#define QSPI_SUBSCRIBE_ERASESTART_EN_Disabled (0UL) /*!< Disable subscription */
#define QSPI_SUBSCRIBE_ERASESTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task ERASESTART will subscribe to */
#define QSPI_SUBSCRIBE_ERASESTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QSPI_SUBSCRIBE_ERASESTART_CHIDX_Msk (0xFFUL << QSPI_SUBSCRIBE_ERASESTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QSPI_SUBSCRIBE_DEACTIVATE */
/* Description: Subscribe configuration for task DEACTIVATE */

/* Bit 31 :   */
#define QSPI_SUBSCRIBE_DEACTIVATE_EN_Pos (31UL) /*!< Position of EN field. */
#define QSPI_SUBSCRIBE_DEACTIVATE_EN_Msk (0x1UL << QSPI_SUBSCRIBE_DEACTIVATE_EN_Pos) /*!< Bit mask of EN field. */
#define QSPI_SUBSCRIBE_DEACTIVATE_EN_Disabled (0UL) /*!< Disable subscription */
#define QSPI_SUBSCRIBE_DEACTIVATE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DEACTIVATE will subscribe to */
#define QSPI_SUBSCRIBE_DEACTIVATE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QSPI_SUBSCRIBE_DEACTIVATE_CHIDX_Msk (0xFFUL << QSPI_SUBSCRIBE_DEACTIVATE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QSPI_EVENTS_READY */
/* Description: QSPI peripheral is ready. This event will be generated as a response to all QSPI tasks except DEACTIVATE. */

/* Bit 0 : QSPI peripheral is ready. This event will be generated as a response to all QSPI tasks except DEACTIVATE. */
#define QSPI_EVENTS_READY_EVENTS_READY_Pos (0UL) /*!< Position of EVENTS_READY field. */
#define QSPI_EVENTS_READY_EVENTS_READY_Msk (0x1UL << QSPI_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY field. */
#define QSPI_EVENTS_READY_EVENTS_READY_NotGenerated (0UL) /*!< Event not generated */
#define QSPI_EVENTS_READY_EVENTS_READY_Generated (1UL) /*!< Event generated */

/* Register: QSPI_PUBLISH_READY */
/* Description: Publish configuration for event READY */

/* Bit 31 :   */
#define QSPI_PUBLISH_READY_EN_Pos (31UL) /*!< Position of EN field. */
#define QSPI_PUBLISH_READY_EN_Msk (0x1UL << QSPI_PUBLISH_READY_EN_Pos) /*!< Bit mask of EN field. */
#define QSPI_PUBLISH_READY_EN_Disabled (0UL) /*!< Disable publishing */
#define QSPI_PUBLISH_READY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event READY will publish to. */
#define QSPI_PUBLISH_READY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define QSPI_PUBLISH_READY_CHIDX_Msk (0xFFUL << QSPI_PUBLISH_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: QSPI_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 0 : Enable or disable interrupt for event READY */
#define QSPI_INTEN_READY_Pos (0UL) /*!< Position of READY field. */
#define QSPI_INTEN_READY_Msk (0x1UL << QSPI_INTEN_READY_Pos) /*!< Bit mask of READY field. */
#define QSPI_INTEN_READY_Disabled (0UL) /*!< Disable */
#define QSPI_INTEN_READY_Enabled (1UL) /*!< Enable */

/* Register: QSPI_INTENSET */
/* Description: Enable interrupt */

/* Bit 0 : Write '1' to enable interrupt for event READY */
#define QSPI_INTENSET_READY_Pos (0UL) /*!< Position of READY field. */
#define QSPI_INTENSET_READY_Msk (0x1UL << QSPI_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
#define QSPI_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
#define QSPI_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
#define QSPI_INTENSET_READY_Set (1UL) /*!< Enable */

/* Register: QSPI_INTENCLR */
/* Description: Disable interrupt */

/* Bit 0 : Write '1' to disable interrupt for event READY */
#define QSPI_INTENCLR_READY_Pos (0UL) /*!< Position of READY field. */
#define QSPI_INTENCLR_READY_Msk (0x1UL << QSPI_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
#define QSPI_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
#define QSPI_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
#define QSPI_INTENCLR_READY_Clear (1UL) /*!< Disable */

/* Register: QSPI_ENABLE */
/* Description: Enable QSPI peripheral and acquire the pins selected in PSELn registers */

/* Bit 0 : Enable or disable QSPI */
#define QSPI_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define QSPI_ENABLE_ENABLE_Msk (0x1UL << QSPI_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define QSPI_ENABLE_ENABLE_Disabled (0UL) /*!< Disable QSPI */
#define QSPI_ENABLE_ENABLE_Enabled (1UL) /*!< Enable QSPI */

/* Register: QSPI_READ_SRC */
/* Description: Flash memory source address */

/* Bits 31..0 : Word-aligned flash memory source address. */
#define QSPI_READ_SRC_SRC_Pos (0UL) /*!< Position of SRC field. */
#define QSPI_READ_SRC_SRC_Msk (0xFFFFFFFFUL << QSPI_READ_SRC_SRC_Pos) /*!< Bit mask of SRC field. */

/* Register: QSPI_READ_DST */
/* Description: RAM destination address */

/* Bits 31..0 : Word-aligned RAM destination address. */
#define QSPI_READ_DST_DST_Pos (0UL) /*!< Position of DST field. */
#define QSPI_READ_DST_DST_Msk (0xFFFFFFFFUL << QSPI_READ_DST_DST_Pos) /*!< Bit mask of DST field. */

/* Register: QSPI_READ_CNT */
/* Description: Read transfer length */

/* Bits 20..0 : Read transfer length in number of bytes. The length must be a multiple of 4 bytes. */
#define QSPI_READ_CNT_CNT_Pos (0UL) /*!< Position of CNT field. */
#define QSPI_READ_CNT_CNT_Msk (0x1FFFFFUL << QSPI_READ_CNT_CNT_Pos) /*!< Bit mask of CNT field. */

/* Register: QSPI_WRITE_DST */
/* Description: Flash destination address */

/* Bits 31..0 : Word-aligned flash destination address. */
#define QSPI_WRITE_DST_DST_Pos (0UL) /*!< Position of DST field. */
#define QSPI_WRITE_DST_DST_Msk (0xFFFFFFFFUL << QSPI_WRITE_DST_DST_Pos) /*!< Bit mask of DST field. */

/* Register: QSPI_WRITE_SRC */
/* Description: RAM source address */

/* Bits 31..0 : Word-aligned RAM source address. */
#define QSPI_WRITE_SRC_SRC_Pos (0UL) /*!< Position of SRC field. */
#define QSPI_WRITE_SRC_SRC_Msk (0xFFFFFFFFUL << QSPI_WRITE_SRC_SRC_Pos) /*!< Bit mask of SRC field. */

/* Register: QSPI_WRITE_CNT */
/* Description: Write transfer length */

/* Bits 20..0 : Write transfer length in number of bytes. The length must be a multiple of 4 bytes. */
#define QSPI_WRITE_CNT_CNT_Pos (0UL) /*!< Position of CNT field. */
#define QSPI_WRITE_CNT_CNT_Msk (0x1FFFFFUL << QSPI_WRITE_CNT_CNT_Pos) /*!< Bit mask of CNT field. */

/* Register: QSPI_ERASE_PTR */
/* Description: Start address of flash block to be erased */

/* Bits 31..0 : Word-aligned start address of block to be erased. */
#define QSPI_ERASE_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define QSPI_ERASE_PTR_PTR_Msk (0xFFFFFFFFUL << QSPI_ERASE_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: QSPI_ERASE_LEN */
/* Description: Size of block to be erased. */

/* Bits 1..0 : LEN */
#define QSPI_ERASE_LEN_LEN_Pos (0UL) /*!< Position of LEN field. */
#define QSPI_ERASE_LEN_LEN_Msk (0x3UL << QSPI_ERASE_LEN_LEN_Pos) /*!< Bit mask of LEN field. */
#define QSPI_ERASE_LEN_LEN_4KB (0UL) /*!< Erase 4 kB block (flash command 0x20) */
#define QSPI_ERASE_LEN_LEN_64KB (1UL) /*!< Erase 64 kB block (flash command 0xD8) */
#define QSPI_ERASE_LEN_LEN_All (2UL) /*!< Erase all (flash command 0xC7) */

/* Register: QSPI_PSEL_SCK */
/* Description: Pin select for serial clock SCK Connected to SPI interface pins of SPI-MEM-CTRL. */

/* Bit 31 : Connection */
#define QSPI_PSEL_SCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QSPI_PSEL_SCK_CONNECT_Msk (0x1UL << QSPI_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QSPI_PSEL_SCK_CONNECT_Connected (0UL) /*!< Connect */
#define QSPI_PSEL_SCK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QSPI_PSEL_SCK_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QSPI_PSEL_SCK_PORT_Msk (0x1UL << QSPI_PSEL_SCK_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QSPI_PSEL_SCK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QSPI_PSEL_SCK_PIN_Msk (0x1FUL << QSPI_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QSPI_PSEL_CSN */
/* Description: Pin select for chip select signal CSN. Connected to SPI interface pins of SPI-MEM-CTRL. */

/* Bit 31 : Connection */
#define QSPI_PSEL_CSN_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QSPI_PSEL_CSN_CONNECT_Msk (0x1UL << QSPI_PSEL_CSN_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QSPI_PSEL_CSN_CONNECT_Connected (0UL) /*!< Connect */
#define QSPI_PSEL_CSN_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QSPI_PSEL_CSN_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QSPI_PSEL_CSN_PORT_Msk (0x1UL << QSPI_PSEL_CSN_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QSPI_PSEL_CSN_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QSPI_PSEL_CSN_PIN_Msk (0x1FUL << QSPI_PSEL_CSN_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QSPI_PSEL_IO0 */
/* Description: Pin select for serial data MOSI/IO0. Connected to SPI interface pins of SPI-MEM-CTRL */

/* Bit 31 : Connection */
#define QSPI_PSEL_IO0_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QSPI_PSEL_IO0_CONNECT_Msk (0x1UL << QSPI_PSEL_IO0_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QSPI_PSEL_IO0_CONNECT_Connected (0UL) /*!< Connect */
#define QSPI_PSEL_IO0_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QSPI_PSEL_IO0_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QSPI_PSEL_IO0_PORT_Msk (0x1UL << QSPI_PSEL_IO0_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QSPI_PSEL_IO0_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QSPI_PSEL_IO0_PIN_Msk (0x1FUL << QSPI_PSEL_IO0_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QSPI_PSEL_IO1 */
/* Description: Pin select for serial data MISO/IO1. Connected to SPI interface pins of SPI-MEM-CTRL. */

/* Bit 31 : Connection */
#define QSPI_PSEL_IO1_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QSPI_PSEL_IO1_CONNECT_Msk (0x1UL << QSPI_PSEL_IO1_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QSPI_PSEL_IO1_CONNECT_Connected (0UL) /*!< Connect */
#define QSPI_PSEL_IO1_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QSPI_PSEL_IO1_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QSPI_PSEL_IO1_PORT_Msk (0x1UL << QSPI_PSEL_IO1_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QSPI_PSEL_IO1_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QSPI_PSEL_IO1_PIN_Msk (0x1FUL << QSPI_PSEL_IO1_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QSPI_PSEL_IO2 */
/* Description: Pin select for serial data IO2. Connected to SPI interface pins of SPI-MEM-CTRL. */

/* Bit 31 : Connection */
#define QSPI_PSEL_IO2_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QSPI_PSEL_IO2_CONNECT_Msk (0x1UL << QSPI_PSEL_IO2_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QSPI_PSEL_IO2_CONNECT_Connected (0UL) /*!< Connect */
#define QSPI_PSEL_IO2_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QSPI_PSEL_IO2_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QSPI_PSEL_IO2_PORT_Msk (0x1UL << QSPI_PSEL_IO2_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QSPI_PSEL_IO2_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QSPI_PSEL_IO2_PIN_Msk (0x1FUL << QSPI_PSEL_IO2_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QSPI_PSEL_IO3 */
/* Description: Pin select for serial data IO3. Connected to SPI interface pins of SPI-MEM-CTRL. */

/* Bit 31 : Connection */
#define QSPI_PSEL_IO3_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define QSPI_PSEL_IO3_CONNECT_Msk (0x1UL << QSPI_PSEL_IO3_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define QSPI_PSEL_IO3_CONNECT_Connected (0UL) /*!< Connect */
#define QSPI_PSEL_IO3_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define QSPI_PSEL_IO3_PORT_Pos (5UL) /*!< Position of PORT field. */
#define QSPI_PSEL_IO3_PORT_Msk (0x1UL << QSPI_PSEL_IO3_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define QSPI_PSEL_IO3_PIN_Pos (0UL) /*!< Position of PIN field. */
#define QSPI_PSEL_IO3_PIN_Msk (0x1FUL << QSPI_PSEL_IO3_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: QSPI_XIPOFFSET */
/* Description: Address offset into the external memory for Execute in Place operation. */

/* Bits 31..0 : Address offset into the external memory for Execute in Place operation. Value must be a multiple of 4. */
#define QSPI_XIPOFFSET_XIPOFFSET_Pos (0UL) /*!< Position of XIPOFFSET field. */
#define QSPI_XIPOFFSET_XIPOFFSET_Msk (0xFFFFFFFFUL << QSPI_XIPOFFSET_XIPOFFSET_Pos) /*!< Bit mask of XIPOFFSET field. */

/* Register: QSPI_IFCONFIG0 */
/* Description: Interface configuration. SPI MEM CTRL Default Memory reg. */

/* Bit 17 : Selects which edge of the SCK return clock to capture input data */
#define QSPI_IFCONFIG0_SCKEDGE_Pos (17UL) /*!< Position of SCKEDGE field. */
#define QSPI_IFCONFIG0_SCKEDGE_Msk (0x1UL << QSPI_IFCONFIG0_SCKEDGE_Pos) /*!< Bit mask of SCKEDGE field. */
#define QSPI_IFCONFIG0_SCKEDGE_Rising (0UL) /*!< Capture on rising edge */
#define QSPI_IFCONFIG0_SCKEDGE_Falling (1UL) /*!< Capture on falling edge */

/* Bit 16 : Enables the return clock mechanism */
#define QSPI_IFCONFIG0_SCKRETURN_Pos (16UL) /*!< Position of SCKRETURN field. */
#define QSPI_IFCONFIG0_SCKRETURN_Msk (0x1UL << QSPI_IFCONFIG0_SCKRETURN_Pos) /*!< Bit mask of SCKRETURN field. */
#define QSPI_IFCONFIG0_SCKRETURN_Disable (0UL) /*!< Disable return clock mechanism */
#define QSPI_IFCONFIG0_SCKRETURN_Enable (1UL) /*!< Enable return clock mechanism */

/* Bit 12 : Page size for commands PP, PP2O, PP4O and PP4IO. */
#define QSPI_IFCONFIG0_PPSIZE_Pos (12UL) /*!< Position of PPSIZE field. */
#define QSPI_IFCONFIG0_PPSIZE_Msk (0x1UL << QSPI_IFCONFIG0_PPSIZE_Pos) /*!< Bit mask of PPSIZE field. */
#define QSPI_IFCONFIG0_PPSIZE_256Bytes (0UL) /*!< 256 bytes. */
#define QSPI_IFCONFIG0_PPSIZE_512Bytes (1UL) /*!< 512 bytes. */

/* Bit 11 : Automatic identification of external flash memory. */
#define QSPI_IFCONFIG0_AUTOID_Pos (11UL) /*!< Position of AUTOID field. */
#define QSPI_IFCONFIG0_AUTOID_Msk (0x1UL << QSPI_IFCONFIG0_AUTOID_Pos) /*!< Bit mask of AUTOID field. */
#define QSPI_IFCONFIG0_AUTOID_Manual (0UL) /*!< Manual */
#define QSPI_IFCONFIG0_AUTOID_Automatic (1UL) /*!< Automatic */

/* Bits 10..8 : Chip select line. */
#define QSPI_IFCONFIG0_CSNLINE_Pos (8UL) /*!< Position of CSNLINE field. */
#define QSPI_IFCONFIG0_CSNLINE_Msk (0x7UL << QSPI_IFCONFIG0_CSNLINE_Pos) /*!< Bit mask of CSNLINE field. */

/* Bit 7 : Enable deep power-down mode (DPM) feature. */
#define QSPI_IFCONFIG0_DPMENABLE_Pos (7UL) /*!< Position of DPMENABLE field. */
#define QSPI_IFCONFIG0_DPMENABLE_Msk (0x1UL << QSPI_IFCONFIG0_DPMENABLE_Pos) /*!< Bit mask of DPMENABLE field. */
#define QSPI_IFCONFIG0_DPMENABLE_Disable (0UL) /*!< Disable DPM feature. */
#define QSPI_IFCONFIG0_DPMENABLE_Enable (1UL) /*!< Enable DPM feature. */

/* Bit 6 : Addressing mode. */
#define QSPI_IFCONFIG0_ADDRMODE_Pos (6UL) /*!< Position of ADDRMODE field. */
#define QSPI_IFCONFIG0_ADDRMODE_Msk (0x1UL << QSPI_IFCONFIG0_ADDRMODE_Pos) /*!< Bit mask of ADDRMODE field. */
#define QSPI_IFCONFIG0_ADDRMODE_24BIT (0UL) /*!< 24-bit addressing. */
#define QSPI_IFCONFIG0_ADDRMODE_32BIT (1UL) /*!< 32-bit addressing. */

/* Bits 5..3 : Configure number of data lines and opcode used for writing. */
#define QSPI_IFCONFIG0_WRITEOC_Pos (3UL) /*!< Position of WRITEOC field. */
#define QSPI_IFCONFIG0_WRITEOC_Msk (0x7UL << QSPI_IFCONFIG0_WRITEOC_Pos) /*!< Bit mask of WRITEOC field. */
#define QSPI_IFCONFIG0_WRITEOC_PP (0UL) /*!< Single data line SPI. PP (opcode 0x02). */
#define QSPI_IFCONFIG0_WRITEOC_PP2O (1UL) /*!< Dual data line SPI. PP2O (opcode 0xA2). */
#define QSPI_IFCONFIG0_WRITEOC_PP4O (2UL) /*!< Quad data line SPI. PP4O (opcode 0x32). */
#define QSPI_IFCONFIG0_WRITEOC_PP4IO (3UL) /*!< Quad data line SPI. PP4IO (opcode 0x38). */

/* Bits 2..0 : Configure number of data lines and opcode used for reading. */
#define QSPI_IFCONFIG0_READOC_Pos (0UL) /*!< Position of READOC field. */
#define QSPI_IFCONFIG0_READOC_Msk (0x7UL << QSPI_IFCONFIG0_READOC_Pos) /*!< Bit mask of READOC field. */
#define QSPI_IFCONFIG0_READOC_FASTREAD (0UL) /*!< Single data line SPI. FAST_READ (opcode 0x0B). */
#define QSPI_IFCONFIG0_READOC_READ2O (1UL) /*!< Dual data line SPI. READ2O (opcode 0x3B). */
#define QSPI_IFCONFIG0_READOC_READ2IO (2UL) /*!< Dual data line SPI. READ2IO (opcode 0xBB). */
#define QSPI_IFCONFIG0_READOC_READ4O (3UL) /*!< Quad data line SPI. READ4O (opcode 0x6B). */
#define QSPI_IFCONFIG0_READOC_READ4IO (4UL) /*!< Quad data line SPI. READ4IO (opcode 0xEB). */

/* Register: QSPI_FIFOTH */
/* Description: When writing to the IFCONFIG1 register the values for the FIFO thresholds are taken from this register. The DISABLE field can be set to ignore this register. */

/* Bit 16 : Use or ignore this register. */
#define QSPI_FIFOTH_DISABLE_Pos (16UL) /*!< Position of DISABLE field. */
#define QSPI_FIFOTH_DISABLE_Msk (0x1UL << QSPI_FIFOTH_DISABLE_Pos) /*!< Bit mask of DISABLE field. */
#define QSPI_FIFOTH_DISABLE_Use (0UL) /*!< Use contents of this register. */
#define QSPI_FIFOTH_DISABLE_Ignore (1UL) /*!< Do not use the contents of this register. */

/* Bits 15..8 : Write threshold. */
#define QSPI_FIFOTH_WRITE_Pos (8UL) /*!< Position of WRITE field. */
#define QSPI_FIFOTH_WRITE_Msk (0xFFUL << QSPI_FIFOTH_WRITE_Pos) /*!< Bit mask of WRITE field. */

/* Bits 7..0 : Read threshold. */
#define QSPI_FIFOTH_READ_Pos (0UL) /*!< Position of READ field. */
#define QSPI_FIFOTH_READ_Msk (0xFFUL << QSPI_FIFOTH_READ_Pos) /*!< Bit mask of READ field. */

/* Register: QSPI_XIPEN */
/* Description: Enable Execute in Place operation. */

/* Bit 0 : Enable XIP AHB Slave interface and access to XIP memory range */
#define QSPI_XIPEN_XIPEN_Pos (0UL) /*!< Position of XIPEN field. */
#define QSPI_XIPEN_XIPEN_Msk (0x1UL << QSPI_XIPEN_XIPEN_Pos) /*!< Bit mask of XIPEN field. */
#define QSPI_XIPEN_XIPEN_Disable (0UL) /*!< Disable XIP interface */
#define QSPI_XIPEN_XIPEN_Enable (1UL) /*!< Enable XIP interface */

/* Register: QSPI_XIP_ENC_KEY0 */
/* Description: Bits 31:0 of XIP AES KEY */

/* Bits 31..0 : Bits 31:0 of XIP AES KEY */
#define QSPI_XIP_ENC_KEY0_KEY0_Pos (0UL) /*!< Position of KEY0 field. */
#define QSPI_XIP_ENC_KEY0_KEY0_Msk (0xFFFFFFFFUL << QSPI_XIP_ENC_KEY0_KEY0_Pos) /*!< Bit mask of KEY0 field. */

/* Register: QSPI_XIP_ENC_KEY1 */
/* Description: Bits 63:32 of XIP AES KEY */

/* Bits 31..0 : Bits 63:32 of XIP AES KEY */
#define QSPI_XIP_ENC_KEY1_KEY1_Pos (0UL) /*!< Position of KEY1 field. */
#define QSPI_XIP_ENC_KEY1_KEY1_Msk (0xFFFFFFFFUL << QSPI_XIP_ENC_KEY1_KEY1_Pos) /*!< Bit mask of KEY1 field. */

/* Register: QSPI_XIP_ENC_KEY2 */
/* Description: Bits 95:64 of XIP AES KEY */

/* Bits 31..0 : Bits 95:64 of XIP AES KEY */
#define QSPI_XIP_ENC_KEY2_KEY2_Pos (0UL) /*!< Position of KEY2 field. */
#define QSPI_XIP_ENC_KEY2_KEY2_Msk (0xFFFFFFFFUL << QSPI_XIP_ENC_KEY2_KEY2_Pos) /*!< Bit mask of KEY2 field. */

/* Register: QSPI_XIP_ENC_KEY3 */
/* Description: Bits 127:96 of XIP AES KEY */

/* Bits 31..0 : Bits 127:96 of XIP AES KEY */
#define QSPI_XIP_ENC_KEY3_KEY3_Pos (0UL) /*!< Position of KEY3 field. */
#define QSPI_XIP_ENC_KEY3_KEY3_Msk (0xFFFFFFFFUL << QSPI_XIP_ENC_KEY3_KEY3_Pos) /*!< Bit mask of KEY3 field. */

/* Register: QSPI_XIP_ENC_NONCE0 */
/* Description: Bits 31:0 of XIP NONCE */

/* Bits 31..0 : Bits 31:0 of XIP NONCE */
#define QSPI_XIP_ENC_NONCE0_NONCE0_Pos (0UL) /*!< Position of NONCE0 field. */
#define QSPI_XIP_ENC_NONCE0_NONCE0_Msk (0xFFFFFFFFUL << QSPI_XIP_ENC_NONCE0_NONCE0_Pos) /*!< Bit mask of NONCE0 field. */

/* Register: QSPI_XIP_ENC_NONCE1 */
/* Description: Bits 63:32 of XIP NONCE */

/* Bits 31..0 : Bits 63:32 of XIP NONCE */
#define QSPI_XIP_ENC_NONCE1_NONCE1_Pos (0UL) /*!< Position of NONCE1 field. */
#define QSPI_XIP_ENC_NONCE1_NONCE1_Msk (0xFFFFFFFFUL << QSPI_XIP_ENC_NONCE1_NONCE1_Pos) /*!< Bit mask of NONCE1 field. */

/* Register: QSPI_XIP_ENC_NONCE2 */
/* Description: Bits 95:64 of XIP NONCE */

/* Bits 31..0 : Bits 95:64 of XIP NONCE */
#define QSPI_XIP_ENC_NONCE2_NONCE2_Pos (0UL) /*!< Position of NONCE2 field. */
#define QSPI_XIP_ENC_NONCE2_NONCE2_Msk (0xFFFFFFFFUL << QSPI_XIP_ENC_NONCE2_NONCE2_Pos) /*!< Bit mask of NONCE2 field. */

/* Register: QSPI_XIP_ENC_ENABLE */
/* Description: Enable stream cipher for XIP */

/* Bit 0 : Enable or disable stream cipher for XIP */
#define QSPI_XIP_ENC_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define QSPI_XIP_ENC_ENABLE_ENABLE_Msk (0x1UL << QSPI_XIP_ENC_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define QSPI_XIP_ENC_ENABLE_ENABLE_Disabled (0UL) /*!< Disable stream cipher for QSPI XIP */
#define QSPI_XIP_ENC_ENABLE_ENABLE_Enabled (1UL) /*!< Enable stream cipher for QSPI XIP */

/* Register: QSPI_DMA_ENC_KEY0 */
/* Description: Bits 31:0 of DMA AES KEY */

/* Bits 31..0 : Bits 31:0 of DMA AES KEY */
#define QSPI_DMA_ENC_KEY0_KEY0_Pos (0UL) /*!< Position of KEY0 field. */
#define QSPI_DMA_ENC_KEY0_KEY0_Msk (0xFFFFFFFFUL << QSPI_DMA_ENC_KEY0_KEY0_Pos) /*!< Bit mask of KEY0 field. */

/* Register: QSPI_DMA_ENC_KEY1 */
/* Description: Bits 63:32 of DMA AES KEY */

/* Bits 31..0 : Bits 63:32 of DMA AES KEY */
#define QSPI_DMA_ENC_KEY1_KEY1_Pos (0UL) /*!< Position of KEY1 field. */
#define QSPI_DMA_ENC_KEY1_KEY1_Msk (0xFFFFFFFFUL << QSPI_DMA_ENC_KEY1_KEY1_Pos) /*!< Bit mask of KEY1 field. */

/* Register: QSPI_DMA_ENC_KEY2 */
/* Description: Bits 95:64 of DMA AES KEY */

/* Bits 31..0 : Bits 95:64 of DMA AES KEY */
#define QSPI_DMA_ENC_KEY2_KEY2_Pos (0UL) /*!< Position of KEY2 field. */
#define QSPI_DMA_ENC_KEY2_KEY2_Msk (0xFFFFFFFFUL << QSPI_DMA_ENC_KEY2_KEY2_Pos) /*!< Bit mask of KEY2 field. */

/* Register: QSPI_DMA_ENC_KEY3 */
/* Description: Bits 127:96 of DMA AES KEY */

/* Bits 31..0 : Bits 127:96 of DMA AES KEY */
#define QSPI_DMA_ENC_KEY3_KEY3_Pos (0UL) /*!< Position of KEY3 field. */
#define QSPI_DMA_ENC_KEY3_KEY3_Msk (0xFFFFFFFFUL << QSPI_DMA_ENC_KEY3_KEY3_Pos) /*!< Bit mask of KEY3 field. */

/* Register: QSPI_DMA_ENC_NONCE0 */
/* Description: Bits 31:0 of DMA NONCE */

/* Bits 31..0 : Bits 31:0 of DMA NONCE */
#define QSPI_DMA_ENC_NONCE0_NONCE0_Pos (0UL) /*!< Position of NONCE0 field. */
#define QSPI_DMA_ENC_NONCE0_NONCE0_Msk (0xFFFFFFFFUL << QSPI_DMA_ENC_NONCE0_NONCE0_Pos) /*!< Bit mask of NONCE0 field. */

/* Register: QSPI_DMA_ENC_NONCE1 */
/* Description: Bits 63:32 of DMA NONCE */

/* Bits 31..0 : Bits 63:32 of DMA NONCE */
#define QSPI_DMA_ENC_NONCE1_NONCE1_Pos (0UL) /*!< Position of NONCE1 field. */
#define QSPI_DMA_ENC_NONCE1_NONCE1_Msk (0xFFFFFFFFUL << QSPI_DMA_ENC_NONCE1_NONCE1_Pos) /*!< Bit mask of NONCE1 field. */

/* Register: QSPI_DMA_ENC_NONCE2 */
/* Description: Bits 95:64 of DMA NONCE */

/* Bits 31..0 : Bits 95:64 of DMA NONCE */
#define QSPI_DMA_ENC_NONCE2_NONCE2_Pos (0UL) /*!< Position of NONCE2 field. */
#define QSPI_DMA_ENC_NONCE2_NONCE2_Msk (0xFFFFFFFFUL << QSPI_DMA_ENC_NONCE2_NONCE2_Pos) /*!< Bit mask of NONCE2 field. */

/* Register: QSPI_DMA_ENC_ENABLE */
/* Description: Enable stream cipher for EasyDMA */

/* Bit 0 : Enable or disable stream cipher for EasyDMA */
#define QSPI_DMA_ENC_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define QSPI_DMA_ENC_ENABLE_ENABLE_Msk (0x1UL << QSPI_DMA_ENC_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define QSPI_DMA_ENC_ENABLE_ENABLE_Disabled (0UL) /*!< Disable stream cipher for QSPI EasyDMA */
#define QSPI_DMA_ENC_ENABLE_ENABLE_Enabled (1UL) /*!< Enable stream cipher for QSPI EasyDMA */

/* Register: QSPI_IFCONFIG1 */
/* Description: Interface configuration. SPI MEM CTRL Control reg. */

/* Bits 31..28 : SCK frequency is derived from PCLK192M with SCK frequency = PCLK192M / (2*(SCKFREQ + 1)). */
#define QSPI_IFCONFIG1_SCKFREQ_Pos (28UL) /*!< Position of SCKFREQ field. */
#define QSPI_IFCONFIG1_SCKFREQ_Msk (0xFUL << QSPI_IFCONFIG1_SCKFREQ_Pos) /*!< Bit mask of SCKFREQ field. */

/* Bit 26 : Reset external flash memory device. Write 1 to reset. Must be written back to 0 after a minimum delay of 1 us. */
#define QSPI_IFCONFIG1_RESET_Pos (26UL) /*!< Position of RESET field. */
#define QSPI_IFCONFIG1_RESET_Msk (0x1UL << QSPI_IFCONFIG1_RESET_Pos) /*!< Bit mask of RESET field. */

/* Bit 25 : Select SPI mode. */
#define QSPI_IFCONFIG1_SPIMODE_Pos (25UL) /*!< Position of SPIMODE field. */
#define QSPI_IFCONFIG1_SPIMODE_Msk (0x1UL << QSPI_IFCONFIG1_SPIMODE_Pos) /*!< Bit mask of SPIMODE field. */
#define QSPI_IFCONFIG1_SPIMODE_MODE0 (0UL) /*!< Mode 0: Data are captured on the clock rising edge and data is output on a falling edge. Base level of clock is 0 (CPOL=0, CPHA=0). */

/* Bit 24 : Enter/exit deep power-down mode (DPM) for external flash memory. */
#define QSPI_IFCONFIG1_DPMEN_Pos (24UL) /*!< Position of DPMEN field. */
#define QSPI_IFCONFIG1_DPMEN_Msk (0x1UL << QSPI_IFCONFIG1_DPMEN_Pos) /*!< Bit mask of DPMEN field. */
#define QSPI_IFCONFIG1_DPMEN_Exit (0UL) /*!< Exit DPM. */
#define QSPI_IFCONFIG1_DPMEN_Enter (1UL) /*!< Enter DPM. */

/* Bits 23..16 : Write FIFO threshold. */
#define QSPI_IFCONFIG1_FIFOTHW_Pos (16UL) /*!< Position of FIFOTHW field. */
#define QSPI_IFCONFIG1_FIFOTHW_Msk (0xFFUL << QSPI_IFCONFIG1_FIFOTHW_Pos) /*!< Bit mask of FIFOTHW field. */

/* Bits 15..8 : Read FIFO threshold. */
#define QSPI_IFCONFIG1_FIFOTHR_Pos (8UL) /*!< Position of FIFOTHR field. */
#define QSPI_IFCONFIG1_FIFOTHR_Msk (0xFFUL << QSPI_IFCONFIG1_FIFOTHR_Pos) /*!< Bit mask of FIFOTHR field. */

/* Bits 7..0 : Minimum amount of time that the CSN pin must stay high before it can go low again. Value is specified in number of 16 MHz periods (62.5 ns). */
#define QSPI_IFCONFIG1_SCKDELAY_Pos (0UL) /*!< Position of SCKDELAY field. */
#define QSPI_IFCONFIG1_SCKDELAY_Msk (0xFFUL << QSPI_IFCONFIG1_SCKDELAY_Pos) /*!< Bit mask of SCKDELAY field. */

/* Register: QSPI_STATUS */
/* Description: Status register. SPI MEM CTRL Status reg. */

/* Bits 31..24 : Value of external flash device Status Register. When the external flash has two bytes status register this field includes the value of the low byte. */
#define QSPI_STATUS_SREG_Pos (24UL) /*!< Position of SREG field. */
#define QSPI_STATUS_SREG_Msk (0xFFUL << QSPI_STATUS_SREG_Pos) /*!< Bit mask of SREG field. */

/* Bit 4 : 1: Ready to serve access request. */
#define QSPI_STATUS_REQREADY_Pos (4UL) /*!< Position of REQREADY field. */
#define QSPI_STATUS_REQREADY_Msk (0x1UL << QSPI_STATUS_REQREADY_Pos) /*!< Bit mask of REQREADY field. */

/* Bit 3 : Ready status. */
#define QSPI_STATUS_READY_Pos (3UL) /*!< Position of READY field. */
#define QSPI_STATUS_READY_Msk (0x1UL << QSPI_STATUS_READY_Pos) /*!< Bit mask of READY field. */
#define QSPI_STATUS_READY_BUSY (0UL) /*!< QSPI peripheral is busy. It is not allowed to trigger any new tasks, writing custom instructions or enter/exit DPM. */
#define QSPI_STATUS_READY_READY (1UL) /*!< QSPI peripheral is ready. It is allowed to trigger new tasks, writing custom instructions or enter/exit DPM. */

/* Bit 2 : Deep power-down mode (DPM) status of external flash. */
#define QSPI_STATUS_DPM_Pos (2UL) /*!< Position of DPM field. */
#define QSPI_STATUS_DPM_Msk (0x1UL << QSPI_STATUS_DPM_Pos) /*!< Bit mask of DPM field. */
#define QSPI_STATUS_DPM_Disabled (0UL) /*!< External flash is not in DPM. */
#define QSPI_STATUS_DPM_Enabled (1UL) /*!< External flash is in DPM. */

/* Bit 1 : Internal TX FIFO contains data not yet written to external flash. */
#define QSPI_STATUS_TXDATAREADY_Pos (1UL) /*!< Position of TXDATAREADY field. */
#define QSPI_STATUS_TXDATAREADY_Msk (0x1UL << QSPI_STATUS_TXDATAREADY_Pos) /*!< Bit mask of TXDATAREADY field. */

/* Bit 0 : Internal RX FIFO contains data from external flash. */
#define QSPI_STATUS_RXDATAREADY_Pos (0UL) /*!< Position of RXDATAREADY field. */
#define QSPI_STATUS_RXDATAREADY_Msk (0x1UL << QSPI_STATUS_RXDATAREADY_Pos) /*!< Bit mask of RXDATAREADY field. */

/* Register: QSPI_ACCESSREQ0 */
/* Description: Access request, word 0. SPI MEM CTRL Access Request reg. 0. */

/* Bits 31..0 : ACCESSREQ0 */
#define QSPI_ACCESSREQ0_ACCESSREQ0_Pos (0UL) /*!< Position of ACCESSREQ0 field. */
#define QSPI_ACCESSREQ0_ACCESSREQ0_Msk (0xFFFFFFFFUL << QSPI_ACCESSREQ0_ACCESSREQ0_Pos) /*!< Bit mask of ACCESSREQ0 field. */

/* Register: QSPI_ACCESSREQ1 */
/* Description: Access request, word 1. SPI MEM CTRL Access Request reg. 1. */

/* Bits 31..0 : ACCESSREQ1 */
#define QSPI_ACCESSREQ1_ACCESSREQ1_Pos (0UL) /*!< Position of ACCESSREQ1 field. */
#define QSPI_ACCESSREQ1_ACCESSREQ1_Msk (0xFFFFFFFFUL << QSPI_ACCESSREQ1_ACCESSREQ1_Pos) /*!< Bit mask of ACCESSREQ1 field. */

/* Register: QSPI_ACCESSREQ2 */
/* Description: Access request, word 2. SPI MEM CTRL Access Request reg. 2. */

/* Bits 31..0 : ACCESSREQ2 */
#define QSPI_ACCESSREQ2_ACCESSREQ2_Pos (0UL) /*!< Position of ACCESSREQ2 field. */
#define QSPI_ACCESSREQ2_ACCESSREQ2_Msk (0xFFFFFFFFUL << QSPI_ACCESSREQ2_ACCESSREQ2_Pos) /*!< Bit mask of ACCESSREQ2 field. */

/* Register: QSPI_DPMDUR */
/* Description: Set the duration required to enter/exit deep power-down mode (DPM). SPI MEM CTRL Duration DPM reg. */

/* Bits 31..16 : Duration needed by external flash to exit DPM. Duration is given as EXIT * 256 * 62.5 ns. */
#define QSPI_DPMDUR_EXIT_Pos (16UL) /*!< Position of EXIT field. */
#define QSPI_DPMDUR_EXIT_Msk (0xFFFFUL << QSPI_DPMDUR_EXIT_Pos) /*!< Bit mask of EXIT field. */

/* Bits 15..0 : Duration needed by external flash to enter DPM. Duration is given as ENTER * 256 * 62.5 ns. */
#define QSPI_DPMDUR_ENTER_Pos (0UL) /*!< Position of ENTER field. */
#define QSPI_DPMDUR_ENTER_Msk (0xFFFFUL << QSPI_DPMDUR_ENTER_Pos) /*!< Bit mask of ENTER field. */

/* Register: QSPI_DATARW */
/* Description: Read data when read, write data when written. SPI MEM CTRL Read/Write Data reg. */

/* Bits 31..0 : DATARW */
#define QSPI_DATARW_DATARW_Pos (0UL) /*!< Position of DATARW field. */
#define QSPI_DATARW_DATARW_Msk (0xFFFFFFFFUL << QSPI_DATARW_DATARW_Pos) /*!< Bit mask of DATARW field. */

/* Register: QSPI_FIFOSTAT */
/* Description: The number of items in Read and Write FIFOs. SPI MEM CTRL FIFOs Status reg. */

/* Bits 31..0 : FIFOSTAT */
#define QSPI_FIFOSTAT_FIFOSTAT_Pos (0UL) /*!< Position of FIFOSTAT field. */
#define QSPI_FIFOSTAT_FIFOSTAT_Msk (0xFFFFFFFFUL << QSPI_FIFOSTAT_FIFOSTAT_Pos) /*!< Bit mask of FIFOSTAT field. */

/* Register: QSPI_DEFMEM */
/* Description: Default memory register. SPI MEM Default memory register. Fields and content equivalent to IFCONFIG0. */

/* Bits 31..0 : Default memory register. */
#define QSPI_DEFMEM_DEFMEM_Pos (0UL) /*!< Position of DEFMEM field. */
#define QSPI_DEFMEM_DEFMEM_Msk (0xFFFFFFFFUL << QSPI_DEFMEM_DEFMEM_Pos) /*!< Bit mask of DEFMEM field. */

/* Register: QSPI_ADDRCONF */
/* Description: Extended address configuration. SPI MEM CTRL Extended Addressing Mode reg. */

/* Bit 27 : Send WREN (write enable opcode 0x06) before instruction. */
#define QSPI_ADDRCONF_WREN_Pos (27UL) /*!< Position of WREN field. */
#define QSPI_ADDRCONF_WREN_Msk (0x1UL << QSPI_ADDRCONF_WREN_Pos) /*!< Bit mask of WREN field. */
#define QSPI_ADDRCONF_WREN_Disable (0UL) /*!< Do not send WREN. */
#define QSPI_ADDRCONF_WREN_Enable (1UL) /*!< Send WREN. */

/* Bit 26 : Wait for write complete before sending command. */
#define QSPI_ADDRCONF_WIPWAIT_Pos (26UL) /*!< Position of WIPWAIT field. */
#define QSPI_ADDRCONF_WIPWAIT_Msk (0x1UL << QSPI_ADDRCONF_WIPWAIT_Pos) /*!< Bit mask of WIPWAIT field. */
#define QSPI_ADDRCONF_WIPWAIT_Disable (0UL) /*!< No wait. */
#define QSPI_ADDRCONF_WIPWAIT_Enable (1UL) /*!< Wait. */

/* Bits 25..24 : Extended addressing mode. */
#define QSPI_ADDRCONF_MODE_Pos (24UL) /*!< Position of MODE field. */
#define QSPI_ADDRCONF_MODE_Msk (0x3UL << QSPI_ADDRCONF_MODE_Pos) /*!< Bit mask of MODE field. */
#define QSPI_ADDRCONF_MODE_NoInstr (0UL) /*!< Do not send any instruction. */
#define QSPI_ADDRCONF_MODE_Opcode (1UL) /*!< Send opcode. */
#define QSPI_ADDRCONF_MODE_OpByte0 (2UL) /*!< Send opcode, byte0. */
#define QSPI_ADDRCONF_MODE_All (3UL) /*!< Send opcode, byte0, byte1. */

/* Bits 23..16 : Byte 1 following byte 0. */
#define QSPI_ADDRCONF_BYTE1_Pos (16UL) /*!< Position of BYTE1 field. */
#define QSPI_ADDRCONF_BYTE1_Msk (0xFFUL << QSPI_ADDRCONF_BYTE1_Pos) /*!< Bit mask of BYTE1 field. */

/* Bits 15..8 : Byte 0 following opcode. */
#define QSPI_ADDRCONF_BYTE0_Pos (8UL) /*!< Position of BYTE0 field. */
#define QSPI_ADDRCONF_BYTE0_Msk (0xFFUL << QSPI_ADDRCONF_BYTE0_Pos) /*!< Bit mask of BYTE0 field. */

/* Bits 7..0 : Opcode that enters the 32-bit addressing mode. */
#define QSPI_ADDRCONF_OPCODE_Pos (0UL) /*!< Position of OPCODE field. */
#define QSPI_ADDRCONF_OPCODE_Msk (0xFFUL << QSPI_ADDRCONF_OPCODE_Pos) /*!< Bit mask of OPCODE field. */

/* Register: QSPI_MEMSPEC */
/* Description: Byte specification: 1 byte manufacture ID, 1 byte memory type, 1 byte density. SPI MEM CTRL Memory Specification reg. */

/* Bits 31..0 : MEMSPEC */
#define QSPI_MEMSPEC_MEMSPEC_Pos (0UL) /*!< Position of MEMSPEC field. */
#define QSPI_MEMSPEC_MEMSPEC_Msk (0xFFFFFFFFUL << QSPI_MEMSPEC_MEMSPEC_Pos) /*!< Bit mask of MEMSPEC field. */

/* Register: QSPI_IRQMSK */
/* Description: Interrupts enable disable mask. SPI MEM CTRL Interrupt Mask reg. */

/* Bits 31..0 : IRQMSK */
#define QSPI_IRQMSK_IRQMSK_Pos (0UL) /*!< Position of IRQMSK field. */
#define QSPI_IRQMSK_IRQMSK_Msk (0xFFFFFFFFUL << QSPI_IRQMSK_IRQMSK_Pos) /*!< Bit mask of IRQMSK field. */

/* Register: QSPI_IRQREQ */
/* Description: Interrupt request register (reason for triggering interrupt signal). SPI MEM CTRL Interrupt Request reg. */

/* Bits 2..0 : IRQREQ */
#define QSPI_IRQREQ_IRQREQ_Pos (0UL) /*!< Position of IRQREQ field. */
#define QSPI_IRQREQ_IRQREQ_Msk (0x7UL << QSPI_IRQREQ_IRQREQ_Pos) /*!< Bit mask of IRQREQ field. */

/* Register: QSPI_CINSTRCONF */
/* Description: Custom instruction configuration register. SPI MEM CTRL Custom Instruction Setup reg. */

/* Bit 17 : Stop (finalize) long frame transaction */
#define QSPI_CINSTRCONF_LFSTOP_Pos (17UL) /*!< Position of LFSTOP field. */
#define QSPI_CINSTRCONF_LFSTOP_Msk (0x1UL << QSPI_CINSTRCONF_LFSTOP_Pos) /*!< Bit mask of LFSTOP field. */
#define QSPI_CINSTRCONF_LFSTOP_Stop (1UL) /*!< Stop */

/* Bit 16 : Enable long frame mode. When enabled, a custom instruction transaction has to be ended by writing the LFSTOP field. */
#define QSPI_CINSTRCONF_LFEN_Pos (16UL) /*!< Position of LFEN field. */
#define QSPI_CINSTRCONF_LFEN_Msk (0x1UL << QSPI_CINSTRCONF_LFEN_Pos) /*!< Bit mask of LFEN field. */
#define QSPI_CINSTRCONF_LFEN_Disable (0UL) /*!< Long frame mode disabled */
#define QSPI_CINSTRCONF_LFEN_Enable (1UL) /*!< Long frame mode enabled */

/* Bit 15 : Send WREN (write enable opcode 0x06) before instruction. */
#define QSPI_CINSTRCONF_WREN_Pos (15UL) /*!< Position of WREN field. */
#define QSPI_CINSTRCONF_WREN_Msk (0x1UL << QSPI_CINSTRCONF_WREN_Pos) /*!< Bit mask of WREN field. */
#define QSPI_CINSTRCONF_WREN_Disable (0UL) /*!< Do not send WREN. */
#define QSPI_CINSTRCONF_WREN_Enable (1UL) /*!< Send WREN. */

/* Bit 14 : Wait for write complete before sending command. */
#define QSPI_CINSTRCONF_WIPWAIT_Pos (14UL) /*!< Position of WIPWAIT field. */
#define QSPI_CINSTRCONF_WIPWAIT_Msk (0x1UL << QSPI_CINSTRCONF_WIPWAIT_Pos) /*!< Bit mask of WIPWAIT field. */
#define QSPI_CINSTRCONF_WIPWAIT_Disable (0UL) /*!< No wait. */
#define QSPI_CINSTRCONF_WIPWAIT_Enable (1UL) /*!< Wait. */

/* Bit 13 : Level of the IO3 pin (if connected) during transmission of custom instruction. */
#define QSPI_CINSTRCONF_LIO3_Pos (13UL) /*!< Position of LIO3 field. */
#define QSPI_CINSTRCONF_LIO3_Msk (0x1UL << QSPI_CINSTRCONF_LIO3_Pos) /*!< Bit mask of LIO3 field. */

/* Bit 12 : Level of the IO2 pin (if connected) during transmission of custom instruction. */
#define QSPI_CINSTRCONF_LIO2_Pos (12UL) /*!< Position of LIO2 field. */
#define QSPI_CINSTRCONF_LIO2_Msk (0x1UL << QSPI_CINSTRCONF_LIO2_Pos) /*!< Bit mask of LIO2 field. */

/* Bits 11..8 : Length of custom instruction in number of bytes. */
#define QSPI_CINSTRCONF_LENGTH_Pos (8UL) /*!< Position of LENGTH field. */
#define QSPI_CINSTRCONF_LENGTH_Msk (0xFUL << QSPI_CINSTRCONF_LENGTH_Pos) /*!< Bit mask of LENGTH field. */
#define QSPI_CINSTRCONF_LENGTH_1B (1UL) /*!< Send opcode only. */
#define QSPI_CINSTRCONF_LENGTH_2B (2UL) /*!< Send opcode, CINSTRDAT0.BYTE0. */
#define QSPI_CINSTRCONF_LENGTH_3B (3UL) /*!< Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE1. */
#define QSPI_CINSTRCONF_LENGTH_4B (4UL) /*!< Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE2. */
#define QSPI_CINSTRCONF_LENGTH_5B (5UL) /*!< Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE3. */
#define QSPI_CINSTRCONF_LENGTH_6B (6UL) /*!< Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE4. */
#define QSPI_CINSTRCONF_LENGTH_7B (7UL) /*!< Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE5. */
#define QSPI_CINSTRCONF_LENGTH_8B (8UL) /*!< Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE6. */
#define QSPI_CINSTRCONF_LENGTH_9B (9UL) /*!< Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE7. */

/* Bits 7..0 : Opcode of Custom instruction. */
#define QSPI_CINSTRCONF_OPCODE_Pos (0UL) /*!< Position of OPCODE field. */
#define QSPI_CINSTRCONF_OPCODE_Msk (0xFFUL << QSPI_CINSTRCONF_OPCODE_Pos) /*!< Bit mask of OPCODE field. */

/* Register: QSPI_CINSTRDAT0 */
/* Description: Custom instruction data register 0. SPI MEM CTRL Custom Instruction Data reg. 0. */

/* Bits 31..24 : Data byte 3 */
#define QSPI_CINSTRDAT0_BYTE3_Pos (24UL) /*!< Position of BYTE3 field. */
#define QSPI_CINSTRDAT0_BYTE3_Msk (0xFFUL << QSPI_CINSTRDAT0_BYTE3_Pos) /*!< Bit mask of BYTE3 field. */

/* Bits 23..16 : Data byte 2 */
#define QSPI_CINSTRDAT0_BYTE2_Pos (16UL) /*!< Position of BYTE2 field. */
#define QSPI_CINSTRDAT0_BYTE2_Msk (0xFFUL << QSPI_CINSTRDAT0_BYTE2_Pos) /*!< Bit mask of BYTE2 field. */

/* Bits 15..8 : Data byte 1 */
#define QSPI_CINSTRDAT0_BYTE1_Pos (8UL) /*!< Position of BYTE1 field. */
#define QSPI_CINSTRDAT0_BYTE1_Msk (0xFFUL << QSPI_CINSTRDAT0_BYTE1_Pos) /*!< Bit mask of BYTE1 field. */

/* Bits 7..0 : Data byte 0 */
#define QSPI_CINSTRDAT0_BYTE0_Pos (0UL) /*!< Position of BYTE0 field. */
#define QSPI_CINSTRDAT0_BYTE0_Msk (0xFFUL << QSPI_CINSTRDAT0_BYTE0_Pos) /*!< Bit mask of BYTE0 field. */

/* Register: QSPI_CINSTRDAT1 */
/* Description: Custom instruction data register 1. SPI MEM CTRL Custom Instruction Data reg. 1. */

/* Bits 31..24 : Data byte 7 */
#define QSPI_CINSTRDAT1_BYTE7_Pos (24UL) /*!< Position of BYTE7 field. */
#define QSPI_CINSTRDAT1_BYTE7_Msk (0xFFUL << QSPI_CINSTRDAT1_BYTE7_Pos) /*!< Bit mask of BYTE7 field. */

/* Bits 23..16 : Data byte 6 */
#define QSPI_CINSTRDAT1_BYTE6_Pos (16UL) /*!< Position of BYTE6 field. */
#define QSPI_CINSTRDAT1_BYTE6_Msk (0xFFUL << QSPI_CINSTRDAT1_BYTE6_Pos) /*!< Bit mask of BYTE6 field. */

/* Bits 15..8 : Data byte 5 */
#define QSPI_CINSTRDAT1_BYTE5_Pos (8UL) /*!< Position of BYTE5 field. */
#define QSPI_CINSTRDAT1_BYTE5_Msk (0xFFUL << QSPI_CINSTRDAT1_BYTE5_Pos) /*!< Bit mask of BYTE5 field. */

/* Bits 7..0 : Data byte 4 */
#define QSPI_CINSTRDAT1_BYTE4_Pos (0UL) /*!< Position of BYTE4 field. */
#define QSPI_CINSTRDAT1_BYTE4_Msk (0xFFUL << QSPI_CINSTRDAT1_BYTE4_Pos) /*!< Bit mask of BYTE4 field. */

/* Register: QSPI_IFTIMING */
/* Description: SPI interface timing. SPI MEM CTRL Read Dummy Cycles reg. */

/* Bits 7..4 : Number of 64 MHz dummy Cycles for READ4IO Instruction (opcode EB). */
#define QSPI_IFTIMING_RDC4IO_Pos (4UL) /*!< Position of RDC4IO field. */
#define QSPI_IFTIMING_RDC4IO_Msk (0xFUL << QSPI_IFTIMING_RDC4IO_Pos) /*!< Bit mask of RDC4IO field. */

/* Bits 3..0 : Number of 64 MHz dummy Cycles for READ2IO Instruction (opcode BB). */
#define QSPI_IFTIMING_RDC2IO_Pos (0UL) /*!< Position of RDC2IO field. */
#define QSPI_IFTIMING_RDC2IO_Msk (0xFUL << QSPI_IFTIMING_RDC2IO_Pos) /*!< Bit mask of RDC2IO field. */


/* Peripheral: RAMBISTHUB */
/* Description: RAM BIST Hub */

/* Register: RAMBISTHUB_RUN */
/* Description: RUN BIST */

/* Bit 0 : RUN BIST */
#define RAMBISTHUB_RUN_RUN_Pos (0UL) /*!< Position of RUN field. */
#define RAMBISTHUB_RUN_RUN_Msk (0x1UL << RAMBISTHUB_RUN_RUN_Pos) /*!< Bit mask of RUN field. */
#define RAMBISTHUB_RUN_RUN_Clear (0UL) /*!< Clear the task */
#define RAMBISTHUB_RUN_RUN_Set (1UL) /*!< Run the task */

/* Register: RAMBISTHUB_SLEEP */
/* Description: BIST SLEEP EVENT */

/* Bit 0 : BIST SLEEP EVENT */
#define RAMBISTHUB_SLEEP_SLEEP_Pos (0UL) /*!< Position of SLEEP field. */
#define RAMBISTHUB_SLEEP_SLEEP_Msk (0x1UL << RAMBISTHUB_SLEEP_SLEEP_Pos) /*!< Bit mask of SLEEP field. */
#define RAMBISTHUB_SLEEP_SLEEP_NoEventDetected (0UL) /*!< No event detected. Write zero to clear the event. */
#define RAMBISTHUB_SLEEP_SLEEP_EventDetected (1UL) /*!< Event detected */

/* Register: RAMBISTHUB_FINISHED */
/* Description: BIST FINISHED EVENT */

/* Bit 0 : BIST FINISHED EVENT */
#define RAMBISTHUB_FINISHED_FINISHED_Pos (0UL) /*!< Position of FINISHED field. */
#define RAMBISTHUB_FINISHED_FINISHED_Msk (0x1UL << RAMBISTHUB_FINISHED_FINISHED_Pos) /*!< Bit mask of FINISHED field. */
#define RAMBISTHUB_FINISHED_FINISHED_NoEventDetected (0UL) /*!< No event detected. Write zero to clear the event. */
#define RAMBISTHUB_FINISHED_FINISHED_EventDetected (1UL) /*!< Event detected */

/* Register: RAMBISTHUB_HUBENABLE */
/* Description: RAM BIST Hub enable */

/* Bit 0 : RAM BIST Hub enable */
#define RAMBISTHUB_HUBENABLE_HUBENABLE_Pos (0UL) /*!< Position of HUBENABLE field. */
#define RAMBISTHUB_HUBENABLE_HUBENABLE_Msk (0x1UL << RAMBISTHUB_HUBENABLE_HUBENABLE_Pos) /*!< Bit mask of HUBENABLE field. */
#define RAMBISTHUB_HUBENABLE_HUBENABLE_Disabled (0UL) /*!< RAM BIST Hub disabled */
#define RAMBISTHUB_HUBENABLE_HUBENABLE_Enabled (1UL) /*!< RAM BIST Hub enabled */

/* Register: RAMBISTHUB_SELECTBIST */
/* Description: Select bits for the individual BISTs to run */

/* Bit 31 : Select and enable BIST31 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST31_Pos (31UL) /*!< Position of SELECTBIST31 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST31_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST31_Pos) /*!< Bit mask of SELECTBIST31 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST31_Disabled (0UL) /*!< BIST31 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST31_Enabled (1UL) /*!< BIST31 enabled */

/* Bit 30 : Select and enable BIST30 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST30_Pos (30UL) /*!< Position of SELECTBIST30 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST30_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST30_Pos) /*!< Bit mask of SELECTBIST30 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST30_Disabled (0UL) /*!< BIST30 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST30_Enabled (1UL) /*!< BIST30 enabled */

/* Bit 29 : Select and enable BIST29 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST29_Pos (29UL) /*!< Position of SELECTBIST29 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST29_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST29_Pos) /*!< Bit mask of SELECTBIST29 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST29_Disabled (0UL) /*!< BIST29 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST29_Enabled (1UL) /*!< BIST29 enabled */

/* Bit 28 : Select and enable BIST28 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST28_Pos (28UL) /*!< Position of SELECTBIST28 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST28_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST28_Pos) /*!< Bit mask of SELECTBIST28 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST28_Disabled (0UL) /*!< BIST28 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST28_Enabled (1UL) /*!< BIST28 enabled */

/* Bit 27 : Select and enable BIST27 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST27_Pos (27UL) /*!< Position of SELECTBIST27 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST27_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST27_Pos) /*!< Bit mask of SELECTBIST27 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST27_Disabled (0UL) /*!< BIST27 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST27_Enabled (1UL) /*!< BIST27 enabled */

/* Bit 26 : Select and enable BIST26 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST26_Pos (26UL) /*!< Position of SELECTBIST26 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST26_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST26_Pos) /*!< Bit mask of SELECTBIST26 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST26_Disabled (0UL) /*!< BIST26 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST26_Enabled (1UL) /*!< BIST26 enabled */

/* Bit 25 : Select and enable BIST25 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST25_Pos (25UL) /*!< Position of SELECTBIST25 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST25_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST25_Pos) /*!< Bit mask of SELECTBIST25 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST25_Disabled (0UL) /*!< BIST25 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST25_Enabled (1UL) /*!< BIST25 enabled */

/* Bit 24 : Select and enable BIST24 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST24_Pos (24UL) /*!< Position of SELECTBIST24 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST24_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST24_Pos) /*!< Bit mask of SELECTBIST24 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST24_Disabled (0UL) /*!< BIST24 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST24_Enabled (1UL) /*!< BIST24 enabled */

/* Bit 23 : Select and enable BIST23 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST23_Pos (23UL) /*!< Position of SELECTBIST23 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST23_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST23_Pos) /*!< Bit mask of SELECTBIST23 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST23_Disabled (0UL) /*!< BIST23 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST23_Enabled (1UL) /*!< BIST23 enabled */

/* Bit 22 : Select and enable BIST22 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST22_Pos (22UL) /*!< Position of SELECTBIST22 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST22_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST22_Pos) /*!< Bit mask of SELECTBIST22 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST22_Disabled (0UL) /*!< BIST22 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST22_Enabled (1UL) /*!< BIST22 enabled */

/* Bit 21 : Select and enable BIST21 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST21_Pos (21UL) /*!< Position of SELECTBIST21 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST21_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST21_Pos) /*!< Bit mask of SELECTBIST21 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST21_Disabled (0UL) /*!< BIST21 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST21_Enabled (1UL) /*!< BIST21 enabled */

/* Bit 20 : Select and enable BIST20 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST20_Pos (20UL) /*!< Position of SELECTBIST20 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST20_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST20_Pos) /*!< Bit mask of SELECTBIST20 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST20_Disabled (0UL) /*!< BIST20 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST20_Enabled (1UL) /*!< BIST20 enabled */

/* Bit 19 : Select and enable BIST19 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST19_Pos (19UL) /*!< Position of SELECTBIST19 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST19_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST19_Pos) /*!< Bit mask of SELECTBIST19 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST19_Disabled (0UL) /*!< BIST19 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST19_Enabled (1UL) /*!< BIST19 enabled */

/* Bit 18 : Select and enable BIST18 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST18_Pos (18UL) /*!< Position of SELECTBIST18 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST18_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST18_Pos) /*!< Bit mask of SELECTBIST18 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST18_Disabled (0UL) /*!< BIST18 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST18_Enabled (1UL) /*!< BIST18 enabled */

/* Bit 17 : Select and enable BIST17 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST17_Pos (17UL) /*!< Position of SELECTBIST17 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST17_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST17_Pos) /*!< Bit mask of SELECTBIST17 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST17_Disabled (0UL) /*!< BIST17 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST17_Enabled (1UL) /*!< BIST17 enabled */

/* Bit 16 : Select and enable BIST16 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST16_Pos (16UL) /*!< Position of SELECTBIST16 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST16_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST16_Pos) /*!< Bit mask of SELECTBIST16 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST16_Disabled (0UL) /*!< BIST16 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST16_Enabled (1UL) /*!< BIST16 enabled */

/* Bit 15 : Select and enable BIST15 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST15_Pos (15UL) /*!< Position of SELECTBIST15 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST15_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST15_Pos) /*!< Bit mask of SELECTBIST15 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST15_Disabled (0UL) /*!< BIST15 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST15_Enabled (1UL) /*!< BIST15 enabled */

/* Bit 14 : Select and enable BIST14 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST14_Pos (14UL) /*!< Position of SELECTBIST14 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST14_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST14_Pos) /*!< Bit mask of SELECTBIST14 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST14_Disabled (0UL) /*!< BIST14 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST14_Enabled (1UL) /*!< BIST14 enabled */

/* Bit 13 : Select and enable BIST13 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST13_Pos (13UL) /*!< Position of SELECTBIST13 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST13_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST13_Pos) /*!< Bit mask of SELECTBIST13 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST13_Disabled (0UL) /*!< BIST13 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST13_Enabled (1UL) /*!< BIST13 enabled */

/* Bit 12 : Select and enable BIST12 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST12_Pos (12UL) /*!< Position of SELECTBIST12 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST12_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST12_Pos) /*!< Bit mask of SELECTBIST12 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST12_Disabled (0UL) /*!< BIST12 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST12_Enabled (1UL) /*!< BIST12 enabled */

/* Bit 11 : Select and enable BIST11 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST11_Pos (11UL) /*!< Position of SELECTBIST11 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST11_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST11_Pos) /*!< Bit mask of SELECTBIST11 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST11_Disabled (0UL) /*!< BIST11 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST11_Enabled (1UL) /*!< BIST11 enabled */

/* Bit 10 : Select and enable BIST10 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST10_Pos (10UL) /*!< Position of SELECTBIST10 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST10_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST10_Pos) /*!< Bit mask of SELECTBIST10 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST10_Disabled (0UL) /*!< BIST10 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST10_Enabled (1UL) /*!< BIST10 enabled */

/* Bit 9 : Select and enable BIST9 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST9_Pos (9UL) /*!< Position of SELECTBIST9 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST9_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST9_Pos) /*!< Bit mask of SELECTBIST9 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST9_Disabled (0UL) /*!< BIST9 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST9_Enabled (1UL) /*!< BIST9 enabled */

/* Bit 8 : Select and enable BIST8 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST8_Pos (8UL) /*!< Position of SELECTBIST8 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST8_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST8_Pos) /*!< Bit mask of SELECTBIST8 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST8_Disabled (0UL) /*!< BIST8 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST8_Enabled (1UL) /*!< BIST8 enabled */

/* Bit 7 : Select and enable BIST7 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST7_Pos (7UL) /*!< Position of SELECTBIST7 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST7_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST7_Pos) /*!< Bit mask of SELECTBIST7 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST7_Disabled (0UL) /*!< BIST7 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST7_Enabled (1UL) /*!< BIST7 enabled */

/* Bit 6 : Select and enable BIST6 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST6_Pos (6UL) /*!< Position of SELECTBIST6 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST6_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST6_Pos) /*!< Bit mask of SELECTBIST6 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST6_Disabled (0UL) /*!< BIST6 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST6_Enabled (1UL) /*!< BIST6 enabled */

/* Bit 5 : Select and enable BIST5 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST5_Pos (5UL) /*!< Position of SELECTBIST5 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST5_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST5_Pos) /*!< Bit mask of SELECTBIST5 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST5_Disabled (0UL) /*!< BIST5 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST5_Enabled (1UL) /*!< BIST5 enabled */

/* Bit 4 : Select and enable BIST4 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST4_Pos (4UL) /*!< Position of SELECTBIST4 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST4_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST4_Pos) /*!< Bit mask of SELECTBIST4 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST4_Disabled (0UL) /*!< BIST4 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST4_Enabled (1UL) /*!< BIST4 enabled */

/* Bit 3 : Select and enable BIST3 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST3_Pos (3UL) /*!< Position of SELECTBIST3 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST3_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST3_Pos) /*!< Bit mask of SELECTBIST3 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST3_Disabled (0UL) /*!< BIST3 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST3_Enabled (1UL) /*!< BIST3 enabled */

/* Bit 2 : Select and enable BIST2 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST2_Pos (2UL) /*!< Position of SELECTBIST2 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST2_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST2_Pos) /*!< Bit mask of SELECTBIST2 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST2_Disabled (0UL) /*!< BIST2 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST2_Enabled (1UL) /*!< BIST2 enabled */

/* Bit 1 : Select and enable BIST1 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST1_Pos (1UL) /*!< Position of SELECTBIST1 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST1_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST1_Pos) /*!< Bit mask of SELECTBIST1 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST1_Disabled (0UL) /*!< BIST1 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST1_Enabled (1UL) /*!< BIST1 enabled */

/* Bit 0 : Select and enable BIST0 */
#define RAMBISTHUB_SELECTBIST_SELECTBIST0_Pos (0UL) /*!< Position of SELECTBIST0 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST0_Msk (0x1UL << RAMBISTHUB_SELECTBIST_SELECTBIST0_Pos) /*!< Bit mask of SELECTBIST0 field. */
#define RAMBISTHUB_SELECTBIST_SELECTBIST0_Disabled (0UL) /*!< BIST0 disabled */
#define RAMBISTHUB_SELECTBIST_SELECTBIST0_Enabled (1UL) /*!< BIST0 enabled */

/* Register: RAMBISTHUB_BISTSTATUS */
/* Description: BIST status */

/* Bit 31 : Status of BIST31. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS31_Pos (31UL) /*!< Position of BISTSTATUS31 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS31_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS31_Pos) /*!< Bit mask of BISTSTATUS31 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS31_NotPassed (0UL) /*!< Read: BIST31 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS31_Passed (1UL) /*!< Read: BIST31 passed. Write zero to clear. */

/* Bit 30 : Status of BIST30. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS30_Pos (30UL) /*!< Position of BISTSTATUS30 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS30_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS30_Pos) /*!< Bit mask of BISTSTATUS30 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS30_NotPassed (0UL) /*!< Read: BIST30 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS30_Passed (1UL) /*!< Read: BIST30 passed. Write zero to clear. */

/* Bit 29 : Status of BIST29. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS29_Pos (29UL) /*!< Position of BISTSTATUS29 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS29_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS29_Pos) /*!< Bit mask of BISTSTATUS29 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS29_NotPassed (0UL) /*!< Read: BIST29 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS29_Passed (1UL) /*!< Read: BIST29 passed. Write zero to clear. */

/* Bit 28 : Status of BIST28. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS28_Pos (28UL) /*!< Position of BISTSTATUS28 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS28_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS28_Pos) /*!< Bit mask of BISTSTATUS28 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS28_NotPassed (0UL) /*!< Read: BIST28 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS28_Passed (1UL) /*!< Read: BIST28 passed. Write zero to clear. */

/* Bit 27 : Status of BIST27. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS27_Pos (27UL) /*!< Position of BISTSTATUS27 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS27_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS27_Pos) /*!< Bit mask of BISTSTATUS27 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS27_NotPassed (0UL) /*!< Read: BIST27 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS27_Passed (1UL) /*!< Read: BIST27 passed. Write zero to clear. */

/* Bit 26 : Status of BIST26. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS26_Pos (26UL) /*!< Position of BISTSTATUS26 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS26_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS26_Pos) /*!< Bit mask of BISTSTATUS26 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS26_NotPassed (0UL) /*!< Read: BIST26 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS26_Passed (1UL) /*!< Read: BIST26 passed. Write zero to clear. */

/* Bit 25 : Status of BIST25. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS25_Pos (25UL) /*!< Position of BISTSTATUS25 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS25_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS25_Pos) /*!< Bit mask of BISTSTATUS25 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS25_NotPassed (0UL) /*!< Read: BIST25 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS25_Passed (1UL) /*!< Read: BIST25 passed. Write zero to clear. */

/* Bit 24 : Status of BIST24. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS24_Pos (24UL) /*!< Position of BISTSTATUS24 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS24_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS24_Pos) /*!< Bit mask of BISTSTATUS24 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS24_NotPassed (0UL) /*!< Read: BIST24 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS24_Passed (1UL) /*!< Read: BIST24 passed. Write zero to clear. */

/* Bit 23 : Status of BIST23. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS23_Pos (23UL) /*!< Position of BISTSTATUS23 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS23_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS23_Pos) /*!< Bit mask of BISTSTATUS23 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS23_NotPassed (0UL) /*!< Read: BIST23 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS23_Passed (1UL) /*!< Read: BIST23 passed. Write zero to clear. */

/* Bit 22 : Status of BIST22. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS22_Pos (22UL) /*!< Position of BISTSTATUS22 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS22_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS22_Pos) /*!< Bit mask of BISTSTATUS22 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS22_NotPassed (0UL) /*!< Read: BIST22 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS22_Passed (1UL) /*!< Read: BIST22 passed. Write zero to clear. */

/* Bit 21 : Status of BIST21. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS21_Pos (21UL) /*!< Position of BISTSTATUS21 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS21_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS21_Pos) /*!< Bit mask of BISTSTATUS21 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS21_NotPassed (0UL) /*!< Read: BIST21 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS21_Passed (1UL) /*!< Read: BIST21 passed. Write zero to clear. */

/* Bit 20 : Status of BIST20. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS20_Pos (20UL) /*!< Position of BISTSTATUS20 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS20_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS20_Pos) /*!< Bit mask of BISTSTATUS20 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS20_NotPassed (0UL) /*!< Read: BIST20 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS20_Passed (1UL) /*!< Read: BIST20 passed. Write zero to clear. */

/* Bit 19 : Status of BIST19. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS19_Pos (19UL) /*!< Position of BISTSTATUS19 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS19_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS19_Pos) /*!< Bit mask of BISTSTATUS19 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS19_NotPassed (0UL) /*!< Read: BIST19 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS19_Passed (1UL) /*!< Read: BIST19 passed. Write zero to clear. */

/* Bit 18 : Status of BIST18. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS18_Pos (18UL) /*!< Position of BISTSTATUS18 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS18_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS18_Pos) /*!< Bit mask of BISTSTATUS18 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS18_NotPassed (0UL) /*!< Read: BIST18 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS18_Passed (1UL) /*!< Read: BIST18 passed. Write zero to clear. */

/* Bit 17 : Status of BIST17. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS17_Pos (17UL) /*!< Position of BISTSTATUS17 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS17_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS17_Pos) /*!< Bit mask of BISTSTATUS17 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS17_NotPassed (0UL) /*!< Read: BIST17 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS17_Passed (1UL) /*!< Read: BIST17 passed. Write zero to clear. */

/* Bit 16 : Status of BIST16. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS16_Pos (16UL) /*!< Position of BISTSTATUS16 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS16_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS16_Pos) /*!< Bit mask of BISTSTATUS16 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS16_NotPassed (0UL) /*!< Read: BIST16 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS16_Passed (1UL) /*!< Read: BIST16 passed. Write zero to clear. */

/* Bit 15 : Status of BIST15. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS15_Pos (15UL) /*!< Position of BISTSTATUS15 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS15_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS15_Pos) /*!< Bit mask of BISTSTATUS15 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS15_NotPassed (0UL) /*!< Read: BIST15 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS15_Passed (1UL) /*!< Read: BIST15 passed. Write zero to clear. */

/* Bit 14 : Status of BIST14. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS14_Pos (14UL) /*!< Position of BISTSTATUS14 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS14_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS14_Pos) /*!< Bit mask of BISTSTATUS14 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS14_NotPassed (0UL) /*!< Read: BIST14 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS14_Passed (1UL) /*!< Read: BIST14 passed. Write zero to clear. */

/* Bit 13 : Status of BIST13. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS13_Pos (13UL) /*!< Position of BISTSTATUS13 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS13_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS13_Pos) /*!< Bit mask of BISTSTATUS13 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS13_NotPassed (0UL) /*!< Read: BIST13 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS13_Passed (1UL) /*!< Read: BIST13 passed. Write zero to clear. */

/* Bit 12 : Status of BIST12. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS12_Pos (12UL) /*!< Position of BISTSTATUS12 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS12_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS12_Pos) /*!< Bit mask of BISTSTATUS12 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS12_NotPassed (0UL) /*!< Read: BIST12 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS12_Passed (1UL) /*!< Read: BIST12 passed. Write zero to clear. */

/* Bit 11 : Status of BIST11. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS11_Pos (11UL) /*!< Position of BISTSTATUS11 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS11_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS11_Pos) /*!< Bit mask of BISTSTATUS11 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS11_NotPassed (0UL) /*!< Read: BIST11 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS11_Passed (1UL) /*!< Read: BIST11 passed. Write zero to clear. */

/* Bit 10 : Status of BIST10. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS10_Pos (10UL) /*!< Position of BISTSTATUS10 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS10_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS10_Pos) /*!< Bit mask of BISTSTATUS10 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS10_NotPassed (0UL) /*!< Read: BIST10 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS10_Passed (1UL) /*!< Read: BIST10 passed. Write zero to clear. */

/* Bit 9 : Status of BIST9. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS9_Pos (9UL) /*!< Position of BISTSTATUS9 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS9_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS9_Pos) /*!< Bit mask of BISTSTATUS9 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS9_NotPassed (0UL) /*!< Read: BIST9 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS9_Passed (1UL) /*!< Read: BIST9 passed. Write zero to clear. */

/* Bit 8 : Status of BIST8. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS8_Pos (8UL) /*!< Position of BISTSTATUS8 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS8_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS8_Pos) /*!< Bit mask of BISTSTATUS8 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS8_NotPassed (0UL) /*!< Read: BIST8 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS8_Passed (1UL) /*!< Read: BIST8 passed. Write zero to clear. */

/* Bit 7 : Status of BIST7. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS7_Pos (7UL) /*!< Position of BISTSTATUS7 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS7_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS7_Pos) /*!< Bit mask of BISTSTATUS7 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS7_NotPassed (0UL) /*!< Read: BIST7 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS7_Passed (1UL) /*!< Read: BIST7 passed. Write zero to clear. */

/* Bit 6 : Status of BIST6. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS6_Pos (6UL) /*!< Position of BISTSTATUS6 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS6_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS6_Pos) /*!< Bit mask of BISTSTATUS6 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS6_NotPassed (0UL) /*!< Read: BIST6 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS6_Passed (1UL) /*!< Read: BIST6 passed. Write zero to clear. */

/* Bit 5 : Status of BIST5. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS5_Pos (5UL) /*!< Position of BISTSTATUS5 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS5_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS5_Pos) /*!< Bit mask of BISTSTATUS5 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS5_NotPassed (0UL) /*!< Read: BIST5 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS5_Passed (1UL) /*!< Read: BIST5 passed. Write zero to clear. */

/* Bit 4 : Status of BIST4. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS4_Pos (4UL) /*!< Position of BISTSTATUS4 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS4_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS4_Pos) /*!< Bit mask of BISTSTATUS4 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS4_NotPassed (0UL) /*!< Read: BIST4 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS4_Passed (1UL) /*!< Read: BIST4 passed. Write zero to clear. */

/* Bit 3 : Status of BIST3. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS3_Pos (3UL) /*!< Position of BISTSTATUS3 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS3_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS3_Pos) /*!< Bit mask of BISTSTATUS3 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS3_NotPassed (0UL) /*!< Read: BIST3 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS3_Passed (1UL) /*!< Read: BIST3 passed. Write zero to clear. */

/* Bit 2 : Status of BIST2. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS2_Pos (2UL) /*!< Position of BISTSTATUS2 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS2_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS2_Pos) /*!< Bit mask of BISTSTATUS2 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS2_NotPassed (0UL) /*!< Read: BIST2 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS2_Passed (1UL) /*!< Read: BIST2 passed. Write zero to clear. */

/* Bit 1 : Status of BIST1. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS1_Pos (1UL) /*!< Position of BISTSTATUS1 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS1_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS1_Pos) /*!< Bit mask of BISTSTATUS1 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS1_NotPassed (0UL) /*!< Read: BIST1 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS1_Passed (1UL) /*!< Read: BIST1 passed. Write zero to clear. */

/* Bit 0 : Status of BIST0. Write to clear. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS0_Pos (0UL) /*!< Position of BISTSTATUS0 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS0_Msk (0x1UL << RAMBISTHUB_BISTSTATUS_BISTSTATUS0_Pos) /*!< Bit mask of BISTSTATUS0 field. */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS0_NotPassed (0UL) /*!< Read: BIST0 not passed */
#define RAMBISTHUB_BISTSTATUS_BISTSTATUS0_Passed (1UL) /*!< Read: BIST0 passed. Write zero to clear. */

/* Register: RAMBISTHUB_TESTTYPE */
/* Description: RAM BIST test type */

/* Bit 0 : RAM BIST Hub enable */
#define RAMBISTHUB_TESTTYPE_TESTTYPE_Pos (0UL) /*!< Position of TESTTYPE field. */
#define RAMBISTHUB_TESTTYPE_TESTTYPE_Msk (0x1UL << RAMBISTHUB_TESTTYPE_TESTTYPE_Pos) /*!< Bit mask of TESTTYPE field. */
#define RAMBISTHUB_TESTTYPE_TESTTYPE_BIST (0UL) /*!< Non-retention BIST */
#define RAMBISTHUB_TESTTYPE_TESTTYPE_RetentionBIST (1UL) /*!< Retention BIST */

/* Register: RAMBISTHUB_FORCEONRETENTION */
/* Description: Power request override to force RAM retention on */

/* Bit 0 : Power request override to force RAM retention on */
#define RAMBISTHUB_FORCEONRETENTION_FORCEONRETENTION_Pos (0UL) /*!< Position of FORCEONRETENTION field. */
#define RAMBISTHUB_FORCEONRETENTION_FORCEONRETENTION_Msk (0x1UL << RAMBISTHUB_FORCEONRETENTION_FORCEONRETENTION_Pos) /*!< Bit mask of FORCEONRETENTION field. */
#define RAMBISTHUB_FORCEONRETENTION_FORCEONRETENTION_Disabled (0UL) /*!< Power request override disabled */
#define RAMBISTHUB_FORCEONRETENTION_FORCEONRETENTION_Enabled (1UL) /*!< Power request override enabled */

/* Register: RAMBISTHUB_CLAMP0 */
/* Description: Description collection: Block clamping register 0 */

/* Bit 31 : Clamp the RAM block from the BIST testing for RamBist 31 */
#define RAMBISTHUB_CLAMP0_CLAMP_31_Pos (31UL) /*!< Position of CLAMP_31 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_31_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_31_Pos) /*!< Bit mask of CLAMP_31 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_31_Include (0UL) /*!< RAM block 31 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_31_Clamp (1UL) /*!< RAM block 31 is clamped from BIST testing */

/* Bit 30 : Clamp the RAM block from the BIST testing for RamBist 30 */
#define RAMBISTHUB_CLAMP0_CLAMP_30_Pos (30UL) /*!< Position of CLAMP_30 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_30_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_30_Pos) /*!< Bit mask of CLAMP_30 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_30_Include (0UL) /*!< RAM block 30 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_30_Clamp (1UL) /*!< RAM block 30 is clamped from BIST testing */

/* Bit 29 : Clamp the RAM block from the BIST testing for RamBist 29 */
#define RAMBISTHUB_CLAMP0_CLAMP_29_Pos (29UL) /*!< Position of CLAMP_29 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_29_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_29_Pos) /*!< Bit mask of CLAMP_29 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_29_Include (0UL) /*!< RAM block 29 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_29_Clamp (1UL) /*!< RAM block 29 is clamped from BIST testing */

/* Bit 28 : Clamp the RAM block from the BIST testing for RamBist 28 */
#define RAMBISTHUB_CLAMP0_CLAMP_28_Pos (28UL) /*!< Position of CLAMP_28 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_28_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_28_Pos) /*!< Bit mask of CLAMP_28 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_28_Include (0UL) /*!< RAM block 28 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_28_Clamp (1UL) /*!< RAM block 28 is clamped from BIST testing */

/* Bit 27 : Clamp the RAM block from the BIST testing for RamBist 27 */
#define RAMBISTHUB_CLAMP0_CLAMP_27_Pos (27UL) /*!< Position of CLAMP_27 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_27_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_27_Pos) /*!< Bit mask of CLAMP_27 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_27_Include (0UL) /*!< RAM block 27 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_27_Clamp (1UL) /*!< RAM block 27 is clamped from BIST testing */

/* Bit 26 : Clamp the RAM block from the BIST testing for RamBist 26 */
#define RAMBISTHUB_CLAMP0_CLAMP_26_Pos (26UL) /*!< Position of CLAMP_26 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_26_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_26_Pos) /*!< Bit mask of CLAMP_26 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_26_Include (0UL) /*!< RAM block 26 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_26_Clamp (1UL) /*!< RAM block 26 is clamped from BIST testing */

/* Bit 25 : Clamp the RAM block from the BIST testing for RamBist 25 */
#define RAMBISTHUB_CLAMP0_CLAMP_25_Pos (25UL) /*!< Position of CLAMP_25 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_25_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_25_Pos) /*!< Bit mask of CLAMP_25 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_25_Include (0UL) /*!< RAM block 25 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_25_Clamp (1UL) /*!< RAM block 25 is clamped from BIST testing */

/* Bit 24 : Clamp the RAM block from the BIST testing for RamBist 24 */
#define RAMBISTHUB_CLAMP0_CLAMP_24_Pos (24UL) /*!< Position of CLAMP_24 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_24_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_24_Pos) /*!< Bit mask of CLAMP_24 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_24_Include (0UL) /*!< RAM block 24 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_24_Clamp (1UL) /*!< RAM block 24 is clamped from BIST testing */

/* Bit 23 : Clamp the RAM block from the BIST testing for RamBist 23 */
#define RAMBISTHUB_CLAMP0_CLAMP_23_Pos (23UL) /*!< Position of CLAMP_23 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_23_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_23_Pos) /*!< Bit mask of CLAMP_23 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_23_Include (0UL) /*!< RAM block 23 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_23_Clamp (1UL) /*!< RAM block 23 is clamped from BIST testing */

/* Bit 22 : Clamp the RAM block from the BIST testing for RamBist 22 */
#define RAMBISTHUB_CLAMP0_CLAMP_22_Pos (22UL) /*!< Position of CLAMP_22 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_22_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_22_Pos) /*!< Bit mask of CLAMP_22 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_22_Include (0UL) /*!< RAM block 22 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_22_Clamp (1UL) /*!< RAM block 22 is clamped from BIST testing */

/* Bit 21 : Clamp the RAM block from the BIST testing for RamBist 21 */
#define RAMBISTHUB_CLAMP0_CLAMP_21_Pos (21UL) /*!< Position of CLAMP_21 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_21_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_21_Pos) /*!< Bit mask of CLAMP_21 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_21_Include (0UL) /*!< RAM block 21 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_21_Clamp (1UL) /*!< RAM block 21 is clamped from BIST testing */

/* Bit 20 : Clamp the RAM block from the BIST testing for RamBist 20 */
#define RAMBISTHUB_CLAMP0_CLAMP_20_Pos (20UL) /*!< Position of CLAMP_20 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_20_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_20_Pos) /*!< Bit mask of CLAMP_20 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_20_Include (0UL) /*!< RAM block 20 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_20_Clamp (1UL) /*!< RAM block 20 is clamped from BIST testing */

/* Bit 19 : Clamp the RAM block from the BIST testing for RamBist 19 */
#define RAMBISTHUB_CLAMP0_CLAMP_19_Pos (19UL) /*!< Position of CLAMP_19 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_19_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_19_Pos) /*!< Bit mask of CLAMP_19 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_19_Include (0UL) /*!< RAM block 19 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_19_Clamp (1UL) /*!< RAM block 19 is clamped from BIST testing */

/* Bit 18 : Clamp the RAM block from the BIST testing for RamBist 18 */
#define RAMBISTHUB_CLAMP0_CLAMP_18_Pos (18UL) /*!< Position of CLAMP_18 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_18_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_18_Pos) /*!< Bit mask of CLAMP_18 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_18_Include (0UL) /*!< RAM block 18 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_18_Clamp (1UL) /*!< RAM block 18 is clamped from BIST testing */

/* Bit 17 : Clamp the RAM block from the BIST testing for RamBist 17 */
#define RAMBISTHUB_CLAMP0_CLAMP_17_Pos (17UL) /*!< Position of CLAMP_17 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_17_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_17_Pos) /*!< Bit mask of CLAMP_17 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_17_Include (0UL) /*!< RAM block 17 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_17_Clamp (1UL) /*!< RAM block 17 is clamped from BIST testing */

/* Bit 16 : Clamp the RAM block from the BIST testing for RamBist 16 */
#define RAMBISTHUB_CLAMP0_CLAMP_16_Pos (16UL) /*!< Position of CLAMP_16 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_16_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_16_Pos) /*!< Bit mask of CLAMP_16 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_16_Include (0UL) /*!< RAM block 16 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_16_Clamp (1UL) /*!< RAM block 16 is clamped from BIST testing */

/* Bit 15 : Clamp the RAM block from the BIST testing for RamBist 15 */
#define RAMBISTHUB_CLAMP0_CLAMP_15_Pos (15UL) /*!< Position of CLAMP_15 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_15_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_15_Pos) /*!< Bit mask of CLAMP_15 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_15_Include (0UL) /*!< RAM block 15 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_15_Clamp (1UL) /*!< RAM block 15 is clamped from BIST testing */

/* Bit 14 : Clamp the RAM block from the BIST testing for RamBist 14 */
#define RAMBISTHUB_CLAMP0_CLAMP_14_Pos (14UL) /*!< Position of CLAMP_14 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_14_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_14_Pos) /*!< Bit mask of CLAMP_14 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_14_Include (0UL) /*!< RAM block 14 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_14_Clamp (1UL) /*!< RAM block 14 is clamped from BIST testing */

/* Bit 13 : Clamp the RAM block from the BIST testing for RamBist 13 */
#define RAMBISTHUB_CLAMP0_CLAMP_13_Pos (13UL) /*!< Position of CLAMP_13 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_13_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_13_Pos) /*!< Bit mask of CLAMP_13 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_13_Include (0UL) /*!< RAM block 13 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_13_Clamp (1UL) /*!< RAM block 13 is clamped from BIST testing */

/* Bit 12 : Clamp the RAM block from the BIST testing for RamBist 12 */
#define RAMBISTHUB_CLAMP0_CLAMP_12_Pos (12UL) /*!< Position of CLAMP_12 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_12_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_12_Pos) /*!< Bit mask of CLAMP_12 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_12_Include (0UL) /*!< RAM block 12 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_12_Clamp (1UL) /*!< RAM block 12 is clamped from BIST testing */

/* Bit 11 : Clamp the RAM block from the BIST testing for RamBist 11 */
#define RAMBISTHUB_CLAMP0_CLAMP_11_Pos (11UL) /*!< Position of CLAMP_11 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_11_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_11_Pos) /*!< Bit mask of CLAMP_11 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_11_Include (0UL) /*!< RAM block 11 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_11_Clamp (1UL) /*!< RAM block 11 is clamped from BIST testing */

/* Bit 10 : Clamp the RAM block from the BIST testing for RamBist 10 */
#define RAMBISTHUB_CLAMP0_CLAMP_10_Pos (10UL) /*!< Position of CLAMP_10 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_10_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_10_Pos) /*!< Bit mask of CLAMP_10 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_10_Include (0UL) /*!< RAM block 10 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_10_Clamp (1UL) /*!< RAM block 10 is clamped from BIST testing */

/* Bit 9 : Clamp the RAM block from the BIST testing for RamBist 9 */
#define RAMBISTHUB_CLAMP0_CLAMP_9_Pos (9UL) /*!< Position of CLAMP_9 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_9_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_9_Pos) /*!< Bit mask of CLAMP_9 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_9_Include (0UL) /*!< RAM block 9 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_9_Clamp (1UL) /*!< RAM block 9 is clamped from BIST testing */

/* Bit 8 : Clamp the RAM block from the BIST testing for RamBist 8 */
#define RAMBISTHUB_CLAMP0_CLAMP_8_Pos (8UL) /*!< Position of CLAMP_8 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_8_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_8_Pos) /*!< Bit mask of CLAMP_8 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_8_Include (0UL) /*!< RAM block 8 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_8_Clamp (1UL) /*!< RAM block 8 is clamped from BIST testing */

/* Bit 7 : Clamp the RAM block from the BIST testing for RamBist 7 */
#define RAMBISTHUB_CLAMP0_CLAMP_7_Pos (7UL) /*!< Position of CLAMP_7 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_7_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_7_Pos) /*!< Bit mask of CLAMP_7 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_7_Include (0UL) /*!< RAM block 7 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_7_Clamp (1UL) /*!< RAM block 7 is clamped from BIST testing */

/* Bit 6 : Clamp the RAM block from the BIST testing for RamBist 6 */
#define RAMBISTHUB_CLAMP0_CLAMP_6_Pos (6UL) /*!< Position of CLAMP_6 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_6_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_6_Pos) /*!< Bit mask of CLAMP_6 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_6_Include (0UL) /*!< RAM block 6 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_6_Clamp (1UL) /*!< RAM block 6 is clamped from BIST testing */

/* Bit 5 : Clamp the RAM block from the BIST testing for RamBist 5 */
#define RAMBISTHUB_CLAMP0_CLAMP_5_Pos (5UL) /*!< Position of CLAMP_5 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_5_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_5_Pos) /*!< Bit mask of CLAMP_5 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_5_Include (0UL) /*!< RAM block 5 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_5_Clamp (1UL) /*!< RAM block 5 is clamped from BIST testing */

/* Bit 4 : Clamp the RAM block from the BIST testing for RamBist 4 */
#define RAMBISTHUB_CLAMP0_CLAMP_4_Pos (4UL) /*!< Position of CLAMP_4 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_4_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_4_Pos) /*!< Bit mask of CLAMP_4 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_4_Include (0UL) /*!< RAM block 4 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_4_Clamp (1UL) /*!< RAM block 4 is clamped from BIST testing */

/* Bit 3 : Clamp the RAM block from the BIST testing for RamBist 3 */
#define RAMBISTHUB_CLAMP0_CLAMP_3_Pos (3UL) /*!< Position of CLAMP_3 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_3_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_3_Pos) /*!< Bit mask of CLAMP_3 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_3_Include (0UL) /*!< RAM block 3 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_3_Clamp (1UL) /*!< RAM block 3 is clamped from BIST testing */

/* Bit 2 : Clamp the RAM block from the BIST testing for RamBist 2 */
#define RAMBISTHUB_CLAMP0_CLAMP_2_Pos (2UL) /*!< Position of CLAMP_2 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_2_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_2_Pos) /*!< Bit mask of CLAMP_2 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_2_Include (0UL) /*!< RAM block 2 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_2_Clamp (1UL) /*!< RAM block 2 is clamped from BIST testing */

/* Bit 1 : Clamp the RAM block from the BIST testing for RamBist 1 */
#define RAMBISTHUB_CLAMP0_CLAMP_1_Pos (1UL) /*!< Position of CLAMP_1 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_1_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_1_Pos) /*!< Bit mask of CLAMP_1 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_1_Include (0UL) /*!< RAM block 1 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_1_Clamp (1UL) /*!< RAM block 1 is clamped from BIST testing */

/* Bit 0 : Clamp the RAM block from the BIST testing for RamBist 0 */
#define RAMBISTHUB_CLAMP0_CLAMP_0_Pos (0UL) /*!< Position of CLAMP_0 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_0_Msk (0x1UL << RAMBISTHUB_CLAMP0_CLAMP_0_Pos) /*!< Bit mask of CLAMP_0 field. */
#define RAMBISTHUB_CLAMP0_CLAMP_0_Include (0UL) /*!< RAM block 0 is included in BIST testing */
#define RAMBISTHUB_CLAMP0_CLAMP_0_Clamp (1UL) /*!< RAM block 0 is clamped from BIST testing */

/* Register: RAMBISTHUB_CLAMP1 */
/* Description: Description collection: Block clamping register 1 */

/* Bit 31 : Clamp the RAM block from the BIST testing for RamBist 63 */
#define RAMBISTHUB_CLAMP1_CLAMP_31_Pos (31UL) /*!< Position of CLAMP_31 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_31_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_31_Pos) /*!< Bit mask of CLAMP_31 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_31_Include (0UL) /*!< RAM block 63 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_31_Clamp (1UL) /*!< RAM block 63 is clamped from BIST testing */

/* Bit 30 : Clamp the RAM block from the BIST testing for RamBist 62 */
#define RAMBISTHUB_CLAMP1_CLAMP_30_Pos (30UL) /*!< Position of CLAMP_30 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_30_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_30_Pos) /*!< Bit mask of CLAMP_30 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_30_Include (0UL) /*!< RAM block 62 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_30_Clamp (1UL) /*!< RAM block 62 is clamped from BIST testing */

/* Bit 29 : Clamp the RAM block from the BIST testing for RamBist 61 */
#define RAMBISTHUB_CLAMP1_CLAMP_29_Pos (29UL) /*!< Position of CLAMP_29 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_29_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_29_Pos) /*!< Bit mask of CLAMP_29 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_29_Include (0UL) /*!< RAM block 61 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_29_Clamp (1UL) /*!< RAM block 61 is clamped from BIST testing */

/* Bit 28 : Clamp the RAM block from the BIST testing for RamBist 60 */
#define RAMBISTHUB_CLAMP1_CLAMP_28_Pos (28UL) /*!< Position of CLAMP_28 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_28_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_28_Pos) /*!< Bit mask of CLAMP_28 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_28_Include (0UL) /*!< RAM block 60 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_28_Clamp (1UL) /*!< RAM block 60 is clamped from BIST testing */

/* Bit 27 : Clamp the RAM block from the BIST testing for RamBist 59 */
#define RAMBISTHUB_CLAMP1_CLAMP_27_Pos (27UL) /*!< Position of CLAMP_27 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_27_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_27_Pos) /*!< Bit mask of CLAMP_27 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_27_Include (0UL) /*!< RAM block 59 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_27_Clamp (1UL) /*!< RAM block 59 is clamped from BIST testing */

/* Bit 26 : Clamp the RAM block from the BIST testing for RamBist 58 */
#define RAMBISTHUB_CLAMP1_CLAMP_26_Pos (26UL) /*!< Position of CLAMP_26 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_26_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_26_Pos) /*!< Bit mask of CLAMP_26 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_26_Include (0UL) /*!< RAM block 58 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_26_Clamp (1UL) /*!< RAM block 58 is clamped from BIST testing */

/* Bit 25 : Clamp the RAM block from the BIST testing for RamBist 57 */
#define RAMBISTHUB_CLAMP1_CLAMP_25_Pos (25UL) /*!< Position of CLAMP_25 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_25_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_25_Pos) /*!< Bit mask of CLAMP_25 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_25_Include (0UL) /*!< RAM block 57 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_25_Clamp (1UL) /*!< RAM block 57 is clamped from BIST testing */

/* Bit 24 : Clamp the RAM block from the BIST testing for RamBist 56 */
#define RAMBISTHUB_CLAMP1_CLAMP_24_Pos (24UL) /*!< Position of CLAMP_24 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_24_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_24_Pos) /*!< Bit mask of CLAMP_24 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_24_Include (0UL) /*!< RAM block 56 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_24_Clamp (1UL) /*!< RAM block 56 is clamped from BIST testing */

/* Bit 23 : Clamp the RAM block from the BIST testing for RamBist 55 */
#define RAMBISTHUB_CLAMP1_CLAMP_23_Pos (23UL) /*!< Position of CLAMP_23 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_23_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_23_Pos) /*!< Bit mask of CLAMP_23 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_23_Include (0UL) /*!< RAM block 55 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_23_Clamp (1UL) /*!< RAM block 55 is clamped from BIST testing */

/* Bit 22 : Clamp the RAM block from the BIST testing for RamBist 54 */
#define RAMBISTHUB_CLAMP1_CLAMP_22_Pos (22UL) /*!< Position of CLAMP_22 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_22_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_22_Pos) /*!< Bit mask of CLAMP_22 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_22_Include (0UL) /*!< RAM block 54 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_22_Clamp (1UL) /*!< RAM block 54 is clamped from BIST testing */

/* Bit 21 : Clamp the RAM block from the BIST testing for RamBist 53 */
#define RAMBISTHUB_CLAMP1_CLAMP_21_Pos (21UL) /*!< Position of CLAMP_21 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_21_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_21_Pos) /*!< Bit mask of CLAMP_21 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_21_Include (0UL) /*!< RAM block 53 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_21_Clamp (1UL) /*!< RAM block 53 is clamped from BIST testing */

/* Bit 20 : Clamp the RAM block from the BIST testing for RamBist 52 */
#define RAMBISTHUB_CLAMP1_CLAMP_20_Pos (20UL) /*!< Position of CLAMP_20 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_20_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_20_Pos) /*!< Bit mask of CLAMP_20 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_20_Include (0UL) /*!< RAM block 52 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_20_Clamp (1UL) /*!< RAM block 52 is clamped from BIST testing */

/* Bit 19 : Clamp the RAM block from the BIST testing for RamBist 51 */
#define RAMBISTHUB_CLAMP1_CLAMP_19_Pos (19UL) /*!< Position of CLAMP_19 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_19_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_19_Pos) /*!< Bit mask of CLAMP_19 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_19_Include (0UL) /*!< RAM block 51 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_19_Clamp (1UL) /*!< RAM block 51 is clamped from BIST testing */

/* Bit 18 : Clamp the RAM block from the BIST testing for RamBist 50 */
#define RAMBISTHUB_CLAMP1_CLAMP_18_Pos (18UL) /*!< Position of CLAMP_18 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_18_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_18_Pos) /*!< Bit mask of CLAMP_18 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_18_Include (0UL) /*!< RAM block 50 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_18_Clamp (1UL) /*!< RAM block 50 is clamped from BIST testing */

/* Bit 17 : Clamp the RAM block from the BIST testing for RamBist 49 */
#define RAMBISTHUB_CLAMP1_CLAMP_17_Pos (17UL) /*!< Position of CLAMP_17 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_17_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_17_Pos) /*!< Bit mask of CLAMP_17 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_17_Include (0UL) /*!< RAM block 49 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_17_Clamp (1UL) /*!< RAM block 49 is clamped from BIST testing */

/* Bit 16 : Clamp the RAM block from the BIST testing for RamBist 48 */
#define RAMBISTHUB_CLAMP1_CLAMP_16_Pos (16UL) /*!< Position of CLAMP_16 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_16_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_16_Pos) /*!< Bit mask of CLAMP_16 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_16_Include (0UL) /*!< RAM block 48 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_16_Clamp (1UL) /*!< RAM block 48 is clamped from BIST testing */

/* Bit 15 : Clamp the RAM block from the BIST testing for RamBist 47 */
#define RAMBISTHUB_CLAMP1_CLAMP_15_Pos (15UL) /*!< Position of CLAMP_15 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_15_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_15_Pos) /*!< Bit mask of CLAMP_15 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_15_Include (0UL) /*!< RAM block 47 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_15_Clamp (1UL) /*!< RAM block 47 is clamped from BIST testing */

/* Bit 14 : Clamp the RAM block from the BIST testing for RamBist 46 */
#define RAMBISTHUB_CLAMP1_CLAMP_14_Pos (14UL) /*!< Position of CLAMP_14 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_14_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_14_Pos) /*!< Bit mask of CLAMP_14 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_14_Include (0UL) /*!< RAM block 46 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_14_Clamp (1UL) /*!< RAM block 46 is clamped from BIST testing */

/* Bit 13 : Clamp the RAM block from the BIST testing for RamBist 45 */
#define RAMBISTHUB_CLAMP1_CLAMP_13_Pos (13UL) /*!< Position of CLAMP_13 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_13_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_13_Pos) /*!< Bit mask of CLAMP_13 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_13_Include (0UL) /*!< RAM block 45 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_13_Clamp (1UL) /*!< RAM block 45 is clamped from BIST testing */

/* Bit 12 : Clamp the RAM block from the BIST testing for RamBist 44 */
#define RAMBISTHUB_CLAMP1_CLAMP_12_Pos (12UL) /*!< Position of CLAMP_12 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_12_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_12_Pos) /*!< Bit mask of CLAMP_12 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_12_Include (0UL) /*!< RAM block 44 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_12_Clamp (1UL) /*!< RAM block 44 is clamped from BIST testing */

/* Bit 11 : Clamp the RAM block from the BIST testing for RamBist 43 */
#define RAMBISTHUB_CLAMP1_CLAMP_11_Pos (11UL) /*!< Position of CLAMP_11 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_11_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_11_Pos) /*!< Bit mask of CLAMP_11 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_11_Include (0UL) /*!< RAM block 43 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_11_Clamp (1UL) /*!< RAM block 43 is clamped from BIST testing */

/* Bit 10 : Clamp the RAM block from the BIST testing for RamBist 42 */
#define RAMBISTHUB_CLAMP1_CLAMP_10_Pos (10UL) /*!< Position of CLAMP_10 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_10_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_10_Pos) /*!< Bit mask of CLAMP_10 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_10_Include (0UL) /*!< RAM block 42 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_10_Clamp (1UL) /*!< RAM block 42 is clamped from BIST testing */

/* Bit 9 : Clamp the RAM block from the BIST testing for RamBist 41 */
#define RAMBISTHUB_CLAMP1_CLAMP_9_Pos (9UL) /*!< Position of CLAMP_9 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_9_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_9_Pos) /*!< Bit mask of CLAMP_9 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_9_Include (0UL) /*!< RAM block 41 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_9_Clamp (1UL) /*!< RAM block 41 is clamped from BIST testing */

/* Bit 8 : Clamp the RAM block from the BIST testing for RamBist 40 */
#define RAMBISTHUB_CLAMP1_CLAMP_8_Pos (8UL) /*!< Position of CLAMP_8 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_8_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_8_Pos) /*!< Bit mask of CLAMP_8 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_8_Include (0UL) /*!< RAM block 40 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_8_Clamp (1UL) /*!< RAM block 40 is clamped from BIST testing */

/* Bit 7 : Clamp the RAM block from the BIST testing for RamBist 39 */
#define RAMBISTHUB_CLAMP1_CLAMP_7_Pos (7UL) /*!< Position of CLAMP_7 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_7_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_7_Pos) /*!< Bit mask of CLAMP_7 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_7_Include (0UL) /*!< RAM block 39 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_7_Clamp (1UL) /*!< RAM block 39 is clamped from BIST testing */

/* Bit 6 : Clamp the RAM block from the BIST testing for RamBist 38 */
#define RAMBISTHUB_CLAMP1_CLAMP_6_Pos (6UL) /*!< Position of CLAMP_6 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_6_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_6_Pos) /*!< Bit mask of CLAMP_6 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_6_Include (0UL) /*!< RAM block 38 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_6_Clamp (1UL) /*!< RAM block 38 is clamped from BIST testing */

/* Bit 5 : Clamp the RAM block from the BIST testing for RamBist 37 */
#define RAMBISTHUB_CLAMP1_CLAMP_5_Pos (5UL) /*!< Position of CLAMP_5 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_5_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_5_Pos) /*!< Bit mask of CLAMP_5 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_5_Include (0UL) /*!< RAM block 37 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_5_Clamp (1UL) /*!< RAM block 37 is clamped from BIST testing */

/* Bit 4 : Clamp the RAM block from the BIST testing for RamBist 36 */
#define RAMBISTHUB_CLAMP1_CLAMP_4_Pos (4UL) /*!< Position of CLAMP_4 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_4_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_4_Pos) /*!< Bit mask of CLAMP_4 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_4_Include (0UL) /*!< RAM block 36 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_4_Clamp (1UL) /*!< RAM block 36 is clamped from BIST testing */

/* Bit 3 : Clamp the RAM block from the BIST testing for RamBist 35 */
#define RAMBISTHUB_CLAMP1_CLAMP_3_Pos (3UL) /*!< Position of CLAMP_3 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_3_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_3_Pos) /*!< Bit mask of CLAMP_3 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_3_Include (0UL) /*!< RAM block 35 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_3_Clamp (1UL) /*!< RAM block 35 is clamped from BIST testing */

/* Bit 2 : Clamp the RAM block from the BIST testing for RamBist 34 */
#define RAMBISTHUB_CLAMP1_CLAMP_2_Pos (2UL) /*!< Position of CLAMP_2 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_2_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_2_Pos) /*!< Bit mask of CLAMP_2 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_2_Include (0UL) /*!< RAM block 34 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_2_Clamp (1UL) /*!< RAM block 34 is clamped from BIST testing */

/* Bit 1 : Clamp the RAM block from the BIST testing for RamBist 33 */
#define RAMBISTHUB_CLAMP1_CLAMP_1_Pos (1UL) /*!< Position of CLAMP_1 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_1_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_1_Pos) /*!< Bit mask of CLAMP_1 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_1_Include (0UL) /*!< RAM block 33 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_1_Clamp (1UL) /*!< RAM block 33 is clamped from BIST testing */

/* Bit 0 : Clamp the RAM block from the BIST testing for RamBist 32 */
#define RAMBISTHUB_CLAMP1_CLAMP_0_Pos (0UL) /*!< Position of CLAMP_0 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_0_Msk (0x1UL << RAMBISTHUB_CLAMP1_CLAMP_0_Pos) /*!< Bit mask of CLAMP_0 field. */
#define RAMBISTHUB_CLAMP1_CLAMP_0_Include (0UL) /*!< RAM block 32 is included in BIST testing */
#define RAMBISTHUB_CLAMP1_CLAMP_0_Clamp (1UL) /*!< RAM block 32 is clamped from BIST testing */

/* Register: RAMBISTHUB_FAULTY0 */
/* Description: Description collection: Faulty RAM block indication register0 for RamBist n */

/* Bit 31 : Faulty block status of RAM block 31 */
#define RAMBISTHUB_FAULTY0_FAULTY_31_Pos (31UL) /*!< Position of FAULTY_31 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_31_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_31_Pos) /*!< Bit mask of FAULTY_31 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_31_NotFaulty (0UL) /*!< RAM block 31 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_31_Faulty (1UL) /*!< RAM block 31 was faulty */

/* Bit 30 : Faulty block status of RAM block 30 */
#define RAMBISTHUB_FAULTY0_FAULTY_30_Pos (30UL) /*!< Position of FAULTY_30 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_30_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_30_Pos) /*!< Bit mask of FAULTY_30 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_30_NotFaulty (0UL) /*!< RAM block 30 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_30_Faulty (1UL) /*!< RAM block 30 was faulty */

/* Bit 29 : Faulty block status of RAM block 29 */
#define RAMBISTHUB_FAULTY0_FAULTY_29_Pos (29UL) /*!< Position of FAULTY_29 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_29_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_29_Pos) /*!< Bit mask of FAULTY_29 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_29_NotFaulty (0UL) /*!< RAM block 29 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_29_Faulty (1UL) /*!< RAM block 29 was faulty */

/* Bit 28 : Faulty block status of RAM block 28 */
#define RAMBISTHUB_FAULTY0_FAULTY_28_Pos (28UL) /*!< Position of FAULTY_28 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_28_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_28_Pos) /*!< Bit mask of FAULTY_28 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_28_NotFaulty (0UL) /*!< RAM block 28 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_28_Faulty (1UL) /*!< RAM block 28 was faulty */

/* Bit 27 : Faulty block status of RAM block 27 */
#define RAMBISTHUB_FAULTY0_FAULTY_27_Pos (27UL) /*!< Position of FAULTY_27 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_27_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_27_Pos) /*!< Bit mask of FAULTY_27 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_27_NotFaulty (0UL) /*!< RAM block 27 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_27_Faulty (1UL) /*!< RAM block 27 was faulty */

/* Bit 26 : Faulty block status of RAM block 26 */
#define RAMBISTHUB_FAULTY0_FAULTY_26_Pos (26UL) /*!< Position of FAULTY_26 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_26_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_26_Pos) /*!< Bit mask of FAULTY_26 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_26_NotFaulty (0UL) /*!< RAM block 26 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_26_Faulty (1UL) /*!< RAM block 26 was faulty */

/* Bit 25 : Faulty block status of RAM block 25 */
#define RAMBISTHUB_FAULTY0_FAULTY_25_Pos (25UL) /*!< Position of FAULTY_25 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_25_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_25_Pos) /*!< Bit mask of FAULTY_25 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_25_NotFaulty (0UL) /*!< RAM block 25 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_25_Faulty (1UL) /*!< RAM block 25 was faulty */

/* Bit 24 : Faulty block status of RAM block 24 */
#define RAMBISTHUB_FAULTY0_FAULTY_24_Pos (24UL) /*!< Position of FAULTY_24 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_24_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_24_Pos) /*!< Bit mask of FAULTY_24 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_24_NotFaulty (0UL) /*!< RAM block 24 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_24_Faulty (1UL) /*!< RAM block 24 was faulty */

/* Bit 23 : Faulty block status of RAM block 23 */
#define RAMBISTHUB_FAULTY0_FAULTY_23_Pos (23UL) /*!< Position of FAULTY_23 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_23_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_23_Pos) /*!< Bit mask of FAULTY_23 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_23_NotFaulty (0UL) /*!< RAM block 23 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_23_Faulty (1UL) /*!< RAM block 23 was faulty */

/* Bit 22 : Faulty block status of RAM block 22 */
#define RAMBISTHUB_FAULTY0_FAULTY_22_Pos (22UL) /*!< Position of FAULTY_22 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_22_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_22_Pos) /*!< Bit mask of FAULTY_22 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_22_NotFaulty (0UL) /*!< RAM block 22 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_22_Faulty (1UL) /*!< RAM block 22 was faulty */

/* Bit 21 : Faulty block status of RAM block 21 */
#define RAMBISTHUB_FAULTY0_FAULTY_21_Pos (21UL) /*!< Position of FAULTY_21 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_21_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_21_Pos) /*!< Bit mask of FAULTY_21 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_21_NotFaulty (0UL) /*!< RAM block 21 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_21_Faulty (1UL) /*!< RAM block 21 was faulty */

/* Bit 20 : Faulty block status of RAM block 20 */
#define RAMBISTHUB_FAULTY0_FAULTY_20_Pos (20UL) /*!< Position of FAULTY_20 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_20_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_20_Pos) /*!< Bit mask of FAULTY_20 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_20_NotFaulty (0UL) /*!< RAM block 20 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_20_Faulty (1UL) /*!< RAM block 20 was faulty */

/* Bit 19 : Faulty block status of RAM block 19 */
#define RAMBISTHUB_FAULTY0_FAULTY_19_Pos (19UL) /*!< Position of FAULTY_19 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_19_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_19_Pos) /*!< Bit mask of FAULTY_19 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_19_NotFaulty (0UL) /*!< RAM block 19 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_19_Faulty (1UL) /*!< RAM block 19 was faulty */

/* Bit 18 : Faulty block status of RAM block 18 */
#define RAMBISTHUB_FAULTY0_FAULTY_18_Pos (18UL) /*!< Position of FAULTY_18 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_18_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_18_Pos) /*!< Bit mask of FAULTY_18 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_18_NotFaulty (0UL) /*!< RAM block 18 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_18_Faulty (1UL) /*!< RAM block 18 was faulty */

/* Bit 17 : Faulty block status of RAM block 17 */
#define RAMBISTHUB_FAULTY0_FAULTY_17_Pos (17UL) /*!< Position of FAULTY_17 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_17_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_17_Pos) /*!< Bit mask of FAULTY_17 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_17_NotFaulty (0UL) /*!< RAM block 17 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_17_Faulty (1UL) /*!< RAM block 17 was faulty */

/* Bit 16 : Faulty block status of RAM block 16 */
#define RAMBISTHUB_FAULTY0_FAULTY_16_Pos (16UL) /*!< Position of FAULTY_16 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_16_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_16_Pos) /*!< Bit mask of FAULTY_16 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_16_NotFaulty (0UL) /*!< RAM block 16 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_16_Faulty (1UL) /*!< RAM block 16 was faulty */

/* Bit 15 : Faulty block status of RAM block 15 */
#define RAMBISTHUB_FAULTY0_FAULTY_15_Pos (15UL) /*!< Position of FAULTY_15 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_15_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_15_Pos) /*!< Bit mask of FAULTY_15 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_15_NotFaulty (0UL) /*!< RAM block 15 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_15_Faulty (1UL) /*!< RAM block 15 was faulty */

/* Bit 14 : Faulty block status of RAM block 14 */
#define RAMBISTHUB_FAULTY0_FAULTY_14_Pos (14UL) /*!< Position of FAULTY_14 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_14_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_14_Pos) /*!< Bit mask of FAULTY_14 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_14_NotFaulty (0UL) /*!< RAM block 14 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_14_Faulty (1UL) /*!< RAM block 14 was faulty */

/* Bit 13 : Faulty block status of RAM block 13 */
#define RAMBISTHUB_FAULTY0_FAULTY_13_Pos (13UL) /*!< Position of FAULTY_13 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_13_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_13_Pos) /*!< Bit mask of FAULTY_13 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_13_NotFaulty (0UL) /*!< RAM block 13 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_13_Faulty (1UL) /*!< RAM block 13 was faulty */

/* Bit 12 : Faulty block status of RAM block 12 */
#define RAMBISTHUB_FAULTY0_FAULTY_12_Pos (12UL) /*!< Position of FAULTY_12 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_12_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_12_Pos) /*!< Bit mask of FAULTY_12 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_12_NotFaulty (0UL) /*!< RAM block 12 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_12_Faulty (1UL) /*!< RAM block 12 was faulty */

/* Bit 11 : Faulty block status of RAM block 11 */
#define RAMBISTHUB_FAULTY0_FAULTY_11_Pos (11UL) /*!< Position of FAULTY_11 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_11_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_11_Pos) /*!< Bit mask of FAULTY_11 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_11_NotFaulty (0UL) /*!< RAM block 11 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_11_Faulty (1UL) /*!< RAM block 11 was faulty */

/* Bit 10 : Faulty block status of RAM block 10 */
#define RAMBISTHUB_FAULTY0_FAULTY_10_Pos (10UL) /*!< Position of FAULTY_10 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_10_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_10_Pos) /*!< Bit mask of FAULTY_10 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_10_NotFaulty (0UL) /*!< RAM block 10 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_10_Faulty (1UL) /*!< RAM block 10 was faulty */

/* Bit 9 : Faulty block status of RAM block 9 */
#define RAMBISTHUB_FAULTY0_FAULTY_9_Pos (9UL) /*!< Position of FAULTY_9 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_9_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_9_Pos) /*!< Bit mask of FAULTY_9 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_9_NotFaulty (0UL) /*!< RAM block 9 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_9_Faulty (1UL) /*!< RAM block 9 was faulty */

/* Bit 8 : Faulty block status of RAM block 8 */
#define RAMBISTHUB_FAULTY0_FAULTY_8_Pos (8UL) /*!< Position of FAULTY_8 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_8_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_8_Pos) /*!< Bit mask of FAULTY_8 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_8_NotFaulty (0UL) /*!< RAM block 8 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_8_Faulty (1UL) /*!< RAM block 8 was faulty */

/* Bit 7 : Faulty block status of RAM block 7 */
#define RAMBISTHUB_FAULTY0_FAULTY_7_Pos (7UL) /*!< Position of FAULTY_7 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_7_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_7_Pos) /*!< Bit mask of FAULTY_7 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_7_NotFaulty (0UL) /*!< RAM block 7 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_7_Faulty (1UL) /*!< RAM block 7 was faulty */

/* Bit 6 : Faulty block status of RAM block 6 */
#define RAMBISTHUB_FAULTY0_FAULTY_6_Pos (6UL) /*!< Position of FAULTY_6 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_6_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_6_Pos) /*!< Bit mask of FAULTY_6 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_6_NotFaulty (0UL) /*!< RAM block 6 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_6_Faulty (1UL) /*!< RAM block 6 was faulty */

/* Bit 5 : Faulty block status of RAM block 5 */
#define RAMBISTHUB_FAULTY0_FAULTY_5_Pos (5UL) /*!< Position of FAULTY_5 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_5_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_5_Pos) /*!< Bit mask of FAULTY_5 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_5_NotFaulty (0UL) /*!< RAM block 5 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_5_Faulty (1UL) /*!< RAM block 5 was faulty */

/* Bit 4 : Faulty block status of RAM block 4 */
#define RAMBISTHUB_FAULTY0_FAULTY_4_Pos (4UL) /*!< Position of FAULTY_4 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_4_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_4_Pos) /*!< Bit mask of FAULTY_4 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_4_NotFaulty (0UL) /*!< RAM block 4 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_4_Faulty (1UL) /*!< RAM block 4 was faulty */

/* Bit 3 : Faulty block status of RAM block 3 */
#define RAMBISTHUB_FAULTY0_FAULTY_3_Pos (3UL) /*!< Position of FAULTY_3 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_3_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_3_Pos) /*!< Bit mask of FAULTY_3 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_3_NotFaulty (0UL) /*!< RAM block 3 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_3_Faulty (1UL) /*!< RAM block 3 was faulty */

/* Bit 2 : Faulty block status of RAM block 2 */
#define RAMBISTHUB_FAULTY0_FAULTY_2_Pos (2UL) /*!< Position of FAULTY_2 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_2_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_2_Pos) /*!< Bit mask of FAULTY_2 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_2_NotFaulty (0UL) /*!< RAM block 2 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_2_Faulty (1UL) /*!< RAM block 2 was faulty */

/* Bit 1 : Faulty block status of RAM block 1 */
#define RAMBISTHUB_FAULTY0_FAULTY_1_Pos (1UL) /*!< Position of FAULTY_1 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_1_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_1_Pos) /*!< Bit mask of FAULTY_1 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_1_NotFaulty (0UL) /*!< RAM block 1 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_1_Faulty (1UL) /*!< RAM block 1 was faulty */

/* Bit 0 : Faulty block status of RAM block 0 */
#define RAMBISTHUB_FAULTY0_FAULTY_0_Pos (0UL) /*!< Position of FAULTY_0 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_0_Msk (0x1UL << RAMBISTHUB_FAULTY0_FAULTY_0_Pos) /*!< Bit mask of FAULTY_0 field. */
#define RAMBISTHUB_FAULTY0_FAULTY_0_NotFaulty (0UL) /*!< RAM block 0 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY0_FAULTY_0_Faulty (1UL) /*!< RAM block 0 was faulty */

/* Register: RAMBISTHUB_FAULTY1 */
/* Description: Description collection: Faulty RAM block indication register1 for RamBist n */

/* Bit 31 : Faulty block status of RAM block 63 */
#define RAMBISTHUB_FAULTY1_FAULTY_31_Pos (31UL) /*!< Position of FAULTY_31 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_31_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_31_Pos) /*!< Bit mask of FAULTY_31 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_31_NotFaulty (0UL) /*!< RAM block 63 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_31_Faulty (1UL) /*!< RAM block 63 was faulty */

/* Bit 30 : Faulty block status of RAM block 62 */
#define RAMBISTHUB_FAULTY1_FAULTY_30_Pos (30UL) /*!< Position of FAULTY_30 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_30_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_30_Pos) /*!< Bit mask of FAULTY_30 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_30_NotFaulty (0UL) /*!< RAM block 62 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_30_Faulty (1UL) /*!< RAM block 62 was faulty */

/* Bit 29 : Faulty block status of RAM block 61 */
#define RAMBISTHUB_FAULTY1_FAULTY_29_Pos (29UL) /*!< Position of FAULTY_29 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_29_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_29_Pos) /*!< Bit mask of FAULTY_29 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_29_NotFaulty (0UL) /*!< RAM block 61 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_29_Faulty (1UL) /*!< RAM block 61 was faulty */

/* Bit 28 : Faulty block status of RAM block 60 */
#define RAMBISTHUB_FAULTY1_FAULTY_28_Pos (28UL) /*!< Position of FAULTY_28 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_28_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_28_Pos) /*!< Bit mask of FAULTY_28 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_28_NotFaulty (0UL) /*!< RAM block 60 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_28_Faulty (1UL) /*!< RAM block 60 was faulty */

/* Bit 27 : Faulty block status of RAM block 59 */
#define RAMBISTHUB_FAULTY1_FAULTY_27_Pos (27UL) /*!< Position of FAULTY_27 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_27_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_27_Pos) /*!< Bit mask of FAULTY_27 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_27_NotFaulty (0UL) /*!< RAM block 59 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_27_Faulty (1UL) /*!< RAM block 59 was faulty */

/* Bit 26 : Faulty block status of RAM block 58 */
#define RAMBISTHUB_FAULTY1_FAULTY_26_Pos (26UL) /*!< Position of FAULTY_26 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_26_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_26_Pos) /*!< Bit mask of FAULTY_26 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_26_NotFaulty (0UL) /*!< RAM block 58 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_26_Faulty (1UL) /*!< RAM block 58 was faulty */

/* Bit 25 : Faulty block status of RAM block 57 */
#define RAMBISTHUB_FAULTY1_FAULTY_25_Pos (25UL) /*!< Position of FAULTY_25 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_25_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_25_Pos) /*!< Bit mask of FAULTY_25 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_25_NotFaulty (0UL) /*!< RAM block 57 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_25_Faulty (1UL) /*!< RAM block 57 was faulty */

/* Bit 24 : Faulty block status of RAM block 56 */
#define RAMBISTHUB_FAULTY1_FAULTY_24_Pos (24UL) /*!< Position of FAULTY_24 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_24_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_24_Pos) /*!< Bit mask of FAULTY_24 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_24_NotFaulty (0UL) /*!< RAM block 56 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_24_Faulty (1UL) /*!< RAM block 56 was faulty */

/* Bit 23 : Faulty block status of RAM block 55 */
#define RAMBISTHUB_FAULTY1_FAULTY_23_Pos (23UL) /*!< Position of FAULTY_23 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_23_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_23_Pos) /*!< Bit mask of FAULTY_23 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_23_NotFaulty (0UL) /*!< RAM block 55 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_23_Faulty (1UL) /*!< RAM block 55 was faulty */

/* Bit 22 : Faulty block status of RAM block 54 */
#define RAMBISTHUB_FAULTY1_FAULTY_22_Pos (22UL) /*!< Position of FAULTY_22 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_22_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_22_Pos) /*!< Bit mask of FAULTY_22 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_22_NotFaulty (0UL) /*!< RAM block 54 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_22_Faulty (1UL) /*!< RAM block 54 was faulty */

/* Bit 21 : Faulty block status of RAM block 53 */
#define RAMBISTHUB_FAULTY1_FAULTY_21_Pos (21UL) /*!< Position of FAULTY_21 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_21_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_21_Pos) /*!< Bit mask of FAULTY_21 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_21_NotFaulty (0UL) /*!< RAM block 53 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_21_Faulty (1UL) /*!< RAM block 53 was faulty */

/* Bit 20 : Faulty block status of RAM block 52 */
#define RAMBISTHUB_FAULTY1_FAULTY_20_Pos (20UL) /*!< Position of FAULTY_20 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_20_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_20_Pos) /*!< Bit mask of FAULTY_20 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_20_NotFaulty (0UL) /*!< RAM block 52 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_20_Faulty (1UL) /*!< RAM block 52 was faulty */

/* Bit 19 : Faulty block status of RAM block 51 */
#define RAMBISTHUB_FAULTY1_FAULTY_19_Pos (19UL) /*!< Position of FAULTY_19 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_19_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_19_Pos) /*!< Bit mask of FAULTY_19 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_19_NotFaulty (0UL) /*!< RAM block 51 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_19_Faulty (1UL) /*!< RAM block 51 was faulty */

/* Bit 18 : Faulty block status of RAM block 50 */
#define RAMBISTHUB_FAULTY1_FAULTY_18_Pos (18UL) /*!< Position of FAULTY_18 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_18_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_18_Pos) /*!< Bit mask of FAULTY_18 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_18_NotFaulty (0UL) /*!< RAM block 50 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_18_Faulty (1UL) /*!< RAM block 50 was faulty */

/* Bit 17 : Faulty block status of RAM block 49 */
#define RAMBISTHUB_FAULTY1_FAULTY_17_Pos (17UL) /*!< Position of FAULTY_17 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_17_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_17_Pos) /*!< Bit mask of FAULTY_17 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_17_NotFaulty (0UL) /*!< RAM block 49 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_17_Faulty (1UL) /*!< RAM block 49 was faulty */

/* Bit 16 : Faulty block status of RAM block 48 */
#define RAMBISTHUB_FAULTY1_FAULTY_16_Pos (16UL) /*!< Position of FAULTY_16 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_16_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_16_Pos) /*!< Bit mask of FAULTY_16 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_16_NotFaulty (0UL) /*!< RAM block 48 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_16_Faulty (1UL) /*!< RAM block 48 was faulty */

/* Bit 15 : Faulty block status of RAM block 47 */
#define RAMBISTHUB_FAULTY1_FAULTY_15_Pos (15UL) /*!< Position of FAULTY_15 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_15_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_15_Pos) /*!< Bit mask of FAULTY_15 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_15_NotFaulty (0UL) /*!< RAM block 47 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_15_Faulty (1UL) /*!< RAM block 47 was faulty */

/* Bit 14 : Faulty block status of RAM block 46 */
#define RAMBISTHUB_FAULTY1_FAULTY_14_Pos (14UL) /*!< Position of FAULTY_14 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_14_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_14_Pos) /*!< Bit mask of FAULTY_14 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_14_NotFaulty (0UL) /*!< RAM block 46 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_14_Faulty (1UL) /*!< RAM block 46 was faulty */

/* Bit 13 : Faulty block status of RAM block 45 */
#define RAMBISTHUB_FAULTY1_FAULTY_13_Pos (13UL) /*!< Position of FAULTY_13 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_13_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_13_Pos) /*!< Bit mask of FAULTY_13 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_13_NotFaulty (0UL) /*!< RAM block 45 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_13_Faulty (1UL) /*!< RAM block 45 was faulty */

/* Bit 12 : Faulty block status of RAM block 44 */
#define RAMBISTHUB_FAULTY1_FAULTY_12_Pos (12UL) /*!< Position of FAULTY_12 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_12_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_12_Pos) /*!< Bit mask of FAULTY_12 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_12_NotFaulty (0UL) /*!< RAM block 44 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_12_Faulty (1UL) /*!< RAM block 44 was faulty */

/* Bit 11 : Faulty block status of RAM block 43 */
#define RAMBISTHUB_FAULTY1_FAULTY_11_Pos (11UL) /*!< Position of FAULTY_11 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_11_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_11_Pos) /*!< Bit mask of FAULTY_11 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_11_NotFaulty (0UL) /*!< RAM block 43 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_11_Faulty (1UL) /*!< RAM block 43 was faulty */

/* Bit 10 : Faulty block status of RAM block 42 */
#define RAMBISTHUB_FAULTY1_FAULTY_10_Pos (10UL) /*!< Position of FAULTY_10 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_10_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_10_Pos) /*!< Bit mask of FAULTY_10 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_10_NotFaulty (0UL) /*!< RAM block 42 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_10_Faulty (1UL) /*!< RAM block 42 was faulty */

/* Bit 9 : Faulty block status of RAM block 41 */
#define RAMBISTHUB_FAULTY1_FAULTY_9_Pos (9UL) /*!< Position of FAULTY_9 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_9_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_9_Pos) /*!< Bit mask of FAULTY_9 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_9_NotFaulty (0UL) /*!< RAM block 41 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_9_Faulty (1UL) /*!< RAM block 41 was faulty */

/* Bit 8 : Faulty block status of RAM block 40 */
#define RAMBISTHUB_FAULTY1_FAULTY_8_Pos (8UL) /*!< Position of FAULTY_8 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_8_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_8_Pos) /*!< Bit mask of FAULTY_8 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_8_NotFaulty (0UL) /*!< RAM block 40 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_8_Faulty (1UL) /*!< RAM block 40 was faulty */

/* Bit 7 : Faulty block status of RAM block 39 */
#define RAMBISTHUB_FAULTY1_FAULTY_7_Pos (7UL) /*!< Position of FAULTY_7 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_7_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_7_Pos) /*!< Bit mask of FAULTY_7 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_7_NotFaulty (0UL) /*!< RAM block 39 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_7_Faulty (1UL) /*!< RAM block 39 was faulty */

/* Bit 6 : Faulty block status of RAM block 38 */
#define RAMBISTHUB_FAULTY1_FAULTY_6_Pos (6UL) /*!< Position of FAULTY_6 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_6_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_6_Pos) /*!< Bit mask of FAULTY_6 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_6_NotFaulty (0UL) /*!< RAM block 38 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_6_Faulty (1UL) /*!< RAM block 38 was faulty */

/* Bit 5 : Faulty block status of RAM block 37 */
#define RAMBISTHUB_FAULTY1_FAULTY_5_Pos (5UL) /*!< Position of FAULTY_5 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_5_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_5_Pos) /*!< Bit mask of FAULTY_5 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_5_NotFaulty (0UL) /*!< RAM block 37 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_5_Faulty (1UL) /*!< RAM block 37 was faulty */

/* Bit 4 : Faulty block status of RAM block 36 */
#define RAMBISTHUB_FAULTY1_FAULTY_4_Pos (4UL) /*!< Position of FAULTY_4 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_4_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_4_Pos) /*!< Bit mask of FAULTY_4 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_4_NotFaulty (0UL) /*!< RAM block 36 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_4_Faulty (1UL) /*!< RAM block 36 was faulty */

/* Bit 3 : Faulty block status of RAM block 35 */
#define RAMBISTHUB_FAULTY1_FAULTY_3_Pos (3UL) /*!< Position of FAULTY_3 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_3_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_3_Pos) /*!< Bit mask of FAULTY_3 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_3_NotFaulty (0UL) /*!< RAM block 35 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_3_Faulty (1UL) /*!< RAM block 35 was faulty */

/* Bit 2 : Faulty block status of RAM block 34 */
#define RAMBISTHUB_FAULTY1_FAULTY_2_Pos (2UL) /*!< Position of FAULTY_2 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_2_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_2_Pos) /*!< Bit mask of FAULTY_2 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_2_NotFaulty (0UL) /*!< RAM block 34 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_2_Faulty (1UL) /*!< RAM block 34 was faulty */

/* Bit 1 : Faulty block status of RAM block 33 */
#define RAMBISTHUB_FAULTY1_FAULTY_1_Pos (1UL) /*!< Position of FAULTY_1 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_1_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_1_Pos) /*!< Bit mask of FAULTY_1 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_1_NotFaulty (0UL) /*!< RAM block 33 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_1_Faulty (1UL) /*!< RAM block 33 was faulty */

/* Bit 0 : Faulty block status of RAM block 32 */
#define RAMBISTHUB_FAULTY1_FAULTY_0_Pos (0UL) /*!< Position of FAULTY_0 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_0_Msk (0x1UL << RAMBISTHUB_FAULTY1_FAULTY_0_Pos) /*!< Bit mask of FAULTY_0 field. */
#define RAMBISTHUB_FAULTY1_FAULTY_0_NotFaulty (0UL) /*!< RAM block 32 was not faulty, or was clamped */
#define RAMBISTHUB_FAULTY1_FAULTY_0_Faulty (1UL) /*!< RAM block 32 was faulty */


/* Peripheral: RAMTRIM */
/* Description: RAM trim values 0 */

/* Register: RAMTRIM_SRAMTRIM */
/* Description: Backdoor trim values for SRAM */

/* Bit 10 : Read/Write Margin Adjustment */
#define RAMTRIM_SRAMTRIM_RWM_HV_Pos (10UL) /*!< Position of RWM_HV field. */
#define RAMTRIM_SRAMTRIM_RWM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIM_RWM_HV_Pos) /*!< Bit mask of RWM_HV field. */
#define RAMTRIM_SRAMTRIM_RWM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIM_RWM_HV_Enabled (1UL) /*!< Enable */

/* Bit 9 : Read Margin Adjustment */
#define RAMTRIM_SRAMTRIM_RM_HV_Pos (9UL) /*!< Position of RM_HV field. */
#define RAMTRIM_SRAMTRIM_RM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIM_RM_HV_Pos) /*!< Bit mask of RM_HV field. */
#define RAMTRIM_SRAMTRIM_RM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIM_RM_HV_Enabled (1UL) /*!< Enable */

/* Bit 8 : Write Margin Adjustment */
#define RAMTRIM_SRAMTRIM_WM_HV_Pos (8UL) /*!< Position of WM_HV field. */
#define RAMTRIM_SRAMTRIM_WM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIM_WM_HV_Pos) /*!< Bit mask of WM_HV field. */
#define RAMTRIM_SRAMTRIM_WM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIM_WM_HV_Enabled (1UL) /*!< Enable */

/* Bit 6 : Read/Write Margin Adjustment */
#define RAMTRIM_SRAMTRIM_RWM_LV_Pos (6UL) /*!< Position of RWM_LV field. */
#define RAMTRIM_SRAMTRIM_RWM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIM_RWM_LV_Pos) /*!< Bit mask of RWM_LV field. */
#define RAMTRIM_SRAMTRIM_RWM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIM_RWM_LV_Enabled (1UL) /*!< Enable */

/* Bit 5 : Read Margin Adjustment */
#define RAMTRIM_SRAMTRIM_RM_LV_Pos (5UL) /*!< Position of RM_LV field. */
#define RAMTRIM_SRAMTRIM_RM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIM_RM_LV_Pos) /*!< Bit mask of RM_LV field. */
#define RAMTRIM_SRAMTRIM_RM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIM_RM_LV_Enabled (1UL) /*!< Enable */

/* Bit 4 : Write Margin Adjustment */
#define RAMTRIM_SRAMTRIM_WM_LV_Pos (4UL) /*!< Position of WM_LV field. */
#define RAMTRIM_SRAMTRIM_WM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIM_WM_LV_Pos) /*!< Bit mask of WM_LV field. */
#define RAMTRIM_SRAMTRIM_WM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIM_WM_LV_Enabled (1UL) /*!< Enable */

/* Bits 3..0 : Source Bias Trim Adjustment for retention */
#define RAMTRIM_SRAMTRIM_BTRIM_Pos (0UL) /*!< Position of BTRIM field. */
#define RAMTRIM_SRAMTRIM_BTRIM_Msk (0xFUL << RAMTRIM_SRAMTRIM_BTRIM_Pos) /*!< Bit mask of BTRIM field. */

/* Register: RAMTRIM_SRAMTRIMNVM */
/* Description: Backdoor trim values for NVM SRAM (cache) */

/* Bit 10 : Read/Write Margin Adjustment */
#define RAMTRIM_SRAMTRIMNVM_RWM_HV_Pos (10UL) /*!< Position of RWM_HV field. */
#define RAMTRIM_SRAMTRIMNVM_RWM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIMNVM_RWM_HV_Pos) /*!< Bit mask of RWM_HV field. */
#define RAMTRIM_SRAMTRIMNVM_RWM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMNVM_RWM_HV_Enabled (1UL) /*!< Enable */

/* Bit 9 : Read Margin Adjustment */
#define RAMTRIM_SRAMTRIMNVM_RM_HV_Pos (9UL) /*!< Position of RM_HV field. */
#define RAMTRIM_SRAMTRIMNVM_RM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIMNVM_RM_HV_Pos) /*!< Bit mask of RM_HV field. */
#define RAMTRIM_SRAMTRIMNVM_RM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMNVM_RM_HV_Enabled (1UL) /*!< Enable */

/* Bit 8 : Write Margin Adjustment */
#define RAMTRIM_SRAMTRIMNVM_WM_HV_Pos (8UL) /*!< Position of WM_HV field. */
#define RAMTRIM_SRAMTRIMNVM_WM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIMNVM_WM_HV_Pos) /*!< Bit mask of WM_HV field. */
#define RAMTRIM_SRAMTRIMNVM_WM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMNVM_WM_HV_Enabled (1UL) /*!< Enable */

/* Bit 6 : Read/Write Margin Adjustment */
#define RAMTRIM_SRAMTRIMNVM_RWM_LV_Pos (6UL) /*!< Position of RWM_LV field. */
#define RAMTRIM_SRAMTRIMNVM_RWM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIMNVM_RWM_LV_Pos) /*!< Bit mask of RWM_LV field. */
#define RAMTRIM_SRAMTRIMNVM_RWM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMNVM_RWM_LV_Enabled (1UL) /*!< Enable */

/* Bit 5 : Read Margin Adjustment */
#define RAMTRIM_SRAMTRIMNVM_RM_LV_Pos (5UL) /*!< Position of RM_LV field. */
#define RAMTRIM_SRAMTRIMNVM_RM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIMNVM_RM_LV_Pos) /*!< Bit mask of RM_LV field. */
#define RAMTRIM_SRAMTRIMNVM_RM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMNVM_RM_LV_Enabled (1UL) /*!< Enable */

/* Bit 4 : Write Margin Adjustment */
#define RAMTRIM_SRAMTRIMNVM_WM_LV_Pos (4UL) /*!< Position of WM_LV field. */
#define RAMTRIM_SRAMTRIMNVM_WM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIMNVM_WM_LV_Pos) /*!< Bit mask of WM_LV field. */
#define RAMTRIM_SRAMTRIMNVM_WM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMNVM_WM_LV_Enabled (1UL) /*!< Enable */

/* Bits 3..0 : Source Bias Trim Adjustment for retention */
#define RAMTRIM_SRAMTRIMNVM_BTRIM_Pos (0UL) /*!< Position of BTRIM field. */
#define RAMTRIM_SRAMTRIMNVM_BTRIM_Msk (0xFUL << RAMTRIM_SRAMTRIMNVM_BTRIM_Pos) /*!< Bit mask of BTRIM field. */

/* Register: RAMTRIM_SRAMTRIMCC312 */
/* Description: Backdoor trim values for CC312 SRAM */

/* Bit 10 : Read/Write Margin Adjustment */
#define RAMTRIM_SRAMTRIMCC312_RWM_HV_Pos (10UL) /*!< Position of RWM_HV field. */
#define RAMTRIM_SRAMTRIMCC312_RWM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIMCC312_RWM_HV_Pos) /*!< Bit mask of RWM_HV field. */
#define RAMTRIM_SRAMTRIMCC312_RWM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMCC312_RWM_HV_Enabled (1UL) /*!< Enable */

/* Bit 9 : Read Margin Adjustment */
#define RAMTRIM_SRAMTRIMCC312_RM_HV_Pos (9UL) /*!< Position of RM_HV field. */
#define RAMTRIM_SRAMTRIMCC312_RM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIMCC312_RM_HV_Pos) /*!< Bit mask of RM_HV field. */
#define RAMTRIM_SRAMTRIMCC312_RM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMCC312_RM_HV_Enabled (1UL) /*!< Enable */

/* Bit 8 : Write Margin Adjustment */
#define RAMTRIM_SRAMTRIMCC312_WM_HV_Pos (8UL) /*!< Position of WM_HV field. */
#define RAMTRIM_SRAMTRIMCC312_WM_HV_Msk (0x1UL << RAMTRIM_SRAMTRIMCC312_WM_HV_Pos) /*!< Bit mask of WM_HV field. */
#define RAMTRIM_SRAMTRIMCC312_WM_HV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMCC312_WM_HV_Enabled (1UL) /*!< Enable */

/* Bit 6 : Read/Write Margin Adjustment */
#define RAMTRIM_SRAMTRIMCC312_RWM_LV_Pos (6UL) /*!< Position of RWM_LV field. */
#define RAMTRIM_SRAMTRIMCC312_RWM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIMCC312_RWM_LV_Pos) /*!< Bit mask of RWM_LV field. */
#define RAMTRIM_SRAMTRIMCC312_RWM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMCC312_RWM_LV_Enabled (1UL) /*!< Enable */

/* Bit 5 : Read Margin Adjustment */
#define RAMTRIM_SRAMTRIMCC312_RM_LV_Pos (5UL) /*!< Position of RM_LV field. */
#define RAMTRIM_SRAMTRIMCC312_RM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIMCC312_RM_LV_Pos) /*!< Bit mask of RM_LV field. */
#define RAMTRIM_SRAMTRIMCC312_RM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMCC312_RM_LV_Enabled (1UL) /*!< Enable */

/* Bit 4 : Write Margin Adjustment */
#define RAMTRIM_SRAMTRIMCC312_WM_LV_Pos (4UL) /*!< Position of WM_LV field. */
#define RAMTRIM_SRAMTRIMCC312_WM_LV_Msk (0x1UL << RAMTRIM_SRAMTRIMCC312_WM_LV_Pos) /*!< Bit mask of WM_LV field. */
#define RAMTRIM_SRAMTRIMCC312_WM_LV_Disabled (0UL) /*!< Disable */
#define RAMTRIM_SRAMTRIMCC312_WM_LV_Enabled (1UL) /*!< Enable */


/* Peripheral: RCOSC32K */
/* Description: 32.768 kHz RC oscillator 0 */

/* Register: RCOSC32K_TASKS_CAL */
/* Description: Start calibration of LFRC oscillator */

/* Bit 0 : Start calibration of LFRC oscillator */
#define RCOSC32K_TASKS_CAL_TASKS_CAL_Pos (0UL) /*!< Position of TASKS_CAL field. */
#define RCOSC32K_TASKS_CAL_TASKS_CAL_Msk (0x1UL << RCOSC32K_TASKS_CAL_TASKS_CAL_Pos) /*!< Bit mask of TASKS_CAL field. */
#define RCOSC32K_TASKS_CAL_TASKS_CAL_Trigger (1UL) /*!< Trigger task */

/* Register: RCOSC32K_TASKS_CTSTART */
/* Description: Deprecated register - Start calibration timer */

/* Bit 0 : Deprecated field -  Start calibration timer */
#define RCOSC32K_TASKS_CTSTART_TASKS_CTSTART_Pos (0UL) /*!< Position of TASKS_CTSTART field. */
#define RCOSC32K_TASKS_CTSTART_TASKS_CTSTART_Msk (0x1UL << RCOSC32K_TASKS_CTSTART_TASKS_CTSTART_Pos) /*!< Bit mask of TASKS_CTSTART field. */
#define RCOSC32K_TASKS_CTSTART_TASKS_CTSTART_Trigger (1UL) /*!< Trigger task */

/* Register: RCOSC32K_TASKS_CTSTOP */
/* Description: Deprecated register - Stop calibration timer */

/* Bit 0 : Deprecated field -  Stop calibration timer */
#define RCOSC32K_TASKS_CTSTOP_TASKS_CTSTOP_Pos (0UL) /*!< Position of TASKS_CTSTOP field. */
#define RCOSC32K_TASKS_CTSTOP_TASKS_CTSTOP_Msk (0x1UL << RCOSC32K_TASKS_CTSTOP_TASKS_CTSTOP_Pos) /*!< Bit mask of TASKS_CTSTOP field. */
#define RCOSC32K_TASKS_CTSTOP_TASKS_CTSTOP_Trigger (1UL) /*!< Trigger task */

/* Register: RCOSC32K_SUBSCRIBE_CAL */
/* Description: Subscribe configuration for task CAL */

/* Bit 31 :   */
#define RCOSC32K_SUBSCRIBE_CAL_EN_Pos (31UL) /*!< Position of EN field. */
#define RCOSC32K_SUBSCRIBE_CAL_EN_Msk (0x1UL << RCOSC32K_SUBSCRIBE_CAL_EN_Pos) /*!< Bit mask of EN field. */
#define RCOSC32K_SUBSCRIBE_CAL_EN_Disabled (0UL) /*!< Disable subscription */
#define RCOSC32K_SUBSCRIBE_CAL_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CAL will subscribe to */
#define RCOSC32K_SUBSCRIBE_CAL_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RCOSC32K_SUBSCRIBE_CAL_CHIDX_Msk (0xFFUL << RCOSC32K_SUBSCRIBE_CAL_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RCOSC32K_SUBSCRIBE_CTSTART */
/* Description: Deprecated register - Subscribe configuration for task CTSTART */

/* Bit 31 :   */
#define RCOSC32K_SUBSCRIBE_CTSTART_EN_Pos (31UL) /*!< Position of EN field. */
#define RCOSC32K_SUBSCRIBE_CTSTART_EN_Msk (0x1UL << RCOSC32K_SUBSCRIBE_CTSTART_EN_Pos) /*!< Bit mask of EN field. */
#define RCOSC32K_SUBSCRIBE_CTSTART_EN_Disabled (0UL) /*!< Disable subscription */
#define RCOSC32K_SUBSCRIBE_CTSTART_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CTSTART will subscribe to */
#define RCOSC32K_SUBSCRIBE_CTSTART_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RCOSC32K_SUBSCRIBE_CTSTART_CHIDX_Msk (0xFFUL << RCOSC32K_SUBSCRIBE_CTSTART_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RCOSC32K_SUBSCRIBE_CTSTOP */
/* Description: Deprecated register - Subscribe configuration for task CTSTOP */

/* Bit 31 :   */
#define RCOSC32K_SUBSCRIBE_CTSTOP_EN_Pos (31UL) /*!< Position of EN field. */
#define RCOSC32K_SUBSCRIBE_CTSTOP_EN_Msk (0x1UL << RCOSC32K_SUBSCRIBE_CTSTOP_EN_Pos) /*!< Bit mask of EN field. */
#define RCOSC32K_SUBSCRIBE_CTSTOP_EN_Disabled (0UL) /*!< Disable subscription */
#define RCOSC32K_SUBSCRIBE_CTSTOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CTSTOP will subscribe to */
#define RCOSC32K_SUBSCRIBE_CTSTOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RCOSC32K_SUBSCRIBE_CTSTOP_CHIDX_Msk (0xFFUL << RCOSC32K_SUBSCRIBE_CTSTOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RCOSC32K_EVENTS_CTTO */
/* Description: Deprecated register - Calibration timer timeout */

/* Bit 0 : Deprecated field -  Calibration timer timeout */
#define RCOSC32K_EVENTS_CTTO_EVENTS_CTTO_Pos (0UL) /*!< Position of EVENTS_CTTO field. */
#define RCOSC32K_EVENTS_CTTO_EVENTS_CTTO_Msk (0x1UL << RCOSC32K_EVENTS_CTTO_EVENTS_CTTO_Pos) /*!< Bit mask of EVENTS_CTTO field. */
#define RCOSC32K_EVENTS_CTTO_EVENTS_CTTO_NotGenerated (0UL) /*!< Event not generated */
#define RCOSC32K_EVENTS_CTTO_EVENTS_CTTO_Generated (1UL) /*!< Event generated */

/* Register: RCOSC32K_EVENTS_DONE */
/* Description: Calibration of LFCLK RC oscillator complete event */

/* Bit 0 : Calibration of LFCLK RC oscillator complete event */
#define RCOSC32K_EVENTS_DONE_EVENTS_DONE_Pos (0UL) /*!< Position of EVENTS_DONE field. */
#define RCOSC32K_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << RCOSC32K_EVENTS_DONE_EVENTS_DONE_Pos) /*!< Bit mask of EVENTS_DONE field. */
#define RCOSC32K_EVENTS_DONE_EVENTS_DONE_NotGenerated (0UL) /*!< Event not generated */
#define RCOSC32K_EVENTS_DONE_EVENTS_DONE_Generated (1UL) /*!< Event generated */

/* Register: RCOSC32K_EVENTS_CTSTARTED */
/* Description: Deprecated register - Calibration timer started */

/* Bit 0 : Deprecated field -  Calibration timer started */
#define RCOSC32K_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Pos (0UL) /*!< Position of EVENTS_CTSTARTED field. */
#define RCOSC32K_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Msk (0x1UL << RCOSC32K_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Pos) /*!< Bit mask of EVENTS_CTSTARTED field. */
#define RCOSC32K_EVENTS_CTSTARTED_EVENTS_CTSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define RCOSC32K_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Generated (1UL) /*!< Event generated */

/* Register: RCOSC32K_EVENTS_CTSTOPPED */
/* Description: Deprecated register - Calibration timer stopped */

/* Bit 0 : Deprecated field -  Calibration timer stopped */
#define RCOSC32K_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Pos (0UL) /*!< Position of EVENTS_CTSTOPPED field. */
#define RCOSC32K_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Msk (0x1UL << RCOSC32K_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Pos) /*!< Bit mask of EVENTS_CTSTOPPED field. */
#define RCOSC32K_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_NotGenerated (0UL) /*!< Event not generated */
#define RCOSC32K_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Generated (1UL) /*!< Event generated */

/* Register: RCOSC32K_PUBLISH_CTTO */
/* Description: Deprecated register - Publish configuration for event CTTO */

/* Bit 31 :   */
#define RCOSC32K_PUBLISH_CTTO_EN_Pos (31UL) /*!< Position of EN field. */
#define RCOSC32K_PUBLISH_CTTO_EN_Msk (0x1UL << RCOSC32K_PUBLISH_CTTO_EN_Pos) /*!< Bit mask of EN field. */
#define RCOSC32K_PUBLISH_CTTO_EN_Disabled (0UL) /*!< Disable publishing */
#define RCOSC32K_PUBLISH_CTTO_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CTTO will publish to. */
#define RCOSC32K_PUBLISH_CTTO_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RCOSC32K_PUBLISH_CTTO_CHIDX_Msk (0xFFUL << RCOSC32K_PUBLISH_CTTO_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RCOSC32K_PUBLISH_DONE */
/* Description: Publish configuration for event DONE */

/* Bit 31 :   */
#define RCOSC32K_PUBLISH_DONE_EN_Pos (31UL) /*!< Position of EN field. */
#define RCOSC32K_PUBLISH_DONE_EN_Msk (0x1UL << RCOSC32K_PUBLISH_DONE_EN_Pos) /*!< Bit mask of EN field. */
#define RCOSC32K_PUBLISH_DONE_EN_Disabled (0UL) /*!< Disable publishing */
#define RCOSC32K_PUBLISH_DONE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DONE will publish to. */
#define RCOSC32K_PUBLISH_DONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RCOSC32K_PUBLISH_DONE_CHIDX_Msk (0xFFUL << RCOSC32K_PUBLISH_DONE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RCOSC32K_PUBLISH_CTSTARTED */
/* Description: Deprecated register - Publish configuration for event CTSTARTED */

/* Bit 31 :   */
#define RCOSC32K_PUBLISH_CTSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define RCOSC32K_PUBLISH_CTSTARTED_EN_Msk (0x1UL << RCOSC32K_PUBLISH_CTSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define RCOSC32K_PUBLISH_CTSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define RCOSC32K_PUBLISH_CTSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CTSTARTED will publish to. */
#define RCOSC32K_PUBLISH_CTSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RCOSC32K_PUBLISH_CTSTARTED_CHIDX_Msk (0xFFUL << RCOSC32K_PUBLISH_CTSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RCOSC32K_PUBLISH_CTSTOPPED */
/* Description: Deprecated register - Publish configuration for event CTSTOPPED */

/* Bit 31 :   */
#define RCOSC32K_PUBLISH_CTSTOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define RCOSC32K_PUBLISH_CTSTOPPED_EN_Msk (0x1UL << RCOSC32K_PUBLISH_CTSTOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define RCOSC32K_PUBLISH_CTSTOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define RCOSC32K_PUBLISH_CTSTOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CTSTOPPED will publish to. */
#define RCOSC32K_PUBLISH_CTSTOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RCOSC32K_PUBLISH_CTSTOPPED_CHIDX_Msk (0xFFUL << RCOSC32K_PUBLISH_CTSTOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RCOSC32K_RCOSC32KIFINE */
/* Description: Fine calibration read value for 32.768 kHz RC oscillator */

/* Bits 9..0 : Fine calibration read value for 32.768 kHz RC oscillator */
#define RCOSC32K_RCOSC32KIFINE_RCOSC32KIFINE_Pos (0UL) /*!< Position of RCOSC32KIFINE field. */
#define RCOSC32K_RCOSC32KIFINE_RCOSC32KIFINE_Msk (0x3FFUL << RCOSC32K_RCOSC32KIFINE_RCOSC32KIFINE_Pos) /*!< Bit mask of RCOSC32KIFINE field. */

/* Register: RCOSC32K_RCOSC32KICOARSE */
/* Description: Coarse calibration read value for 32.768 kHz RC oscillator */

/* Bits 5..0 : Coarse calibration read value for 32.768 kHz RC oscillator */
#define RCOSC32K_RCOSC32KICOARSE_RCOSC32KICOARSE_Pos (0UL) /*!< Position of RCOSC32KICOARSE field. */
#define RCOSC32K_RCOSC32KICOARSE_RCOSC32KICOARSE_Msk (0x3FUL << RCOSC32K_RCOSC32KICOARSE_RCOSC32KICOARSE_Pos) /*!< Bit mask of RCOSC32KICOARSE field. */

/* Register: RCOSC32K_RCOSC32KICALTEST */
/* Description: 32.768 kHz RC oscillator calibration debug register NOTE: This register should not be written to while the RCOSC source is running. */

/* Bit 1 : Disable calSync auto-calibration */
#define RCOSC32K_RCOSC32KICALTEST_CALSYNCDISABLE_Pos (1UL) /*!< Position of CALSYNCDISABLE field. */
#define RCOSC32K_RCOSC32KICALTEST_CALSYNCDISABLE_Msk (0x1UL << RCOSC32K_RCOSC32KICALTEST_CALSYNCDISABLE_Pos) /*!< Bit mask of CALSYNCDISABLE field. */
#define RCOSC32K_RCOSC32KICALTEST_CALSYNCDISABLE_Enabled (0UL) /*!< calSync auto-calibration enabled */
#define RCOSC32K_RCOSC32KICALTEST_CALSYNCDISABLE_Disabled (1UL) /*!< calSync auto-calibration disabled */

/* Bit 0 : Enable debug pins: calSync on P0.8 (input); ck32Ki on P0.13 (output); rcosc32KiCalib on P0.19 (output) */
#define RCOSC32K_RCOSC32KICALTEST_DEBUGPINSEN_Pos (0UL) /*!< Position of DEBUGPINSEN field. */
#define RCOSC32K_RCOSC32KICALTEST_DEBUGPINSEN_Msk (0x1UL << RCOSC32K_RCOSC32KICALTEST_DEBUGPINSEN_Pos) /*!< Bit mask of DEBUGPINSEN field. */
#define RCOSC32K_RCOSC32KICALTEST_DEBUGPINSEN_Disabled (0UL) /*!< Pins in normal operation */
#define RCOSC32K_RCOSC32KICALTEST_DEBUGPINSEN_Enabled (1UL) /*!< Pins mapped for debug */

/* Register: RCOSC32K_CTIV */
/* Description: Deprecated register - Calibration timer interval NOTE: This register should not be written to while the calibration timer is running. */

/* Bits 6..0 : Calibration timer interval in multiple of 0.25 seconds. Range: 0.25 seconds to 31.75 seconds. */
#define RCOSC32K_CTIV_CTIV_Pos (0UL) /*!< Position of CTIV field. */
#define RCOSC32K_CTIV_CTIV_Msk (0x7FUL << RCOSC32K_CTIV_CTIV_Pos) /*!< Bit mask of CTIV field. */

/* Register: RCOSC32K_RCOSC32KICALLENGTH */
/* Description: 32kHz RC oscillator calibration length This value is read from FICR */

/* Bits 2..0 : 32kHz RC oscillator calibration length in number of cycles */
#define RCOSC32K_RCOSC32KICALLENGTH_RCOSC32KICALLENGTH_Pos (0UL) /*!< Position of RCOSC32KICALLENGTH field. */
#define RCOSC32K_RCOSC32KICALLENGTH_RCOSC32KICALLENGTH_Msk (0x7UL << RCOSC32K_RCOSC32KICALLENGTH_RCOSC32KICALLENGTH_Pos) /*!< Bit mask of RCOSC32KICALLENGTH field. */
#define RCOSC32K_RCOSC32KICALLENGTH_RCOSC32KICALLENGTH_N64 (0UL) /*!< 64 cycles */
#define RCOSC32K_RCOSC32KICALLENGTH_RCOSC32KICALLENGTH_N128 (1UL) /*!< 128 cycles */
#define RCOSC32K_RCOSC32KICALLENGTH_RCOSC32KICALLENGTH_N256 (2UL) /*!< 256 cycles */
#define RCOSC32K_RCOSC32KICALLENGTH_RCOSC32KICALLENGTH_N512 (3UL) /*!< 512 cycles */

/* Register: RCOSC32K_RCOSC32KICOARSEIN */
/* Description: RCOSC coarse calibration input This value is read from FICR */

/* Bits 5..0 : RCOSC coarse calibration input */
#define RCOSC32K_RCOSC32KICOARSEIN_RCOSC32KICOARSEIN_Pos (0UL) /*!< Position of RCOSC32KICOARSEIN field. */
#define RCOSC32K_RCOSC32KICOARSEIN_RCOSC32KICOARSEIN_Msk (0x3FUL << RCOSC32K_RCOSC32KICOARSEIN_RCOSC32KICOARSEIN_Pos) /*!< Bit mask of RCOSC32KICOARSEIN field. */

/* Register: RCOSC32K_RCOSC32KICABD */
/* Description: Comparator adaptive biasing disable */

/* Bit 0 : Disables comparator adaptive biasing */
#define RCOSC32K_RCOSC32KICABD_CABD_Pos (0UL) /*!< Position of CABD field. */
#define RCOSC32K_RCOSC32KICABD_CABD_Msk (0x1UL << RCOSC32K_RCOSC32KICABD_CABD_Pos) /*!< Bit mask of CABD field. */
#define RCOSC32K_RCOSC32KICABD_CABD_Disabled (0UL) /*!< Disable */
#define RCOSC32K_RCOSC32KICABD_CABD_Enabled (1UL) /*!< Enable */

/* Register: RCOSC32K_ATECLOCK */
/* Description: Analog test bus control for clock modules */

/* Bit 0 : Connect or disconnect 32.768 kHz RC oscillator to analog test bus */
#define RCOSC32K_ATECLOCK_RCOSC32K_Pos (0UL) /*!< Position of RCOSC32K field. */
#define RCOSC32K_ATECLOCK_RCOSC32K_Msk (0x1UL << RCOSC32K_ATECLOCK_RCOSC32K_Pos) /*!< Bit mask of RCOSC32K field. */
#define RCOSC32K_ATECLOCK_RCOSC32K_Disconnected (0UL) /*!< Disconnect */
#define RCOSC32K_ATECLOCK_RCOSC32K_Connected (1UL) /*!< Connect internal regulator output to ATB0 */

/* Register: RCOSC32K_LFRCMODE */
/* Description: LFRC mode configuration */

/* Bit 0 : Set LFRC mode */
#define RCOSC32K_LFRCMODE_MODE_Pos (0UL) /*!< Position of MODE field. */
#define RCOSC32K_LFRCMODE_MODE_Msk (0x1UL << RCOSC32K_LFRCMODE_MODE_Pos) /*!< Bit mask of MODE field. */
#define RCOSC32K_LFRCMODE_MODE_Normal (0UL) /*!< Normal mode */
#define RCOSC32K_LFRCMODE_MODE_ULP (1UL) /*!< Deprecated enumerator -  Ultra-low power mode (ULP) */

/* Register: RCOSC32K_LFULP32KICOARSEIN */
/* Description: Deprecated register - LFULP coarse calibration input This value is read from FICR */

/* Bits 5..0 : LFULP coarse calibration input */
#define RCOSC32K_LFULP32KICOARSEIN_LFULP32KICOARSE_Pos (0UL) /*!< Position of LFULP32KICOARSE field. */
#define RCOSC32K_LFULP32KICOARSEIN_LFULP32KICOARSE_Msk (0x3FUL << RCOSC32K_LFULP32KICOARSEIN_LFULP32KICOARSE_Pos) /*!< Bit mask of LFULP32KICOARSE field. */

/* Register: RCOSC32K_LFULP32KICALLENGTH */
/* Description: Deprecated register - 32kHz LFULP RC oscillator calibration length This value is read from FICR */

/* Bits 2..0 : 32kHz ULP RC oscillator calibration length in number of cycles */
#define RCOSC32K_LFULP32KICALLENGTH_LFULP32KICALLENGTH_Pos (0UL) /*!< Position of LFULP32KICALLENGTH field. */
#define RCOSC32K_LFULP32KICALLENGTH_LFULP32KICALLENGTH_Msk (0x7UL << RCOSC32K_LFULP32KICALLENGTH_LFULP32KICALLENGTH_Pos) /*!< Bit mask of LFULP32KICALLENGTH field. */
#define RCOSC32K_LFULP32KICALLENGTH_LFULP32KICALLENGTH_N64 (0UL) /*!< 64 cycles */
#define RCOSC32K_LFULP32KICALLENGTH_LFULP32KICALLENGTH_N128 (1UL) /*!< 128 cycles */
#define RCOSC32K_LFULP32KICALLENGTH_LFULP32KICALLENGTH_N256 (2UL) /*!< 256 cycles */
#define RCOSC32K_LFULP32KICALLENGTH_LFULP32KICALLENGTH_N512 (3UL) /*!< 512 cycles */

/* Register: RCOSC32K_DISABLERCOSC32KIPOWERUPCONTROL */
/* Description: Backdoor for disabling Rcosc32KiPowerUpControl module in Rcosc32KiGenerator. */

/* Bit 0 : Disable Rcosc32KiPowerUpControl. */
#define RCOSC32K_DISABLERCOSC32KIPOWERUPCONTROL_Disable_Pos (0UL) /*!< Position of Disable field. */
#define RCOSC32K_DISABLERCOSC32KIPOWERUPCONTROL_Disable_Msk (0x1UL << RCOSC32K_DISABLERCOSC32KIPOWERUPCONTROL_Disable_Pos) /*!< Bit mask of Disable field. */
#define RCOSC32K_DISABLERCOSC32KIPOWERUPCONTROL_Disable_Enabled (0UL) /*!< Rcosc32KiPowerUpControl is enabled. */
#define RCOSC32K_DISABLERCOSC32KIPOWERUPCONTROL_Disable_Disabled (1UL) /*!< Rcosc32KiPowerUpControl is disabled. */


/* Peripheral: REGULATORS */
/* Description: Voltage regulators 0 */

/* Register: REGULATORS_MAINREGSTATUS */
/* Description: Main supply status */

/* Bit 0 : VREGH status */
#define REGULATORS_MAINREGSTATUS_VREGH_Pos (0UL) /*!< Position of VREGH field. */
#define REGULATORS_MAINREGSTATUS_VREGH_Msk (0x1UL << REGULATORS_MAINREGSTATUS_VREGH_Pos) /*!< Bit mask of VREGH field. */
#define REGULATORS_MAINREGSTATUS_VREGH_Inactive (0UL) /*!< Normal voltage mode. Voltage supplied on VDD and VDDH. */
#define REGULATORS_MAINREGSTATUS_VREGH_Active (1UL) /*!< High voltage mode. Voltage supplied on VDDH. */

/* Register: REGULATORS_DISABLEHPBOR */
/* Description: Enable or disable HPBOR */

/* Bit 0 : Enable or disable HPBOR */
#define REGULATORS_DISABLEHPBOR_DISABLE_Pos (0UL) /*!< Position of DISABLE field. */
#define REGULATORS_DISABLEHPBOR_DISABLE_Msk (0x1UL << REGULATORS_DISABLEHPBOR_DISABLE_Pos) /*!< Bit mask of DISABLE field. */
#define REGULATORS_DISABLEHPBOR_DISABLE_Enabled (0UL) /*!< Enable HPBOR */
#define REGULATORS_DISABLEHPBOR_DISABLE_Disabled (1UL) /*!< Disable HPBOR */

/* Register: REGULATORS_SYSTEMOFF */
/* Description: System OFF register */

/* Bit 0 : Enable System OFF mode */
#define REGULATORS_SYSTEMOFF_SYSTEMOFF_Pos (0UL) /*!< Position of SYSTEMOFF field. */
#define REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk (0x1UL << REGULATORS_SYSTEMOFF_SYSTEMOFF_Pos) /*!< Bit mask of SYSTEMOFF field. */
#define REGULATORS_SYSTEMOFF_SYSTEMOFF_Enter (1UL) /*!< Enable System OFF mode */

/* Register: REGULATORS_POFCON */
/* Description: Power-fail comparator configuration */

/* Bits 11..8 : Power-fail comparator threshold setting for voltage supply on VDDH */
#define REGULATORS_POFCON_THRESHOLDVDDH_Pos (8UL) /*!< Position of THRESHOLDVDDH field. */
#define REGULATORS_POFCON_THRESHOLDVDDH_Msk (0xFUL << REGULATORS_POFCON_THRESHOLDVDDH_Pos) /*!< Bit mask of THRESHOLDVDDH field. */
#define REGULATORS_POFCON_THRESHOLDVDDH_V27 (0UL) /*!< Set threshold to 2.7 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V28 (1UL) /*!< Set threshold to 2.8 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V29 (2UL) /*!< Set threshold to 2.9 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V30 (3UL) /*!< Set threshold to 3.0 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V31 (4UL) /*!< Set threshold to 3.1 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V32 (5UL) /*!< Set threshold to 3.2 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V33 (6UL) /*!< Set threshold to 3.3 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V34 (7UL) /*!< Set threshold to 3.4 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V35 (8UL) /*!< Set threshold to 3.5 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V36 (9UL) /*!< Set threshold to 3.6 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V37 (10UL) /*!< Set threshold to 3.7 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V38 (11UL) /*!< Set threshold to 3.8 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V39 (12UL) /*!< Set threshold to 3.9 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V40 (13UL) /*!< Set threshold to 4.0 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V41 (14UL) /*!< Set threshold to 4.1 V */
#define REGULATORS_POFCON_THRESHOLDVDDH_V42 (15UL) /*!< Set threshold to 4.2 V */

/* Bit 6 : Bypass power-fail comparator hysteresis */
#define REGULATORS_POFCON_HYSTDIS_Pos (6UL) /*!< Position of HYSTDIS field. */
#define REGULATORS_POFCON_HYSTDIS_Msk (0x1UL << REGULATORS_POFCON_HYSTDIS_Pos) /*!< Bit mask of HYSTDIS field. */
#define REGULATORS_POFCON_HYSTDIS_Normal (0UL) /*!< Hysteresis active */
#define REGULATORS_POFCON_HYSTDIS_NoHyst (1UL) /*!< Hysteresis disabled */

/* Bits 4..1 : Power-fail comparator threshold setting */
#define REGULATORS_POFCON_THRESHOLD_Pos (1UL) /*!< Position of THRESHOLD field. */
#define REGULATORS_POFCON_THRESHOLD_Msk (0xFUL << REGULATORS_POFCON_THRESHOLD_Pos) /*!< Bit mask of THRESHOLD field. */
#define REGULATORS_POFCON_THRESHOLD_V17 (4UL) /*!< Set threshold to 1.7 V */
#define REGULATORS_POFCON_THRESHOLD_V18 (5UL) /*!< Set threshold to 1.8 V */
#define REGULATORS_POFCON_THRESHOLD_V19 (6UL) /*!< Set threshold to 1.9 V */
#define REGULATORS_POFCON_THRESHOLD_V20 (7UL) /*!< Set threshold to 2.0 V */
#define REGULATORS_POFCON_THRESHOLD_V21 (8UL) /*!< Set threshold to 2.1 V */
#define REGULATORS_POFCON_THRESHOLD_V22 (9UL) /*!< Set threshold to 2.2 V */
#define REGULATORS_POFCON_THRESHOLD_V23 (10UL) /*!< Set threshold to 2.3 V */
#define REGULATORS_POFCON_THRESHOLD_V24 (11UL) /*!< Set threshold to 2.4 V */
#define REGULATORS_POFCON_THRESHOLD_V25 (12UL) /*!< Set threshold to 2.5 V */
#define REGULATORS_POFCON_THRESHOLD_V26 (13UL) /*!< Set threshold to 2.6 V */
#define REGULATORS_POFCON_THRESHOLD_V27 (14UL) /*!< Set threshold to 2.7 V */
#define REGULATORS_POFCON_THRESHOLD_V28 (15UL) /*!< Set threshold to 2.8 V */

/* Bit 0 : Enable or disable power-fail comparator */
#define REGULATORS_POFCON_POF_Pos (0UL) /*!< Position of POF field. */
#define REGULATORS_POFCON_POF_Msk (0x1UL << REGULATORS_POFCON_POF_Pos) /*!< Bit mask of POF field. */
#define REGULATORS_POFCON_POF_Disabled (0UL) /*!< Disable */
#define REGULATORS_POFCON_POF_Enabled (1UL) /*!< Enable */

/* Register: REGULATORS_IGNOREDAPCPWRREGMODE */
/* Description: Ignore DAPCP power mode */

/* Bit 0 : Ignore power request from debugger */
#define REGULATORS_IGNOREDAPCPWRREGMODE_IGNOREDAPCPWRREGMODE_Pos (0UL) /*!< Position of IGNOREDAPCPWRREGMODE field. */
#define REGULATORS_IGNOREDAPCPWRREGMODE_IGNOREDAPCPWRREGMODE_Msk (0x1UL << REGULATORS_IGNOREDAPCPWRREGMODE_IGNOREDAPCPWRREGMODE_Pos) /*!< Bit mask of IGNOREDAPCPWRREGMODE field. */
#define REGULATORS_IGNOREDAPCPWRREGMODE_IGNOREDAPCPWRREGMODE_DoNotIgnore (0UL) /*!< Do not ignore power request from debugger */
#define REGULATORS_IGNOREDAPCPWRREGMODE_IGNOREDAPCPWRREGMODE_Ignore (1UL) /*!< Ignore power request from debugger */

/* Register: REGULATORS_RSTVTHTRIM */
/* Description: Threshold trim, power-on reset */

/* Bits 4..0 : Threshold trim, power-on reset */
#define REGULATORS_RSTVTHTRIM_RSTVTHTRIM_Pos (0UL) /*!< Position of RSTVTHTRIM field. */
#define REGULATORS_RSTVTHTRIM_RSTVTHTRIM_Msk (0x1FUL << REGULATORS_RSTVTHTRIM_RSTVTHTRIM_Pos) /*!< Bit mask of RSTVTHTRIM field. */

/* Register: REGULATORS_BGREFTRIM */
/* Description: Master bias bandgap trim */

/* Bits 3..0 : Threshold trim, brown-out reset for VDDL battery */
#define REGULATORS_BGREFTRIM_BGREFTRIM_Pos (0UL) /*!< Position of BGREFTRIM field. */
#define REGULATORS_BGREFTRIM_BGREFTRIM_Msk (0xFUL << REGULATORS_BGREFTRIM_BGREFTRIM_Pos) /*!< Bit mask of BGREFTRIM field. */

/* Register: REGULATORS_FORCEOFFNVM */
/* Description: Force off NVM supply. See also the internal section in the NVMC chapter. */

/* Bits 31..0 : Force off NVM supply. See also the internal section in the NVMC chapter. */
#define REGULATORS_FORCEOFFNVM_FORCEOFFNVM_Pos (0UL) /*!< Position of FORCEOFFNVM field. */
#define REGULATORS_FORCEOFFNVM_FORCEOFFNVM_Msk (0xFFFFFFFFUL << REGULATORS_FORCEOFFNVM_FORCEOFFNVM_Pos) /*!< Bit mask of FORCEOFFNVM field. */
#define REGULATORS_FORCEOFFNVM_FORCEOFFNVM_DoNotForceOff (0UL) /*!< Read: Do not force off NVM supply */
#define REGULATORS_FORCEOFFNVM_FORCEOFFNVM_ForceOff (1UL) /*!< Read: Force off NVM supply */
#define REGULATORS_FORCEOFFNVM_FORCEOFFNVM_DisableForceOff (0UL) /*!< Write: Do not force off NVM supply */
#define REGULATORS_FORCEOFFNVM_FORCEOFFNVM_EnableForceOff (0xBADCA81EUL) /*!< Write: Force off NVM supply */

/* Register: REGULATORS_ATEPOWER */
/* Description: Analog test bus control for power modules */

/* Bit 26 : Connect USB LDO regulator to analog test bus */
#define REGULATORS_ATEPOWER_VREGUSB_Pos (26UL) /*!< Position of VREGUSB field. */
#define REGULATORS_ATEPOWER_VREGUSB_Msk (0x1UL << REGULATORS_ATEPOWER_VREGUSB_Pos) /*!< Bit mask of VREGUSB field. */
#define REGULATORS_ATEPOWER_VREGUSB_Disconnected (0UL) /*!< Disconnect from ATB0 */
#define REGULATORS_ATEPOWER_VREGUSB_VOUT (1UL) /*!< Connect AVDD_USB/3 to ATB0 */

/* Bit 25 : Connect or disconnect reference generator for network flash to analog test bus */
#define REGULATORS_ATEPOWER_VREF1V2NET_Pos (25UL) /*!< Position of VREF1V2NET field. */
#define REGULATORS_ATEPOWER_VREF1V2NET_Msk (0x1UL << REGULATORS_ATEPOWER_VREF1V2NET_Pos) /*!< Bit mask of VREF1V2NET field. */
#define REGULATORS_ATEPOWER_VREF1V2NET_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREF1V2NET_Connected (1UL) /*!< Connect 0.9 V downscaled reference voltage to ATB0 */

/* Bits 24..22 : Connect or disconnect TBD to analog test bus */
#define REGULATORS_ATEPOWER_VREGRADIOBUCK_Pos (22UL) /*!< Position of VREGRADIOBUCK field. */
#define REGULATORS_ATEPOWER_VREGRADIOBUCK_Msk (0x7UL << REGULATORS_ATEPOWER_VREGRADIOBUCK_Pos) /*!< Bit mask of VREGRADIOBUCK field. */

/* Bits 21..20 : Connect or disconnect MBIAS to analog test bus */
#define REGULATORS_ATEPOWER_MBIAS_Pos (20UL) /*!< Position of MBIAS field. */
#define REGULATORS_ATEPOWER_MBIAS_Msk (0x3UL << REGULATORS_ATEPOWER_MBIAS_Pos) /*!< Bit mask of MBIAS field. */
#define REGULATORS_ATEPOWER_MBIAS_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_MBIAS_VBG (1UL) /*!< Connect 0.9 V bandgap voltage to ATB0 */
#define REGULATORS_ATEPOWER_MBIAS_IBPSR10U (2UL) /*!< Connect 10 uA IBPSR current to ATB1 */
#define REGULATORS_ATEPOWER_MBIAS_Both (3UL) /*!< Connect both VBG to ATB0 and IBPSR10U to ATB1 */

/* Bits 19..18 : Connect or disconnect VREGRADIO DVDD0V9 to analog test bus */
#define REGULATORS_ATEPOWER_VREGHBUCK_Pos (18UL) /*!< Position of VREGHBUCK field. */
#define REGULATORS_ATEPOWER_VREGHBUCK_Msk (0x3UL << REGULATORS_ATEPOWER_VREGHBUCK_Pos) /*!< Bit mask of VREGHBUCK field. */
#define REGULATORS_ATEPOWER_VREGHBUCK_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGHBUCK_Connected (1UL) /*!< Connect to ATB1 */

/* Bit 17 : Connect or disconnect TBD  to analog test bus */
#define REGULATORS_ATEPOWER_VREGHLDO_Pos (17UL) /*!< Position of VREGHLDO field. */
#define REGULATORS_ATEPOWER_VREGHLDO_Msk (0x1UL << REGULATORS_ATEPOWER_VREGHLDO_Pos) /*!< Bit mask of VREGHLDO field. */
#define REGULATORS_ATEPOWER_VREGHLDO_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGHLDO_Connected (1UL) /*!< Connect to ATB1 */

/* Bits 16..15 : Connect or disconnect TBD  to analog test bus */
#define REGULATORS_ATEPOWER_VREGHULP_Pos (15UL) /*!< Position of VREGHULP field. */
#define REGULATORS_ATEPOWER_VREGHULP_Msk (0x3UL << REGULATORS_ATEPOWER_VREGHULP_Pos) /*!< Bit mask of VREGHULP field. */
#define REGULATORS_ATEPOWER_VREGHULP_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGHULP_Connected (1UL) /*!< Connect to ATB1 */

/* Bit 14 : Connect or disconnect VREGRADIO AVDDSS to analog test bus */
#define REGULATORS_ATEPOWER_VREGRADIOAVSS_Pos (14UL) /*!< Position of VREGRADIOAVSS field. */
#define REGULATORS_ATEPOWER_VREGRADIOAVSS_Msk (0x1UL << REGULATORS_ATEPOWER_VREGRADIOAVSS_Pos) /*!< Bit mask of VREGRADIOAVSS field. */
#define REGULATORS_ATEPOWER_VREGRADIOAVSS_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGRADIOAVSS_Connected (1UL) /*!< Connect to ATB1 */

/* Bit 13 : Connect or disconnect VREGRADIO DVDD0V9 to analog test bus */
#define REGULATORS_ATEPOWER_VREGNETWORKDVDD0V9_Pos (13UL) /*!< Position of VREGNETWORKDVDD0V9 field. */
#define REGULATORS_ATEPOWER_VREGNETWORKDVDD0V9_Msk (0x1UL << REGULATORS_ATEPOWER_VREGNETWORKDVDD0V9_Pos) /*!< Bit mask of VREGNETWORKDVDD0V9 field. */
#define REGULATORS_ATEPOWER_VREGNETWORKDVDD0V9_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGNETWORKDVDD0V9_Connected (1UL) /*!< Connect to ATB1 */

/* Bit 12 : Connect or disconnect VREGRADIO AVDD1V3 to analog test bus */
#define REGULATORS_ATEPOWER_VREGRADIOAVDD1V3_Pos (12UL) /*!< Position of VREGRADIOAVDD1V3 field. */
#define REGULATORS_ATEPOWER_VREGRADIOAVDD1V3_Msk (0x1UL << REGULATORS_ATEPOWER_VREGRADIOAVDD1V3_Pos) /*!< Bit mask of VREGRADIOAVDD1V3 field. */
#define REGULATORS_ATEPOWER_VREGRADIOAVDD1V3_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGRADIOAVDD1V3_Connected (1UL) /*!< Connect to ATB1 */

/* Bits 11..9 : Test signals for the RST analog cell */
#define REGULATORS_ATEPOWER_RST_Pos (9UL) /*!< Position of RST field. */
#define REGULATORS_ATEPOWER_RST_Msk (0x7UL << REGULATORS_ATEPOWER_RST_Pos) /*!< Bit mask of RST field. */

/* Bit 8 : Connect or disconnect reference generator for application flash to analog test bus */
#define REGULATORS_ATEPOWER_VREF1V2APP_Pos (8UL) /*!< Position of VREF1V2APP field. */
#define REGULATORS_ATEPOWER_VREF1V2APP_Msk (0x1UL << REGULATORS_ATEPOWER_VREF1V2APP_Pos) /*!< Bit mask of VREF1V2APP field. */
#define REGULATORS_ATEPOWER_VREF1V2APP_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREF1V2APP_Connected (1UL) /*!< Connect 0.9 V downscaled reference voltage to ATB0 */

/* Bits 7..5 : Configure connection of VREGMAINBUCK to analog test bus */
#define REGULATORS_ATEPOWER_VREGMAINBUCK_Pos (5UL) /*!< Position of VREGMAINBUCK field. */
#define REGULATORS_ATEPOWER_VREGMAINBUCK_Msk (0x7UL << REGULATORS_ATEPOWER_VREGMAINBUCK_Pos) /*!< Bit mask of VREGMAINBUCK field. */
#define REGULATORS_ATEPOWER_VREGMAINBUCK_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGMAINBUCK_VOUTCMP (1UL) /*!< Connect VOUT_CMP to ATB0 */
#define REGULATORS_ATEPOWER_VREGMAINBUCK_VBG (2UL) /*!< Connect 0.9 V bandgap voltage to ATB0 */

/* Bit 4 : Connect or disconnect VREGMAIN AVSS to analog test bus */
#define REGULATORS_ATEPOWER_VREGMAINAVSS_Pos (4UL) /*!< Position of VREGMAINAVSS field. */
#define REGULATORS_ATEPOWER_VREGMAINAVSS_Msk (0x1UL << REGULATORS_ATEPOWER_VREGMAINAVSS_Pos) /*!< Bit mask of VREGMAINAVSS field. */
#define REGULATORS_ATEPOWER_VREGMAINAVSS_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGMAINAVSS_Connected (1UL) /*!< Connect to ATB1 */

/* Bit 3 : Connect or disconnect VREGMAIN DVDD_0V9 to analog test bus */
#define REGULATORS_ATEPOWER_VREGMAINVDD0V9_Pos (3UL) /*!< Position of VREGMAINVDD0V9 field. */
#define REGULATORS_ATEPOWER_VREGMAINVDD0V9_Msk (0x1UL << REGULATORS_ATEPOWER_VREGMAINVDD0V9_Pos) /*!< Bit mask of VREGMAINVDD0V9 field. */
#define REGULATORS_ATEPOWER_VREGMAINVDD0V9_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGMAINVDD0V9_Connected (1UL) /*!< Connect to ATB0 */

/* Bit 2 : Connect or disconnect VREGANA AVDD_1V3 to analog test bus */
#define REGULATORS_ATEPOWER_VREGANAAVDD1V3_Pos (2UL) /*!< Position of VREGANAAVDD1V3 field. */
#define REGULATORS_ATEPOWER_VREGANAAVDD1V3_Msk (0x1UL << REGULATORS_ATEPOWER_VREGANAAVDD1V3_Pos) /*!< Bit mask of VREGANAAVDD1V3 field. */
#define REGULATORS_ATEPOWER_VREGANAAVDD1V3_Disconnected (0UL) /*!< Disconnect */
#define REGULATORS_ATEPOWER_VREGANAAVDD1V3_Connected (1UL) /*!< Connect to ATB0 */

/* Bit 1 : Enable or disable overvoltage clamp on analog test bus */
#define REGULATORS_ATEPOWER_OVCLAMP_Pos (1UL) /*!< Position of OVCLAMP field. */
#define REGULATORS_ATEPOWER_OVCLAMP_Msk (0x1UL << REGULATORS_ATEPOWER_OVCLAMP_Pos) /*!< Bit mask of OVCLAMP field. */
#define REGULATORS_ATEPOWER_OVCLAMP_Disabled (0UL) /*!< Disable */
#define REGULATORS_ATEPOWER_OVCLAMP_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable power-down clamp on analog test bus */
#define REGULATORS_ATEPOWER_PDCLAMP_Pos (0UL) /*!< Position of PDCLAMP field. */
#define REGULATORS_ATEPOWER_PDCLAMP_Msk (0x1UL << REGULATORS_ATEPOWER_PDCLAMP_Pos) /*!< Bit mask of PDCLAMP field. */
#define REGULATORS_ATEPOWER_PDCLAMP_Disabled (0UL) /*!< Disable */
#define REGULATORS_ATEPOWER_PDCLAMP_Enabled (1UL) /*!< Enable */

/* Register: REGULATORS_VREFULPTRIM */
/* Description: Trim value of VREF_ULP */

/* Bits 3..0 : Trim value of VREF_ULP Default 4'b0011 */
#define REGULATORS_VREFULPTRIM_VREFULPTRIM_Pos (0UL) /*!< Position of VREFULPTRIM field. */
#define REGULATORS_VREFULPTRIM_VREFULPTRIM_Msk (0xFUL << REGULATORS_VREFULPTRIM_VREFULPTRIM_Pos) /*!< Bit mask of VREFULPTRIM field. */

/* Register: REGULATORS_VREGUSB_USBVREGDELAY */
/* Description: Control of the delay from USB VREG turned on to USBPWRRDY event */

/* Bits 2..0 : Override value for the counter, when OVERRIDE is on */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_Pos (0UL) /*!< Position of DELAY field. */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_Msk (0x7UL << REGULATORS_VREGUSB_USBVREGDELAY_DELAY_Pos) /*!< Bit mask of DELAY field. */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_75ms (0UL) /*!< 75 ms delay (default) */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_10us (1UL) /*!< 10 us delay */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_100us (2UL) /*!< 100 us delay */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_1ms (3UL) /*!< 1 ms delay */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_20ms (4UL) /*!< 20 ms delay */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_50ms (5UL) /*!< 50 ms delay */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_100ms (6UL) /*!< 100 ms delay */
#define REGULATORS_VREGUSB_USBVREGDELAY_DELAY_250ms (7UL) /*!< 250 ms delay */

/* Register: REGULATORS_VREGUSB_USBVDETFILTER */
/* Description: Control of the VBUS detection filter */

/* Bits 31..16 : Length of the VBUS detection glitch filter on positive edge (in amounts of 16 MHz clock periods) */
#define REGULATORS_VREGUSB_USBVDETFILTER_LENGTHPOS_Pos (16UL) /*!< Position of LENGTHPOS field. */
#define REGULATORS_VREGUSB_USBVDETFILTER_LENGTHPOS_Msk (0xFFFFUL << REGULATORS_VREGUSB_USBVDETFILTER_LENGTHPOS_Pos) /*!< Bit mask of LENGTHPOS field. */

/* Bits 15..0 : Length of the VBUS detection glitch filter on negative edge (in amounts of 16 MHz clock periods) */
#define REGULATORS_VREGUSB_USBVDETFILTER_LENGTHNEG_Pos (0UL) /*!< Position of LENGTHNEG field. */
#define REGULATORS_VREGUSB_USBVDETFILTER_LENGTHNEG_Msk (0xFFFFUL << REGULATORS_VREGUSB_USBVDETFILTER_LENGTHNEG_Pos) /*!< Bit mask of LENGTHNEG field. */

/* Register: REGULATORS_VREGUSB_FORCEVBUSDET */
/* Description: Force VBUS detection indication */

/* Bits 1..0 : Force VBUS detection indication, overriding the analog detection circuitry */
#define REGULATORS_VREGUSB_FORCEVBUSDET_FORCEVBUSDET_Pos (0UL) /*!< Position of FORCEVBUSDET field. */
#define REGULATORS_VREGUSB_FORCEVBUSDET_FORCEVBUSDET_Msk (0x3UL << REGULATORS_VREGUSB_FORCEVBUSDET_FORCEVBUSDET_Pos) /*!< Bit mask of FORCEVBUSDET field. */
#define REGULATORS_VREGUSB_FORCEVBUSDET_FORCEVBUSDET_DoNotForce (0UL) /*!< Do not force VBUS detection output */
#define REGULATORS_VREGUSB_FORCEVBUSDET_FORCEVBUSDET_ForceNoVbusDet (1UL) /*!< Force detection output to 'no VBUS present' */
#define REGULATORS_VREGUSB_FORCEVBUSDET_FORCEVBUSDET_DoNotForce2 (2UL) /*!< Do not force VBUS detection output (same effect as DoNotForce) */
#define REGULATORS_VREGUSB_FORCEVBUSDET_FORCEVBUSDET_ForceVbusDet (3UL) /*!< Force detection output to 'VBUS present' */

/* Register: REGULATORS_VREGUSB_FORCEPHY0V9 */
/* Description: Force USB PHY 0V9 supply switch */

/* Bits 1..0 : Force USB PHY 0V9 supply switch */
#define REGULATORS_VREGUSB_FORCEPHY0V9_FORCEPHY0V9_Pos (0UL) /*!< Position of FORCEPHY0V9 field. */
#define REGULATORS_VREGUSB_FORCEPHY0V9_FORCEPHY0V9_Msk (0x3UL << REGULATORS_VREGUSB_FORCEPHY0V9_FORCEPHY0V9_Pos) /*!< Bit mask of FORCEPHY0V9 field. */
#define REGULATORS_VREGUSB_FORCEPHY0V9_FORCEPHY0V9_DoNotForce (0UL) /*!< Automatic handling of USB PHY 0V9 supply switch */
#define REGULATORS_VREGUSB_FORCEPHY0V9_FORCEPHY0V9_ForceNoPhy0V9 (1UL) /*!< Force USB PHY 0V9 supply switch to off */
#define REGULATORS_VREGUSB_FORCEPHY0V9_FORCEPHY0V9_DoNotForce2 (2UL) /*!< Automatic handling of USB PHY 0V9 supply switch (same effect as DoNotForce) */
#define REGULATORS_VREGUSB_FORCEPHY0V9_FORCEPHY0V9_ForcePhy0V9 (3UL) /*!< Force USB PHY 0V9 supply switch to on */

/* Register: REGULATORS_VREGUSB_VREGUSBCFG */
/* Description: Spare configuration signals */

/* Bits 1..0 : Spare configuration signals */
#define REGULATORS_VREGUSB_VREGUSBCFG_VREGUSBCFG_Pos (0UL) /*!< Position of VREGUSBCFG field. */
#define REGULATORS_VREGUSB_VREGUSBCFG_VREGUSBCFG_Msk (0x3UL << REGULATORS_VREGUSB_VREGUSBCFG_VREGUSBCFG_Pos) /*!< Bit mask of VREGUSBCFG field. */

/* Register: REGULATORS_VREGUSB_VREGUSBTRIM */
/* Description: Output voltage fine trimming */

/* Bits 2..0 : Output voltage fine trimming */
#define REGULATORS_VREGUSB_VREGUSBTRIM_VREGUSBTRIM_Pos (0UL) /*!< Position of VREGUSBTRIM field. */
#define REGULATORS_VREGUSB_VREGUSBTRIM_VREGUSBTRIM_Msk (0x7UL << REGULATORS_VREGUSB_VREGUSBTRIM_VREGUSBTRIM_Pos) /*!< Bit mask of VREGUSBTRIM field. */

/* Register: REGULATORS_VREGMAIN_DCDCEN */
/* Description: DC/DC enable register for VREGMAIN */

/* Bit 0 : Enable or disable DC/DC converter */
#define REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Pos (0UL) /*!< Position of DCDCEN field. */
#define REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk (0x1UL << REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Pos) /*!< Bit mask of DCDCEN field. */
#define REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Disabled (0UL) /*!< Disable */
#define REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Enabled (1UL) /*!< Enable */

/* Register: REGULATORS_VREGMAIN_FORCEREGMODE */
/* Description: Backdoor register for manual selection of power mode */

/* Bits 2..0 : Force regulator mode to value */
#define REGULATORS_VREGMAIN_FORCEREGMODE_FORCEREGMODE_Pos (0UL) /*!< Position of FORCEREGMODE field. */
#define REGULATORS_VREGMAIN_FORCEREGMODE_FORCEREGMODE_Msk (0x7UL << REGULATORS_VREGMAIN_FORCEREGMODE_FORCEREGMODE_Pos) /*!< Bit mask of FORCEREGMODE field. */
#define REGULATORS_VREGMAIN_FORCEREGMODE_FORCEREGMODE_EXT (0UL) /*!< Force external (DVDD_0V9 supplied externally) */
#define REGULATORS_VREGMAIN_FORCEREGMODE_FORCEREGMODE_ULP (1UL) /*!< Force ULP mode */
#define REGULATORS_VREGMAIN_FORCEREGMODE_FORCEREGMODE_LDO (2UL) /*!< Force LDO mode */
#define REGULATORS_VREGMAIN_FORCEREGMODE_FORCEREGMODE_DCDC (3UL) /*!< Force DC/DC mode */
#define REGULATORS_VREGMAIN_FORCEREGMODE_FORCEREGMODE_DCDC_REFRESH (4UL) /*!< Force DC/DC REFRESH mode */

/* Register: REGULATORS_VREGMAIN_PWRREGTHRESHOLD */
/* Description: Set threshold value of power regulator */

/* Bits 6..0 : Sets the threshold value of power regulator */
#define REGULATORS_VREGMAIN_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Pos (0UL) /*!< Position of PWRREGTHRESHOLD field. */
#define REGULATORS_VREGMAIN_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Msk (0x7FUL << REGULATORS_VREGMAIN_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Pos) /*!< Bit mask of PWRREGTHRESHOLD field. */

/* Register: REGULATORS_VREGMAIN_ENFORCEPWRREGMODE */
/* Description: Enable forcing of power mode in power regulator */

/* Bit 0 : Enable forcing of power mode in power regulator */
#define REGULATORS_VREGMAIN_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos (0UL) /*!< Position of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGMAIN_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Msk (0x1UL << REGULATORS_VREGMAIN_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos) /*!< Bit mask of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGMAIN_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Disabled (0UL) /*!< Power regulator forcing off */
#define REGULATORS_VREGMAIN_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Enabled (1UL) /*!< Power regulator mode forced to value given by FORCEREGMODE */

/* Register: REGULATORS_VREGMAIN_CURRENTPWRREGMODE */
/* Description: Current mode in the power regulator */

/* Bits 3..0 : Current mode in the power regulator */
#define REGULATORS_VREGMAIN_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos (0UL) /*!< Position of CURRENTPWRREGMODE field. */
#define REGULATORS_VREGMAIN_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Msk (0xFUL << REGULATORS_VREGMAIN_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos) /*!< Bit mask of CURRENTPWRREGMODE field. */

/* Register: REGULATORS_VREGMAIN_DISABLEPFM */
/* Description: Disable PFM */

/* Bit 0 : Backdoor to disable the PFM mode, only using the PWM. 1: PWM mode will always be selected if disableDcdcDvdd is 0. 0: Normal switching between PFM and PWM modes. */
#define REGULATORS_VREGMAIN_DISABLEPFM_DISABLE_Pos (0UL) /*!< Position of DISABLE field. */
#define REGULATORS_VREGMAIN_DISABLEPFM_DISABLE_Msk (0x1UL << REGULATORS_VREGMAIN_DISABLEPFM_DISABLE_Pos) /*!< Bit mask of DISABLE field. */

/* Register: REGULATORS_VREGMAIN_LDOTESTLOAD */
/* Description: Test load setting for VREGMAIN */

/* Bit 0 : Output load configuration (for test purposes) */
#define REGULATORS_VREGMAIN_LDOTESTLOAD_VREGLOAD_Pos (0UL) /*!< Position of VREGLOAD field. */
#define REGULATORS_VREGMAIN_LDOTESTLOAD_VREGLOAD_Msk (0x1UL << REGULATORS_VREGMAIN_LDOTESTLOAD_VREGLOAD_Pos) /*!< Bit mask of VREGLOAD field. */
#define REGULATORS_VREGMAIN_LDOTESTLOAD_VREGLOAD_NormalOperation (0UL) /*!< Normal operation (default) */
#define REGULATORS_VREGMAIN_LDOTESTLOAD_VREGLOAD_13mATestLoad (1UL) /*!< 13 mA test load at 1.2 V */

/* Register: REGULATORS_VREGMAIN_LDOCAL */
/* Description: Calibration register for the VREGMAIN LDO regulator */

/* Bits 2..0 : Output voltage calibration */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_Pos (0UL) /*!< Position of VREGTRIM field. */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_Msk (0x7UL << REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_Pos) /*!< Bit mask of VREGTRIM field. */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_000 (0UL) /*!< 1.26 V */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_001 (1UL) /*!< 1.28 V */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_010 (2UL) /*!< 1.31 V */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_011 (3UL) /*!< 1.36 V */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_100 (4UL) /*!< 1.16 V */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_101 (5UL) /*!< 1.18 V */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_110 (6UL) /*!< 1.20 V */
#define REGULATORS_VREGMAIN_LDOCAL_VREGTRIM_111 (7UL) /*!< 1.23 V */

/* Register: REGULATORS_VREGMAIN_AVOIDULP */
/* Description: Backdoor to avoid ULP mode */

/* Bit 0 : Backdoor to avoid ULP mode */
#define REGULATORS_VREGMAIN_AVOIDULP_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define REGULATORS_VREGMAIN_AVOIDULP_ENABLE_Msk (0x1UL << REGULATORS_VREGMAIN_AVOIDULP_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define REGULATORS_VREGMAIN_AVOIDULP_ENABLE_Default (0UL) /*!< DVDD FSM will enter ULP mode if no power requests are present. */
#define REGULATORS_VREGMAIN_AVOIDULP_ENABLE_AvoidUlp (1UL) /*!< Avoids ULP mode. By also setting disableDcdcDvdd=0 and disablePfmDvdd=0, PFM mode will be used as the lowest power regulator state. */

/* Register: REGULATORS_VREGMAIN_BUCKPWMCAL */
/* Description: Calibration of BUCK_LP_PWM (Step size: TBD).  2's complement form */

/* Bits 4..0 : Calibration of BUCK_LP_PWM (Step size: TBD).  2's complement form 5'b01111 - Max output voltage. 5'b00000 - Default (1.00V@25mA typical). 5'b10000 - Min output voltage */
#define REGULATORS_VREGMAIN_BUCKPWMCAL_BUCKPWMCAL_Pos (0UL) /*!< Position of BUCKPWMCAL field. */
#define REGULATORS_VREGMAIN_BUCKPWMCAL_BUCKPWMCAL_Msk (0x1FUL << REGULATORS_VREGMAIN_BUCKPWMCAL_BUCKPWMCAL_Pos) /*!< Bit mask of BUCKPWMCAL field. */

/* Register: REGULATORS_VREGMAIN_BUCKPFMICMPCAL */
/* Description: Calibrate load current detector in PFM mode. Default=2'b00. */

/* Bits 1..0 : Calibrate load current detector in PFM mode. Default=2'b00. Step size: ~3.5 mA. 2'b00 - Two consecutive pulses on LS_ILIM_3V6. 2'b01 - Three consecutive pulses. 2'b10 - Four consecutive pulses. 2'b11 - N.A. */
#define REGULATORS_VREGMAIN_BUCKPFMICMPCAL_BUCKPFMICMPCAL_Pos (0UL) /*!< Position of BUCKPFMICMPCAL field. */
#define REGULATORS_VREGMAIN_BUCKPFMICMPCAL_BUCKPFMICMPCAL_Msk (0x3UL << REGULATORS_VREGMAIN_BUCKPFMICMPCAL_BUCKPFMICMPCAL_Pos) /*!< Bit mask of BUCKPFMICMPCAL field. */

/* Register: REGULATORS_VREGMAIN_BUCKMAXILIMCAL */
/* Description: Max coil current limit calibration */

/* Bits 1..0 : Max coil current limit calibration. Default = 2'b10 Step size: ~15 mA. */
#define REGULATORS_VREGMAIN_BUCKMAXILIMCAL_BUCKMAXILIMCAL_Pos (0UL) /*!< Position of BUCKMAXILIMCAL field. */
#define REGULATORS_VREGMAIN_BUCKMAXILIMCAL_BUCKMAXILIMCAL_Msk (0x3UL << REGULATORS_VREGMAIN_BUCKMAXILIMCAL_BUCKMAXILIMCAL_Pos) /*!< Bit mask of BUCKMAXILIMCAL field. */

/* Register: REGULATORS_VREGMAIN_ULPRESCTRL */
/* Description: Switched resistor control */

/* Bits 1..0 : Output voltage calibration. 0: switched with internal oscillator (default). 1: switched with CLK2K input. 2: force always on. 3: force off (PWRUPs must be 0, otherwise default). */
#define REGULATORS_VREGMAIN_ULPRESCTRL_ULPRESCTRL_Pos (0UL) /*!< Position of ULPRESCTRL field. */
#define REGULATORS_VREGMAIN_ULPRESCTRL_ULPRESCTRL_Msk (0x3UL << REGULATORS_VREGMAIN_ULPRESCTRL_ULPRESCTRL_Pos) /*!< Bit mask of ULPRESCTRL field. */

/* Register: REGULATORS_VREGMAIN_BUCKPFMCAL */
/* Description: Calibration of BUCK_LP_PFM, step size: TBD, 2's complement form */

/* Bits 3..0 : 4'b0111 - Max output voltage. 4'b0000 - Default output voltage (see VREG_DVDD_VOLT_0V9[1:0]). 4'b1000 - Min output voltage. */
#define REGULATORS_VREGMAIN_BUCKPFMCAL_BUCKPFMCAL_Pos (0UL) /*!< Position of BUCKPFMCAL field. */
#define REGULATORS_VREGMAIN_BUCKPFMCAL_BUCKPFMCAL_Msk (0xFUL << REGULATORS_VREGMAIN_BUCKPFMCAL_BUCKPFMCAL_Pos) /*!< Bit mask of BUCKPFMCAL field. */

/* Register: REGULATORS_VREGMAIN_VCORECTRL */
/* Description: Spare digital signals */

/* Bits 1..0 : TBD */
#define REGULATORS_VREGMAIN_VCORECTRL_VCORECTRL_Pos (0UL) /*!< Position of VCORECTRL field. */
#define REGULATORS_VREGMAIN_VCORECTRL_VCORECTRL_Msk (0x3UL << REGULATORS_VREGMAIN_VCORECTRL_VCORECTRL_Pos) /*!< Bit mask of VCORECTRL field. */

/* Register: REGULATORS_VREGMAIN_BUCKDEBUG */
/* Description: Debug signals for BUCK_VCORE_LP. Default = 6'b000000. */

/* Bits 5..0 : [0] = 1: Power off P_DCC_LP pad if PWM mode is active. [2:1] = 10: Divide 8 MHz clock by 2. [2:1] = 11: Divide 8 MHz clock by 4. [3] = 1: Disable BUCK_DVDD_ICMP_0V9 (= 0). [5:4] = Reserved. */
#define REGULATORS_VREGMAIN_BUCKDEBUG_BUCKDEBUG_Pos (0UL) /*!< Position of BUCKDEBUG field. */
#define REGULATORS_VREGMAIN_BUCKDEBUG_BUCKDEBUG_Msk (0x3FUL << REGULATORS_VREGMAIN_BUCKDEBUG_BUCKDEBUG_Pos) /*!< Bit mask of BUCKDEBUG field. */

/* Register: REGULATORS_VREGMAIN_VOUT */
/* Description: Selects output voltage from DVDD BUCK and LDO */

/* Bits 1..0 : Selects output voltage from DVDD BUCK and LDO Buck PWM/PFM mode: 11: 1.20 10: 1.10 01: 1.00 00: 0.95 (Default) LDO mode: 1x: 1.26 V nominal output 0x: 1.10 V nominal output (Default) Note: This is overridden by VOUTREQH when VREQH is requested by DVFS. */
#define REGULATORS_VREGMAIN_VOUT_VOUT_Pos (0UL) /*!< Position of VOUT field. */
#define REGULATORS_VREGMAIN_VOUT_VOUT_Msk (0x3UL << REGULATORS_VREGMAIN_VOUT_VOUT_Pos) /*!< Bit mask of VOUT field. */

/* Register: REGULATORS_VREGMAIN_VOUTREQH */
/* Description: Selects output voltage from DVDD BUCK and LDO */

/* Bits 1..0 : Selects output voltage from DVDD BUCK and LDO Buck PWM/PFM mode: 11: 1.20 10: 1.10 01: 1.00 00: 0.95 (Default) LDO mode: 1x: 1.26 V nominal output 0x: 1.10 V nominal output (Default) */
#define REGULATORS_VREGMAIN_VOUTREQH_VOUTREQH_Pos (0UL) /*!< Position of VOUTREQH field. */
#define REGULATORS_VREGMAIN_VOUTREQH_VOUTREQH_Msk (0x3UL << REGULATORS_VREGMAIN_VOUTREQH_VOUTREQH_Pos) /*!< Bit mask of VOUTREQH field. */

/* Register: REGULATORS_VREGMAIN_BUCKPFMICMPCOUNT */
/* Description: Programmable timer value for PFM ICMP trigger timer */

/* Bits 15..0 : Programmable timer value for PFM ICMP trigger timer. Activate PWM mode for (PFM_ICMP_TIMER_LOAD_VALUE*62.5 ns) when ICMP triggers. Default: 100 us. */
#define REGULATORS_VREGMAIN_BUCKPFMICMPCOUNT_BUCKPFMICMPCOUNT_Pos (0UL) /*!< Position of BUCKPFMICMPCOUNT field. */
#define REGULATORS_VREGMAIN_BUCKPFMICMPCOUNT_BUCKPFMICMPCOUNT_Msk (0xFFFFUL << REGULATORS_VREGMAIN_BUCKPFMICMPCOUNT_BUCKPFMICMPCOUNT_Pos) /*!< Bit mask of BUCKPFMICMPCOUNT field. */

/* Register: REGULATORS_VREGANA_FORCEREGMODE */
/* Description: Backdoor register for manual selection of power mode */

/* Bits 1..0 : Force regulator mode to value */
#define REGULATORS_VREGANA_FORCEREGMODE_FORCEREGMODE_Pos (0UL) /*!< Position of FORCEREGMODE field. */
#define REGULATORS_VREGANA_FORCEREGMODE_FORCEREGMODE_Msk (0x3UL << REGULATORS_VREGANA_FORCEREGMODE_FORCEREGMODE_Pos) /*!< Bit mask of FORCEREGMODE field. */
#define REGULATORS_VREGANA_FORCEREGMODE_FORCEREGMODE_EXT (0UL) /*!< Force external (DVDD_0V9 supplied externally) */
#define REGULATORS_VREGANA_FORCEREGMODE_FORCEREGMODE_ULP (1UL) /*!< Force ULP mode */
#define REGULATORS_VREGANA_FORCEREGMODE_FORCEREGMODE_LDO (2UL) /*!< Force LDO mode */

/* Register: REGULATORS_VREGANA_ENFORCEPWRREGMODE */
/* Description: Enable forcing of power mode in power regulator */

/* Bit 0 : Enable forcing of power mode in power regulator */
#define REGULATORS_VREGANA_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos (0UL) /*!< Position of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGANA_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Msk (0x1UL << REGULATORS_VREGANA_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos) /*!< Bit mask of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGANA_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Disabled (0UL) /*!< Power regulator forcing off */
#define REGULATORS_VREGANA_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Enabled (1UL) /*!< Power regulator mode forced to value given by FORCEREGMODE */

/* Register: REGULATORS_VREGANA_CURRENTPWRREGMODE */
/* Description: Current mode in the power regulator */

/* Bits 3..0 : Current mode in the power regulator */
#define REGULATORS_VREGANA_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos (0UL) /*!< Position of CURRENTPWRREGMODE field. */
#define REGULATORS_VREGANA_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Msk (0xFUL << REGULATORS_VREGANA_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos) /*!< Bit mask of CURRENTPWRREGMODE field. */

/* Register: REGULATORS_VREGANA_LDOTESTLOAD */
/* Description: Test load setting for VREGANA */

/* Bits 2..0 : Output load configuration (for test purposes) */
#define REGULATORS_VREGANA_LDOTESTLOAD_VREGLOAD_Pos (0UL) /*!< Position of VREGLOAD field. */
#define REGULATORS_VREGANA_LDOTESTLOAD_VREGLOAD_Msk (0x7UL << REGULATORS_VREGANA_LDOTESTLOAD_VREGLOAD_Pos) /*!< Bit mask of VREGLOAD field. */
#define REGULATORS_VREGANA_LDOTESTLOAD_VREGLOAD_NormalOperation (0UL) /*!< Normal operation (default) */
#define REGULATORS_VREGANA_LDOTESTLOAD_VREGLOAD_1mATestLoad (1UL) /*!< 1 mA test load */
#define REGULATORS_VREGANA_LDOTESTLOAD_VREGLOAD_50mATestLoad (2UL) /*!< 50 mA test load */
#define REGULATORS_VREGANA_LDOTESTLOAD_VREGLOAD_150mATestLoad (3UL) /*!< 150 mA test load */

/* Register: REGULATORS_VREGANA_LDOCAL */
/* Description: Configuration register for the VREGANA LDO regulator */

/* Bits 2..0 : Output voltage calibration */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_Pos (0UL) /*!< Position of VREGTRIM field. */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_Msk (0x7UL << REGULATORS_VREGANA_LDOCAL_VREGTRIM_Pos) /*!< Bit mask of VREGTRIM field. */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_000 (0UL) /*!< 1.26 V */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_001 (1UL) /*!< 1.28 V */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_010 (2UL) /*!< 1.31 V */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_011 (3UL) /*!< 1.36 V */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_100 (4UL) /*!< 1.16 V */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_101 (5UL) /*!< 1.18 V */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_110 (6UL) /*!< 1.20 V */
#define REGULATORS_VREGANA_LDOCAL_VREGTRIM_111 (7UL) /*!< 1.23 V */

/* Register: REGULATORS_VREGANA_ULPCAL */
/* Description: Calibration  register for VREGANA ULP regulator */

/* Bits 4..0 : Output voltage calibration. 0: minimum voltage. 31: maximum voltage. */
#define REGULATORS_VREGANA_ULPCAL_ULPTRIM_Pos (0UL) /*!< Position of ULPTRIM field. */
#define REGULATORS_VREGANA_ULPCAL_ULPTRIM_Msk (0x1FUL << REGULATORS_VREGANA_ULPCAL_ULPTRIM_Pos) /*!< Bit mask of ULPTRIM field. */

/* Register: REGULATORS_VREGRADIO_VOUT */
/* Description: Control the output voltage for RVDD_1V3. Note: This is overridden by VOUTREQH when VREQH is requested by the network core. */

/* Bits 1..0 : Output voltage */
#define REGULATORS_VREGRADIO_VOUT_VOUT_Pos (0UL) /*!< Position of VOUT field. */
#define REGULATORS_VREGRADIO_VOUT_VOUT_Msk (0x3UL << REGULATORS_VREGRADIO_VOUT_VOUT_Pos) /*!< Bit mask of VOUT field. */
#define REGULATORS_VREGRADIO_VOUT_VOUT_00 (0UL) /*!< 1.0 V */
#define REGULATORS_VREGRADIO_VOUT_VOUT_01 (1UL) /*!< 1.05 V */
#define REGULATORS_VREGRADIO_VOUT_VOUT_10 (2UL) /*!< 1.10 V */
#define REGULATORS_VREGRADIO_VOUT_VOUT_11 (3UL) /*!< 1.20 V */

/* Register: REGULATORS_VREGRADIO_DCDCEN */
/* Description: DC/DC enable register for VREGRADIO */

/* Bit 0 : Enable or disable DC/DC converter */
#define REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Pos (0UL) /*!< Position of DCDCEN field. */
#define REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Msk (0x1UL << REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Pos) /*!< Bit mask of DCDCEN field. */
#define REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Disabled (0UL) /*!< Disable */
#define REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled (1UL) /*!< Enable */

/* Register: REGULATORS_VREGRADIO_ENFORCEPWRREGMODE */
/* Description: Enable forcing of power mode in power regulator */

/* Bit 0 : Enable forcing of power mode in power regulator */
#define REGULATORS_VREGRADIO_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos (0UL) /*!< Position of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGRADIO_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Msk (0x1UL << REGULATORS_VREGRADIO_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos) /*!< Bit mask of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGRADIO_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Disabled (0UL) /*!< Power regulator forcing off */
#define REGULATORS_VREGRADIO_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Enabled (1UL) /*!< Power regulator mode forced to value given by FORCEREGMODE */

/* Register: REGULATORS_VREGRADIO_FORCEREGMODE */
/* Description: Backdoor register for manual selection of power mode */

/* Bits 2..0 : Force regulator mode to value */
#define REGULATORS_VREGRADIO_FORCEREGMODE_FORCEREGMODE_Pos (0UL) /*!< Position of FORCEREGMODE field. */
#define REGULATORS_VREGRADIO_FORCEREGMODE_FORCEREGMODE_Msk (0x7UL << REGULATORS_VREGRADIO_FORCEREGMODE_FORCEREGMODE_Pos) /*!< Bit mask of FORCEREGMODE field. */
#define REGULATORS_VREGRADIO_FORCEREGMODE_FORCEREGMODE_Ext (0UL) /*!< Force external */
#define REGULATORS_VREGRADIO_FORCEREGMODE_FORCEREGMODE_ULP (1UL) /*!< Force ULP mode */
#define REGULATORS_VREGRADIO_FORCEREGMODE_FORCEREGMODE_LDO (2UL) /*!< Force LDO mode */
#define REGULATORS_VREGRADIO_FORCEREGMODE_FORCEREGMODE_DCDC (3UL) /*!< Force DC/DC mode */
#define REGULATORS_VREGRADIO_FORCEREGMODE_FORCEREGMODE_REF (4UL) /*!< Force REF mode */

/* Register: REGULATORS_VREGRADIO_CURRENTPWRREGMODE */
/* Description: Current mode in the power regulator */

/* Bits 3..0 : Current mode in the power regulator */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos (0UL) /*!< Position of CURRENTPWRREGMODE field. */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Msk (0xFUL << REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos) /*!< Bit mask of CURRENTPWRREGMODE field. */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Ext (0UL) /*!< External */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_DCDC (2UL) /*!< DC/DC */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_REF (3UL) /*!< REF */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_LDO (4UL) /*!< ULP DC/DC */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_LDO_DCDC (6UL) /*!< LDO DC/DC */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_LDO_REF (7UL) /*!< LDO REF */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_ULP (8UL) /*!< ULP */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_DCDC_ULP (10UL) /*!< ULP DC/DC */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_REF_ULP (11UL) /*!< REF ULP */
#define REGULATORS_VREGRADIO_CURRENTPWRREGMODE_CURRENTPWRREGMODE_ULP_LDO (12UL) /*!< ULP DC/DC */

/* Register: REGULATORS_VREGRADIO_TESTLOAD */
/* Description: Test load setting for VREGRADIO */

/* Bits 2..0 : Output load configuration (for test purposes) */
#define REGULATORS_VREGRADIO_TESTLOAD_TESTLOAD_Pos (0UL) /*!< Position of TESTLOAD field. */
#define REGULATORS_VREGRADIO_TESTLOAD_TESTLOAD_Msk (0x7UL << REGULATORS_VREGRADIO_TESTLOAD_TESTLOAD_Pos) /*!< Bit mask of TESTLOAD field. */
#define REGULATORS_VREGRADIO_TESTLOAD_TESTLOAD_NormalOperation (0UL) /*!< Normal operation (default) */
#define REGULATORS_VREGRADIO_TESTLOAD_TESTLOAD_1mATestLoad (1UL) /*!< 1 mA test load */
#define REGULATORS_VREGRADIO_TESTLOAD_TESTLOAD_20mATestLoad (2UL) /*!< 20 mA test load */

/* Register: REGULATORS_VREGRADIO_ULPCAL */
/* Description: Calibration VREGRADIO ULP regulator */

/* Bits 3..0 : Calibration value */
#define REGULATORS_VREGRADIO_ULPCAL_CAL_Pos (0UL) /*!< Position of CAL field. */
#define REGULATORS_VREGRADIO_ULPCAL_CAL_Msk (0xFUL << REGULATORS_VREGRADIO_ULPCAL_CAL_Pos) /*!< Bit mask of CAL field. */

/* Register: REGULATORS_VREGRADIO_DEBUGLVLP */
/* Description: Debug register - control spare signals in POWER_LVLP */

/* Bits 13..0 : Connected to POWER_LVLP_DEBUG_0V9[12:0] */
#define REGULATORS_VREGRADIO_DEBUGLVLP_DEBUGLVLP_Pos (0UL) /*!< Position of DEBUGLVLP field. */
#define REGULATORS_VREGRADIO_DEBUGLVLP_DEBUGLVLP_Msk (0x3FFFUL << REGULATORS_VREGRADIO_DEBUGLVLP_DEBUGLVLP_Pos) /*!< Bit mask of DEBUGLVLP field. */

/* Register: REGULATORS_VREGRADIO_VOUTREQH */
/* Description: Control the output voltage for RVDD_1V3 when VREQH is asserted. VREQH can be asserted through the network core. */

/* Bits 1..0 : Output voltage */
#define REGULATORS_VREGRADIO_VOUTREQH_VOUT_Pos (0UL) /*!< Position of VOUT field. */
#define REGULATORS_VREGRADIO_VOUTREQH_VOUT_Msk (0x3UL << REGULATORS_VREGRADIO_VOUTREQH_VOUT_Pos) /*!< Bit mask of VOUT field. */
#define REGULATORS_VREGRADIO_VOUTREQH_VOUT_00 (0UL) /*!< 1.0 V */
#define REGULATORS_VREGRADIO_VOUTREQH_VOUT_01 (1UL) /*!< 1.09 V */
#define REGULATORS_VREGRADIO_VOUTREQH_VOUT_10 (2UL) /*!< 1.18 V */
#define REGULATORS_VREGRADIO_VOUTREQH_VOUT_11 (3UL) /*!< 1.27 V */

/* Register: REGULATORS_VREGRADIO_BUCKCALMAXILIM */
/* Description: TBD */

/* Bits 1..0 : TBD */
#define REGULATORS_VREGRADIO_BUCKCALMAXILIM_CALMAXILIM_Pos (0UL) /*!< Position of CALMAXILIM field. */
#define REGULATORS_VREGRADIO_BUCKCALMAXILIM_CALMAXILIM_Msk (0x3UL << REGULATORS_VREGRADIO_BUCKCALMAXILIM_CALMAXILIM_Pos) /*!< Bit mask of CALMAXILIM field. */

/* Register: REGULATORS_VREGRADIO_BUCKCALPWM */
/* Description: TBD */

/* Bits 4..0 : TBD */
#define REGULATORS_VREGRADIO_BUCKCALPWM_CALPWM_Pos (0UL) /*!< Position of CALPWM field. */
#define REGULATORS_VREGRADIO_BUCKCALPWM_CALPWM_Msk (0x1FUL << REGULATORS_VREGRADIO_BUCKCALPWM_CALPWM_Pos) /*!< Bit mask of CALPWM field. */

/* Register: REGULATORS_VREGRADIO_BUCKPFMEN */
/* Description: PFM enable register for VREGRADIO regulator */

/* Bit 0 : Enable or disable PFM in VREGRADIO regulator */
#define REGULATORS_VREGRADIO_BUCKPFMEN_PFMEN_Pos (0UL) /*!< Position of PFMEN field. */
#define REGULATORS_VREGRADIO_BUCKPFMEN_PFMEN_Msk (0x1UL << REGULATORS_VREGRADIO_BUCKPFMEN_PFMEN_Pos) /*!< Bit mask of PFMEN field. */
#define REGULATORS_VREGRADIO_BUCKPFMEN_PFMEN_Disabled (0UL) /*!< Disable PFM */
#define REGULATORS_VREGRADIO_BUCKPFMEN_PFMEN_Enabled (1UL) /*!< Enable PFM (default) */

/* Register: REGULATORS_VREGRADIO_BUCKPFMCAL */
/* Description: TBD */

/* Bits 3..0 : TBD */
#define REGULATORS_VREGRADIO_BUCKPFMCAL_PFMCAL_Pos (0UL) /*!< Position of PFMCAL field. */
#define REGULATORS_VREGRADIO_BUCKPFMCAL_PFMCAL_Msk (0xFUL << REGULATORS_VREGRADIO_BUCKPFMCAL_PFMCAL_Pos) /*!< Bit mask of PFMCAL field. */

/* Register: REGULATORS_VREGRADIO_BUCKPFMICMPCAL */
/* Description: TBD */

/* Bits 2..0 : TBD */
#define REGULATORS_VREGRADIO_BUCKPFMICMPCAL_PFMICMPCAL_Pos (0UL) /*!< Position of PFMICMPCAL field. */
#define REGULATORS_VREGRADIO_BUCKPFMICMPCAL_PFMICMPCAL_Msk (0x7UL << REGULATORS_VREGRADIO_BUCKPFMICMPCAL_PFMICMPCAL_Pos) /*!< Bit mask of PFMICMPCAL field. */

/* Register: REGULATORS_VREGRADIO_BUCKPFMICMPCOUNT */
/* Description: TBD */

/* Bits 15..0 : TBD */
#define REGULATORS_VREGRADIO_BUCKPFMICMPCOUNT_PFMICMPCOUNT_Pos (0UL) /*!< Position of PFMICMPCOUNT field. */
#define REGULATORS_VREGRADIO_BUCKPFMICMPCOUNT_PFMICMPCOUNT_Msk (0xFFFFUL << REGULATORS_VREGRADIO_BUCKPFMICMPCOUNT_PFMICMPCOUNT_Pos) /*!< Bit mask of PFMICMPCOUNT field. */

/* Register: REGULATORS_VREGRADIO_PWRREGTHRESHOLD */
/* Description: Set threshold value of power regulator */

/* Bits 6..0 : Sets the threshold value of power regulator */
#define REGULATORS_VREGRADIO_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Pos (0UL) /*!< Position of PWRREGTHRESHOLD field. */
#define REGULATORS_VREGRADIO_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Msk (0x7FUL << REGULATORS_VREGRADIO_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Pos) /*!< Bit mask of PWRREGTHRESHOLD field. */

/* Register: REGULATORS_VREGRADIO_AVOIDULP */
/* Description: Backdoor to avoid ULP mode */

/* Bit 0 : Backdoor to avoid ULP mode */
#define REGULATORS_VREGRADIO_AVOIDULP_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define REGULATORS_VREGRADIO_AVOIDULP_ENABLE_Msk (0x1UL << REGULATORS_VREGRADIO_AVOIDULP_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define REGULATORS_VREGRADIO_AVOIDULP_ENABLE_Default (0UL) /*!< DVDD FSM will enter ULP mode if no power requests are present. */
#define REGULATORS_VREGRADIO_AVOIDULP_ENABLE_AvoidUlp (1UL) /*!< Avoids ULP mode. By also setting disableDcdcDvdd=0 and disablePfmDvdd=0, PFM mode will be used as the lowest power regulator state. */

/* Register: REGULATORS_VREGNETWORK_VOUT */
/* Description: Control the output voltage for DVDD_0V9 */

/* Bits 3..0 : Output voltage */
#define REGULATORS_VREGNETWORK_VOUT_VOUT_Pos (0UL) /*!< Position of VOUT field. */
#define REGULATORS_VREGNETWORK_VOUT_VOUT_Msk (0xFUL << REGULATORS_VREGNETWORK_VOUT_VOUT_Pos) /*!< Bit mask of VOUT field. */

/* Register: REGULATORS_VREGNETWORK_ULPALWAYSON */
/* Description: Keep DVDD_0V9 ULP regulator on at all times */

/* Bit 0 : ULP always on */
#define REGULATORS_VREGNETWORK_ULPALWAYSON_ULPALWAYSON_Pos (0UL) /*!< Position of ULPALWAYSON field. */
#define REGULATORS_VREGNETWORK_ULPALWAYSON_ULPALWAYSON_Msk (0x1UL << REGULATORS_VREGNETWORK_ULPALWAYSON_ULPALWAYSON_Pos) /*!< Bit mask of ULPALWAYSON field. */
#define REGULATORS_VREGNETWORK_ULPALWAYSON_ULPALWAYSON_Disabled (0UL) /*!< DVDD_0V9 ULP regulator turned off in LDO modes */
#define REGULATORS_VREGNETWORK_ULPALWAYSON_ULPALWAYSON_Enabled (1UL) /*!< DVDD_0V9 ULP regulator always on */

/* Register: REGULATORS_VREGNETWORK_ENFORCEPWRREGMODE */
/* Description: Enable forcing of power mode in power regulator */

/* Bit 0 : Enable forcing of power mode in power regulator */
#define REGULATORS_VREGNETWORK_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos (0UL) /*!< Position of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGNETWORK_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Msk (0x1UL << REGULATORS_VREGNETWORK_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos) /*!< Bit mask of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGNETWORK_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Disabled (0UL) /*!< Power regulator forcing off */
#define REGULATORS_VREGNETWORK_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Enabled (1UL) /*!< Power regulator mode forced to value given by FORCEREGMODE */

/* Register: REGULATORS_VREGNETWORK_FORCEREGMODE */
/* Description: Backdoor register for manual selection of power mode */

/* Bits 2..0 : Force regulator mode to value */
#define REGULATORS_VREGNETWORK_FORCEREGMODE_FORCEREGMODE_Pos (0UL) /*!< Position of FORCEREGMODE field. */
#define REGULATORS_VREGNETWORK_FORCEREGMODE_FORCEREGMODE_Msk (0x7UL << REGULATORS_VREGNETWORK_FORCEREGMODE_FORCEREGMODE_Pos) /*!< Bit mask of FORCEREGMODE field. */
#define REGULATORS_VREGNETWORK_FORCEREGMODE_FORCEREGMODE_Ext (0UL) /*!< Force external */
#define REGULATORS_VREGNETWORK_FORCEREGMODE_FORCEREGMODE_ULP (1UL) /*!< Force ULP mode */
#define REGULATORS_VREGNETWORK_FORCEREGMODE_FORCEREGMODE_LDO (2UL) /*!< Force LDO mode */
#define REGULATORS_VREGNETWORK_FORCEREGMODE_FORCEREGMODE_DCDC (3UL) /*!< Force DC/DC mode */
#define REGULATORS_VREGNETWORK_FORCEREGMODE_FORCEREGMODE_REF (4UL) /*!< Force REF mode */

/* Register: REGULATORS_VREGNETWORK_CURRENTPWRREGMODE */
/* Description: Current mode in the power regulator */

/* Bits 3..0 : Current mode in the power regulator */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos (0UL) /*!< Position of CURRENTPWRREGMODE field. */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Msk (0xFUL << REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos) /*!< Bit mask of CURRENTPWRREGMODE field. */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Ext (0UL) /*!< External */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_DCDC (2UL) /*!< DC/DC */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_REF (3UL) /*!< REF */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_LDO (4UL) /*!< ULP DC/DC */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_LDO_DCDC (6UL) /*!< LDO DC/DC */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_LDO_REF (7UL) /*!< LDO REF */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_ULP (8UL) /*!< ULP */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_DCDC_ULP (10UL) /*!< ULP DC/DC */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_REF_ULP (11UL) /*!< REF ULP */
#define REGULATORS_VREGNETWORK_CURRENTPWRREGMODE_CURRENTPWRREGMODE_ULP_LDO (12UL) /*!< ULP DC/DC */

/* Register: REGULATORS_VREGNETWORK_PWRREGICMPTIMER */
/* Description: Control the stay-alive time for the VREGNETWORK current comparator */

/* Bits 15..0 :   */
#define REGULATORS_VREGNETWORK_PWRREGICMPTIMER_COUNT_Pos (0UL) /*!< Position of COUNT field. */
#define REGULATORS_VREGNETWORK_PWRREGICMPTIMER_COUNT_Msk (0xFFFFUL << REGULATORS_VREGNETWORK_PWRREGICMPTIMER_COUNT_Pos) /*!< Bit mask of COUNT field. */

/* Register: REGULATORS_VREGNETWORK_TESTLOAD */
/* Description: Test load setting for VREGNETWORK */

/* Bits 2..0 : Output load configuration (for test purposes) */
#define REGULATORS_VREGNETWORK_TESTLOAD_TESTLOAD_Pos (0UL) /*!< Position of TESTLOAD field. */
#define REGULATORS_VREGNETWORK_TESTLOAD_TESTLOAD_Msk (0x7UL << REGULATORS_VREGNETWORK_TESTLOAD_TESTLOAD_Pos) /*!< Bit mask of TESTLOAD field. */
#define REGULATORS_VREGNETWORK_TESTLOAD_TESTLOAD_NormalOperation (0UL) /*!< Normal operation (default) */
#define REGULATORS_VREGNETWORK_TESTLOAD_TESTLOAD_1mATestLoad (1UL) /*!< 1 mA test load */
#define REGULATORS_VREGNETWORK_TESTLOAD_TESTLOAD_20mATestLoad (2UL) /*!< 20 mA test load */

/* Register: REGULATORS_VREGNETWORK_ULPCAL */
/* Description: Calibration VREGNETWORK ULP regulator */

/* Bits 3..0 : Calibration value */
#define REGULATORS_VREGNETWORK_ULPCAL_CAL_Pos (0UL) /*!< Position of CAL field. */
#define REGULATORS_VREGNETWORK_ULPCAL_CAL_Msk (0xFUL << REGULATORS_VREGNETWORK_ULPCAL_CAL_Pos) /*!< Bit mask of CAL field. */

/* Register: REGULATORS_VREGNETWORK_ULPICMPCAL */
/* Description: Calibration of current comparator on DVDD_0V9 ULP regulator */

/* Bits 2..0 :   */
#define REGULATORS_VREGNETWORK_ULPICMPCAL_CAL_Pos (0UL) /*!< Position of CAL field. */
#define REGULATORS_VREGNETWORK_ULPICMPCAL_CAL_Msk (0x7UL << REGULATORS_VREGNETWORK_ULPICMPCAL_CAL_Pos) /*!< Bit mask of CAL field. */

/* Register: REGULATORS_VREGNETWORK_BYPASS */
/* Description: Bypass control for VREGNETWORK */

/* Bit 0 : Bypass control */
#define REGULATORS_VREGNETWORK_BYPASS_CAL_Pos (0UL) /*!< Position of CAL field. */
#define REGULATORS_VREGNETWORK_BYPASS_CAL_Msk (0x1UL << REGULATORS_VREGNETWORK_BYPASS_CAL_Pos) /*!< Bit mask of CAL field. */
#define REGULATORS_VREGNETWORK_BYPASS_CAL_NormalMode (0UL) /*!< Normal operation (default) */
#define REGULATORS_VREGNETWORK_BYPASS_CAL_BypassMode (1UL) /*!< Output voltage is 30 mV lower than input voltage */

/* Register: REGULATORS_VREGH_DCDCEN */
/* Description: DC/DC enable register for VREGH */

/* Bit 0 : Enable or disable DC/DC converter */
#define REGULATORS_VREGH_DCDCEN_DCDCEN_Pos (0UL) /*!< Position of DCDCEN field. */
#define REGULATORS_VREGH_DCDCEN_DCDCEN_Msk (0x1UL << REGULATORS_VREGH_DCDCEN_DCDCEN_Pos) /*!< Bit mask of DCDCEN field. */
#define REGULATORS_VREGH_DCDCEN_DCDCEN_Disabled (0UL) /*!< Disable */
#define REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled (1UL) /*!< Enable */

/* Register: REGULATORS_VREGH_BUCKCAL */
/* Description: BUCK_VIO output voltage fine calibration */

/* Bits 4..0 : BUCK_VIO output voltage fine calibration - connected to  BUCKVIO_CAL_0V9[4:0] */
#define REGULATORS_VREGH_BUCKCAL_BUCKCAL_Pos (0UL) /*!< Position of BUCKCAL field. */
#define REGULATORS_VREGH_BUCKCAL_BUCKCAL_Msk (0x1FUL << REGULATORS_VREGH_BUCKCAL_BUCKCAL_Pos) /*!< Bit mask of BUCKCAL field. */

/* Register: REGULATORS_VREGH_ULPICMPTRIM */
/* Description: Trimming of VREG_VIO_ULP load current measurement */

/* Bits 1..0 : Trimming of VREG_VIO_ULP load current measurement */
#define REGULATORS_VREGH_ULPICMPTRIM_ULPICMPTRIM_Pos (0UL) /*!< Position of ULPICMPTRIM field. */
#define REGULATORS_VREGH_ULPICMPTRIM_ULPICMPTRIM_Msk (0x3UL << REGULATORS_VREGH_ULPICMPTRIM_ULPICMPTRIM_Pos) /*!< Bit mask of ULPICMPTRIM field. */
#define REGULATORS_VREGH_ULPICMPTRIM_ULPICMPTRIM_m30pcnt (0UL) /*!< -30  percent */
#define REGULATORS_VREGH_ULPICMPTRIM_ULPICMPTRIM_m10pcnt (1UL) /*!< -10  percent (default) */
#define REGULATORS_VREGH_ULPICMPTRIM_ULPICMPTRIM_p10pcnt (2UL) /*!< +10  percent */
#define REGULATORS_VREGH_ULPICMPTRIM_ULPICMPTRIM_p30pcnt (3UL) /*!< +30  percent */

/* Register: REGULATORS_VREGH_VREGICMPTRIM */
/* Description: Trimming of VREG_VIO load current measurement */

/* Bits 1..0 : Trimming of VREG_VIO load current measurement */
#define REGULATORS_VREGH_VREGICMPTRIM_VREGICMPTRIM_Pos (0UL) /*!< Position of VREGICMPTRIM field. */
#define REGULATORS_VREGH_VREGICMPTRIM_VREGICMPTRIM_Msk (0x3UL << REGULATORS_VREGH_VREGICMPTRIM_VREGICMPTRIM_Pos) /*!< Bit mask of VREGICMPTRIM field. */
#define REGULATORS_VREGH_VREGICMPTRIM_VREGICMPTRIM_m30pcnt (0UL) /*!< -30  percent */
#define REGULATORS_VREGH_VREGICMPTRIM_VREGICMPTRIM_m10pcnt (1UL) /*!< -10  percent (default) */
#define REGULATORS_VREGH_VREGICMPTRIM_VREGICMPTRIM_p10pcnt (2UL) /*!< +10  percent */
#define REGULATORS_VREGH_VREGICMPTRIM_VREGICMPTRIM_p30pcnt (3UL) /*!< +30  percent */

/* Register: REGULATORS_VREGH_BUCKCALILIM */
/* Description: BUCK_VIO output current limit calibration */

/* Bits 1..0 : BUCK_VIO output current limit calibration */
#define REGULATORS_VREGH_BUCKCALILIM_BUCKCALILIM_Pos (0UL) /*!< Position of BUCKCALILIM field. */
#define REGULATORS_VREGH_BUCKCALILIM_BUCKCALILIM_Msk (0x3UL << REGULATORS_VREGH_BUCKCALILIM_BUCKCALILIM_Pos) /*!< Bit mask of BUCKCALILIM field. */
#define REGULATORS_VREGH_BUCKCALILIM_BUCKCALILIM_65mA (0UL) /*!< 65 mA (default) */
#define REGULATORS_VREGH_BUCKCALILIM_BUCKCALILIM_m20pcnt (1UL) /*!< -20  percent */
#define REGULATORS_VREGH_BUCKCALILIM_BUCKCALILIM_p40pcnt (2UL) /*!< +40  percent */
#define REGULATORS_VREGH_BUCKCALILIM_BUCKCALILIM_p20pcnt (3UL) /*!< +20  percent */

/* Register: REGULATORS_VREGH_EXTSUPPLY */
/* Description: Enable external circuitry to be supplied from VDD pin) */

/* Bit 0 : Shadow register for corresponding register in UICR. Enable external circuitry to be supplied from VDD pin (output of REG0 stage). Applicable in high voltage mode only. */
#define REGULATORS_VREGH_EXTSUPPLY_EXTSUPPLY_Pos (0UL) /*!< Position of EXTSUPPLY field. */
#define REGULATORS_VREGH_EXTSUPPLY_EXTSUPPLY_Msk (0x1UL << REGULATORS_VREGH_EXTSUPPLY_EXTSUPPLY_Pos) /*!< Bit mask of EXTSUPPLY field. */
#define REGULATORS_VREGH_EXTSUPPLY_EXTSUPPLY_Disabled (0UL) /*!< No current can be drawn from the VDD pin */
#define REGULATORS_VREGH_EXTSUPPLY_EXTSUPPLY_Enabled (1UL) /*!< It is allowed to supply external circuitry from the VDD pin */

/* Register: REGULATORS_VREGH_RFSHBUCKCAL */
/* Description: Refresh mode trim register */

/* Bits 1..0 : Refresh mode trim register */
#define REGULATORS_VREGH_RFSHBUCKCAL_RFSHBUCKCAL_Pos (0UL) /*!< Position of RFSHBUCKCAL field. */
#define REGULATORS_VREGH_RFSHBUCKCAL_RFSHBUCKCAL_Msk (0x3UL << REGULATORS_VREGH_RFSHBUCKCAL_RFSHBUCKCAL_Pos) /*!< Bit mask of RFSHBUCKCAL field. */

/* Register: REGULATORS_VREGH_RFSHTRIMULP */
/* Description: Trimmed value for refresh mode counter for automatic mode change to ULP */

/* Bits 5..0 : Trimmed value for refresh mode counter for automatic mode change to ULP */
#define REGULATORS_VREGH_RFSHTRIMULP_RFSHTRIMULP_Pos (0UL) /*!< Position of RFSHTRIMULP field. */
#define REGULATORS_VREGH_RFSHTRIMULP_RFSHTRIMULP_Msk (0x3FUL << REGULATORS_VREGH_RFSHTRIMULP_RFSHTRIMULP_Pos) /*!< Bit mask of RFSHTRIMULP field. */

/* Register: REGULATORS_VREGH_RFSHTRIMPWM */
/* Description: Trimmed value for refresh mode counter for automatic mode change to PWM */

/* Bits 5..0 : Trimmed value for refresh mode counter for automatic mode change to PWM */
#define REGULATORS_VREGH_RFSHTRIMPWM_RFSHTRIMPWM_Pos (0UL) /*!< Position of RFSHTRIMPWM field. */
#define REGULATORS_VREGH_RFSHTRIMPWM_RFSHTRIMPWM_Msk (0x3FUL << REGULATORS_VREGH_RFSHTRIMPWM_RFSHTRIMPWM_Pos) /*!< Bit mask of RFSHTRIMPWM field. */

/* Register: REGULATORS_VREGH_RFSHPOLLSEL */
/* Description: Programmable value for counter for poller in PWM mode */

/* Bits 1..0 : Programmable value for counter for poller in PWM mode */
#define REGULATORS_VREGH_RFSHPOLLSEL_RFSHPOLLSEL_Pos (0UL) /*!< Position of RFSHPOLLSEL field. */
#define REGULATORS_VREGH_RFSHPOLLSEL_RFSHPOLLSEL_Msk (0x3UL << REGULATORS_VREGH_RFSHPOLLSEL_RFSHPOLLSEL_Pos) /*!< Bit mask of RFSHPOLLSEL field. */
#define REGULATORS_VREGH_RFSHPOLLSEL_RFSHPOLLSEL_256us (0UL) /*!< 256 us polling interval */
#define REGULATORS_VREGH_RFSHPOLLSEL_RFSHPOLLSEL_512us (1UL) /*!< 512 us polling interval */
#define REGULATORS_VREGH_RFSHPOLLSEL_RFSHPOLLSEL_1024us (2UL) /*!< 1024 us polling interval */
#define REGULATORS_VREGH_RFSHPOLLSEL_RFSHPOLLSEL_Disabled (3UL) /*!< Disabled */

/* Register: REGULATORS_VREGH_BUCKCKDIV2 */
/* Description: Sets BUCK_VIO switching frequency */

/* Bit 0 : Sets BUCK_VIO switching frequency */
#define REGULATORS_VREGH_BUCKCKDIV2_BUCKCKDIV2_Pos (0UL) /*!< Position of BUCKCKDIV2 field. */
#define REGULATORS_VREGH_BUCKCKDIV2_BUCKCKDIV2_Msk (0x1UL << REGULATORS_VREGH_BUCKCKDIV2_BUCKCKDIV2_Pos) /*!< Bit mask of BUCKCKDIV2 field. */
#define REGULATORS_VREGH_BUCKCKDIV2_BUCKCKDIV2_8MHz (0UL) /*!< 8 MHz */
#define REGULATORS_VREGH_BUCKCKDIV2_BUCKCKDIV2_4MHz (1UL) /*!< 4 MHz */

/* Register: REGULATORS_VREGH_POWERCFG */
/* Description: Spare configuration signals for POWER_VIO */

/* Bits 7..0 : Spare configuration signals for POWER_VIO */
#define REGULATORS_VREGH_POWERCFG_POWERCFG_Pos (0UL) /*!< Position of POWERCFG field. */
#define REGULATORS_VREGH_POWERCFG_POWERCFG_Msk (0xFFUL << REGULATORS_VREGH_POWERCFG_POWERCFG_Pos) /*!< Bit mask of POWERCFG field. */

/* Register: REGULATORS_VREGH_LDO2ULPOVERLAPTRIM */
/* Description: Programmable value for VREGH LDO to ULP overlay counter */

/* Bit 0 : Programmable value for VREGH LDO to ULP overlay counter. Value loaded from FICR-&gt;CHIPCONF06.LDOTOULPOVERLAPTRIM. */
#define REGULATORS_VREGH_LDO2ULPOVERLAPTRIM_LDO2ULPOVERLAPTRIM_Pos (0UL) /*!< Position of LDO2ULPOVERLAPTRIM field. */
#define REGULATORS_VREGH_LDO2ULPOVERLAPTRIM_LDO2ULPOVERLAPTRIM_Msk (0x1UL << REGULATORS_VREGH_LDO2ULPOVERLAPTRIM_LDO2ULPOVERLAPTRIM_Pos) /*!< Bit mask of LDO2ULPOVERLAPTRIM field. */
#define REGULATORS_VREGH_LDO2ULPOVERLAPTRIM_LDO2ULPOVERLAPTRIM_512us (0UL) /*!< 512 us overlay */
#define REGULATORS_VREGH_LDO2ULPOVERLAPTRIM_LDO2ULPOVERLAPTRIM_1024us (1UL) /*!< 1024 us overlay */

/* Register: REGULATORS_VREGH_ULPDISABLE */
/* Description: VREGH ULP mode */

/* Bit 0 : VREGH ULP mode */
#define REGULATORS_VREGH_ULPDISABLE_ULPDISABLE_Pos (0UL) /*!< Position of ULPDISABLE field. */
#define REGULATORS_VREGH_ULPDISABLE_ULPDISABLE_Msk (0x1UL << REGULATORS_VREGH_ULPDISABLE_ULPDISABLE_Pos) /*!< Bit mask of ULPDISABLE field. */
#define REGULATORS_VREGH_ULPDISABLE_ULPDISABLE_Auto (0UL) /*!< ULP mode is allowed */
#define REGULATORS_VREGH_ULPDISABLE_ULPDISABLE_Disabled (1UL) /*!< ULP mode is not allowed */

/* Register: REGULATORS_VREGH_CURRENTPWRREGMODE */
/* Description: Current mode in the VREGH  power regulator */

/* Bits 3..0 : Current mode in the VREGH power regulator */
#define REGULATORS_VREGH_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos (0UL) /*!< Position of CURRENTPWRREGMODE field. */
#define REGULATORS_VREGH_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Msk (0xFUL << REGULATORS_VREGH_CURRENTPWRREGMODE_CURRENTPWRREGMODE_Pos) /*!< Bit mask of CURRENTPWRREGMODE field. */

/* Register: REGULATORS_VREGH_VDDHDETECTED */
/* Description: VDDH is detected */

/* Bit 0 : VDDH is detected */
#define REGULATORS_VREGH_VDDHDETECTED_VDDHDETECTED_Pos (0UL) /*!< Position of VDDHDETECTED field. */
#define REGULATORS_VREGH_VDDHDETECTED_VDDHDETECTED_Msk (0x1UL << REGULATORS_VREGH_VDDHDETECTED_VDDHDETECTED_Pos) /*!< Bit mask of VDDHDETECTED field. */
#define REGULATORS_VREGH_VDDHDETECTED_VDDHDETECTED_NotPresent (0UL) /*!< VDDH not detected */
#define REGULATORS_VREGH_VDDHDETECTED_VDDHDETECTED_Present (1UL) /*!< VDDH detected */

/* Register: REGULATORS_VREGH_EXTSILENTEN */
/* Description: Enable silent external DC/DC supply. This register only applies when DC/DC is enabled in the VREGHDCDCEN register. Entering silent mode forbids the use of DC/DC refresh mode internally in VREGH. */

/* Bit 0 : Enable silent external DC/DC supply */
#define REGULATORS_VREGH_EXTSILENTEN_EXTSILENTEN_Pos (0UL) /*!< Position of EXTSILENTEN field. */
#define REGULATORS_VREGH_EXTSILENTEN_EXTSILENTEN_Msk (0x1UL << REGULATORS_VREGH_EXTSILENTEN_EXTSILENTEN_Pos) /*!< Bit mask of EXTSILENTEN field. */
#define REGULATORS_VREGH_EXTSILENTEN_EXTSILENTEN_Disabled (0UL) /*!< Disable */
#define REGULATORS_VREGH_EXTSILENTEN_EXTSILENTEN_Enabled (1UL) /*!< Enable */

/* Register: REGULATORS_VREGH_ENFORCEPWRREGMODE */
/* Description: Enable forcing of power mode in power regulator */

/* Bit 0 : Enable forcing of power mode in power regulator */
#define REGULATORS_VREGH_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos (0UL) /*!< Position of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGH_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Msk (0x1UL << REGULATORS_VREGH_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Pos) /*!< Bit mask of ENFORCEPWRREGMODE field. */
#define REGULATORS_VREGH_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Disabled (0UL) /*!< Power regulator forcing off */
#define REGULATORS_VREGH_ENFORCEPWRREGMODE_ENFORCEPWRREGMODE_Enabled (1UL) /*!< Power regulator mode forced to value given by FORCEREGMODE */

/* Register: REGULATORS_VREGH_FORCEREGMODE */
/* Description: Force a specific power mode for VREGH */

/* Bits 7..0 : Force a specific power mode */
#define REGULATORS_VREGH_FORCEREGMODE_FORCEPWRREGMODE_Pos (0UL) /*!< Position of FORCEPWRREGMODE field. */
#define REGULATORS_VREGH_FORCEREGMODE_FORCEPWRREGMODE_Msk (0xFFUL << REGULATORS_VREGH_FORCEREGMODE_FORCEPWRREGMODE_Pos) /*!< Bit mask of FORCEPWRREGMODE field. */

/* Register: REGULATORS_VREGH_PWRREGTHRESHOLD */
/* Description: Set threshold value of power regulator */

/* Bits 6..0 : Sets the threshold value of power regulator */
#define REGULATORS_VREGH_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Pos (0UL) /*!< Position of PWRREGTHRESHOLD field. */
#define REGULATORS_VREGH_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Msk (0x7FUL << REGULATORS_VREGH_PWRREGTHRESHOLD_PWRREGTHRESHOLD_Pos) /*!< Bit mask of PWRREGTHRESHOLD field. */

/* Register: REGULATORS_DISABLEPACSYSTEMOFFACK */
/* Description: Enable or disable System OFF ack from PAC */

/* Bit 0 : Enable or disable System OFF ack from PAC */
#define REGULATORS_DISABLEPACSYSTEMOFFACK_DISABLE_Pos (0UL) /*!< Position of DISABLE field. */
#define REGULATORS_DISABLEPACSYSTEMOFFACK_DISABLE_Msk (0x1UL << REGULATORS_DISABLEPACSYSTEMOFFACK_DISABLE_Pos) /*!< Bit mask of DISABLE field. */
#define REGULATORS_DISABLEPACSYSTEMOFFACK_DISABLE_Enabled (0UL) /*!< Enable ack */
#define REGULATORS_DISABLEPACSYSTEMOFFACK_DISABLE_Disabled (1UL) /*!< Disable ack */

/* Register: REGULATORS_DISABLESRAMSYSTEMOFFACK */
/* Description: Enable or disable System OFF ack from SRAM */

/* Bit 0 : Enable or disable System OFF ack from SRAM */
#define REGULATORS_DISABLESRAMSYSTEMOFFACK_DISABLE_Pos (0UL) /*!< Position of DISABLE field. */
#define REGULATORS_DISABLESRAMSYSTEMOFFACK_DISABLE_Msk (0x1UL << REGULATORS_DISABLESRAMSYSTEMOFFACK_DISABLE_Pos) /*!< Bit mask of DISABLE field. */
#define REGULATORS_DISABLESRAMSYSTEMOFFACK_DISABLE_Enabled (0UL) /*!< Enable ack */
#define REGULATORS_DISABLESRAMSYSTEMOFFACK_DISABLE_Disabled (1UL) /*!< Disable ack */

/* Register: REGULATORS_DISABLENVMSYSTEMOFFACK */
/* Description: Enable or disable System OFF ack from NVM */

/* Bit 0 : Enable or disable System OFF ack from NVM */
#define REGULATORS_DISABLENVMSYSTEMOFFACK_DISABLE_Pos (0UL) /*!< Position of DISABLE field. */
#define REGULATORS_DISABLENVMSYSTEMOFFACK_DISABLE_Msk (0x1UL << REGULATORS_DISABLENVMSYSTEMOFFACK_DISABLE_Pos) /*!< Bit mask of DISABLE field. */
#define REGULATORS_DISABLENVMSYSTEMOFFACK_DISABLE_Enabled (0UL) /*!< Enable ack */
#define REGULATORS_DISABLENVMSYSTEMOFFACK_DISABLE_Disabled (1UL) /*!< Disable ack */


/* Peripheral: RESET */
/* Description: Reset control 0 */

/* Register: RESET_RESETREAS */
/* Description: Reset reason */

/* Bit 26 : Reset after wakeup from System OFF mode due to VBUS rising into valid range */
#define RESET_RESETREAS_VBUS_Pos (26UL) /*!< Position of VBUS field. */
#define RESET_RESETREAS_VBUS_Msk (0x1UL << RESET_RESETREAS_VBUS_Pos) /*!< Bit mask of VBUS field. */
#define RESET_RESETREAS_VBUS_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_VBUS_Detected (1UL) /*!< Detected */

/* Bit 25 : Reset from application watchdog timer 1 detected */
#define RESET_RESETREAS_DOG1_Pos (25UL) /*!< Position of DOG1 field. */
#define RESET_RESETREAS_DOG1_Msk (0x1UL << RESET_RESETREAS_DOG1_Pos) /*!< Bit mask of DOG1 field. */
#define RESET_RESETREAS_DOG1_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_DOG1_Detected (1UL) /*!< Detected */

/* Bit 24 : Reset after wakeup from System OFF mode due to NFC field being detected */
#define RESET_RESETREAS_NFC_Pos (24UL) /*!< Position of NFC field. */
#define RESET_RESETREAS_NFC_Msk (0x1UL << RESET_RESETREAS_NFC_Pos) /*!< Bit mask of NFC field. */
#define RESET_RESETREAS_NFC_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_NFC_Detected (1UL) /*!< Detected */

/* Bit 7 : Reset due to wakeup from System OFF mode when wakeup is triggered by entering the Debug Interface mode */
#define RESET_RESETREAS_DIF_Pos (7UL) /*!< Position of DIF field. */
#define RESET_RESETREAS_DIF_Msk (0x1UL << RESET_RESETREAS_DIF_Pos) /*!< Bit mask of DIF field. */
#define RESET_RESETREAS_DIF_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_DIF_Detected (1UL) /*!< Detected */

/* Bit 6 : Reset due to wakeup from System OFF mode when wakeup is triggered by ANADETECT signal from LPCOMP */
#define RESET_RESETREAS_LPCOMP_Pos (6UL) /*!< Position of LPCOMP field. */
#define RESET_RESETREAS_LPCOMP_Msk (0x1UL << RESET_RESETREAS_LPCOMP_Pos) /*!< Bit mask of LPCOMP field. */
#define RESET_RESETREAS_LPCOMP_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_LPCOMP_Detected (1UL) /*!< Detected */

/* Bit 5 : Reset due to wakeup from System OFF mode when wakeup is triggered by DETECT signal from GPIO */
#define RESET_RESETREAS_OFF_Pos (5UL) /*!< Position of OFF field. */
#define RESET_RESETREAS_OFF_Msk (0x1UL << RESET_RESETREAS_OFF_Pos) /*!< Bit mask of OFF field. */
#define RESET_RESETREAS_OFF_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_OFF_Detected (1UL) /*!< Detected */

/* Bit 4 : Reset from application CPU lockup detected */
#define RESET_RESETREAS_LOCKUP_Pos (4UL) /*!< Position of LOCKUP field. */
#define RESET_RESETREAS_LOCKUP_Msk (0x1UL << RESET_RESETREAS_LOCKUP_Pos) /*!< Bit mask of LOCKUP field. */
#define RESET_RESETREAS_LOCKUP_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_LOCKUP_Detected (1UL) /*!< Detected */

/* Bit 3 : Reset from application soft reset detected */
#define RESET_RESETREAS_SREQ_Pos (3UL) /*!< Position of SREQ field. */
#define RESET_RESETREAS_SREQ_Msk (0x1UL << RESET_RESETREAS_SREQ_Pos) /*!< Bit mask of SREQ field. */
#define RESET_RESETREAS_SREQ_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_SREQ_Detected (1UL) /*!< Detected */

/* Bit 2 : Reset from application CTRL-AP detected */
#define RESET_RESETREAS_CTRLAP_Pos (2UL) /*!< Position of CTRLAP field. */
#define RESET_RESETREAS_CTRLAP_Msk (0x1UL << RESET_RESETREAS_CTRLAP_Pos) /*!< Bit mask of CTRLAP field. */
#define RESET_RESETREAS_CTRLAP_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_CTRLAP_Detected (1UL) /*!< Detected */

/* Bit 1 : Reset from application watchdog timer 0 detected */
#define RESET_RESETREAS_DOG0_Pos (1UL) /*!< Position of DOG0 field. */
#define RESET_RESETREAS_DOG0_Msk (0x1UL << RESET_RESETREAS_DOG0_Pos) /*!< Bit mask of DOG0 field. */
#define RESET_RESETREAS_DOG0_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_DOG0_Detected (1UL) /*!< Detected */

/* Bit 0 : Reset from pin reset detected */
#define RESET_RESETREAS_RESETPIN_Pos (0UL) /*!< Position of RESETPIN field. */
#define RESET_RESETREAS_RESETPIN_Msk (0x1UL << RESET_RESETREAS_RESETPIN_Pos) /*!< Bit mask of RESETPIN field. */
#define RESET_RESETREAS_RESETPIN_NotDetected (0UL) /*!< Not detected */
#define RESET_RESETREAS_RESETPIN_Detected (1UL) /*!< Detected */

/* Register: RESET_POWERSTATUS_NETWORK */
/* Description: Network core power status */

/* Bit 0 : Network core power status */
#define RESET_POWERSTATUS_NETWORK_POWER_Pos (0UL) /*!< Position of POWER field. */
#define RESET_POWERSTATUS_NETWORK_POWER_Msk (0x1UL << RESET_POWERSTATUS_NETWORK_POWER_Pos) /*!< Bit mask of POWER field. */
#define RESET_POWERSTATUS_NETWORK_POWER_OFF (0UL) /*!< Network core is powered off */
#define RESET_POWERSTATUS_NETWORK_POWER_ON (1UL) /*!< Network core is powered on */

/* Register: RESET_NETWORK_RESETCPU */
/* Description: Reset network CPU */

/* Bit 0 : CPU soft reset */
#define RESET_NETWORK_RESETCPU_RESETCPU_Pos (0UL) /*!< Position of RESETCPU field. */
#define RESET_NETWORK_RESETCPU_RESETCPU_Msk (0x1UL << RESET_NETWORK_RESETCPU_RESETCPU_Pos) /*!< Bit mask of RESETCPU field. */
#define RESET_NETWORK_RESETCPU_RESETCPU_Release (0UL) /*!< Release CPU reset signal */
#define RESET_NETWORK_RESETCPU_RESETCPU_Hold (1UL) /*!< Hold CPU reset signal */

/* Register: RESET_NETWORK_FORCEOFF */
/* Description: Force network core off */

/* Bit 0 : Force network core off */
#define RESET_NETWORK_FORCEOFF_FORCEOFF_Pos (0UL) /*!< Position of FORCEOFF field. */
#define RESET_NETWORK_FORCEOFF_FORCEOFF_Msk (0x1UL << RESET_NETWORK_FORCEOFF_FORCEOFF_Pos) /*!< Bit mask of FORCEOFF field. */
#define RESET_NETWORK_FORCEOFF_FORCEOFF_Release (0UL) /*!< Release Force-OFF */
#define RESET_NETWORK_FORCEOFF_FORCEOFF_Hold (1UL) /*!< Hold Force-OFF */

/* Register: RESET_NETWORK_FORCEON */
/* Description: Force on network core */

/* Bit 0 : Forces on power and clock in network core */
#define RESET_NETWORK_FORCEON_FORCEON_Pos (0UL) /*!< Position of FORCEON field. */
#define RESET_NETWORK_FORCEON_FORCEON_Msk (0x1UL << RESET_NETWORK_FORCEON_FORCEON_Pos) /*!< Bit mask of FORCEON field. */
#define RESET_NETWORK_FORCEON_FORCEON_Release (0UL) /*!< Release force on signal */
#define RESET_NETWORK_FORCEON_FORCEON_Hold (1UL) /*!< Hold force on signal */


/* Peripheral: RTC */
/* Description: Real-time counter 0 */

/* Register: RTC_TASKS_START */
/* Description: Start RTC counter */

/* Bit 0 : Start RTC counter */
#define RTC_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define RTC_TASKS_START_TASKS_START_Msk (0x1UL << RTC_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define RTC_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: RTC_TASKS_STOP */
/* Description: Stop RTC counter */

/* Bit 0 : Stop RTC counter */
#define RTC_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define RTC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << RTC_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define RTC_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: RTC_TASKS_CLEAR */
/* Description: Clear RTC counter */

/* Bit 0 : Clear RTC counter */
#define RTC_TASKS_CLEAR_TASKS_CLEAR_Pos (0UL) /*!< Position of TASKS_CLEAR field. */
#define RTC_TASKS_CLEAR_TASKS_CLEAR_Msk (0x1UL << RTC_TASKS_CLEAR_TASKS_CLEAR_Pos) /*!< Bit mask of TASKS_CLEAR field. */
#define RTC_TASKS_CLEAR_TASKS_CLEAR_Trigger (1UL) /*!< Trigger task */

/* Register: RTC_TASKS_TRIGOVRFLW */
/* Description: Set counter to 0xFFFFF0 */

/* Bit 0 : Set counter to 0xFFFFF0 */
#define RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Pos (0UL) /*!< Position of TASKS_TRIGOVRFLW field. */
#define RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Msk (0x1UL << RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Pos) /*!< Bit mask of TASKS_TRIGOVRFLW field. */
#define RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Trigger (1UL) /*!< Trigger task */

/* Register: RTC_TASKS_CAPTURE */
/* Description: Description collection: Capture RTC counter to CC[n] register */

/* Bit 0 : Capture RTC counter to CC[n] register */
#define RTC_TASKS_CAPTURE_TASKS_CAPTURE_Pos (0UL) /*!< Position of TASKS_CAPTURE field. */
#define RTC_TASKS_CAPTURE_TASKS_CAPTURE_Msk (0x1UL << RTC_TASKS_CAPTURE_TASKS_CAPTURE_Pos) /*!< Bit mask of TASKS_CAPTURE field. */
#define RTC_TASKS_CAPTURE_TASKS_CAPTURE_Trigger (1UL) /*!< Trigger task */

/* Register: RTC_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define RTC_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define RTC_SUBSCRIBE_START_EN_Msk (0x1UL << RTC_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define RTC_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define RTC_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define RTC_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RTC_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << RTC_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RTC_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define RTC_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define RTC_SUBSCRIBE_STOP_EN_Msk (0x1UL << RTC_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define RTC_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define RTC_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define RTC_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RTC_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << RTC_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RTC_SUBSCRIBE_CLEAR */
/* Description: Subscribe configuration for task CLEAR */

/* Bit 31 :   */
#define RTC_SUBSCRIBE_CLEAR_EN_Pos (31UL) /*!< Position of EN field. */
#define RTC_SUBSCRIBE_CLEAR_EN_Msk (0x1UL << RTC_SUBSCRIBE_CLEAR_EN_Pos) /*!< Bit mask of EN field. */
#define RTC_SUBSCRIBE_CLEAR_EN_Disabled (0UL) /*!< Disable subscription */
#define RTC_SUBSCRIBE_CLEAR_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CLEAR will subscribe to */
#define RTC_SUBSCRIBE_CLEAR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RTC_SUBSCRIBE_CLEAR_CHIDX_Msk (0xFFUL << RTC_SUBSCRIBE_CLEAR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RTC_SUBSCRIBE_TRIGOVRFLW */
/* Description: Subscribe configuration for task TRIGOVRFLW */

/* Bit 31 :   */
#define RTC_SUBSCRIBE_TRIGOVRFLW_EN_Pos (31UL) /*!< Position of EN field. */
#define RTC_SUBSCRIBE_TRIGOVRFLW_EN_Msk (0x1UL << RTC_SUBSCRIBE_TRIGOVRFLW_EN_Pos) /*!< Bit mask of EN field. */
#define RTC_SUBSCRIBE_TRIGOVRFLW_EN_Disabled (0UL) /*!< Disable subscription */
#define RTC_SUBSCRIBE_TRIGOVRFLW_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task TRIGOVRFLW will subscribe to */
#define RTC_SUBSCRIBE_TRIGOVRFLW_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RTC_SUBSCRIBE_TRIGOVRFLW_CHIDX_Msk (0xFFUL << RTC_SUBSCRIBE_TRIGOVRFLW_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RTC_SUBSCRIBE_CAPTURE */
/* Description: Description collection: Subscribe configuration for task CAPTURE[n] */

/* Bit 31 :   */
#define RTC_SUBSCRIBE_CAPTURE_EN_Pos (31UL) /*!< Position of EN field. */
#define RTC_SUBSCRIBE_CAPTURE_EN_Msk (0x1UL << RTC_SUBSCRIBE_CAPTURE_EN_Pos) /*!< Bit mask of EN field. */
#define RTC_SUBSCRIBE_CAPTURE_EN_Disabled (0UL) /*!< Disable subscription */
#define RTC_SUBSCRIBE_CAPTURE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CAPTURE[n] will subscribe to */
#define RTC_SUBSCRIBE_CAPTURE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RTC_SUBSCRIBE_CAPTURE_CHIDX_Msk (0xFFUL << RTC_SUBSCRIBE_CAPTURE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RTC_EVENTS_TICK */
/* Description: Event on counter increment */

/* Bit 0 : Event on counter increment */
#define RTC_EVENTS_TICK_EVENTS_TICK_Pos (0UL) /*!< Position of EVENTS_TICK field. */
#define RTC_EVENTS_TICK_EVENTS_TICK_Msk (0x1UL << RTC_EVENTS_TICK_EVENTS_TICK_Pos) /*!< Bit mask of EVENTS_TICK field. */
#define RTC_EVENTS_TICK_EVENTS_TICK_NotGenerated (0UL) /*!< Event not generated */
#define RTC_EVENTS_TICK_EVENTS_TICK_Generated (1UL) /*!< Event generated */

/* Register: RTC_EVENTS_OVRFLW */
/* Description: Event on counter overflow */

/* Bit 0 : Event on counter overflow */
#define RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Pos (0UL) /*!< Position of EVENTS_OVRFLW field. */
#define RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Msk (0x1UL << RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Pos) /*!< Bit mask of EVENTS_OVRFLW field. */
#define RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_NotGenerated (0UL) /*!< Event not generated */
#define RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Generated (1UL) /*!< Event generated */

/* Register: RTC_EVENTS_COMPARE */
/* Description: Description collection: Compare event on CC[n] match */

/* Bit 0 : Compare event on CC[n] match */
#define RTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos (0UL) /*!< Position of EVENTS_COMPARE field. */
#define RTC_EVENTS_COMPARE_EVENTS_COMPARE_Msk (0x1UL << RTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos) /*!< Bit mask of EVENTS_COMPARE field. */
#define RTC_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated (0UL) /*!< Event not generated */
#define RTC_EVENTS_COMPARE_EVENTS_COMPARE_Generated (1UL) /*!< Event generated */

/* Register: RTC_PUBLISH_TICK */
/* Description: Publish configuration for event TICK */

/* Bit 31 :   */
#define RTC_PUBLISH_TICK_EN_Pos (31UL) /*!< Position of EN field. */
#define RTC_PUBLISH_TICK_EN_Msk (0x1UL << RTC_PUBLISH_TICK_EN_Pos) /*!< Bit mask of EN field. */
#define RTC_PUBLISH_TICK_EN_Disabled (0UL) /*!< Disable publishing */
#define RTC_PUBLISH_TICK_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TICK will publish to. */
#define RTC_PUBLISH_TICK_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RTC_PUBLISH_TICK_CHIDX_Msk (0xFFUL << RTC_PUBLISH_TICK_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RTC_PUBLISH_OVRFLW */
/* Description: Publish configuration for event OVRFLW */

/* Bit 31 :   */
#define RTC_PUBLISH_OVRFLW_EN_Pos (31UL) /*!< Position of EN field. */
#define RTC_PUBLISH_OVRFLW_EN_Msk (0x1UL << RTC_PUBLISH_OVRFLW_EN_Pos) /*!< Bit mask of EN field. */
#define RTC_PUBLISH_OVRFLW_EN_Disabled (0UL) /*!< Disable publishing */
#define RTC_PUBLISH_OVRFLW_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event OVRFLW will publish to. */
#define RTC_PUBLISH_OVRFLW_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RTC_PUBLISH_OVRFLW_CHIDX_Msk (0xFFUL << RTC_PUBLISH_OVRFLW_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RTC_PUBLISH_COMPARE */
/* Description: Description collection: Publish configuration for event COMPARE[n] */

/* Bit 31 :   */
#define RTC_PUBLISH_COMPARE_EN_Pos (31UL) /*!< Position of EN field. */
#define RTC_PUBLISH_COMPARE_EN_Msk (0x1UL << RTC_PUBLISH_COMPARE_EN_Pos) /*!< Bit mask of EN field. */
#define RTC_PUBLISH_COMPARE_EN_Disabled (0UL) /*!< Disable publishing */
#define RTC_PUBLISH_COMPARE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event COMPARE[n] will publish to. */
#define RTC_PUBLISH_COMPARE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define RTC_PUBLISH_COMPARE_CHIDX_Msk (0xFFUL << RTC_PUBLISH_COMPARE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: RTC_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 3 : Shortcut between event COMPARE[3] and task CLEAR */
#define RTC_SHORTS_COMPARE3_CLEAR_Pos (3UL) /*!< Position of COMPARE3_CLEAR field. */
#define RTC_SHORTS_COMPARE3_CLEAR_Msk (0x1UL << RTC_SHORTS_COMPARE3_CLEAR_Pos) /*!< Bit mask of COMPARE3_CLEAR field. */
#define RTC_SHORTS_COMPARE3_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define RTC_SHORTS_COMPARE3_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Bit 2 : Shortcut between event COMPARE[2] and task CLEAR */
#define RTC_SHORTS_COMPARE2_CLEAR_Pos (2UL) /*!< Position of COMPARE2_CLEAR field. */
#define RTC_SHORTS_COMPARE2_CLEAR_Msk (0x1UL << RTC_SHORTS_COMPARE2_CLEAR_Pos) /*!< Bit mask of COMPARE2_CLEAR field. */
#define RTC_SHORTS_COMPARE2_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define RTC_SHORTS_COMPARE2_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Bit 1 : Shortcut between event COMPARE[1] and task CLEAR */
#define RTC_SHORTS_COMPARE1_CLEAR_Pos (1UL) /*!< Position of COMPARE1_CLEAR field. */
#define RTC_SHORTS_COMPARE1_CLEAR_Msk (0x1UL << RTC_SHORTS_COMPARE1_CLEAR_Pos) /*!< Bit mask of COMPARE1_CLEAR field. */
#define RTC_SHORTS_COMPARE1_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define RTC_SHORTS_COMPARE1_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event COMPARE[0] and task CLEAR */
#define RTC_SHORTS_COMPARE0_CLEAR_Pos (0UL) /*!< Position of COMPARE0_CLEAR field. */
#define RTC_SHORTS_COMPARE0_CLEAR_Msk (0x1UL << RTC_SHORTS_COMPARE0_CLEAR_Pos) /*!< Bit mask of COMPARE0_CLEAR field. */
#define RTC_SHORTS_COMPARE0_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define RTC_SHORTS_COMPARE0_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Register: RTC_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 19 : Enable or disable interrupt for event COMPARE[3] */
#define RTC_INTEN_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define RTC_INTEN_COMPARE3_Msk (0x1UL << RTC_INTEN_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define RTC_INTEN_COMPARE3_Disabled (0UL) /*!< Disable */
#define RTC_INTEN_COMPARE3_Enabled (1UL) /*!< Enable */

/* Bit 18 : Enable or disable interrupt for event COMPARE[2] */
#define RTC_INTEN_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define RTC_INTEN_COMPARE2_Msk (0x1UL << RTC_INTEN_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define RTC_INTEN_COMPARE2_Disabled (0UL) /*!< Disable */
#define RTC_INTEN_COMPARE2_Enabled (1UL) /*!< Enable */

/* Bit 17 : Enable or disable interrupt for event COMPARE[1] */
#define RTC_INTEN_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define RTC_INTEN_COMPARE1_Msk (0x1UL << RTC_INTEN_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define RTC_INTEN_COMPARE1_Disabled (0UL) /*!< Disable */
#define RTC_INTEN_COMPARE1_Enabled (1UL) /*!< Enable */

/* Bit 16 : Enable or disable interrupt for event COMPARE[0] */
#define RTC_INTEN_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define RTC_INTEN_COMPARE0_Msk (0x1UL << RTC_INTEN_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define RTC_INTEN_COMPARE0_Disabled (0UL) /*!< Disable */
#define RTC_INTEN_COMPARE0_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event OVRFLW */
#define RTC_INTEN_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
#define RTC_INTEN_OVRFLW_Msk (0x1UL << RTC_INTEN_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
#define RTC_INTEN_OVRFLW_Disabled (0UL) /*!< Disable */
#define RTC_INTEN_OVRFLW_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event TICK */
#define RTC_INTEN_TICK_Pos (0UL) /*!< Position of TICK field. */
#define RTC_INTEN_TICK_Msk (0x1UL << RTC_INTEN_TICK_Pos) /*!< Bit mask of TICK field. */
#define RTC_INTEN_TICK_Disabled (0UL) /*!< Disable */
#define RTC_INTEN_TICK_Enabled (1UL) /*!< Enable */

/* Register: RTC_INTENSET */
/* Description: Enable interrupt */

/* Bit 19 : Write '1' to enable interrupt for event COMPARE[3] */
#define RTC_INTENSET_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define RTC_INTENSET_COMPARE3_Msk (0x1UL << RTC_INTENSET_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define RTC_INTENSET_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENSET_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENSET_COMPARE3_Set (1UL) /*!< Enable */

/* Bit 18 : Write '1' to enable interrupt for event COMPARE[2] */
#define RTC_INTENSET_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define RTC_INTENSET_COMPARE2_Msk (0x1UL << RTC_INTENSET_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define RTC_INTENSET_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENSET_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENSET_COMPARE2_Set (1UL) /*!< Enable */

/* Bit 17 : Write '1' to enable interrupt for event COMPARE[1] */
#define RTC_INTENSET_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define RTC_INTENSET_COMPARE1_Msk (0x1UL << RTC_INTENSET_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define RTC_INTENSET_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENSET_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENSET_COMPARE1_Set (1UL) /*!< Enable */

/* Bit 16 : Write '1' to enable interrupt for event COMPARE[0] */
#define RTC_INTENSET_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define RTC_INTENSET_COMPARE0_Msk (0x1UL << RTC_INTENSET_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define RTC_INTENSET_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENSET_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENSET_COMPARE0_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event OVRFLW */
#define RTC_INTENSET_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
#define RTC_INTENSET_OVRFLW_Msk (0x1UL << RTC_INTENSET_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
#define RTC_INTENSET_OVRFLW_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENSET_OVRFLW_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENSET_OVRFLW_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event TICK */
#define RTC_INTENSET_TICK_Pos (0UL) /*!< Position of TICK field. */
#define RTC_INTENSET_TICK_Msk (0x1UL << RTC_INTENSET_TICK_Pos) /*!< Bit mask of TICK field. */
#define RTC_INTENSET_TICK_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENSET_TICK_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENSET_TICK_Set (1UL) /*!< Enable */

/* Register: RTC_INTENCLR */
/* Description: Disable interrupt */

/* Bit 19 : Write '1' to disable interrupt for event COMPARE[3] */
#define RTC_INTENCLR_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define RTC_INTENCLR_COMPARE3_Msk (0x1UL << RTC_INTENCLR_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define RTC_INTENCLR_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENCLR_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENCLR_COMPARE3_Clear (1UL) /*!< Disable */

/* Bit 18 : Write '1' to disable interrupt for event COMPARE[2] */
#define RTC_INTENCLR_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define RTC_INTENCLR_COMPARE2_Msk (0x1UL << RTC_INTENCLR_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define RTC_INTENCLR_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENCLR_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENCLR_COMPARE2_Clear (1UL) /*!< Disable */

/* Bit 17 : Write '1' to disable interrupt for event COMPARE[1] */
#define RTC_INTENCLR_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define RTC_INTENCLR_COMPARE1_Msk (0x1UL << RTC_INTENCLR_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define RTC_INTENCLR_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENCLR_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENCLR_COMPARE1_Clear (1UL) /*!< Disable */

/* Bit 16 : Write '1' to disable interrupt for event COMPARE[0] */
#define RTC_INTENCLR_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define RTC_INTENCLR_COMPARE0_Msk (0x1UL << RTC_INTENCLR_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define RTC_INTENCLR_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENCLR_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENCLR_COMPARE0_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event OVRFLW */
#define RTC_INTENCLR_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
#define RTC_INTENCLR_OVRFLW_Msk (0x1UL << RTC_INTENCLR_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
#define RTC_INTENCLR_OVRFLW_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENCLR_OVRFLW_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENCLR_OVRFLW_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event TICK */
#define RTC_INTENCLR_TICK_Pos (0UL) /*!< Position of TICK field. */
#define RTC_INTENCLR_TICK_Msk (0x1UL << RTC_INTENCLR_TICK_Pos) /*!< Bit mask of TICK field. */
#define RTC_INTENCLR_TICK_Disabled (0UL) /*!< Read: Disabled */
#define RTC_INTENCLR_TICK_Enabled (1UL) /*!< Read: Enabled */
#define RTC_INTENCLR_TICK_Clear (1UL) /*!< Disable */

/* Register: RTC_EVTEN */
/* Description: Enable or disable event routing */

/* Bit 19 : Enable or disable event routing for event COMPARE[3] */
#define RTC_EVTEN_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define RTC_EVTEN_COMPARE3_Msk (0x1UL << RTC_EVTEN_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define RTC_EVTEN_COMPARE3_Disabled (0UL) /*!< Disable */
#define RTC_EVTEN_COMPARE3_Enabled (1UL) /*!< Enable */

/* Bit 18 : Enable or disable event routing for event COMPARE[2] */
#define RTC_EVTEN_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define RTC_EVTEN_COMPARE2_Msk (0x1UL << RTC_EVTEN_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define RTC_EVTEN_COMPARE2_Disabled (0UL) /*!< Disable */
#define RTC_EVTEN_COMPARE2_Enabled (1UL) /*!< Enable */

/* Bit 17 : Enable or disable event routing for event COMPARE[1] */
#define RTC_EVTEN_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define RTC_EVTEN_COMPARE1_Msk (0x1UL << RTC_EVTEN_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define RTC_EVTEN_COMPARE1_Disabled (0UL) /*!< Disable */
#define RTC_EVTEN_COMPARE1_Enabled (1UL) /*!< Enable */

/* Bit 16 : Enable or disable event routing for event COMPARE[0] */
#define RTC_EVTEN_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define RTC_EVTEN_COMPARE0_Msk (0x1UL << RTC_EVTEN_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define RTC_EVTEN_COMPARE0_Disabled (0UL) /*!< Disable */
#define RTC_EVTEN_COMPARE0_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable event routing for event OVRFLW */
#define RTC_EVTEN_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
#define RTC_EVTEN_OVRFLW_Msk (0x1UL << RTC_EVTEN_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
#define RTC_EVTEN_OVRFLW_Disabled (0UL) /*!< Disable */
#define RTC_EVTEN_OVRFLW_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable event routing for event TICK */
#define RTC_EVTEN_TICK_Pos (0UL) /*!< Position of TICK field. */
#define RTC_EVTEN_TICK_Msk (0x1UL << RTC_EVTEN_TICK_Pos) /*!< Bit mask of TICK field. */
#define RTC_EVTEN_TICK_Disabled (0UL) /*!< Disable */
#define RTC_EVTEN_TICK_Enabled (1UL) /*!< Enable */

/* Register: RTC_EVTENSET */
/* Description: Enable event routing */

/* Bit 19 : Write '1' to enable event routing for event COMPARE[3] */
#define RTC_EVTENSET_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define RTC_EVTENSET_COMPARE3_Msk (0x1UL << RTC_EVTENSET_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define RTC_EVTENSET_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENSET_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENSET_COMPARE3_Set (1UL) /*!< Enable */

/* Bit 18 : Write '1' to enable event routing for event COMPARE[2] */
#define RTC_EVTENSET_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define RTC_EVTENSET_COMPARE2_Msk (0x1UL << RTC_EVTENSET_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define RTC_EVTENSET_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENSET_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENSET_COMPARE2_Set (1UL) /*!< Enable */

/* Bit 17 : Write '1' to enable event routing for event COMPARE[1] */
#define RTC_EVTENSET_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define RTC_EVTENSET_COMPARE1_Msk (0x1UL << RTC_EVTENSET_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define RTC_EVTENSET_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENSET_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENSET_COMPARE1_Set (1UL) /*!< Enable */

/* Bit 16 : Write '1' to enable event routing for event COMPARE[0] */
#define RTC_EVTENSET_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define RTC_EVTENSET_COMPARE0_Msk (0x1UL << RTC_EVTENSET_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define RTC_EVTENSET_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENSET_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENSET_COMPARE0_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable event routing for event OVRFLW */
#define RTC_EVTENSET_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
#define RTC_EVTENSET_OVRFLW_Msk (0x1UL << RTC_EVTENSET_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
#define RTC_EVTENSET_OVRFLW_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENSET_OVRFLW_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENSET_OVRFLW_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable event routing for event TICK */
#define RTC_EVTENSET_TICK_Pos (0UL) /*!< Position of TICK field. */
#define RTC_EVTENSET_TICK_Msk (0x1UL << RTC_EVTENSET_TICK_Pos) /*!< Bit mask of TICK field. */
#define RTC_EVTENSET_TICK_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENSET_TICK_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENSET_TICK_Set (1UL) /*!< Enable */

/* Register: RTC_EVTENCLR */
/* Description: Disable event routing */

/* Bit 19 : Write '1' to disable event routing for event COMPARE[3] */
#define RTC_EVTENCLR_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define RTC_EVTENCLR_COMPARE3_Msk (0x1UL << RTC_EVTENCLR_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define RTC_EVTENCLR_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENCLR_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENCLR_COMPARE3_Clear (1UL) /*!< Disable */

/* Bit 18 : Write '1' to disable event routing for event COMPARE[2] */
#define RTC_EVTENCLR_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define RTC_EVTENCLR_COMPARE2_Msk (0x1UL << RTC_EVTENCLR_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define RTC_EVTENCLR_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENCLR_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENCLR_COMPARE2_Clear (1UL) /*!< Disable */

/* Bit 17 : Write '1' to disable event routing for event COMPARE[1] */
#define RTC_EVTENCLR_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define RTC_EVTENCLR_COMPARE1_Msk (0x1UL << RTC_EVTENCLR_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define RTC_EVTENCLR_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENCLR_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENCLR_COMPARE1_Clear (1UL) /*!< Disable */

/* Bit 16 : Write '1' to disable event routing for event COMPARE[0] */
#define RTC_EVTENCLR_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define RTC_EVTENCLR_COMPARE0_Msk (0x1UL << RTC_EVTENCLR_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define RTC_EVTENCLR_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENCLR_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENCLR_COMPARE0_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable event routing for event OVRFLW */
#define RTC_EVTENCLR_OVRFLW_Pos (1UL) /*!< Position of OVRFLW field. */
#define RTC_EVTENCLR_OVRFLW_Msk (0x1UL << RTC_EVTENCLR_OVRFLW_Pos) /*!< Bit mask of OVRFLW field. */
#define RTC_EVTENCLR_OVRFLW_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENCLR_OVRFLW_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENCLR_OVRFLW_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable event routing for event TICK */
#define RTC_EVTENCLR_TICK_Pos (0UL) /*!< Position of TICK field. */
#define RTC_EVTENCLR_TICK_Msk (0x1UL << RTC_EVTENCLR_TICK_Pos) /*!< Bit mask of TICK field. */
#define RTC_EVTENCLR_TICK_Disabled (0UL) /*!< Read: Disabled */
#define RTC_EVTENCLR_TICK_Enabled (1UL) /*!< Read: Enabled */
#define RTC_EVTENCLR_TICK_Clear (1UL) /*!< Disable */

/* Register: RTC_COUNTER */
/* Description: Current counter value */

/* Bits 23..0 : Counter value */
#define RTC_COUNTER_COUNTER_Pos (0UL) /*!< Position of COUNTER field. */
#define RTC_COUNTER_COUNTER_Msk (0xFFFFFFUL << RTC_COUNTER_COUNTER_Pos) /*!< Bit mask of COUNTER field. */

/* Register: RTC_PRESCALER */
/* Description: 12-bit prescaler for counter frequency (32768/(PRESCALER+1)). Must be written when RTC is stopped. */

/* Bits 11..0 : Prescaler value */
#define RTC_PRESCALER_PRESCALER_Pos (0UL) /*!< Position of PRESCALER field. */
#define RTC_PRESCALER_PRESCALER_Msk (0xFFFUL << RTC_PRESCALER_PRESCALER_Pos) /*!< Bit mask of PRESCALER field. */

/* Register: RTC_CC */
/* Description: Description collection: Compare register n */

/* Bits 23..0 : Compare value */
#define RTC_CC_COMPARE_Pos (0UL) /*!< Position of COMPARE field. */
#define RTC_CC_COMPARE_Msk (0xFFFFFFUL << RTC_CC_COMPARE_Pos) /*!< Bit mask of COMPARE field. */


/* Peripheral: SAADC */
/* Description: Analog to Digital Converter 0 */

/* Register: SAADC_TASKS_START */
/* Description: Start the ADC and prepare the result buffer in RAM */

/* Bit 0 : Start the ADC and prepare the result buffer in RAM */
#define SAADC_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define SAADC_TASKS_START_TASKS_START_Msk (0x1UL << SAADC_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define SAADC_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: SAADC_TASKS_SAMPLE */
/* Description: Take one ADC sample, if scan is enabled all channels are sampled */

/* Bit 0 : Take one ADC sample, if scan is enabled all channels are sampled */
#define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos (0UL) /*!< Position of TASKS_SAMPLE field. */
#define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Msk (0x1UL << SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos) /*!< Bit mask of TASKS_SAMPLE field. */
#define SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Trigger (1UL) /*!< Trigger task */

/* Register: SAADC_TASKS_STOP */
/* Description: Stop the ADC and terminate any on-going conversion */

/* Bit 0 : Stop the ADC and terminate any on-going conversion */
#define SAADC_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define SAADC_TASKS_STOP_TASKS_STOP_Msk (0x1UL << SAADC_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define SAADC_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: SAADC_TASKS_CALIBRATEOFFSET */
/* Description: Starts offset auto-calibration */

/* Bit 0 : Starts offset auto-calibration */
#define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos (0UL) /*!< Position of TASKS_CALIBRATEOFFSET field. */
#define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Msk (0x1UL << SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos) /*!< Bit mask of TASKS_CALIBRATEOFFSET field. */
#define SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Trigger (1UL) /*!< Trigger task */

/* Register: SAADC_TASKS_CALIBRATEGAIN */
/* Description: Starts gain auto-calibration */

/* Bit 0 : Starts gain auto-calibration */
#define SAADC_TASKS_CALIBRATEGAIN_TASKS_CALIBRATEGAIN_Pos (0UL) /*!< Position of TASKS_CALIBRATEGAIN field. */
#define SAADC_TASKS_CALIBRATEGAIN_TASKS_CALIBRATEGAIN_Msk (0x1UL << SAADC_TASKS_CALIBRATEGAIN_TASKS_CALIBRATEGAIN_Pos) /*!< Bit mask of TASKS_CALIBRATEGAIN field. */
#define SAADC_TASKS_CALIBRATEGAIN_TASKS_CALIBRATEGAIN_Trigger (1UL) /*!< Trigger task */

/* Register: SAADC_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define SAADC_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_SUBSCRIBE_START_EN_Msk (0x1UL << SAADC_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define SAADC_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define SAADC_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_SUBSCRIBE_SAMPLE */
/* Description: Subscribe configuration for task SAMPLE */

/* Bit 31 :   */
#define SAADC_SUBSCRIBE_SAMPLE_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_SUBSCRIBE_SAMPLE_EN_Msk (0x1UL << SAADC_SUBSCRIBE_SAMPLE_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_SUBSCRIBE_SAMPLE_EN_Disabled (0UL) /*!< Disable subscription */
#define SAADC_SUBSCRIBE_SAMPLE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SAMPLE will subscribe to */
#define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_SUBSCRIBE_SAMPLE_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_SAMPLE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define SAADC_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_SUBSCRIBE_STOP_EN_Msk (0x1UL << SAADC_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define SAADC_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define SAADC_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_SUBSCRIBE_CALIBRATEOFFSET */
/* Description: Subscribe configuration for task CALIBRATEOFFSET */

/* Bit 31 :   */
#define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Msk (0x1UL << SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Disabled (0UL) /*!< Disable subscription */
#define SAADC_SUBSCRIBE_CALIBRATEOFFSET_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CALIBRATEOFFSET will subscribe to */
#define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_CALIBRATEOFFSET_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_SUBSCRIBE_CALIBRATEGAIN */
/* Description: Subscribe configuration for task CALIBRATEGAIN */

/* Bit 31 :   */
#define SAADC_SUBSCRIBE_CALIBRATEGAIN_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_SUBSCRIBE_CALIBRATEGAIN_EN_Msk (0x1UL << SAADC_SUBSCRIBE_CALIBRATEGAIN_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_SUBSCRIBE_CALIBRATEGAIN_EN_Disabled (0UL) /*!< Disable subscription */
#define SAADC_SUBSCRIBE_CALIBRATEGAIN_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CALIBRATEGAIN will subscribe to */
#define SAADC_SUBSCRIBE_CALIBRATEGAIN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_SUBSCRIBE_CALIBRATEGAIN_CHIDX_Msk (0xFFUL << SAADC_SUBSCRIBE_CALIBRATEGAIN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_EVENTS_STARTED */
/* Description: The ADC has started */

/* Bit 0 : The ADC has started */
#define SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL) /*!< Position of EVENTS_STARTED field. */
#define SAADC_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of EVENTS_STARTED field. */
#define SAADC_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0UL) /*!< Event not generated */
#define SAADC_EVENTS_STARTED_EVENTS_STARTED_Generated (1UL) /*!< Event generated */

/* Register: SAADC_EVENTS_END */
/* Description: The ADC has filled up the Result buffer */

/* Bit 0 : The ADC has filled up the Result buffer */
#define SAADC_EVENTS_END_EVENTS_END_Pos (0UL) /*!< Position of EVENTS_END field. */
#define SAADC_EVENTS_END_EVENTS_END_Msk (0x1UL << SAADC_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field. */
#define SAADC_EVENTS_END_EVENTS_END_NotGenerated (0UL) /*!< Event not generated */
#define SAADC_EVENTS_END_EVENTS_END_Generated (1UL) /*!< Event generated */

/* Register: SAADC_EVENTS_DONE */
/* Description: A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a result to be transferred to RAM. */

/* Bit 0 : A conversion task has been completed. Depending on the mode, multiple conversions might be needed for a result to be transferred to RAM. */
#define SAADC_EVENTS_DONE_EVENTS_DONE_Pos (0UL) /*!< Position of EVENTS_DONE field. */
#define SAADC_EVENTS_DONE_EVENTS_DONE_Msk (0x1UL << SAADC_EVENTS_DONE_EVENTS_DONE_Pos) /*!< Bit mask of EVENTS_DONE field. */
#define SAADC_EVENTS_DONE_EVENTS_DONE_NotGenerated (0UL) /*!< Event not generated */
#define SAADC_EVENTS_DONE_EVENTS_DONE_Generated (1UL) /*!< Event generated */

/* Register: SAADC_EVENTS_RESULTDONE */
/* Description: A result is ready to get transferred to RAM. Result is available in REGRESULT register */

/* Bit 0 : A result is ready to get transferred to RAM. Result is available in REGRESULT register */
#define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos (0UL) /*!< Position of EVENTS_RESULTDONE field. */
#define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Msk (0x1UL << SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos) /*!< Bit mask of EVENTS_RESULTDONE field. */
#define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_NotGenerated (0UL) /*!< Event not generated */
#define SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Generated (1UL) /*!< Event generated */

/* Register: SAADC_EVENTS_CALIBRATEDONE */
/* Description: Calibration is complete */

/* Bit 0 : Calibration is complete */
#define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos (0UL) /*!< Position of EVENTS_CALIBRATEDONE field. */
#define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Msk (0x1UL << SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos) /*!< Bit mask of EVENTS_CALIBRATEDONE field. */
#define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_NotGenerated (0UL) /*!< Event not generated */
#define SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Generated (1UL) /*!< Event generated */

/* Register: SAADC_EVENTS_STOPPED */
/* Description: The ADC has stopped */

/* Bit 0 : The ADC has stopped */
#define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: SAADC_EVENTS_CH_LIMITH */
/* Description: Description cluster: Last results is equal or above CH[n].LIMIT.HIGH */

/* Bit 0 : Last results is equal or above CH[n].LIMIT.HIGH */
#define SAADC_EVENTS_CH_LIMITH_LIMITH_Pos (0UL) /*!< Position of LIMITH field. */
#define SAADC_EVENTS_CH_LIMITH_LIMITH_Msk (0x1UL << SAADC_EVENTS_CH_LIMITH_LIMITH_Pos) /*!< Bit mask of LIMITH field. */
#define SAADC_EVENTS_CH_LIMITH_LIMITH_NotGenerated (0UL) /*!< Event not generated */
#define SAADC_EVENTS_CH_LIMITH_LIMITH_Generated (1UL) /*!< Event generated */

/* Register: SAADC_EVENTS_CH_LIMITL */
/* Description: Description cluster: Last results is equal or below CH[n].LIMIT.LOW */

/* Bit 0 : Last results is equal or below CH[n].LIMIT.LOW */
#define SAADC_EVENTS_CH_LIMITL_LIMITL_Pos (0UL) /*!< Position of LIMITL field. */
#define SAADC_EVENTS_CH_LIMITL_LIMITL_Msk (0x1UL << SAADC_EVENTS_CH_LIMITL_LIMITL_Pos) /*!< Bit mask of LIMITL field. */
#define SAADC_EVENTS_CH_LIMITL_LIMITL_NotGenerated (0UL) /*!< Event not generated */
#define SAADC_EVENTS_CH_LIMITL_LIMITL_Generated (1UL) /*!< Event generated */

/* Register: SAADC_PUBLISH_STARTED */
/* Description: Publish configuration for event STARTED */

/* Bit 31 :   */
#define SAADC_PUBLISH_STARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_PUBLISH_STARTED_EN_Msk (0x1UL << SAADC_PUBLISH_STARTED_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_PUBLISH_STARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define SAADC_PUBLISH_STARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STARTED will publish to. */
#define SAADC_PUBLISH_STARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_STARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_PUBLISH_END */
/* Description: Publish configuration for event END */

/* Bit 31 :   */
#define SAADC_PUBLISH_END_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_PUBLISH_END_EN_Msk (0x1UL << SAADC_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_PUBLISH_END_EN_Disabled (0UL) /*!< Disable publishing */
#define SAADC_PUBLISH_END_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event END will publish to. */
#define SAADC_PUBLISH_END_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_PUBLISH_END_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_PUBLISH_DONE */
/* Description: Publish configuration for event DONE */

/* Bit 31 :   */
#define SAADC_PUBLISH_DONE_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_PUBLISH_DONE_EN_Msk (0x1UL << SAADC_PUBLISH_DONE_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_PUBLISH_DONE_EN_Disabled (0UL) /*!< Disable publishing */
#define SAADC_PUBLISH_DONE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event DONE will publish to. */
#define SAADC_PUBLISH_DONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_PUBLISH_DONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_DONE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_PUBLISH_RESULTDONE */
/* Description: Publish configuration for event RESULTDONE */

/* Bit 31 :   */
#define SAADC_PUBLISH_RESULTDONE_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_PUBLISH_RESULTDONE_EN_Msk (0x1UL << SAADC_PUBLISH_RESULTDONE_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_PUBLISH_RESULTDONE_EN_Disabled (0UL) /*!< Disable publishing */
#define SAADC_PUBLISH_RESULTDONE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RESULTDONE will publish to. */
#define SAADC_PUBLISH_RESULTDONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_PUBLISH_RESULTDONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_RESULTDONE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_PUBLISH_CALIBRATEDONE */
/* Description: Publish configuration for event CALIBRATEDONE */

/* Bit 31 :   */
#define SAADC_PUBLISH_CALIBRATEDONE_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_PUBLISH_CALIBRATEDONE_EN_Msk (0x1UL << SAADC_PUBLISH_CALIBRATEDONE_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_PUBLISH_CALIBRATEDONE_EN_Disabled (0UL) /*!< Disable publishing */
#define SAADC_PUBLISH_CALIBRATEDONE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CALIBRATEDONE will publish to. */
#define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CALIBRATEDONE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define SAADC_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_PUBLISH_STOPPED_EN_Msk (0x1UL << SAADC_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define SAADC_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define SAADC_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_PUBLISH_CH_LIMITH */
/* Description: Description cluster: Publish configuration for event CH[n].LIMITH */

/* Bit 31 :   */
#define SAADC_PUBLISH_CH_LIMITH_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_PUBLISH_CH_LIMITH_EN_Msk (0x1UL << SAADC_PUBLISH_CH_LIMITH_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_PUBLISH_CH_LIMITH_EN_Disabled (0UL) /*!< Disable publishing */
#define SAADC_PUBLISH_CH_LIMITH_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CH[n].LIMITH will publish to. */
#define SAADC_PUBLISH_CH_LIMITH_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_PUBLISH_CH_LIMITH_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CH_LIMITH_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_PUBLISH_CH_LIMITL */
/* Description: Description cluster: Publish configuration for event CH[n].LIMITL */

/* Bit 31 :   */
#define SAADC_PUBLISH_CH_LIMITL_EN_Pos (31UL) /*!< Position of EN field. */
#define SAADC_PUBLISH_CH_LIMITL_EN_Msk (0x1UL << SAADC_PUBLISH_CH_LIMITL_EN_Pos) /*!< Bit mask of EN field. */
#define SAADC_PUBLISH_CH_LIMITL_EN_Disabled (0UL) /*!< Disable publishing */
#define SAADC_PUBLISH_CH_LIMITL_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CH[n].LIMITL will publish to. */
#define SAADC_PUBLISH_CH_LIMITL_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SAADC_PUBLISH_CH_LIMITL_CHIDX_Msk (0xFFUL << SAADC_PUBLISH_CH_LIMITL_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SAADC_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 1 : Shortcut between event END and task START */
#define SAADC_SHORTS_END_START_Pos (1UL) /*!< Position of END_START field. */
#define SAADC_SHORTS_END_START_Msk (0x1UL << SAADC_SHORTS_END_START_Pos) /*!< Bit mask of END_START field. */
#define SAADC_SHORTS_END_START_Disabled (0UL) /*!< Disable shortcut */
#define SAADC_SHORTS_END_START_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event DONE and task SAMPLE */
#define SAADC_SHORTS_DONE_SAMPLE_Pos (0UL) /*!< Position of DONE_SAMPLE field. */
#define SAADC_SHORTS_DONE_SAMPLE_Msk (0x1UL << SAADC_SHORTS_DONE_SAMPLE_Pos) /*!< Bit mask of DONE_SAMPLE field. */
#define SAADC_SHORTS_DONE_SAMPLE_Disabled (0UL) /*!< Disable shortcut */
#define SAADC_SHORTS_DONE_SAMPLE_Enabled (1UL) /*!< Enable shortcut */

/* Register: SAADC_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 21 : Enable or disable interrupt for event CH7LIMITL */
#define SAADC_INTEN_CH7LIMITL_Pos (21UL) /*!< Position of CH7LIMITL field. */
#define SAADC_INTEN_CH7LIMITL_Msk (0x1UL << SAADC_INTEN_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field. */
#define SAADC_INTEN_CH7LIMITL_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH7LIMITL_Enabled (1UL) /*!< Enable */

/* Bit 20 : Enable or disable interrupt for event CH7LIMITH */
#define SAADC_INTEN_CH7LIMITH_Pos (20UL) /*!< Position of CH7LIMITH field. */
#define SAADC_INTEN_CH7LIMITH_Msk (0x1UL << SAADC_INTEN_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field. */
#define SAADC_INTEN_CH7LIMITH_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH7LIMITH_Enabled (1UL) /*!< Enable */

/* Bit 19 : Enable or disable interrupt for event CH6LIMITL */
#define SAADC_INTEN_CH6LIMITL_Pos (19UL) /*!< Position of CH6LIMITL field. */
#define SAADC_INTEN_CH6LIMITL_Msk (0x1UL << SAADC_INTEN_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field. */
#define SAADC_INTEN_CH6LIMITL_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH6LIMITL_Enabled (1UL) /*!< Enable */

/* Bit 18 : Enable or disable interrupt for event CH6LIMITH */
#define SAADC_INTEN_CH6LIMITH_Pos (18UL) /*!< Position of CH6LIMITH field. */
#define SAADC_INTEN_CH6LIMITH_Msk (0x1UL << SAADC_INTEN_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field. */
#define SAADC_INTEN_CH6LIMITH_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH6LIMITH_Enabled (1UL) /*!< Enable */

/* Bit 17 : Enable or disable interrupt for event CH5LIMITL */
#define SAADC_INTEN_CH5LIMITL_Pos (17UL) /*!< Position of CH5LIMITL field. */
#define SAADC_INTEN_CH5LIMITL_Msk (0x1UL << SAADC_INTEN_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field. */
#define SAADC_INTEN_CH5LIMITL_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH5LIMITL_Enabled (1UL) /*!< Enable */

/* Bit 16 : Enable or disable interrupt for event CH5LIMITH */
#define SAADC_INTEN_CH5LIMITH_Pos (16UL) /*!< Position of CH5LIMITH field. */
#define SAADC_INTEN_CH5LIMITH_Msk (0x1UL << SAADC_INTEN_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field. */
#define SAADC_INTEN_CH5LIMITH_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH5LIMITH_Enabled (1UL) /*!< Enable */

/* Bit 15 : Enable or disable interrupt for event CH4LIMITL */
#define SAADC_INTEN_CH4LIMITL_Pos (15UL) /*!< Position of CH4LIMITL field. */
#define SAADC_INTEN_CH4LIMITL_Msk (0x1UL << SAADC_INTEN_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field. */
#define SAADC_INTEN_CH4LIMITL_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH4LIMITL_Enabled (1UL) /*!< Enable */

/* Bit 14 : Enable or disable interrupt for event CH4LIMITH */
#define SAADC_INTEN_CH4LIMITH_Pos (14UL) /*!< Position of CH4LIMITH field. */
#define SAADC_INTEN_CH4LIMITH_Msk (0x1UL << SAADC_INTEN_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field. */
#define SAADC_INTEN_CH4LIMITH_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH4LIMITH_Enabled (1UL) /*!< Enable */

/* Bit 13 : Enable or disable interrupt for event CH3LIMITL */
#define SAADC_INTEN_CH3LIMITL_Pos (13UL) /*!< Position of CH3LIMITL field. */
#define SAADC_INTEN_CH3LIMITL_Msk (0x1UL << SAADC_INTEN_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field. */
#define SAADC_INTEN_CH3LIMITL_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH3LIMITL_Enabled (1UL) /*!< Enable */

/* Bit 12 : Enable or disable interrupt for event CH3LIMITH */
#define SAADC_INTEN_CH3LIMITH_Pos (12UL) /*!< Position of CH3LIMITH field. */
#define SAADC_INTEN_CH3LIMITH_Msk (0x1UL << SAADC_INTEN_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field. */
#define SAADC_INTEN_CH3LIMITH_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH3LIMITH_Enabled (1UL) /*!< Enable */

/* Bit 11 : Enable or disable interrupt for event CH2LIMITL */
#define SAADC_INTEN_CH2LIMITL_Pos (11UL) /*!< Position of CH2LIMITL field. */
#define SAADC_INTEN_CH2LIMITL_Msk (0x1UL << SAADC_INTEN_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field. */
#define SAADC_INTEN_CH2LIMITL_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH2LIMITL_Enabled (1UL) /*!< Enable */

/* Bit 10 : Enable or disable interrupt for event CH2LIMITH */
#define SAADC_INTEN_CH2LIMITH_Pos (10UL) /*!< Position of CH2LIMITH field. */
#define SAADC_INTEN_CH2LIMITH_Msk (0x1UL << SAADC_INTEN_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field. */
#define SAADC_INTEN_CH2LIMITH_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH2LIMITH_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event CH1LIMITL */
#define SAADC_INTEN_CH1LIMITL_Pos (9UL) /*!< Position of CH1LIMITL field. */
#define SAADC_INTEN_CH1LIMITL_Msk (0x1UL << SAADC_INTEN_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field. */
#define SAADC_INTEN_CH1LIMITL_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH1LIMITL_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event CH1LIMITH */
#define SAADC_INTEN_CH1LIMITH_Pos (8UL) /*!< Position of CH1LIMITH field. */
#define SAADC_INTEN_CH1LIMITH_Msk (0x1UL << SAADC_INTEN_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field. */
#define SAADC_INTEN_CH1LIMITH_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH1LIMITH_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event CH0LIMITL */
#define SAADC_INTEN_CH0LIMITL_Pos (7UL) /*!< Position of CH0LIMITL field. */
#define SAADC_INTEN_CH0LIMITL_Msk (0x1UL << SAADC_INTEN_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field. */
#define SAADC_INTEN_CH0LIMITL_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH0LIMITL_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event CH0LIMITH */
#define SAADC_INTEN_CH0LIMITH_Pos (6UL) /*!< Position of CH0LIMITH field. */
#define SAADC_INTEN_CH0LIMITH_Msk (0x1UL << SAADC_INTEN_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field. */
#define SAADC_INTEN_CH0LIMITH_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CH0LIMITH_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event STOPPED */
#define SAADC_INTEN_STOPPED_Pos (5UL) /*!< Position of STOPPED field. */
#define SAADC_INTEN_STOPPED_Msk (0x1UL << SAADC_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define SAADC_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event CALIBRATEDONE */
#define SAADC_INTEN_CALIBRATEDONE_Pos (4UL) /*!< Position of CALIBRATEDONE field. */
#define SAADC_INTEN_CALIBRATEDONE_Msk (0x1UL << SAADC_INTEN_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field. */
#define SAADC_INTEN_CALIBRATEDONE_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_CALIBRATEDONE_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event RESULTDONE */
#define SAADC_INTEN_RESULTDONE_Pos (3UL) /*!< Position of RESULTDONE field. */
#define SAADC_INTEN_RESULTDONE_Msk (0x1UL << SAADC_INTEN_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field. */
#define SAADC_INTEN_RESULTDONE_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_RESULTDONE_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event DONE */
#define SAADC_INTEN_DONE_Pos (2UL) /*!< Position of DONE field. */
#define SAADC_INTEN_DONE_Msk (0x1UL << SAADC_INTEN_DONE_Pos) /*!< Bit mask of DONE field. */
#define SAADC_INTEN_DONE_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_DONE_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event END */
#define SAADC_INTEN_END_Pos (1UL) /*!< Position of END field. */
#define SAADC_INTEN_END_Msk (0x1UL << SAADC_INTEN_END_Pos) /*!< Bit mask of END field. */
#define SAADC_INTEN_END_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_END_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event STARTED */
#define SAADC_INTEN_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define SAADC_INTEN_STARTED_Msk (0x1UL << SAADC_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define SAADC_INTEN_STARTED_Disabled (0UL) /*!< Disable */
#define SAADC_INTEN_STARTED_Enabled (1UL) /*!< Enable */

/* Register: SAADC_INTENSET */
/* Description: Enable interrupt */

/* Bit 21 : Write '1' to enable interrupt for event CH7LIMITL */
#define SAADC_INTENSET_CH7LIMITL_Pos (21UL) /*!< Position of CH7LIMITL field. */
#define SAADC_INTENSET_CH7LIMITL_Msk (0x1UL << SAADC_INTENSET_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field. */
#define SAADC_INTENSET_CH7LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH7LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH7LIMITL_Set (1UL) /*!< Enable */

/* Bit 20 : Write '1' to enable interrupt for event CH7LIMITH */
#define SAADC_INTENSET_CH7LIMITH_Pos (20UL) /*!< Position of CH7LIMITH field. */
#define SAADC_INTENSET_CH7LIMITH_Msk (0x1UL << SAADC_INTENSET_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field. */
#define SAADC_INTENSET_CH7LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH7LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH7LIMITH_Set (1UL) /*!< Enable */

/* Bit 19 : Write '1' to enable interrupt for event CH6LIMITL */
#define SAADC_INTENSET_CH6LIMITL_Pos (19UL) /*!< Position of CH6LIMITL field. */
#define SAADC_INTENSET_CH6LIMITL_Msk (0x1UL << SAADC_INTENSET_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field. */
#define SAADC_INTENSET_CH6LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH6LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH6LIMITL_Set (1UL) /*!< Enable */

/* Bit 18 : Write '1' to enable interrupt for event CH6LIMITH */
#define SAADC_INTENSET_CH6LIMITH_Pos (18UL) /*!< Position of CH6LIMITH field. */
#define SAADC_INTENSET_CH6LIMITH_Msk (0x1UL << SAADC_INTENSET_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field. */
#define SAADC_INTENSET_CH6LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH6LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH6LIMITH_Set (1UL) /*!< Enable */

/* Bit 17 : Write '1' to enable interrupt for event CH5LIMITL */
#define SAADC_INTENSET_CH5LIMITL_Pos (17UL) /*!< Position of CH5LIMITL field. */
#define SAADC_INTENSET_CH5LIMITL_Msk (0x1UL << SAADC_INTENSET_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field. */
#define SAADC_INTENSET_CH5LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH5LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH5LIMITL_Set (1UL) /*!< Enable */

/* Bit 16 : Write '1' to enable interrupt for event CH5LIMITH */
#define SAADC_INTENSET_CH5LIMITH_Pos (16UL) /*!< Position of CH5LIMITH field. */
#define SAADC_INTENSET_CH5LIMITH_Msk (0x1UL << SAADC_INTENSET_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field. */
#define SAADC_INTENSET_CH5LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH5LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH5LIMITH_Set (1UL) /*!< Enable */

/* Bit 15 : Write '1' to enable interrupt for event CH4LIMITL */
#define SAADC_INTENSET_CH4LIMITL_Pos (15UL) /*!< Position of CH4LIMITL field. */
#define SAADC_INTENSET_CH4LIMITL_Msk (0x1UL << SAADC_INTENSET_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field. */
#define SAADC_INTENSET_CH4LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH4LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH4LIMITL_Set (1UL) /*!< Enable */

/* Bit 14 : Write '1' to enable interrupt for event CH4LIMITH */
#define SAADC_INTENSET_CH4LIMITH_Pos (14UL) /*!< Position of CH4LIMITH field. */
#define SAADC_INTENSET_CH4LIMITH_Msk (0x1UL << SAADC_INTENSET_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field. */
#define SAADC_INTENSET_CH4LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH4LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH4LIMITH_Set (1UL) /*!< Enable */

/* Bit 13 : Write '1' to enable interrupt for event CH3LIMITL */
#define SAADC_INTENSET_CH3LIMITL_Pos (13UL) /*!< Position of CH3LIMITL field. */
#define SAADC_INTENSET_CH3LIMITL_Msk (0x1UL << SAADC_INTENSET_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field. */
#define SAADC_INTENSET_CH3LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH3LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH3LIMITL_Set (1UL) /*!< Enable */

/* Bit 12 : Write '1' to enable interrupt for event CH3LIMITH */
#define SAADC_INTENSET_CH3LIMITH_Pos (12UL) /*!< Position of CH3LIMITH field. */
#define SAADC_INTENSET_CH3LIMITH_Msk (0x1UL << SAADC_INTENSET_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field. */
#define SAADC_INTENSET_CH3LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH3LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH3LIMITH_Set (1UL) /*!< Enable */

/* Bit 11 : Write '1' to enable interrupt for event CH2LIMITL */
#define SAADC_INTENSET_CH2LIMITL_Pos (11UL) /*!< Position of CH2LIMITL field. */
#define SAADC_INTENSET_CH2LIMITL_Msk (0x1UL << SAADC_INTENSET_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field. */
#define SAADC_INTENSET_CH2LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH2LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH2LIMITL_Set (1UL) /*!< Enable */

/* Bit 10 : Write '1' to enable interrupt for event CH2LIMITH */
#define SAADC_INTENSET_CH2LIMITH_Pos (10UL) /*!< Position of CH2LIMITH field. */
#define SAADC_INTENSET_CH2LIMITH_Msk (0x1UL << SAADC_INTENSET_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field. */
#define SAADC_INTENSET_CH2LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH2LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH2LIMITH_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event CH1LIMITL */
#define SAADC_INTENSET_CH1LIMITL_Pos (9UL) /*!< Position of CH1LIMITL field. */
#define SAADC_INTENSET_CH1LIMITL_Msk (0x1UL << SAADC_INTENSET_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field. */
#define SAADC_INTENSET_CH1LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH1LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH1LIMITL_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event CH1LIMITH */
#define SAADC_INTENSET_CH1LIMITH_Pos (8UL) /*!< Position of CH1LIMITH field. */
#define SAADC_INTENSET_CH1LIMITH_Msk (0x1UL << SAADC_INTENSET_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field. */
#define SAADC_INTENSET_CH1LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH1LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH1LIMITH_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event CH0LIMITL */
#define SAADC_INTENSET_CH0LIMITL_Pos (7UL) /*!< Position of CH0LIMITL field. */
#define SAADC_INTENSET_CH0LIMITL_Msk (0x1UL << SAADC_INTENSET_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field. */
#define SAADC_INTENSET_CH0LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH0LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH0LIMITL_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event CH0LIMITH */
#define SAADC_INTENSET_CH0LIMITH_Pos (6UL) /*!< Position of CH0LIMITH field. */
#define SAADC_INTENSET_CH0LIMITH_Msk (0x1UL << SAADC_INTENSET_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field. */
#define SAADC_INTENSET_CH0LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CH0LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CH0LIMITH_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event STOPPED */
#define SAADC_INTENSET_STOPPED_Pos (5UL) /*!< Position of STOPPED field. */
#define SAADC_INTENSET_STOPPED_Msk (0x1UL << SAADC_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define SAADC_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event CALIBRATEDONE */
#define SAADC_INTENSET_CALIBRATEDONE_Pos (4UL) /*!< Position of CALIBRATEDONE field. */
#define SAADC_INTENSET_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENSET_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field. */
#define SAADC_INTENSET_CALIBRATEDONE_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_CALIBRATEDONE_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_CALIBRATEDONE_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event RESULTDONE */
#define SAADC_INTENSET_RESULTDONE_Pos (3UL) /*!< Position of RESULTDONE field. */
#define SAADC_INTENSET_RESULTDONE_Msk (0x1UL << SAADC_INTENSET_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field. */
#define SAADC_INTENSET_RESULTDONE_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_RESULTDONE_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_RESULTDONE_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event DONE */
#define SAADC_INTENSET_DONE_Pos (2UL) /*!< Position of DONE field. */
#define SAADC_INTENSET_DONE_Msk (0x1UL << SAADC_INTENSET_DONE_Pos) /*!< Bit mask of DONE field. */
#define SAADC_INTENSET_DONE_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_DONE_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_DONE_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event END */
#define SAADC_INTENSET_END_Pos (1UL) /*!< Position of END field. */
#define SAADC_INTENSET_END_Msk (0x1UL << SAADC_INTENSET_END_Pos) /*!< Bit mask of END field. */
#define SAADC_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_END_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event STARTED */
#define SAADC_INTENSET_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define SAADC_INTENSET_STARTED_Msk (0x1UL << SAADC_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define SAADC_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENSET_STARTED_Set (1UL) /*!< Enable */

/* Register: SAADC_INTENCLR */
/* Description: Disable interrupt */

/* Bit 21 : Write '1' to disable interrupt for event CH7LIMITL */
#define SAADC_INTENCLR_CH7LIMITL_Pos (21UL) /*!< Position of CH7LIMITL field. */
#define SAADC_INTENCLR_CH7LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITL_Pos) /*!< Bit mask of CH7LIMITL field. */
#define SAADC_INTENCLR_CH7LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH7LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH7LIMITL_Clear (1UL) /*!< Disable */

/* Bit 20 : Write '1' to disable interrupt for event CH7LIMITH */
#define SAADC_INTENCLR_CH7LIMITH_Pos (20UL) /*!< Position of CH7LIMITH field. */
#define SAADC_INTENCLR_CH7LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH7LIMITH_Pos) /*!< Bit mask of CH7LIMITH field. */
#define SAADC_INTENCLR_CH7LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH7LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH7LIMITH_Clear (1UL) /*!< Disable */

/* Bit 19 : Write '1' to disable interrupt for event CH6LIMITL */
#define SAADC_INTENCLR_CH6LIMITL_Pos (19UL) /*!< Position of CH6LIMITL field. */
#define SAADC_INTENCLR_CH6LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITL_Pos) /*!< Bit mask of CH6LIMITL field. */
#define SAADC_INTENCLR_CH6LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH6LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH6LIMITL_Clear (1UL) /*!< Disable */

/* Bit 18 : Write '1' to disable interrupt for event CH6LIMITH */
#define SAADC_INTENCLR_CH6LIMITH_Pos (18UL) /*!< Position of CH6LIMITH field. */
#define SAADC_INTENCLR_CH6LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH6LIMITH_Pos) /*!< Bit mask of CH6LIMITH field. */
#define SAADC_INTENCLR_CH6LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH6LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH6LIMITH_Clear (1UL) /*!< Disable */

/* Bit 17 : Write '1' to disable interrupt for event CH5LIMITL */
#define SAADC_INTENCLR_CH5LIMITL_Pos (17UL) /*!< Position of CH5LIMITL field. */
#define SAADC_INTENCLR_CH5LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITL_Pos) /*!< Bit mask of CH5LIMITL field. */
#define SAADC_INTENCLR_CH5LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH5LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH5LIMITL_Clear (1UL) /*!< Disable */

/* Bit 16 : Write '1' to disable interrupt for event CH5LIMITH */
#define SAADC_INTENCLR_CH5LIMITH_Pos (16UL) /*!< Position of CH5LIMITH field. */
#define SAADC_INTENCLR_CH5LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH5LIMITH_Pos) /*!< Bit mask of CH5LIMITH field. */
#define SAADC_INTENCLR_CH5LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH5LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH5LIMITH_Clear (1UL) /*!< Disable */

/* Bit 15 : Write '1' to disable interrupt for event CH4LIMITL */
#define SAADC_INTENCLR_CH4LIMITL_Pos (15UL) /*!< Position of CH4LIMITL field. */
#define SAADC_INTENCLR_CH4LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITL_Pos) /*!< Bit mask of CH4LIMITL field. */
#define SAADC_INTENCLR_CH4LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH4LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH4LIMITL_Clear (1UL) /*!< Disable */

/* Bit 14 : Write '1' to disable interrupt for event CH4LIMITH */
#define SAADC_INTENCLR_CH4LIMITH_Pos (14UL) /*!< Position of CH4LIMITH field. */
#define SAADC_INTENCLR_CH4LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH4LIMITH_Pos) /*!< Bit mask of CH4LIMITH field. */
#define SAADC_INTENCLR_CH4LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH4LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH4LIMITH_Clear (1UL) /*!< Disable */

/* Bit 13 : Write '1' to disable interrupt for event CH3LIMITL */
#define SAADC_INTENCLR_CH3LIMITL_Pos (13UL) /*!< Position of CH3LIMITL field. */
#define SAADC_INTENCLR_CH3LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITL_Pos) /*!< Bit mask of CH3LIMITL field. */
#define SAADC_INTENCLR_CH3LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH3LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH3LIMITL_Clear (1UL) /*!< Disable */

/* Bit 12 : Write '1' to disable interrupt for event CH3LIMITH */
#define SAADC_INTENCLR_CH3LIMITH_Pos (12UL) /*!< Position of CH3LIMITH field. */
#define SAADC_INTENCLR_CH3LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH3LIMITH_Pos) /*!< Bit mask of CH3LIMITH field. */
#define SAADC_INTENCLR_CH3LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH3LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH3LIMITH_Clear (1UL) /*!< Disable */

/* Bit 11 : Write '1' to disable interrupt for event CH2LIMITL */
#define SAADC_INTENCLR_CH2LIMITL_Pos (11UL) /*!< Position of CH2LIMITL field. */
#define SAADC_INTENCLR_CH2LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITL_Pos) /*!< Bit mask of CH2LIMITL field. */
#define SAADC_INTENCLR_CH2LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH2LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH2LIMITL_Clear (1UL) /*!< Disable */

/* Bit 10 : Write '1' to disable interrupt for event CH2LIMITH */
#define SAADC_INTENCLR_CH2LIMITH_Pos (10UL) /*!< Position of CH2LIMITH field. */
#define SAADC_INTENCLR_CH2LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH2LIMITH_Pos) /*!< Bit mask of CH2LIMITH field. */
#define SAADC_INTENCLR_CH2LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH2LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH2LIMITH_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event CH1LIMITL */
#define SAADC_INTENCLR_CH1LIMITL_Pos (9UL) /*!< Position of CH1LIMITL field. */
#define SAADC_INTENCLR_CH1LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITL_Pos) /*!< Bit mask of CH1LIMITL field. */
#define SAADC_INTENCLR_CH1LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH1LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH1LIMITL_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event CH1LIMITH */
#define SAADC_INTENCLR_CH1LIMITH_Pos (8UL) /*!< Position of CH1LIMITH field. */
#define SAADC_INTENCLR_CH1LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH1LIMITH_Pos) /*!< Bit mask of CH1LIMITH field. */
#define SAADC_INTENCLR_CH1LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH1LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH1LIMITH_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event CH0LIMITL */
#define SAADC_INTENCLR_CH0LIMITL_Pos (7UL) /*!< Position of CH0LIMITL field. */
#define SAADC_INTENCLR_CH0LIMITL_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITL_Pos) /*!< Bit mask of CH0LIMITL field. */
#define SAADC_INTENCLR_CH0LIMITL_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH0LIMITL_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH0LIMITL_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event CH0LIMITH */
#define SAADC_INTENCLR_CH0LIMITH_Pos (6UL) /*!< Position of CH0LIMITH field. */
#define SAADC_INTENCLR_CH0LIMITH_Msk (0x1UL << SAADC_INTENCLR_CH0LIMITH_Pos) /*!< Bit mask of CH0LIMITH field. */
#define SAADC_INTENCLR_CH0LIMITH_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CH0LIMITH_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CH0LIMITH_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event STOPPED */
#define SAADC_INTENCLR_STOPPED_Pos (5UL) /*!< Position of STOPPED field. */
#define SAADC_INTENCLR_STOPPED_Msk (0x1UL << SAADC_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define SAADC_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event CALIBRATEDONE */
#define SAADC_INTENCLR_CALIBRATEDONE_Pos (4UL) /*!< Position of CALIBRATEDONE field. */
#define SAADC_INTENCLR_CALIBRATEDONE_Msk (0x1UL << SAADC_INTENCLR_CALIBRATEDONE_Pos) /*!< Bit mask of CALIBRATEDONE field. */
#define SAADC_INTENCLR_CALIBRATEDONE_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_CALIBRATEDONE_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_CALIBRATEDONE_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event RESULTDONE */
#define SAADC_INTENCLR_RESULTDONE_Pos (3UL) /*!< Position of RESULTDONE field. */
#define SAADC_INTENCLR_RESULTDONE_Msk (0x1UL << SAADC_INTENCLR_RESULTDONE_Pos) /*!< Bit mask of RESULTDONE field. */
#define SAADC_INTENCLR_RESULTDONE_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_RESULTDONE_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_RESULTDONE_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event DONE */
#define SAADC_INTENCLR_DONE_Pos (2UL) /*!< Position of DONE field. */
#define SAADC_INTENCLR_DONE_Msk (0x1UL << SAADC_INTENCLR_DONE_Pos) /*!< Bit mask of DONE field. */
#define SAADC_INTENCLR_DONE_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_DONE_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_DONE_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event END */
#define SAADC_INTENCLR_END_Pos (1UL) /*!< Position of END field. */
#define SAADC_INTENCLR_END_Msk (0x1UL << SAADC_INTENCLR_END_Pos) /*!< Bit mask of END field. */
#define SAADC_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_END_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event STARTED */
#define SAADC_INTENCLR_STARTED_Pos (0UL) /*!< Position of STARTED field. */
#define SAADC_INTENCLR_STARTED_Msk (0x1UL << SAADC_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define SAADC_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define SAADC_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define SAADC_INTENCLR_STARTED_Clear (1UL) /*!< Disable */

/* Register: SAADC_STATUS */
/* Description: Status */

/* Bit 0 : Status */
#define SAADC_STATUS_STATUS_Pos (0UL) /*!< Position of STATUS field. */
#define SAADC_STATUS_STATUS_Msk (0x1UL << SAADC_STATUS_STATUS_Pos) /*!< Bit mask of STATUS field. */
#define SAADC_STATUS_STATUS_Ready (0UL) /*!< ADC is ready. No on-going conversion. */
#define SAADC_STATUS_STATUS_Busy (1UL) /*!< ADC is busy. Single conversion in progress. */

/* Register: SAADC_ENABLE */
/* Description: Enable or disable ADC */

/* Bit 0 : Enable or disable ADC */
#define SAADC_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define SAADC_ENABLE_ENABLE_Msk (0x1UL << SAADC_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define SAADC_ENABLE_ENABLE_Disabled (0UL) /*!< Disable ADC */
#define SAADC_ENABLE_ENABLE_Enabled (1UL) /*!< Enable ADC */

/* Register: SAADC_CH_PSELP */
/* Description: Description cluster: Input positive pin selection for CH[n] */

/* Bits 4..0 : Analog positive input channel */
#define SAADC_CH_PSELP_PSELP_Pos (0UL) /*!< Position of PSELP field. */
#define SAADC_CH_PSELP_PSELP_Msk (0x1FUL << SAADC_CH_PSELP_PSELP_Pos) /*!< Bit mask of PSELP field. */
#define SAADC_CH_PSELP_PSELP_NC (0UL) /*!< Not connected */
#define SAADC_CH_PSELP_PSELP_AnalogInput0 (1UL) /*!< AIN0 */
#define SAADC_CH_PSELP_PSELP_AnalogInput1 (2UL) /*!< AIN1 */
#define SAADC_CH_PSELP_PSELP_AnalogInput2 (3UL) /*!< AIN2 */
#define SAADC_CH_PSELP_PSELP_AnalogInput3 (4UL) /*!< AIN3 */
#define SAADC_CH_PSELP_PSELP_AnalogInput4 (5UL) /*!< AIN4 */
#define SAADC_CH_PSELP_PSELP_AnalogInput5 (6UL) /*!< AIN5 */
#define SAADC_CH_PSELP_PSELP_AnalogInput6 (7UL) /*!< AIN6 */
#define SAADC_CH_PSELP_PSELP_AnalogInput7 (8UL) /*!< AIN7 */
#define SAADC_CH_PSELP_PSELP_VDD (9UL) /*!< VDD */
#define SAADC_CH_PSELP_PSELP_ATB0 (0xAUL) /*!< ATB0 */
#define SAADC_CH_PSELP_PSELP_ATB1 (0xBUL) /*!< ATB1 */
#define SAADC_CH_PSELP_PSELP_ATB2 (0xCUL) /*!< ATB2 */
#define SAADC_CH_PSELP_PSELP_VDDHDIV5 (0xDUL) /*!< VDDH/5 */
#define SAADC_CH_PSELP_PSELP_AVDD1V3 (0xEUL) /*!< AVDD1V3 */
#define SAADC_CH_PSELP_PSELP_DVDD0V9 (0xFUL) /*!< DVDD0V9 */
#define SAADC_CH_PSELP_PSELP_SELREF (0x10UL) /*!< Selected reference */

/* Register: SAADC_CH_PSELN */
/* Description: Description cluster: Input negative pin selection for CH[n] */

/* Bits 4..0 : Analog negative input, enables differential channel */
#define SAADC_CH_PSELN_PSELN_Pos (0UL) /*!< Position of PSELN field. */
#define SAADC_CH_PSELN_PSELN_Msk (0x1FUL << SAADC_CH_PSELN_PSELN_Pos) /*!< Bit mask of PSELN field. */
#define SAADC_CH_PSELN_PSELN_NC (0UL) /*!< Not connected */
#define SAADC_CH_PSELN_PSELN_AnalogInput0 (1UL) /*!< AIN0 */
#define SAADC_CH_PSELN_PSELN_AnalogInput1 (2UL) /*!< AIN1 */
#define SAADC_CH_PSELN_PSELN_AnalogInput2 (3UL) /*!< AIN2 */
#define SAADC_CH_PSELN_PSELN_AnalogInput3 (4UL) /*!< AIN3 */
#define SAADC_CH_PSELN_PSELN_AnalogInput4 (5UL) /*!< AIN4 */
#define SAADC_CH_PSELN_PSELN_AnalogInput5 (6UL) /*!< AIN5 */
#define SAADC_CH_PSELN_PSELN_AnalogInput6 (7UL) /*!< AIN6 */
#define SAADC_CH_PSELN_PSELN_AnalogInput7 (8UL) /*!< AIN7 */
#define SAADC_CH_PSELN_PSELN_VDD (9UL) /*!< VDD */
#define SAADC_CH_PSELN_PSELN_ATB0 (0xAUL) /*!< ATB0 */
#define SAADC_CH_PSELN_PSELN_ATB1 (0xBUL) /*!< ATB1 */
#define SAADC_CH_PSELN_PSELN_ATB2 (0xCUL) /*!< ATB2 */
#define SAADC_CH_PSELN_PSELN_VDDHDIV5 (0xDUL) /*!< VDDH/5 */
#define SAADC_CH_PSELN_PSELN_AVDD1V3 (0xEUL) /*!< AVDD1V3 */
#define SAADC_CH_PSELN_PSELN_DVDD0V9 (0xFUL) /*!< DVDD0V9 */
#define SAADC_CH_PSELN_PSELN_SELREF (0x10UL) /*!< Selected reference */

/* Register: SAADC_CH_CONFIG */
/* Description: Description cluster: Input configuration for CH[n] */

/* Bit 24 : Enable burst mode */
#define SAADC_CH_CONFIG_BURST_Pos (24UL) /*!< Position of BURST field. */
#define SAADC_CH_CONFIG_BURST_Msk (0x1UL << SAADC_CH_CONFIG_BURST_Pos) /*!< Bit mask of BURST field. */
#define SAADC_CH_CONFIG_BURST_Disabled (0UL) /*!< Burst mode is disabled (normal operation) */
#define SAADC_CH_CONFIG_BURST_Enabled (1UL) /*!< Burst mode is enabled. SAADC takes 2^OVERSAMPLE number of samples as fast as it can, and sends the average to Data RAM. */

/* Bit 20 : Enable differential mode */
#define SAADC_CH_CONFIG_MODE_Pos (20UL) /*!< Position of MODE field. */
#define SAADC_CH_CONFIG_MODE_Msk (0x1UL << SAADC_CH_CONFIG_MODE_Pos) /*!< Bit mask of MODE field. */
#define SAADC_CH_CONFIG_MODE_SE (0UL) /*!< Single ended, PSELN will be ignored, negative input to ADC shorted to GND */
#define SAADC_CH_CONFIG_MODE_Diff (1UL) /*!< Differential */

/* Bits 18..16 : Acquisition time, the time the ADC uses to sample the input voltage */
#define SAADC_CH_CONFIG_TACQ_Pos (16UL) /*!< Position of TACQ field. */
#define SAADC_CH_CONFIG_TACQ_Msk (0x7UL << SAADC_CH_CONFIG_TACQ_Pos) /*!< Bit mask of TACQ field. */
#define SAADC_CH_CONFIG_TACQ_3us (0UL) /*!< 3 us */
#define SAADC_CH_CONFIG_TACQ_5us (1UL) /*!< 5 us */
#define SAADC_CH_CONFIG_TACQ_10us (2UL) /*!< 10 us */
#define SAADC_CH_CONFIG_TACQ_15us (3UL) /*!< 15 us */
#define SAADC_CH_CONFIG_TACQ_20us (4UL) /*!< 20 us */
#define SAADC_CH_CONFIG_TACQ_40us (5UL) /*!< 40 us */
#define SAADC_CH_CONFIG_TACQ_1us (6UL) /*!< 1 us */
#define SAADC_CH_CONFIG_TACQ_2us (7UL) /*!< 2 us */

/* Bits 14..12 : Reference control */
#define SAADC_CH_CONFIG_REFSEL_Pos (12UL) /*!< Position of REFSEL field. */
#define SAADC_CH_CONFIG_REFSEL_Msk (0x7UL << SAADC_CH_CONFIG_REFSEL_Pos) /*!< Bit mask of REFSEL field. */
#define SAADC_CH_CONFIG_REFSEL_Internal (0UL) /*!< Internal reference (0.6 V) */
#define SAADC_CH_CONFIG_REFSEL_VDD1_4 (1UL) /*!< VDD/4 as reference */
#define SAADC_CH_CONFIG_REFSEL_PADCIN1_4 (2UL) /*!< PADC_IN/4 as reference */
#define SAADC_CH_CONFIG_REFSEL_ATB0 (3UL) /*!< ATB0 as reference */
#define SAADC_CH_CONFIG_REFSEL_ATB1 (4UL) /*!< ATB1 as reference */
#define SAADC_CH_CONFIG_REFSEL_MBIAS (5UL) /*!< MBIAS as reference */

/* Bits 10..8 : Gain control */
#define SAADC_CH_CONFIG_GAIN_Pos (8UL) /*!< Position of GAIN field. */
#define SAADC_CH_CONFIG_GAIN_Msk (0x7UL << SAADC_CH_CONFIG_GAIN_Pos) /*!< Bit mask of GAIN field. */
#define SAADC_CH_CONFIG_GAIN_Gain1_6 (0UL) /*!< 1/6 */
#define SAADC_CH_CONFIG_GAIN_Gain1_5 (1UL) /*!< 1/5 */
#define SAADC_CH_CONFIG_GAIN_Gain1_4 (2UL) /*!< 1/4 */
#define SAADC_CH_CONFIG_GAIN_Gain1_3 (3UL) /*!< 1/3 */
#define SAADC_CH_CONFIG_GAIN_Gain1_2 (4UL) /*!< 1/2 */
#define SAADC_CH_CONFIG_GAIN_Gain1 (5UL) /*!< 1 */
#define SAADC_CH_CONFIG_GAIN_Gain2 (6UL) /*!< 2 */
#define SAADC_CH_CONFIG_GAIN_Gain4 (7UL) /*!< 4 */

/* Bits 5..4 : Negative channel resistor control */
#define SAADC_CH_CONFIG_RESN_Pos (4UL) /*!< Position of RESN field. */
#define SAADC_CH_CONFIG_RESN_Msk (0x3UL << SAADC_CH_CONFIG_RESN_Pos) /*!< Bit mask of RESN field. */
#define SAADC_CH_CONFIG_RESN_Bypass (0UL) /*!< Bypass resistor ladder */
#define SAADC_CH_CONFIG_RESN_Pulldown (1UL) /*!< Pull-down to GND */
#define SAADC_CH_CONFIG_RESN_Pullup (2UL) /*!< Pull-up to VDD */
#define SAADC_CH_CONFIG_RESN_VDD1_2 (3UL) /*!< Set input at VDD/2 */

/* Bits 1..0 : Positive channel resistor control */
#define SAADC_CH_CONFIG_RESP_Pos (0UL) /*!< Position of RESP field. */
#define SAADC_CH_CONFIG_RESP_Msk (0x3UL << SAADC_CH_CONFIG_RESP_Pos) /*!< Bit mask of RESP field. */
#define SAADC_CH_CONFIG_RESP_Bypass (0UL) /*!< Bypass resistor ladder */
#define SAADC_CH_CONFIG_RESP_Pulldown (1UL) /*!< Pull-down to GND */
#define SAADC_CH_CONFIG_RESP_Pullup (2UL) /*!< Pull-up to VDD */
#define SAADC_CH_CONFIG_RESP_VDD1_2 (3UL) /*!< Set input at VDD/2 */

/* Register: SAADC_CH_LIMIT */
/* Description: Description cluster: High/low limits for event monitoring a channel */

/* Bits 31..16 : High level limit */
#define SAADC_CH_LIMIT_HIGH_Pos (16UL) /*!< Position of HIGH field. */
#define SAADC_CH_LIMIT_HIGH_Msk (0xFFFFUL << SAADC_CH_LIMIT_HIGH_Pos) /*!< Bit mask of HIGH field. */

/* Bits 15..0 : Low level limit */
#define SAADC_CH_LIMIT_LOW_Pos (0UL) /*!< Position of LOW field. */
#define SAADC_CH_LIMIT_LOW_Msk (0xFFFFUL << SAADC_CH_LIMIT_LOW_Pos) /*!< Bit mask of LOW field. */

/* Register: SAADC_REGRESULT */
/* Description: Last conversion result */

/* Bits 31..0 : Result of the previous ADC conversion */
#define SAADC_REGRESULT_REGRESULT_Pos (0UL) /*!< Position of REGRESULT field. */
#define SAADC_REGRESULT_REGRESULT_Msk (0xFFFFFFFFUL << SAADC_REGRESULT_REGRESULT_Pos) /*!< Bit mask of REGRESULT field. */

/* Register: SAADC_RESOLUTION */
/* Description: Resolution configuration */

/* Bits 2..0 : Set the resolution */
#define SAADC_RESOLUTION_VAL_Pos (0UL) /*!< Position of VAL field. */
#define SAADC_RESOLUTION_VAL_Msk (0x7UL << SAADC_RESOLUTION_VAL_Pos) /*!< Bit mask of VAL field. */
#define SAADC_RESOLUTION_VAL_8bit (0UL) /*!< 8 bit */
#define SAADC_RESOLUTION_VAL_10bit (1UL) /*!< 10 bit */
#define SAADC_RESOLUTION_VAL_12bit (2UL) /*!< 12 bit */
#define SAADC_RESOLUTION_VAL_14bit (3UL) /*!< 14 bit */
#define SAADC_RESOLUTION_VAL_16bit (4UL) /*!< 16 bit */

/* Register: SAADC_OVERSAMPLE */
/* Description: Oversampling configuration. OVERSAMPLE should not be combined with SCAN. The RESOLUTION is applied before averaging, thus for high OVERSAMPLE a higher RESOLUTION should be used. */

/* Bits 3..0 : Oversample control */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Pos (0UL) /*!< Position of OVERSAMPLE field. */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Msk (0xFUL << SAADC_OVERSAMPLE_OVERSAMPLE_Pos) /*!< Bit mask of OVERSAMPLE field. */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Bypass (0UL) /*!< Bypass oversampling */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over2x (1UL) /*!< Oversample 2x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over4x (2UL) /*!< Oversample 4x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over8x (3UL) /*!< Oversample 8x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over16x (4UL) /*!< Oversample 16x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over32x (5UL) /*!< Oversample 32x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over64x (6UL) /*!< Oversample 64x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over128x (7UL) /*!< Oversample 128x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over256x (8UL) /*!< Oversample 256x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over512x (9UL) /*!< Oversample 512x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over1024x (10UL) /*!< Oversample 1024x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over2048x (11UL) /*!< Oversample 2048x */
#define SAADC_OVERSAMPLE_OVERSAMPLE_Over4096x (12UL) /*!< Oversample 4096x */

/* Register: SAADC_SAMPLERATE */
/* Description: Controls normal or continuous sample rate */

/* Bit 12 : Select mode for sample rate control */
#define SAADC_SAMPLERATE_MODE_Pos (12UL) /*!< Position of MODE field. */
#define SAADC_SAMPLERATE_MODE_Msk (0x1UL << SAADC_SAMPLERATE_MODE_Pos) /*!< Bit mask of MODE field. */
#define SAADC_SAMPLERATE_MODE_Task (0UL) /*!< Rate is controlled from SAMPLE task */
#define SAADC_SAMPLERATE_MODE_Timers (1UL) /*!< Rate is controlled from local timer (use CC to control the rate) */

/* Bits 10..0 : Capture and compare value. Sample rate is 16 MHz/CC */
#define SAADC_SAMPLERATE_CC_Pos (0UL) /*!< Position of CC field. */
#define SAADC_SAMPLERATE_CC_Msk (0x7FFUL << SAADC_SAMPLERATE_CC_Pos) /*!< Bit mask of CC field. */

/* Register: SAADC_RESULT_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define SAADC_RESULT_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define SAADC_RESULT_PTR_PTR_Msk (0xFFFFFFFFUL << SAADC_RESULT_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: SAADC_RESULT_MAXCNT */
/* Description: Maximum number of buffer words to transfer */

/* Bits 14..0 : Maximum number of buffer words to transfer */
#define SAADC_RESULT_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define SAADC_RESULT_MAXCNT_MAXCNT_Msk (0x7FFFUL << SAADC_RESULT_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: SAADC_RESULT_AMOUNT */
/* Description: Number of buffer words transferred since last START */

/* Bits 14..0 : Number of buffer words transferred since last START. This register can be read after an END or STOPPED event. */
#define SAADC_RESULT_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define SAADC_RESULT_AMOUNT_AMOUNT_Msk (0x7FFFUL << SAADC_RESULT_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: SAADC_TESTCTRL */
/* Description: Control signals used during test of ADC */

/* Bit 24 : Will enable the input mux in the ADC, so the resistor strings can be connected even when the analog core is powered down */
#define SAADC_TESTCTRL_ENINMUX_Pos (24UL) /*!< Position of ENINMUX field. */
#define SAADC_TESTCTRL_ENINMUX_Msk (0x1UL << SAADC_TESTCTRL_ENINMUX_Pos) /*!< Bit mask of ENINMUX field. */

/* Bits 21..20 : Analog testbus control */
#define SAADC_TESTCTRL_ATB_Pos (20UL) /*!< Position of ATB field. */
#define SAADC_TESTCTRL_ATB_Msk (0x3UL << SAADC_TESTCTRL_ATB_Pos) /*!< Bit mask of ATB field. */
#define SAADC_TESTCTRL_ATB_Disabled (0UL) /*!< ATB disabled */
#define SAADC_TESTCTRL_ATB_VREF (1UL) /*!< Internal reference on ATB0, buffered reference on ATB1 */

/* Bits 16..12 : Test bus for ADC core, see design description for coding */
#define SAADC_TESTCTRL_TST_Pos (12UL) /*!< Position of TST field. */
#define SAADC_TESTCTRL_TST_Msk (0x1FUL << SAADC_TESTCTRL_TST_Pos) /*!< Bit mask of TST field. */

/* Bit 8 : Short input. Used to measure offset of ADC. */
#define SAADC_TESTCTRL_SHORT_Pos (8UL) /*!< Position of SHORT field. */
#define SAADC_TESTCTRL_SHORT_Msk (0x1UL << SAADC_TESTCTRL_SHORT_Pos) /*!< Bit mask of SHORT field. */

/* Bit 4 : Swap positive and negative input */
#define SAADC_TESTCTRL_SWITCH_Pos (4UL) /*!< Position of SWITCH field. */
#define SAADC_TESTCTRL_SWITCH_Msk (0x1UL << SAADC_TESTCTRL_SWITCH_Pos) /*!< Bit mask of SWITCH field. */

/* Bits 1..0 : Current control, 0 = normal current, higher is higher current */
#define SAADC_TESTCTRL_ICTRL_Pos (0UL) /*!< Position of ICTRL field. */
#define SAADC_TESTCTRL_ICTRL_Msk (0x3UL << SAADC_TESTCTRL_ICTRL_Pos) /*!< Bit mask of ICTRL field. */

/* Register: SAADC_CALOFFSET */
/* Description: Calibration control for offset error */

/* Bits 5..0 : Sign-magnitude coding */
#define SAADC_CALOFFSET_CALOFFSET_Pos (0UL) /*!< Position of CALOFFSET field. */
#define SAADC_CALOFFSET_CALOFFSET_Msk (0x3FUL << SAADC_CALOFFSET_CALOFFSET_Pos) /*!< Bit mask of CALOFFSET field. */

/* Register: SAADC_CALGAIN */
/* Description: Calibration control for gain error */

/* Bits 6..0 : Offset binary coding */
#define SAADC_CALGAIN_CALGAIN_Pos (0UL) /*!< Position of CALGAIN field. */
#define SAADC_CALGAIN_CALGAIN_Msk (0x7FUL << SAADC_CALGAIN_CALGAIN_Pos) /*!< Bit mask of CALGAIN field. */

/* Register: SAADC_CALVREF */
/* Description: Calibration control for reference voltage */

/* Bits 6..0 : Offset binary coding */
#define SAADC_CALVREF_CALVREF_Pos (0UL) /*!< Position of CALVREF field. */
#define SAADC_CALVREF_CALVREF_Msk (0x7FUL << SAADC_CALVREF_CALVREF_Pos) /*!< Bit mask of CALVREF field. */

/* Register: SAADC_LPOP */
/* Description: Enable low-power operation */

/* Bit 0 : Enable low-power operation, or use low-latency */
#define SAADC_LPOP_LPOP_Pos (0UL) /*!< Position of LPOP field. */
#define SAADC_LPOP_LPOP_Msk (0x1UL << SAADC_LPOP_LPOP_Pos) /*!< Bit mask of LPOP field. */
#define SAADC_LPOP_LPOP_LowLat (0UL) /*!< Low-latency operation */
#define SAADC_LPOP_LPOP_LowPower (1UL) /*!< Low-power operation */


/* Peripheral: SPI */
/* Description: Serial Peripheral Interface 0 */

/* Register: SPI_EVENTS_READY */
/* Description: TXD byte sent and RXD byte received */

/* Bit 0 : TXD byte sent and RXD byte received */
#define SPI_EVENTS_READY_EVENTS_READY_Pos (0UL) /*!< Position of EVENTS_READY field. */
#define SPI_EVENTS_READY_EVENTS_READY_Msk (0x1UL << SPI_EVENTS_READY_EVENTS_READY_Pos) /*!< Bit mask of EVENTS_READY field. */
#define SPI_EVENTS_READY_EVENTS_READY_NotGenerated (0UL) /*!< Event not generated */
#define SPI_EVENTS_READY_EVENTS_READY_Generated (1UL) /*!< Event generated */

/* Register: SPI_PUBLISH_READY */
/* Description: Publish configuration for event READY */

/* Bit 31 :   */
#define SPI_PUBLISH_READY_EN_Pos (31UL) /*!< Position of EN field. */
#define SPI_PUBLISH_READY_EN_Msk (0x1UL << SPI_PUBLISH_READY_EN_Pos) /*!< Bit mask of EN field. */
#define SPI_PUBLISH_READY_EN_Disabled (0UL) /*!< Disable publishing */
#define SPI_PUBLISH_READY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event READY will publish to. */
#define SPI_PUBLISH_READY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPI_PUBLISH_READY_CHIDX_Msk (0xFFUL << SPI_PUBLISH_READY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPI_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 2 : Enable or disable interrupt for event READY */
#define SPI_INTEN_READY_Pos (2UL) /*!< Position of READY field. */
#define SPI_INTEN_READY_Msk (0x1UL << SPI_INTEN_READY_Pos) /*!< Bit mask of READY field. */
#define SPI_INTEN_READY_Disabled (0UL) /*!< Disable */
#define SPI_INTEN_READY_Enabled (1UL) /*!< Enable */

/* Register: SPI_INTENSET */
/* Description: Enable interrupt */

/* Bit 2 : Write '1' to enable interrupt for event READY */
#define SPI_INTENSET_READY_Pos (2UL) /*!< Position of READY field. */
#define SPI_INTENSET_READY_Msk (0x1UL << SPI_INTENSET_READY_Pos) /*!< Bit mask of READY field. */
#define SPI_INTENSET_READY_Disabled (0UL) /*!< Read: Disabled */
#define SPI_INTENSET_READY_Enabled (1UL) /*!< Read: Enabled */
#define SPI_INTENSET_READY_Set (1UL) /*!< Enable */

/* Register: SPI_INTENCLR */
/* Description: Disable interrupt */

/* Bit 2 : Write '1' to disable interrupt for event READY */
#define SPI_INTENCLR_READY_Pos (2UL) /*!< Position of READY field. */
#define SPI_INTENCLR_READY_Msk (0x1UL << SPI_INTENCLR_READY_Pos) /*!< Bit mask of READY field. */
#define SPI_INTENCLR_READY_Disabled (0UL) /*!< Read: Disabled */
#define SPI_INTENCLR_READY_Enabled (1UL) /*!< Read: Enabled */
#define SPI_INTENCLR_READY_Clear (1UL) /*!< Disable */

/* Register: SPI_ENABLE */
/* Description: Enable SPI */

/* Bits 3..0 : Enable or disable SPI */
#define SPI_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define SPI_ENABLE_ENABLE_Msk (0xFUL << SPI_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define SPI_ENABLE_ENABLE_Disabled (0UL) /*!< Disable SPI */
#define SPI_ENABLE_ENABLE_Enabled (1UL) /*!< Enable SPI */

/* Register: SPI_PSEL_SCK */
/* Description: Pin select for SCK */

/* Bit 31 : Connection */
#define SPI_PSEL_SCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPI_PSEL_SCK_CONNECT_Msk (0x1UL << SPI_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPI_PSEL_SCK_CONNECT_Connected (0UL) /*!< Connect */
#define SPI_PSEL_SCK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPI_PSEL_SCK_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPI_PSEL_SCK_PORT_Msk (0x1UL << SPI_PSEL_SCK_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPI_PSEL_SCK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPI_PSEL_SCK_PIN_Msk (0x1FUL << SPI_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPI_PSEL_MOSI */
/* Description: Pin select for MOSI signal */

/* Bit 31 : Connection */
#define SPI_PSEL_MOSI_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPI_PSEL_MOSI_CONNECT_Msk (0x1UL << SPI_PSEL_MOSI_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPI_PSEL_MOSI_CONNECT_Connected (0UL) /*!< Connect */
#define SPI_PSEL_MOSI_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPI_PSEL_MOSI_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPI_PSEL_MOSI_PORT_Msk (0x1UL << SPI_PSEL_MOSI_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPI_PSEL_MOSI_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPI_PSEL_MOSI_PIN_Msk (0x1FUL << SPI_PSEL_MOSI_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPI_PSEL_MISO */
/* Description: Pin select for MISO signal */

/* Bit 31 : Connection */
#define SPI_PSEL_MISO_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPI_PSEL_MISO_CONNECT_Msk (0x1UL << SPI_PSEL_MISO_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPI_PSEL_MISO_CONNECT_Connected (0UL) /*!< Connect */
#define SPI_PSEL_MISO_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPI_PSEL_MISO_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPI_PSEL_MISO_PORT_Msk (0x1UL << SPI_PSEL_MISO_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPI_PSEL_MISO_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPI_PSEL_MISO_PIN_Msk (0x1FUL << SPI_PSEL_MISO_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPI_RXD */
/* Description: RXD register */

/* Bits 7..0 : RX data received. Double buffered */
#define SPI_RXD_RXD_Pos (0UL) /*!< Position of RXD field. */
#define SPI_RXD_RXD_Msk (0xFFUL << SPI_RXD_RXD_Pos) /*!< Bit mask of RXD field. */

/* Register: SPI_TXD */
/* Description: TXD register */

/* Bits 7..0 : TX data to send. Double buffered */
#define SPI_TXD_TXD_Pos (0UL) /*!< Position of TXD field. */
#define SPI_TXD_TXD_Msk (0xFFUL << SPI_TXD_TXD_Pos) /*!< Bit mask of TXD field. */

/* Register: SPI_FREQUENCY */
/* Description: SPI frequency. Accuracy depends on the HFCLK source selected. */

/* Bits 31..0 : SPI master data rate */
#define SPI_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
#define SPI_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << SPI_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
#define SPI_FREQUENCY_FREQUENCY_K125 (0x02000000UL) /*!< 125 kbps */
#define SPI_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps */
#define SPI_FREQUENCY_FREQUENCY_K500 (0x08000000UL) /*!< 500 kbps */
#define SPI_FREQUENCY_FREQUENCY_M1 (0x10000000UL) /*!< 1 Mbps */
#define SPI_FREQUENCY_FREQUENCY_M2 (0x20000000UL) /*!< 2 Mbps */
#define SPI_FREQUENCY_FREQUENCY_M4 (0x40000000UL) /*!< 4 Mbps */
#define SPI_FREQUENCY_FREQUENCY_M8 (0x80000000UL) /*!< 8 Mbps */

/* Register: SPI_CONFIG */
/* Description: Configuration register */

/* Bit 2 : Serial clock (SCK) polarity */
#define SPI_CONFIG_CPOL_Pos (2UL) /*!< Position of CPOL field. */
#define SPI_CONFIG_CPOL_Msk (0x1UL << SPI_CONFIG_CPOL_Pos) /*!< Bit mask of CPOL field. */
#define SPI_CONFIG_CPOL_ActiveHigh (0UL) /*!< Active high */
#define SPI_CONFIG_CPOL_ActiveLow (1UL) /*!< Active low */

/* Bit 1 : Serial clock (SCK) phase */
#define SPI_CONFIG_CPHA_Pos (1UL) /*!< Position of CPHA field. */
#define SPI_CONFIG_CPHA_Msk (0x1UL << SPI_CONFIG_CPHA_Pos) /*!< Bit mask of CPHA field. */
#define SPI_CONFIG_CPHA_Leading (0UL) /*!< Sample on leading edge of clock, shift serial data on trailing edge */
#define SPI_CONFIG_CPHA_Trailing (1UL) /*!< Sample on trailing edge of clock, shift serial data on leading edge */

/* Bit 0 : Bit order */
#define SPI_CONFIG_ORDER_Pos (0UL) /*!< Position of ORDER field. */
#define SPI_CONFIG_ORDER_Msk (0x1UL << SPI_CONFIG_ORDER_Pos) /*!< Bit mask of ORDER field. */
#define SPI_CONFIG_ORDER_MsbFirst (0UL) /*!< Most significant bit shifted out first */
#define SPI_CONFIG_ORDER_LsbFirst (1UL) /*!< Least significant bit shifted out first */

/* Register: SPI_POWER */
/* Description: Peripheral power control */

/* Bit 0 : Peripheral power control. The peripheral and its registers will be reset to its initial state by switching the peripheral off and then back on again. */
#define SPI_POWER_POWER_Pos (0UL) /*!< Position of POWER field. */
#define SPI_POWER_POWER_Msk (0x1UL << SPI_POWER_POWER_Pos) /*!< Bit mask of POWER field. */
#define SPI_POWER_POWER_Disabled (0UL) /*!< Peripheral is powered off */
#define SPI_POWER_POWER_Enabled (1UL) /*!< Peripheral is powered on */


/* Peripheral: SPIM */
/* Description: Serial Peripheral Interface Master with EasyDMA 0 */

/* Register: SPIM_TASKS_START */
/* Description: Start SPI transaction */

/* Bit 0 : Start SPI transaction */
#define SPIM_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define SPIM_TASKS_START_TASKS_START_Msk (0x1UL << SPIM_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define SPIM_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: SPIM_TASKS_STOP */
/* Description: Stop SPI transaction */

/* Bit 0 : Stop SPI transaction */
#define SPIM_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define SPIM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << SPIM_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define SPIM_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: SPIM_TASKS_SUSPEND */
/* Description: Suspend SPI transaction */

/* Bit 0 : Suspend SPI transaction */
#define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field. */
#define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND field. */
#define SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (1UL) /*!< Trigger task */

/* Register: SPIM_TASKS_RESUME */
/* Description: Resume SPI transaction */

/* Bit 0 : Resume SPI transaction */
#define SPIM_TASKS_RESUME_TASKS_RESUME_Pos (0UL) /*!< Position of TASKS_RESUME field. */
#define SPIM_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << SPIM_TASKS_RESUME_TASKS_RESUME_Pos) /*!< Bit mask of TASKS_RESUME field. */
#define SPIM_TASKS_RESUME_TASKS_RESUME_Trigger (1UL) /*!< Trigger task */

/* Register: SPIM_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define SPIM_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_SUBSCRIBE_START_EN_Msk (0x1UL << SPIM_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define SPIM_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define SPIM_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define SPIM_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_SUBSCRIBE_STOP_EN_Msk (0x1UL << SPIM_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define SPIM_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define SPIM_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_SUBSCRIBE_SUSPEND */
/* Description: Subscribe configuration for task SUSPEND */

/* Bit 31 :   */
#define SPIM_SUBSCRIBE_SUSPEND_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << SPIM_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_SUBSCRIBE_SUSPEND_EN_Disabled (0UL) /*!< Disable subscription */
#define SPIM_SUBSCRIBE_SUSPEND_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SUSPEND will subscribe to */
#define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_SUBSCRIBE_RESUME */
/* Description: Subscribe configuration for task RESUME */

/* Bit 31 :   */
#define SPIM_SUBSCRIBE_RESUME_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_SUBSCRIBE_RESUME_EN_Msk (0x1UL << SPIM_SUBSCRIBE_RESUME_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_SUBSCRIBE_RESUME_EN_Disabled (0UL) /*!< Disable subscription */
#define SPIM_SUBSCRIBE_RESUME_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task RESUME will subscribe to */
#define SPIM_SUBSCRIBE_RESUME_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << SPIM_SUBSCRIBE_RESUME_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_EVENTS_STOPPED */
/* Description: SPI transaction has stopped */

/* Bit 0 : SPI transaction has stopped */
#define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: SPIM_EVENTS_ENDRX */
/* Description: End of RXD buffer reached */

/* Bit 0 : End of RXD buffer reached */
#define SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Pos (0UL) /*!< Position of EVENTS_ENDRX field. */
#define SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Msk (0x1UL << SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Pos) /*!< Bit mask of EVENTS_ENDRX field. */
#define SPIM_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated (0UL) /*!< Event not generated */
#define SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Generated (1UL) /*!< Event generated */

/* Register: SPIM_EVENTS_END */
/* Description: End of RXD buffer and TXD buffer reached */

/* Bit 0 : End of RXD buffer and TXD buffer reached */
#define SPIM_EVENTS_END_EVENTS_END_Pos (0UL) /*!< Position of EVENTS_END field. */
#define SPIM_EVENTS_END_EVENTS_END_Msk (0x1UL << SPIM_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field. */
#define SPIM_EVENTS_END_EVENTS_END_NotGenerated (0UL) /*!< Event not generated */
#define SPIM_EVENTS_END_EVENTS_END_Generated (1UL) /*!< Event generated */

/* Register: SPIM_EVENTS_ENDTX */
/* Description: End of TXD buffer reached */

/* Bit 0 : End of TXD buffer reached */
#define SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Pos (0UL) /*!< Position of EVENTS_ENDTX field. */
#define SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Msk (0x1UL << SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Pos) /*!< Bit mask of EVENTS_ENDTX field. */
#define SPIM_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated (0UL) /*!< Event not generated */
#define SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Generated (1UL) /*!< Event generated */

/* Register: SPIM_EVENTS_STARTED */
/* Description: Transaction started */

/* Bit 0 : Transaction started */
#define SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL) /*!< Position of EVENTS_STARTED field. */
#define SPIM_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of EVENTS_STARTED field. */
#define SPIM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0UL) /*!< Event not generated */
#define SPIM_EVENTS_STARTED_EVENTS_STARTED_Generated (1UL) /*!< Event generated */

/* Register: SPIM_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define SPIM_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_PUBLISH_STOPPED_EN_Msk (0x1UL << SPIM_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define SPIM_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define SPIM_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_PUBLISH_ENDRX */
/* Description: Publish configuration for event ENDRX */

/* Bit 31 :   */
#define SPIM_PUBLISH_ENDRX_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_PUBLISH_ENDRX_EN_Msk (0x1UL << SPIM_PUBLISH_ENDRX_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_PUBLISH_ENDRX_EN_Disabled (0UL) /*!< Disable publishing */
#define SPIM_PUBLISH_ENDRX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDRX will publish to. */
#define SPIM_PUBLISH_ENDRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_PUBLISH_ENDRX_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_ENDRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_PUBLISH_END */
/* Description: Publish configuration for event END */

/* Bit 31 :   */
#define SPIM_PUBLISH_END_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_PUBLISH_END_EN_Msk (0x1UL << SPIM_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_PUBLISH_END_EN_Disabled (0UL) /*!< Disable publishing */
#define SPIM_PUBLISH_END_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event END will publish to. */
#define SPIM_PUBLISH_END_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_PUBLISH_END_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_PUBLISH_ENDTX */
/* Description: Publish configuration for event ENDTX */

/* Bit 31 :   */
#define SPIM_PUBLISH_ENDTX_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_PUBLISH_ENDTX_EN_Msk (0x1UL << SPIM_PUBLISH_ENDTX_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_PUBLISH_ENDTX_EN_Disabled (0UL) /*!< Disable publishing */
#define SPIM_PUBLISH_ENDTX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDTX will publish to. */
#define SPIM_PUBLISH_ENDTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_PUBLISH_ENDTX_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_ENDTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_PUBLISH_STARTED */
/* Description: Publish configuration for event STARTED */

/* Bit 31 :   */
#define SPIM_PUBLISH_STARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIM_PUBLISH_STARTED_EN_Msk (0x1UL << SPIM_PUBLISH_STARTED_EN_Pos) /*!< Bit mask of EN field. */
#define SPIM_PUBLISH_STARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define SPIM_PUBLISH_STARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STARTED will publish to. */
#define SPIM_PUBLISH_STARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIM_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << SPIM_PUBLISH_STARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIM_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 17 : Shortcut between event END and task START */
#define SPIM_SHORTS_END_START_Pos (17UL) /*!< Position of END_START field. */
#define SPIM_SHORTS_END_START_Msk (0x1UL << SPIM_SHORTS_END_START_Pos) /*!< Bit mask of END_START field. */
#define SPIM_SHORTS_END_START_Disabled (0UL) /*!< Disable shortcut */
#define SPIM_SHORTS_END_START_Enabled (1UL) /*!< Enable shortcut */

/* Register: SPIM_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 19 : Enable or disable interrupt for event STARTED */
#define SPIM_INTEN_STARTED_Pos (19UL) /*!< Position of STARTED field. */
#define SPIM_INTEN_STARTED_Msk (0x1UL << SPIM_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define SPIM_INTEN_STARTED_Disabled (0UL) /*!< Disable */
#define SPIM_INTEN_STARTED_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event ENDTX */
#define SPIM_INTEN_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define SPIM_INTEN_ENDTX_Msk (0x1UL << SPIM_INTEN_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define SPIM_INTEN_ENDTX_Disabled (0UL) /*!< Disable */
#define SPIM_INTEN_ENDTX_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event END */
#define SPIM_INTEN_END_Pos (6UL) /*!< Position of END field. */
#define SPIM_INTEN_END_Msk (0x1UL << SPIM_INTEN_END_Pos) /*!< Bit mask of END field. */
#define SPIM_INTEN_END_Disabled (0UL) /*!< Disable */
#define SPIM_INTEN_END_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event ENDRX */
#define SPIM_INTEN_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define SPIM_INTEN_ENDRX_Msk (0x1UL << SPIM_INTEN_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define SPIM_INTEN_ENDRX_Disabled (0UL) /*!< Disable */
#define SPIM_INTEN_ENDRX_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event STOPPED */
#define SPIM_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define SPIM_INTEN_STOPPED_Msk (0x1UL << SPIM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define SPIM_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define SPIM_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Register: SPIM_INTENSET */
/* Description: Enable interrupt */

/* Bit 19 : Write '1' to enable interrupt for event STARTED */
#define SPIM_INTENSET_STARTED_Pos (19UL) /*!< Position of STARTED field. */
#define SPIM_INTENSET_STARTED_Msk (0x1UL << SPIM_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define SPIM_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENSET_STARTED_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event ENDTX */
#define SPIM_INTENSET_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define SPIM_INTENSET_ENDTX_Msk (0x1UL << SPIM_INTENSET_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define SPIM_INTENSET_ENDTX_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENSET_ENDTX_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENSET_ENDTX_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event END */
#define SPIM_INTENSET_END_Pos (6UL) /*!< Position of END field. */
#define SPIM_INTENSET_END_Msk (0x1UL << SPIM_INTENSET_END_Pos) /*!< Bit mask of END field. */
#define SPIM_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENSET_END_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event ENDRX */
#define SPIM_INTENSET_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define SPIM_INTENSET_ENDRX_Msk (0x1UL << SPIM_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define SPIM_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENSET_ENDRX_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event STOPPED */
#define SPIM_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define SPIM_INTENSET_STOPPED_Msk (0x1UL << SPIM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define SPIM_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Register: SPIM_INTENCLR */
/* Description: Disable interrupt */

/* Bit 19 : Write '1' to disable interrupt for event STARTED */
#define SPIM_INTENCLR_STARTED_Pos (19UL) /*!< Position of STARTED field. */
#define SPIM_INTENCLR_STARTED_Msk (0x1UL << SPIM_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define SPIM_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENCLR_STARTED_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event ENDTX */
#define SPIM_INTENCLR_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define SPIM_INTENCLR_ENDTX_Msk (0x1UL << SPIM_INTENCLR_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define SPIM_INTENCLR_ENDTX_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENCLR_ENDTX_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENCLR_ENDTX_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event END */
#define SPIM_INTENCLR_END_Pos (6UL) /*!< Position of END field. */
#define SPIM_INTENCLR_END_Msk (0x1UL << SPIM_INTENCLR_END_Pos) /*!< Bit mask of END field. */
#define SPIM_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENCLR_END_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event ENDRX */
#define SPIM_INTENCLR_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define SPIM_INTENCLR_ENDRX_Msk (0x1UL << SPIM_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define SPIM_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event STOPPED */
#define SPIM_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define SPIM_INTENCLR_STOPPED_Msk (0x1UL << SPIM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define SPIM_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define SPIM_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define SPIM_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Register: SPIM_STALLSTAT */
/* Description: Stall status for EasyDMA RAM accesses. The fields in this register is set to STALL by hardware whenever a stall occurres and can be cleared (set to NOSTALL) by the CPU. */

/* Bit 1 : Stall status for EasyDMA RAM writes */
#define SPIM_STALLSTAT_RX_Pos (1UL) /*!< Position of RX field. */
#define SPIM_STALLSTAT_RX_Msk (0x1UL << SPIM_STALLSTAT_RX_Pos) /*!< Bit mask of RX field. */
#define SPIM_STALLSTAT_RX_NOSTALL (0UL) /*!< No stall */
#define SPIM_STALLSTAT_RX_STALL (1UL) /*!< A stall has occurred */

/* Bit 0 : Stall status for EasyDMA RAM reads */
#define SPIM_STALLSTAT_TX_Pos (0UL) /*!< Position of TX field. */
#define SPIM_STALLSTAT_TX_Msk (0x1UL << SPIM_STALLSTAT_TX_Pos) /*!< Bit mask of TX field. */
#define SPIM_STALLSTAT_TX_NOSTALL (0UL) /*!< No stall */
#define SPIM_STALLSTAT_TX_STALL (1UL) /*!< A stall has occurred */

/* Register: SPIM_ENABLE */
/* Description: Enable SPIM */

/* Bits 3..0 : Enable or disable SPIM */
#define SPIM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define SPIM_ENABLE_ENABLE_Msk (0xFUL << SPIM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define SPIM_ENABLE_ENABLE_Disabled (0UL) /*!< Disable SPIM */
#define SPIM_ENABLE_ENABLE_Enabled (7UL) /*!< Enable SPIM */

/* Register: SPIM_PSEL_SCK */
/* Description: Pin select for SCK */

/* Bit 31 : Connection */
#define SPIM_PSEL_SCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIM_PSEL_SCK_CONNECT_Msk (0x1UL << SPIM_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIM_PSEL_SCK_CONNECT_Connected (0UL) /*!< Connect */
#define SPIM_PSEL_SCK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIM_PSEL_SCK_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIM_PSEL_SCK_PORT_Msk (0x1UL << SPIM_PSEL_SCK_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIM_PSEL_SCK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIM_PSEL_SCK_PIN_Msk (0x1FUL << SPIM_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIM_PSEL_MOSI */
/* Description: Pin select for MOSI signal */

/* Bit 31 : Connection */
#define SPIM_PSEL_MOSI_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIM_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIM_PSEL_MOSI_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIM_PSEL_MOSI_CONNECT_Connected (0UL) /*!< Connect */
#define SPIM_PSEL_MOSI_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIM_PSEL_MOSI_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIM_PSEL_MOSI_PORT_Msk (0x1UL << SPIM_PSEL_MOSI_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIM_PSEL_MOSI_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIM_PSEL_MOSI_PIN_Msk (0x1FUL << SPIM_PSEL_MOSI_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIM_PSEL_MISO */
/* Description: Pin select for MISO signal */

/* Bit 31 : Connection */
#define SPIM_PSEL_MISO_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIM_PSEL_MISO_CONNECT_Msk (0x1UL << SPIM_PSEL_MISO_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIM_PSEL_MISO_CONNECT_Connected (0UL) /*!< Connect */
#define SPIM_PSEL_MISO_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIM_PSEL_MISO_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIM_PSEL_MISO_PORT_Msk (0x1UL << SPIM_PSEL_MISO_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIM_PSEL_MISO_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIM_PSEL_MISO_PIN_Msk (0x1FUL << SPIM_PSEL_MISO_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIM_PSEL_CSN */
/* Description: Pin select for CSN */

/* Bit 31 : Connection */
#define SPIM_PSEL_CSN_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIM_PSEL_CSN_CONNECT_Msk (0x1UL << SPIM_PSEL_CSN_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIM_PSEL_CSN_CONNECT_Connected (0UL) /*!< Connect */
#define SPIM_PSEL_CSN_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIM_PSEL_CSN_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIM_PSEL_CSN_PORT_Msk (0x1UL << SPIM_PSEL_CSN_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIM_PSEL_CSN_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIM_PSEL_CSN_PIN_Msk (0x1FUL << SPIM_PSEL_CSN_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIM_RXDDATA */
/* Description: RXD register */

/* Bits 7..0 : RX data received. Double buffered. */
#define SPIM_RXDDATA_RXD_Pos (0UL) /*!< Position of RXD field. */
#define SPIM_RXDDATA_RXD_Msk (0xFFUL << SPIM_RXDDATA_RXD_Pos) /*!< Bit mask of RXD field. */

/* Register: SPIM_TXDDATA */
/* Description: TXD register */

/* Bits 7..0 : TX data to send. Double buffered. */
#define SPIM_TXDDATA_TXD_Pos (0UL) /*!< Position of TXD field. */
#define SPIM_TXDDATA_TXD_Msk (0xFFUL << SPIM_TXDDATA_TXD_Pos) /*!< Bit mask of TXD field. */

/* Register: SPIM_FREQUENCY */
/* Description: SPI frequency. Accuracy depends on the HFCLK source selected. */

/* Bits 31..0 : SPI master data rate */
#define SPIM_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
#define SPIM_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << SPIM_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
#define SPIM_FREQUENCY_FREQUENCY_K125 (0x02000000UL) /*!< 125 kbps */
#define SPIM_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps */
#define SPIM_FREQUENCY_FREQUENCY_K500 (0x08000000UL) /*!< 500 kbps */
#define SPIM_FREQUENCY_FREQUENCY_M16 (0x0A000000UL) /*!< 16 Mbps */
#define SPIM_FREQUENCY_FREQUENCY_M1 (0x10000000UL) /*!< 1 Mbps */
#define SPIM_FREQUENCY_FREQUENCY_M32 (0x14000000UL) /*!< 32 Mbps */
#define SPIM_FREQUENCY_FREQUENCY_M2 (0x20000000UL) /*!< 2 Mbps */
#define SPIM_FREQUENCY_FREQUENCY_M4 (0x40000000UL) /*!< 4 Mbps */
#define SPIM_FREQUENCY_FREQUENCY_M8 (0x80000000UL) /*!< 8 Mbps */

/* Register: SPIM_RXD_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define SPIM_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define SPIM_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: SPIM_RXD_MAXCNT */
/* Description: Maximum number of bytes in receive buffer */

/* Bits 15..0 : Maximum number of bytes in receive buffer */
#define SPIM_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define SPIM_RXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIM_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: SPIM_RXD_AMOUNT */
/* Description: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction */
#define SPIM_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define SPIM_RXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIM_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: SPIM_RXD_LIST */
/* Description: EasyDMA list type */

/* Bits 1..0 : List type */
#define SPIM_RXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define SPIM_RXD_LIST_LIST_Msk (0x3UL << SPIM_RXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define SPIM_RXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
#define SPIM_RXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */

/* Register: SPIM_TXD_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define SPIM_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define SPIM_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << SPIM_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: SPIM_TXD_MAXCNT */
/* Description: Number of bytes in transmit buffer */

/* Bits 15..0 : Maximum number of bytes in transmit buffer */
#define SPIM_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define SPIM_TXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIM_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: SPIM_TXD_AMOUNT */
/* Description: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction */
#define SPIM_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define SPIM_TXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIM_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: SPIM_TXD_LIST */
/* Description: EasyDMA list type */

/* Bits 1..0 : List type */
#define SPIM_TXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define SPIM_TXD_LIST_LIST_Msk (0x3UL << SPIM_TXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define SPIM_TXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
#define SPIM_TXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */

/* Register: SPIM_CONFIG */
/* Description: Configuration register */

/* Bit 2 : Serial clock (SCK) polarity */
#define SPIM_CONFIG_CPOL_Pos (2UL) /*!< Position of CPOL field. */
#define SPIM_CONFIG_CPOL_Msk (0x1UL << SPIM_CONFIG_CPOL_Pos) /*!< Bit mask of CPOL field. */
#define SPIM_CONFIG_CPOL_ActiveHigh (0UL) /*!< Active high */
#define SPIM_CONFIG_CPOL_ActiveLow (1UL) /*!< Active low */

/* Bit 1 : Serial clock (SCK) phase */
#define SPIM_CONFIG_CPHA_Pos (1UL) /*!< Position of CPHA field. */
#define SPIM_CONFIG_CPHA_Msk (0x1UL << SPIM_CONFIG_CPHA_Pos) /*!< Bit mask of CPHA field. */
#define SPIM_CONFIG_CPHA_Leading (0UL) /*!< Sample on leading edge of clock, shift serial data on trailing edge */
#define SPIM_CONFIG_CPHA_Trailing (1UL) /*!< Sample on trailing edge of clock, shift serial data on leading edge */

/* Bit 0 : Bit order */
#define SPIM_CONFIG_ORDER_Pos (0UL) /*!< Position of ORDER field. */
#define SPIM_CONFIG_ORDER_Msk (0x1UL << SPIM_CONFIG_ORDER_Pos) /*!< Bit mask of ORDER field. */
#define SPIM_CONFIG_ORDER_MsbFirst (0UL) /*!< Most significant bit shifted out first */
#define SPIM_CONFIG_ORDER_LsbFirst (1UL) /*!< Least significant bit shifted out first */

/* Register: SPIM_IFTIMING_RXDELAY */
/* Description: Sample delay for input serial data on MISO */

/* Bits 2..0 : Sample delay for input serial data on MISO. The value specifies the number of 64 MHz clock cycles (15.625 ns) delay from the the sampling edge of SCK (leading edge for CONFIG.CPHA = 0, trailing edge for CONFIG.CPHA = 1) until the input serial data is sampled. As en example, if RXDELAY = 0 and CONFIG.CPHA = 0, the input serial data is sampled on the rising edge of SCK. */
#define SPIM_IFTIMING_RXDELAY_RXDELAY_Pos (0UL) /*!< Position of RXDELAY field. */
#define SPIM_IFTIMING_RXDELAY_RXDELAY_Msk (0x7UL << SPIM_IFTIMING_RXDELAY_RXDELAY_Pos) /*!< Bit mask of RXDELAY field. */

/* Register: SPIM_IFTIMING_CSNDUR */
/* Description: Minimum duration between edge of CSN and edge of SCK and minimum duration CSN must stay high between transactions */

/* Bits 7..0 : Minimum duration between edge of CSN and edge of SCK and minimum duration CSN must stay high between transactions. The value is specified in number of 64 MHz clock cycles (15.625 ns). */
#define SPIM_IFTIMING_CSNDUR_CSNDUR_Pos (0UL) /*!< Position of CSNDUR field. */
#define SPIM_IFTIMING_CSNDUR_CSNDUR_Msk (0xFFUL << SPIM_IFTIMING_CSNDUR_CSNDUR_Pos) /*!< Bit mask of CSNDUR field. */

/* Register: SPIM_CSNPOL */
/* Description: Polarity of CSN output */

/* Bit 0 : Polarity of CSN output */
#define SPIM_CSNPOL_CSNPOL_Pos (0UL) /*!< Position of CSNPOL field. */
#define SPIM_CSNPOL_CSNPOL_Msk (0x1UL << SPIM_CSNPOL_CSNPOL_Pos) /*!< Bit mask of CSNPOL field. */
#define SPIM_CSNPOL_CSNPOL_LOW (0UL) /*!< Active low (idle state high) */
#define SPIM_CSNPOL_CSNPOL_HIGH (1UL) /*!< Active high (idle state low) */

/* Register: SPIM_PSELDCX */
/* Description: Pin select for DCX signal */

/* Bit 31 : Connection */
#define SPIM_PSELDCX_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIM_PSELDCX_CONNECT_Msk (0x1UL << SPIM_PSELDCX_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIM_PSELDCX_CONNECT_Connected (0UL) /*!< Connect */
#define SPIM_PSELDCX_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIM_PSELDCX_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIM_PSELDCX_PORT_Msk (0x1UL << SPIM_PSELDCX_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIM_PSELDCX_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIM_PSELDCX_PIN_Msk (0x1FUL << SPIM_PSELDCX_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIM_DCXCNT */
/* Description: DCX configuration */

/* Bits 3..0 : This register specifies the number of command bytes preceding the data bytes. The PSEL.DCX line will be low during transmission of command bytes and high during transmission of data bytes. Value 0xF indicates that all bytes are command bytes. */
#define SPIM_DCXCNT_DCXCNT_Pos (0UL) /*!< Position of DCXCNT field. */
#define SPIM_DCXCNT_DCXCNT_Msk (0xFUL << SPIM_DCXCNT_DCXCNT_Pos) /*!< Bit mask of DCXCNT field. */

/* Register: SPIM_ORC */
/* Description: Byte transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than TXD.MAXCNT */

/* Bits 7..0 : Byte transmitted after TXD.MAXCNT bytes have been transmitted in the case when RXD.MAXCNT is greater than TXD.MAXCNT. */
#define SPIM_ORC_ORC_Pos (0UL) /*!< Position of ORC field. */
#define SPIM_ORC_ORC_Msk (0xFFUL << SPIM_ORC_ORC_Pos) /*!< Bit mask of ORC field. */


/* Peripheral: SPIS */
/* Description: SPI Slave 0 */

/* Register: SPIS_TASKS_ACQUIRE */
/* Description: Acquire SPI semaphore */

/* Bit 0 : Acquire SPI semaphore */
#define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos (0UL) /*!< Position of TASKS_ACQUIRE field. */
#define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Msk (0x1UL << SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos) /*!< Bit mask of TASKS_ACQUIRE field. */
#define SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Trigger (1UL) /*!< Trigger task */

/* Register: SPIS_TASKS_RELEASE */
/* Description: Release SPI semaphore, enabling the SPI slave to acquire it */

/* Bit 0 : Release SPI semaphore, enabling the SPI slave to acquire it */
#define SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos (0UL) /*!< Position of TASKS_RELEASE field. */
#define SPIS_TASKS_RELEASE_TASKS_RELEASE_Msk (0x1UL << SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos) /*!< Bit mask of TASKS_RELEASE field. */
#define SPIS_TASKS_RELEASE_TASKS_RELEASE_Trigger (1UL) /*!< Trigger task */

/* Register: SPIS_SUBSCRIBE_ACQUIRE */
/* Description: Subscribe configuration for task ACQUIRE */

/* Bit 31 :   */
#define SPIS_SUBSCRIBE_ACQUIRE_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIS_SUBSCRIBE_ACQUIRE_EN_Msk (0x1UL << SPIS_SUBSCRIBE_ACQUIRE_EN_Pos) /*!< Bit mask of EN field. */
#define SPIS_SUBSCRIBE_ACQUIRE_EN_Disabled (0UL) /*!< Disable subscription */
#define SPIS_SUBSCRIBE_ACQUIRE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task ACQUIRE will subscribe to */
#define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_ACQUIRE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIS_SUBSCRIBE_RELEASE */
/* Description: Subscribe configuration for task RELEASE */

/* Bit 31 :   */
#define SPIS_SUBSCRIBE_RELEASE_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIS_SUBSCRIBE_RELEASE_EN_Msk (0x1UL << SPIS_SUBSCRIBE_RELEASE_EN_Pos) /*!< Bit mask of EN field. */
#define SPIS_SUBSCRIBE_RELEASE_EN_Disabled (0UL) /*!< Disable subscription */
#define SPIS_SUBSCRIBE_RELEASE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task RELEASE will subscribe to */
#define SPIS_SUBSCRIBE_RELEASE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIS_SUBSCRIBE_RELEASE_CHIDX_Msk (0xFFUL << SPIS_SUBSCRIBE_RELEASE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIS_EVENTS_END */
/* Description: Granted transaction completed */

/* Bit 0 : Granted transaction completed */
#define SPIS_EVENTS_END_EVENTS_END_Pos (0UL) /*!< Position of EVENTS_END field. */
#define SPIS_EVENTS_END_EVENTS_END_Msk (0x1UL << SPIS_EVENTS_END_EVENTS_END_Pos) /*!< Bit mask of EVENTS_END field. */
#define SPIS_EVENTS_END_EVENTS_END_NotGenerated (0UL) /*!< Event not generated */
#define SPIS_EVENTS_END_EVENTS_END_Generated (1UL) /*!< Event generated */

/* Register: SPIS_EVENTS_ENDRX */
/* Description: End of RXD buffer reached */

/* Bit 0 : End of RXD buffer reached */
#define SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Pos (0UL) /*!< Position of EVENTS_ENDRX field. */
#define SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Msk (0x1UL << SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Pos) /*!< Bit mask of EVENTS_ENDRX field. */
#define SPIS_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated (0UL) /*!< Event not generated */
#define SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Generated (1UL) /*!< Event generated */

/* Register: SPIS_EVENTS_ACQUIRED */
/* Description: Semaphore acquired */

/* Bit 0 : Semaphore acquired */
#define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos (0UL) /*!< Position of EVENTS_ACQUIRED field. */
#define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Msk (0x1UL << SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos) /*!< Bit mask of EVENTS_ACQUIRED field. */
#define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_NotGenerated (0UL) /*!< Event not generated */
#define SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Generated (1UL) /*!< Event generated */

/* Register: SPIS_PUBLISH_END */
/* Description: Publish configuration for event END */

/* Bit 31 :   */
#define SPIS_PUBLISH_END_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIS_PUBLISH_END_EN_Msk (0x1UL << SPIS_PUBLISH_END_EN_Pos) /*!< Bit mask of EN field. */
#define SPIS_PUBLISH_END_EN_Disabled (0UL) /*!< Disable publishing */
#define SPIS_PUBLISH_END_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event END will publish to. */
#define SPIS_PUBLISH_END_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIS_PUBLISH_END_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_END_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIS_PUBLISH_ENDRX */
/* Description: Publish configuration for event ENDRX */

/* Bit 31 :   */
#define SPIS_PUBLISH_ENDRX_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIS_PUBLISH_ENDRX_EN_Msk (0x1UL << SPIS_PUBLISH_ENDRX_EN_Pos) /*!< Bit mask of EN field. */
#define SPIS_PUBLISH_ENDRX_EN_Disabled (0UL) /*!< Disable publishing */
#define SPIS_PUBLISH_ENDRX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDRX will publish to. */
#define SPIS_PUBLISH_ENDRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIS_PUBLISH_ENDRX_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_ENDRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIS_PUBLISH_ACQUIRED */
/* Description: Publish configuration for event ACQUIRED */

/* Bit 31 :   */
#define SPIS_PUBLISH_ACQUIRED_EN_Pos (31UL) /*!< Position of EN field. */
#define SPIS_PUBLISH_ACQUIRED_EN_Msk (0x1UL << SPIS_PUBLISH_ACQUIRED_EN_Pos) /*!< Bit mask of EN field. */
#define SPIS_PUBLISH_ACQUIRED_EN_Disabled (0UL) /*!< Disable publishing */
#define SPIS_PUBLISH_ACQUIRED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ACQUIRED will publish to. */
#define SPIS_PUBLISH_ACQUIRED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPIS_PUBLISH_ACQUIRED_CHIDX_Msk (0xFFUL << SPIS_PUBLISH_ACQUIRED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPIS_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 2 : Shortcut between event END and task ACQUIRE */
#define SPIS_SHORTS_END_ACQUIRE_Pos (2UL) /*!< Position of END_ACQUIRE field. */
#define SPIS_SHORTS_END_ACQUIRE_Msk (0x1UL << SPIS_SHORTS_END_ACQUIRE_Pos) /*!< Bit mask of END_ACQUIRE field. */
#define SPIS_SHORTS_END_ACQUIRE_Disabled (0UL) /*!< Disable shortcut */
#define SPIS_SHORTS_END_ACQUIRE_Enabled (1UL) /*!< Enable shortcut */

/* Register: SPIS_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 10 : Enable or disable interrupt for event ACQUIRED */
#define SPIS_INTEN_ACQUIRED_Pos (10UL) /*!< Position of ACQUIRED field. */
#define SPIS_INTEN_ACQUIRED_Msk (0x1UL << SPIS_INTEN_ACQUIRED_Pos) /*!< Bit mask of ACQUIRED field. */
#define SPIS_INTEN_ACQUIRED_Disabled (0UL) /*!< Disable */
#define SPIS_INTEN_ACQUIRED_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event ENDRX */
#define SPIS_INTEN_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define SPIS_INTEN_ENDRX_Msk (0x1UL << SPIS_INTEN_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define SPIS_INTEN_ENDRX_Disabled (0UL) /*!< Disable */
#define SPIS_INTEN_ENDRX_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event END */
#define SPIS_INTEN_END_Pos (1UL) /*!< Position of END field. */
#define SPIS_INTEN_END_Msk (0x1UL << SPIS_INTEN_END_Pos) /*!< Bit mask of END field. */
#define SPIS_INTEN_END_Disabled (0UL) /*!< Disable */
#define SPIS_INTEN_END_Enabled (1UL) /*!< Enable */

/* Register: SPIS_INTENSET */
/* Description: Enable interrupt */

/* Bit 10 : Write '1' to enable interrupt for event ACQUIRED */
#define SPIS_INTENSET_ACQUIRED_Pos (10UL) /*!< Position of ACQUIRED field. */
#define SPIS_INTENSET_ACQUIRED_Msk (0x1UL << SPIS_INTENSET_ACQUIRED_Pos) /*!< Bit mask of ACQUIRED field. */
#define SPIS_INTENSET_ACQUIRED_Disabled (0UL) /*!< Read: Disabled */
#define SPIS_INTENSET_ACQUIRED_Enabled (1UL) /*!< Read: Enabled */
#define SPIS_INTENSET_ACQUIRED_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event ENDRX */
#define SPIS_INTENSET_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define SPIS_INTENSET_ENDRX_Msk (0x1UL << SPIS_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define SPIS_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define SPIS_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define SPIS_INTENSET_ENDRX_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event END */
#define SPIS_INTENSET_END_Pos (1UL) /*!< Position of END field. */
#define SPIS_INTENSET_END_Msk (0x1UL << SPIS_INTENSET_END_Pos) /*!< Bit mask of END field. */
#define SPIS_INTENSET_END_Disabled (0UL) /*!< Read: Disabled */
#define SPIS_INTENSET_END_Enabled (1UL) /*!< Read: Enabled */
#define SPIS_INTENSET_END_Set (1UL) /*!< Enable */

/* Register: SPIS_INTENCLR */
/* Description: Disable interrupt */

/* Bit 10 : Write '1' to disable interrupt for event ACQUIRED */
#define SPIS_INTENCLR_ACQUIRED_Pos (10UL) /*!< Position of ACQUIRED field. */
#define SPIS_INTENCLR_ACQUIRED_Msk (0x1UL << SPIS_INTENCLR_ACQUIRED_Pos) /*!< Bit mask of ACQUIRED field. */
#define SPIS_INTENCLR_ACQUIRED_Disabled (0UL) /*!< Read: Disabled */
#define SPIS_INTENCLR_ACQUIRED_Enabled (1UL) /*!< Read: Enabled */
#define SPIS_INTENCLR_ACQUIRED_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event ENDRX */
#define SPIS_INTENCLR_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define SPIS_INTENCLR_ENDRX_Msk (0x1UL << SPIS_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define SPIS_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define SPIS_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define SPIS_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event END */
#define SPIS_INTENCLR_END_Pos (1UL) /*!< Position of END field. */
#define SPIS_INTENCLR_END_Msk (0x1UL << SPIS_INTENCLR_END_Pos) /*!< Bit mask of END field. */
#define SPIS_INTENCLR_END_Disabled (0UL) /*!< Read: Disabled */
#define SPIS_INTENCLR_END_Enabled (1UL) /*!< Read: Enabled */
#define SPIS_INTENCLR_END_Clear (1UL) /*!< Disable */

/* Register: SPIS_SEMSTAT */
/* Description: Semaphore status register */

/* Bits 1..0 : Semaphore status */
#define SPIS_SEMSTAT_SEMSTAT_Pos (0UL) /*!< Position of SEMSTAT field. */
#define SPIS_SEMSTAT_SEMSTAT_Msk (0x3UL << SPIS_SEMSTAT_SEMSTAT_Pos) /*!< Bit mask of SEMSTAT field. */
#define SPIS_SEMSTAT_SEMSTAT_Free (0UL) /*!< Semaphore is free */
#define SPIS_SEMSTAT_SEMSTAT_CPU (1UL) /*!< Semaphore is assigned to CPU */
#define SPIS_SEMSTAT_SEMSTAT_SPIS (2UL) /*!< Semaphore is assigned to SPI slave */
#define SPIS_SEMSTAT_SEMSTAT_CPUPending (3UL) /*!< Semaphore is assigned to SPI but a handover to the CPU is pending */

/* Register: SPIS_STATUS */
/* Description: Status from last transaction */

/* Bit 1 : RX buffer overflow detected, and prevented */
#define SPIS_STATUS_OVERFLOW_Pos (1UL) /*!< Position of OVERFLOW field. */
#define SPIS_STATUS_OVERFLOW_Msk (0x1UL << SPIS_STATUS_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field. */
#define SPIS_STATUS_OVERFLOW_NotPresent (0UL) /*!< Read: error not present */
#define SPIS_STATUS_OVERFLOW_Present (1UL) /*!< Read: error present */
#define SPIS_STATUS_OVERFLOW_Clear (1UL) /*!< Write: clear error on writing '1' */

/* Bit 0 : TX buffer over-read detected, and prevented */
#define SPIS_STATUS_OVERREAD_Pos (0UL) /*!< Position of OVERREAD field. */
#define SPIS_STATUS_OVERREAD_Msk (0x1UL << SPIS_STATUS_OVERREAD_Pos) /*!< Bit mask of OVERREAD field. */
#define SPIS_STATUS_OVERREAD_NotPresent (0UL) /*!< Read: error not present */
#define SPIS_STATUS_OVERREAD_Present (1UL) /*!< Read: error present */
#define SPIS_STATUS_OVERREAD_Clear (1UL) /*!< Write: clear error on writing '1' */

/* Register: SPIS_ENABLE */
/* Description: Enable SPI slave */

/* Bits 3..0 : Enable or disable SPI slave */
#define SPIS_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define SPIS_ENABLE_ENABLE_Msk (0xFUL << SPIS_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define SPIS_ENABLE_ENABLE_Disabled (0UL) /*!< Disable SPI slave */
#define SPIS_ENABLE_ENABLE_Enabled (2UL) /*!< Enable SPI slave */

/* Register: SPIS_PSEL_SCK */
/* Description: Pin select for SCK */

/* Bit 31 : Connection */
#define SPIS_PSEL_SCK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIS_PSEL_SCK_CONNECT_Msk (0x1UL << SPIS_PSEL_SCK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIS_PSEL_SCK_CONNECT_Connected (0UL) /*!< Connect */
#define SPIS_PSEL_SCK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIS_PSEL_SCK_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIS_PSEL_SCK_PORT_Msk (0x1UL << SPIS_PSEL_SCK_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIS_PSEL_SCK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIS_PSEL_SCK_PIN_Msk (0x1FUL << SPIS_PSEL_SCK_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIS_PSEL_MISO */
/* Description: Pin select for MISO signal */

/* Bit 31 : Connection */
#define SPIS_PSEL_MISO_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIS_PSEL_MISO_CONNECT_Msk (0x1UL << SPIS_PSEL_MISO_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIS_PSEL_MISO_CONNECT_Connected (0UL) /*!< Connect */
#define SPIS_PSEL_MISO_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIS_PSEL_MISO_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIS_PSEL_MISO_PORT_Msk (0x1UL << SPIS_PSEL_MISO_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIS_PSEL_MISO_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIS_PSEL_MISO_PIN_Msk (0x1FUL << SPIS_PSEL_MISO_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIS_PSEL_MOSI */
/* Description: Pin select for MOSI signal */

/* Bit 31 : Connection */
#define SPIS_PSEL_MOSI_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIS_PSEL_MOSI_CONNECT_Msk (0x1UL << SPIS_PSEL_MOSI_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIS_PSEL_MOSI_CONNECT_Connected (0UL) /*!< Connect */
#define SPIS_PSEL_MOSI_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIS_PSEL_MOSI_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIS_PSEL_MOSI_PORT_Msk (0x1UL << SPIS_PSEL_MOSI_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIS_PSEL_MOSI_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIS_PSEL_MOSI_PIN_Msk (0x1FUL << SPIS_PSEL_MOSI_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIS_PSEL_CSN */
/* Description: Pin select for CSN signal */

/* Bit 31 : Connection */
#define SPIS_PSEL_CSN_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define SPIS_PSEL_CSN_CONNECT_Msk (0x1UL << SPIS_PSEL_CSN_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define SPIS_PSEL_CSN_CONNECT_Connected (0UL) /*!< Connect */
#define SPIS_PSEL_CSN_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define SPIS_PSEL_CSN_PORT_Pos (5UL) /*!< Position of PORT field. */
#define SPIS_PSEL_CSN_PORT_Msk (0x1UL << SPIS_PSEL_CSN_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define SPIS_PSEL_CSN_PIN_Pos (0UL) /*!< Position of PIN field. */
#define SPIS_PSEL_CSN_PIN_Msk (0x1FUL << SPIS_PSEL_CSN_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: SPIS_RXD_PTR */
/* Description: RXD data pointer */

/* Bits 31..0 : RXD data pointer */
#define SPIS_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define SPIS_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: SPIS_RXD_MAXCNT */
/* Description: Maximum number of bytes in receive buffer */

/* Bits 15..0 : Maximum number of bytes in receive buffer */
#define SPIS_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define SPIS_RXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIS_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: SPIS_RXD_AMOUNT */
/* Description: Number of bytes received in last granted transaction */

/* Bits 15..0 : Number of bytes received in the last granted transaction */
#define SPIS_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define SPIS_RXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIS_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: SPIS_RXD_LIST */
/* Description: EasyDMA list type */

/* Bits 1..0 : List type */
#define SPIS_RXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define SPIS_RXD_LIST_LIST_Msk (0x3UL << SPIS_RXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define SPIS_RXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
#define SPIS_RXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */

/* Register: SPIS_TXD_PTR */
/* Description: TXD data pointer */

/* Bits 31..0 : TXD data pointer */
#define SPIS_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define SPIS_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << SPIS_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: SPIS_TXD_MAXCNT */
/* Description: Maximum number of bytes in transmit buffer */

/* Bits 15..0 : Maximum number of bytes in transmit buffer */
#define SPIS_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define SPIS_TXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << SPIS_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: SPIS_TXD_AMOUNT */
/* Description: Number of bytes transmitted in last granted transaction */

/* Bits 15..0 : Number of bytes transmitted in last granted transaction */
#define SPIS_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define SPIS_TXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << SPIS_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: SPIS_TXD_LIST */
/* Description: EasyDMA list type */

/* Bits 1..0 : List type */
#define SPIS_TXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define SPIS_TXD_LIST_LIST_Msk (0x3UL << SPIS_TXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define SPIS_TXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
#define SPIS_TXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */

/* Register: SPIS_CONFIG */
/* Description: Configuration register */

/* Bit 2 : Serial clock (SCK) polarity */
#define SPIS_CONFIG_CPOL_Pos (2UL) /*!< Position of CPOL field. */
#define SPIS_CONFIG_CPOL_Msk (0x1UL << SPIS_CONFIG_CPOL_Pos) /*!< Bit mask of CPOL field. */
#define SPIS_CONFIG_CPOL_ActiveHigh (0UL) /*!< Active high */
#define SPIS_CONFIG_CPOL_ActiveLow (1UL) /*!< Active low */

/* Bit 1 : Serial clock (SCK) phase */
#define SPIS_CONFIG_CPHA_Pos (1UL) /*!< Position of CPHA field. */
#define SPIS_CONFIG_CPHA_Msk (0x1UL << SPIS_CONFIG_CPHA_Pos) /*!< Bit mask of CPHA field. */
#define SPIS_CONFIG_CPHA_Leading (0UL) /*!< Sample on leading edge of clock, shift serial data on trailing edge */
#define SPIS_CONFIG_CPHA_Trailing (1UL) /*!< Sample on trailing edge of clock, shift serial data on leading edge */

/* Bit 0 : Bit order */
#define SPIS_CONFIG_ORDER_Pos (0UL) /*!< Position of ORDER field. */
#define SPIS_CONFIG_ORDER_Msk (0x1UL << SPIS_CONFIG_ORDER_Pos) /*!< Bit mask of ORDER field. */
#define SPIS_CONFIG_ORDER_MsbFirst (0UL) /*!< Most significant bit shifted out first */
#define SPIS_CONFIG_ORDER_LsbFirst (1UL) /*!< Least significant bit shifted out first */

/* Register: SPIS_DEF */
/* Description: Default character. Character clocked out in case of an ignored transaction. */

/* Bits 7..0 : Default character. Character clocked out in case of an ignored transaction. */
#define SPIS_DEF_DEF_Pos (0UL) /*!< Position of DEF field. */
#define SPIS_DEF_DEF_Msk (0xFFUL << SPIS_DEF_DEF_Pos) /*!< Bit mask of DEF field. */

/* Register: SPIS_ORC */
/* Description: Over-read character */

/* Bits 7..0 : Over-read character. Character clocked out after an over-read of the transmit buffer. */
#define SPIS_ORC_ORC_Pos (0UL) /*!< Position of ORC field. */
#define SPIS_ORC_ORC_Msk (0xFFUL << SPIS_ORC_ORC_Pos) /*!< Bit mask of ORC field. */


/* Peripheral: SPU */
/* Description: System protection unit */

/* Register: SPU_EVENTS_RAMACCERR */
/* Description: A security violation has been detected for the RAM memory space */

/* Bit 0 : A security violation has been detected for the RAM memory space */
#define SPU_EVENTS_RAMACCERR_EVENTS_RAMACCERR_Pos (0UL) /*!< Position of EVENTS_RAMACCERR field. */
#define SPU_EVENTS_RAMACCERR_EVENTS_RAMACCERR_Msk (0x1UL << SPU_EVENTS_RAMACCERR_EVENTS_RAMACCERR_Pos) /*!< Bit mask of EVENTS_RAMACCERR field. */
#define SPU_EVENTS_RAMACCERR_EVENTS_RAMACCERR_NotGenerated (0UL) /*!< Event not generated */
#define SPU_EVENTS_RAMACCERR_EVENTS_RAMACCERR_Generated (1UL) /*!< Event generated */

/* Register: SPU_EVENTS_FLASHACCERR */
/* Description: A security violation has been detected for the flash memory space */

/* Bit 0 : A security violation has been detected for the flash memory space */
#define SPU_EVENTS_FLASHACCERR_EVENTS_FLASHACCERR_Pos (0UL) /*!< Position of EVENTS_FLASHACCERR field. */
#define SPU_EVENTS_FLASHACCERR_EVENTS_FLASHACCERR_Msk (0x1UL << SPU_EVENTS_FLASHACCERR_EVENTS_FLASHACCERR_Pos) /*!< Bit mask of EVENTS_FLASHACCERR field. */
#define SPU_EVENTS_FLASHACCERR_EVENTS_FLASHACCERR_NotGenerated (0UL) /*!< Event not generated */
#define SPU_EVENTS_FLASHACCERR_EVENTS_FLASHACCERR_Generated (1UL) /*!< Event generated */

/* Register: SPU_EVENTS_PERIPHACCERR */
/* Description: A security violation has been detected on one or several peripherals */

/* Bit 0 : A security violation has been detected on one or several peripherals */
#define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Pos (0UL) /*!< Position of EVENTS_PERIPHACCERR field. */
#define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Msk (0x1UL << SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Pos) /*!< Bit mask of EVENTS_PERIPHACCERR field. */
#define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_NotGenerated (0UL) /*!< Event not generated */
#define SPU_EVENTS_PERIPHACCERR_EVENTS_PERIPHACCERR_Generated (1UL) /*!< Event generated */

/* Register: SPU_PUBLISH_RAMACCERR */
/* Description: Publish configuration for event RAMACCERR */

/* Bit 31 :   */
#define SPU_PUBLISH_RAMACCERR_EN_Pos (31UL) /*!< Position of EN field. */
#define SPU_PUBLISH_RAMACCERR_EN_Msk (0x1UL << SPU_PUBLISH_RAMACCERR_EN_Pos) /*!< Bit mask of EN field. */
#define SPU_PUBLISH_RAMACCERR_EN_Disabled (0UL) /*!< Disable publishing */
#define SPU_PUBLISH_RAMACCERR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RAMACCERR will publish to. */
#define SPU_PUBLISH_RAMACCERR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPU_PUBLISH_RAMACCERR_CHIDX_Msk (0xFFUL << SPU_PUBLISH_RAMACCERR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPU_PUBLISH_FLASHACCERR */
/* Description: Publish configuration for event FLASHACCERR */

/* Bit 31 :   */
#define SPU_PUBLISH_FLASHACCERR_EN_Pos (31UL) /*!< Position of EN field. */
#define SPU_PUBLISH_FLASHACCERR_EN_Msk (0x1UL << SPU_PUBLISH_FLASHACCERR_EN_Pos) /*!< Bit mask of EN field. */
#define SPU_PUBLISH_FLASHACCERR_EN_Disabled (0UL) /*!< Disable publishing */
#define SPU_PUBLISH_FLASHACCERR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event FLASHACCERR will publish to. */
#define SPU_PUBLISH_FLASHACCERR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPU_PUBLISH_FLASHACCERR_CHIDX_Msk (0xFFUL << SPU_PUBLISH_FLASHACCERR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPU_PUBLISH_PERIPHACCERR */
/* Description: Publish configuration for event PERIPHACCERR */

/* Bit 31 :   */
#define SPU_PUBLISH_PERIPHACCERR_EN_Pos (31UL) /*!< Position of EN field. */
#define SPU_PUBLISH_PERIPHACCERR_EN_Msk (0x1UL << SPU_PUBLISH_PERIPHACCERR_EN_Pos) /*!< Bit mask of EN field. */
#define SPU_PUBLISH_PERIPHACCERR_EN_Disabled (0UL) /*!< Disable publishing */
#define SPU_PUBLISH_PERIPHACCERR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event PERIPHACCERR will publish to. */
#define SPU_PUBLISH_PERIPHACCERR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define SPU_PUBLISH_PERIPHACCERR_CHIDX_Msk (0xFFUL << SPU_PUBLISH_PERIPHACCERR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: SPU_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 2 : Enable or disable interrupt for event PERIPHACCERR */
#define SPU_INTEN_PERIPHACCERR_Pos (2UL) /*!< Position of PERIPHACCERR field. */
#define SPU_INTEN_PERIPHACCERR_Msk (0x1UL << SPU_INTEN_PERIPHACCERR_Pos) /*!< Bit mask of PERIPHACCERR field. */
#define SPU_INTEN_PERIPHACCERR_Disabled (0UL) /*!< Disable */
#define SPU_INTEN_PERIPHACCERR_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event FLASHACCERR */
#define SPU_INTEN_FLASHACCERR_Pos (1UL) /*!< Position of FLASHACCERR field. */
#define SPU_INTEN_FLASHACCERR_Msk (0x1UL << SPU_INTEN_FLASHACCERR_Pos) /*!< Bit mask of FLASHACCERR field. */
#define SPU_INTEN_FLASHACCERR_Disabled (0UL) /*!< Disable */
#define SPU_INTEN_FLASHACCERR_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event RAMACCERR */
#define SPU_INTEN_RAMACCERR_Pos (0UL) /*!< Position of RAMACCERR field. */
#define SPU_INTEN_RAMACCERR_Msk (0x1UL << SPU_INTEN_RAMACCERR_Pos) /*!< Bit mask of RAMACCERR field. */
#define SPU_INTEN_RAMACCERR_Disabled (0UL) /*!< Disable */
#define SPU_INTEN_RAMACCERR_Enabled (1UL) /*!< Enable */

/* Register: SPU_INTENSET */
/* Description: Enable interrupt */

/* Bit 2 : Write '1' to enable interrupt for event PERIPHACCERR */
#define SPU_INTENSET_PERIPHACCERR_Pos (2UL) /*!< Position of PERIPHACCERR field. */
#define SPU_INTENSET_PERIPHACCERR_Msk (0x1UL << SPU_INTENSET_PERIPHACCERR_Pos) /*!< Bit mask of PERIPHACCERR field. */
#define SPU_INTENSET_PERIPHACCERR_Disabled (0UL) /*!< Read: Disabled */
#define SPU_INTENSET_PERIPHACCERR_Enabled (1UL) /*!< Read: Enabled */
#define SPU_INTENSET_PERIPHACCERR_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event FLASHACCERR */
#define SPU_INTENSET_FLASHACCERR_Pos (1UL) /*!< Position of FLASHACCERR field. */
#define SPU_INTENSET_FLASHACCERR_Msk (0x1UL << SPU_INTENSET_FLASHACCERR_Pos) /*!< Bit mask of FLASHACCERR field. */
#define SPU_INTENSET_FLASHACCERR_Disabled (0UL) /*!< Read: Disabled */
#define SPU_INTENSET_FLASHACCERR_Enabled (1UL) /*!< Read: Enabled */
#define SPU_INTENSET_FLASHACCERR_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event RAMACCERR */
#define SPU_INTENSET_RAMACCERR_Pos (0UL) /*!< Position of RAMACCERR field. */
#define SPU_INTENSET_RAMACCERR_Msk (0x1UL << SPU_INTENSET_RAMACCERR_Pos) /*!< Bit mask of RAMACCERR field. */
#define SPU_INTENSET_RAMACCERR_Disabled (0UL) /*!< Read: Disabled */
#define SPU_INTENSET_RAMACCERR_Enabled (1UL) /*!< Read: Enabled */
#define SPU_INTENSET_RAMACCERR_Set (1UL) /*!< Enable */

/* Register: SPU_INTENCLR */
/* Description: Disable interrupt */

/* Bit 2 : Write '1' to disable interrupt for event PERIPHACCERR */
#define SPU_INTENCLR_PERIPHACCERR_Pos (2UL) /*!< Position of PERIPHACCERR field. */
#define SPU_INTENCLR_PERIPHACCERR_Msk (0x1UL << SPU_INTENCLR_PERIPHACCERR_Pos) /*!< Bit mask of PERIPHACCERR field. */
#define SPU_INTENCLR_PERIPHACCERR_Disabled (0UL) /*!< Read: Disabled */
#define SPU_INTENCLR_PERIPHACCERR_Enabled (1UL) /*!< Read: Enabled */
#define SPU_INTENCLR_PERIPHACCERR_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event FLASHACCERR */
#define SPU_INTENCLR_FLASHACCERR_Pos (1UL) /*!< Position of FLASHACCERR field. */
#define SPU_INTENCLR_FLASHACCERR_Msk (0x1UL << SPU_INTENCLR_FLASHACCERR_Pos) /*!< Bit mask of FLASHACCERR field. */
#define SPU_INTENCLR_FLASHACCERR_Disabled (0UL) /*!< Read: Disabled */
#define SPU_INTENCLR_FLASHACCERR_Enabled (1UL) /*!< Read: Enabled */
#define SPU_INTENCLR_FLASHACCERR_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event RAMACCERR */
#define SPU_INTENCLR_RAMACCERR_Pos (0UL) /*!< Position of RAMACCERR field. */
#define SPU_INTENCLR_RAMACCERR_Msk (0x1UL << SPU_INTENCLR_RAMACCERR_Pos) /*!< Bit mask of RAMACCERR field. */
#define SPU_INTENCLR_RAMACCERR_Disabled (0UL) /*!< Read: Disabled */
#define SPU_INTENCLR_RAMACCERR_Enabled (1UL) /*!< Read: Enabled */
#define SPU_INTENCLR_RAMACCERR_Clear (1UL) /*!< Disable */

/* Register: SPU_CAP */
/* Description: Show implemented features for the current device */

/* Bit 0 : Show ARM TrustZone status */
#define SPU_CAP_TZM_Pos (0UL) /*!< Position of TZM field. */
#define SPU_CAP_TZM_Msk (0x1UL << SPU_CAP_TZM_Pos) /*!< Bit mask of TZM field. */
#define SPU_CAP_TZM_NotAvailable (0UL) /*!< ARM TrustZone support not available */
#define SPU_CAP_TZM_Enabled (1UL) /*!< ARM TrustZone support is available */

/* Register: SPU_CPULOCK */
/* Description: Configure bits to lock down CPU features at runtime */

/* Bit 4 : Write '1' to prevent updating the secure SAU regions until the next reset */
#define SPU_CPULOCK_LOCKSAU_Pos (4UL) /*!< Position of LOCKSAU field. */
#define SPU_CPULOCK_LOCKSAU_Msk (0x1UL << SPU_CPULOCK_LOCKSAU_Pos) /*!< Bit mask of LOCKSAU field. */
#define SPU_CPULOCK_LOCKSAU_Unlocked (0UL) /*!< These registers can be updated */
#define SPU_CPULOCK_LOCKSAU_Locked (1UL) /*!< Disables writes to the SAU_CTRL, SAU_RNR, SAU_RBAR and SAU_RLAR registers from software or from a debug agent connected to the processor */

/* Bit 3 : Write '1' to prevent updating the Non-secure MPU regions until the next reset */
#define SPU_CPULOCK_LOCKNSMPU_Pos (3UL) /*!< Position of LOCKNSMPU field. */
#define SPU_CPULOCK_LOCKNSMPU_Msk (0x1UL << SPU_CPULOCK_LOCKNSMPU_Pos) /*!< Bit mask of LOCKNSMPU field. */
#define SPU_CPULOCK_LOCKNSMPU_Unlocked (0UL) /*!< These registers can be updated */
#define SPU_CPULOCK_LOCKNSMPU_Locked (1UL) /*!< Disables writes to the MPU_CTRL_NS, MPU_RNR_NS, MPU_RBAR_NS, MPU_RLAR_NS, MPU_RBAR_A_NSn and MPU_RLAR_A_NSn from software or from a debug agent connected to the processor */

/* Bit 2 : Write '1' to prevent updating the secure MPU regions until the next reset */
#define SPU_CPULOCK_LOCKSMPU_Pos (2UL) /*!< Position of LOCKSMPU field. */
#define SPU_CPULOCK_LOCKSMPU_Msk (0x1UL << SPU_CPULOCK_LOCKSMPU_Pos) /*!< Bit mask of LOCKSMPU field. */
#define SPU_CPULOCK_LOCKSMPU_Unlocked (0UL) /*!< These registers can be updated */
#define SPU_CPULOCK_LOCKSMPU_Locked (1UL) /*!< Disables writes to the MPU_CTRL, MPU_RNR, MPU_RBAR, MPU_RLAR, MPU_RBAR_An and MPU_RLAR_An from software or from a debug agent connected to the processor in Secure state */

/* Bit 1 : Write '1' to prevent updating the non-secure vector table base address until the next reset */
#define SPU_CPULOCK_LOCKNSVTOR_Pos (1UL) /*!< Position of LOCKNSVTOR field. */
#define SPU_CPULOCK_LOCKNSVTOR_Msk (0x1UL << SPU_CPULOCK_LOCKNSVTOR_Pos) /*!< Bit mask of LOCKNSVTOR field. */
#define SPU_CPULOCK_LOCKNSVTOR_Unlocked (0UL) /*!< The address of the non-secure vector table can be updated */
#define SPU_CPULOCK_LOCKNSVTOR_Locked (1UL) /*!< The address of the non-secure vector table is locked */

/* Bit 0 : Write '1' to prevent updating the secure interrupt configuration until the next reset */
#define SPU_CPULOCK_LOCKSVTAIRCR_Pos (0UL) /*!< Position of LOCKSVTAIRCR field. */
#define SPU_CPULOCK_LOCKSVTAIRCR_Msk (0x1UL << SPU_CPULOCK_LOCKSVTAIRCR_Pos) /*!< Bit mask of LOCKSVTAIRCR field. */
#define SPU_CPULOCK_LOCKSVTAIRCR_Unlocked (0UL) /*!< These registers can be updated */
#define SPU_CPULOCK_LOCKSVTAIRCR_Locked (1UL) /*!< Disables writes to the VTOR_S, AIRCR.PRIS, and AIRCR.BFHFNMINS registers */

/* Register: SPU_EXTDOMAIN_PERM */
/* Description: Description cluster: Access  for bus access generated from the external domain n List capabilities of the external domain  n */

/* Bit 8 :   */
#define SPU_EXTDOMAIN_PERM_LOCK_Pos (8UL) /*!< Position of LOCK field. */
#define SPU_EXTDOMAIN_PERM_LOCK_Msk (0x1UL << SPU_EXTDOMAIN_PERM_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_EXTDOMAIN_PERM_LOCK_Unlocked (0UL) /*!< This register can be updated */
#define SPU_EXTDOMAIN_PERM_LOCK_Locked (1UL) /*!< The content of this register can't be changed until the next reset */

/* Bit 4 : Peripheral security mapping */
#define SPU_EXTDOMAIN_PERM_SECATTR_Pos (4UL) /*!< Position of SECATTR field. */
#define SPU_EXTDOMAIN_PERM_SECATTR_Msk (0x1UL << SPU_EXTDOMAIN_PERM_SECATTR_Pos) /*!< Bit mask of SECATTR field. */
#define SPU_EXTDOMAIN_PERM_SECATTR_NonSecure (0UL) /*!< Bus accesses from this domain have the non-secure attribute set */
#define SPU_EXTDOMAIN_PERM_SECATTR_Secure (1UL) /*!< Bus accesses from this domain have secure attribute set */

/* Bits 1..0 : Define configuration capabilities for TrustZone Cortex-M secure attribute */
#define SPU_EXTDOMAIN_PERM_SECUREMAPPING_Pos (0UL) /*!< Position of SECUREMAPPING field. */
#define SPU_EXTDOMAIN_PERM_SECUREMAPPING_Msk (0x3UL << SPU_EXTDOMAIN_PERM_SECUREMAPPING_Pos) /*!< Bit mask of SECUREMAPPING field. */
#define SPU_EXTDOMAIN_PERM_SECUREMAPPING_NonSecure (0UL) /*!< The bus access from this external domain always have the non-secure attribute set */
#define SPU_EXTDOMAIN_PERM_SECUREMAPPING_Secure (1UL) /*!< The bus access from this external domain always have the secure attribute set */
#define SPU_EXTDOMAIN_PERM_SECUREMAPPING_UserSelectable (2UL) /*!< Non-secure or secure attribute for bus access from this domain is defined by the EXTDOMAIN[n].PERM register */

/* Register: SPU_DPPI_PERM */
/* Description: Description cluster: Select between secure and non-secure attribute  for the DPPI channels. */

/* Bit 31 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL31_Pos (31UL) /*!< Position of CHANNEL31 field. */
#define SPU_DPPI_PERM_CHANNEL31_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL31_Pos) /*!< Bit mask of CHANNEL31 field. */
#define SPU_DPPI_PERM_CHANNEL31_NonSecure (0UL) /*!< Channel31 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL31_Secure (1UL) /*!< Channel31 has its secure attribute set */

/* Bit 30 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL30_Pos (30UL) /*!< Position of CHANNEL30 field. */
#define SPU_DPPI_PERM_CHANNEL30_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL30_Pos) /*!< Bit mask of CHANNEL30 field. */
#define SPU_DPPI_PERM_CHANNEL30_NonSecure (0UL) /*!< Channel30 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL30_Secure (1UL) /*!< Channel30 has its secure attribute set */

/* Bit 29 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL29_Pos (29UL) /*!< Position of CHANNEL29 field. */
#define SPU_DPPI_PERM_CHANNEL29_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL29_Pos) /*!< Bit mask of CHANNEL29 field. */
#define SPU_DPPI_PERM_CHANNEL29_NonSecure (0UL) /*!< Channel29 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL29_Secure (1UL) /*!< Channel29 has its secure attribute set */

/* Bit 28 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL28_Pos (28UL) /*!< Position of CHANNEL28 field. */
#define SPU_DPPI_PERM_CHANNEL28_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL28_Pos) /*!< Bit mask of CHANNEL28 field. */
#define SPU_DPPI_PERM_CHANNEL28_NonSecure (0UL) /*!< Channel28 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL28_Secure (1UL) /*!< Channel28 has its secure attribute set */

/* Bit 27 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL27_Pos (27UL) /*!< Position of CHANNEL27 field. */
#define SPU_DPPI_PERM_CHANNEL27_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL27_Pos) /*!< Bit mask of CHANNEL27 field. */
#define SPU_DPPI_PERM_CHANNEL27_NonSecure (0UL) /*!< Channel27 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL27_Secure (1UL) /*!< Channel27 has its secure attribute set */

/* Bit 26 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL26_Pos (26UL) /*!< Position of CHANNEL26 field. */
#define SPU_DPPI_PERM_CHANNEL26_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL26_Pos) /*!< Bit mask of CHANNEL26 field. */
#define SPU_DPPI_PERM_CHANNEL26_NonSecure (0UL) /*!< Channel26 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL26_Secure (1UL) /*!< Channel26 has its secure attribute set */

/* Bit 25 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL25_Pos (25UL) /*!< Position of CHANNEL25 field. */
#define SPU_DPPI_PERM_CHANNEL25_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL25_Pos) /*!< Bit mask of CHANNEL25 field. */
#define SPU_DPPI_PERM_CHANNEL25_NonSecure (0UL) /*!< Channel25 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL25_Secure (1UL) /*!< Channel25 has its secure attribute set */

/* Bit 24 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL24_Pos (24UL) /*!< Position of CHANNEL24 field. */
#define SPU_DPPI_PERM_CHANNEL24_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL24_Pos) /*!< Bit mask of CHANNEL24 field. */
#define SPU_DPPI_PERM_CHANNEL24_NonSecure (0UL) /*!< Channel24 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL24_Secure (1UL) /*!< Channel24 has its secure attribute set */

/* Bit 23 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL23_Pos (23UL) /*!< Position of CHANNEL23 field. */
#define SPU_DPPI_PERM_CHANNEL23_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL23_Pos) /*!< Bit mask of CHANNEL23 field. */
#define SPU_DPPI_PERM_CHANNEL23_NonSecure (0UL) /*!< Channel23 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL23_Secure (1UL) /*!< Channel23 has its secure attribute set */

/* Bit 22 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL22_Pos (22UL) /*!< Position of CHANNEL22 field. */
#define SPU_DPPI_PERM_CHANNEL22_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL22_Pos) /*!< Bit mask of CHANNEL22 field. */
#define SPU_DPPI_PERM_CHANNEL22_NonSecure (0UL) /*!< Channel22 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL22_Secure (1UL) /*!< Channel22 has its secure attribute set */

/* Bit 21 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL21_Pos (21UL) /*!< Position of CHANNEL21 field. */
#define SPU_DPPI_PERM_CHANNEL21_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL21_Pos) /*!< Bit mask of CHANNEL21 field. */
#define SPU_DPPI_PERM_CHANNEL21_NonSecure (0UL) /*!< Channel21 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL21_Secure (1UL) /*!< Channel21 has its secure attribute set */

/* Bit 20 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL20_Pos (20UL) /*!< Position of CHANNEL20 field. */
#define SPU_DPPI_PERM_CHANNEL20_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL20_Pos) /*!< Bit mask of CHANNEL20 field. */
#define SPU_DPPI_PERM_CHANNEL20_NonSecure (0UL) /*!< Channel20 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL20_Secure (1UL) /*!< Channel20 has its secure attribute set */

/* Bit 19 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL19_Pos (19UL) /*!< Position of CHANNEL19 field. */
#define SPU_DPPI_PERM_CHANNEL19_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL19_Pos) /*!< Bit mask of CHANNEL19 field. */
#define SPU_DPPI_PERM_CHANNEL19_NonSecure (0UL) /*!< Channel19 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL19_Secure (1UL) /*!< Channel19 has its secure attribute set */

/* Bit 18 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL18_Pos (18UL) /*!< Position of CHANNEL18 field. */
#define SPU_DPPI_PERM_CHANNEL18_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL18_Pos) /*!< Bit mask of CHANNEL18 field. */
#define SPU_DPPI_PERM_CHANNEL18_NonSecure (0UL) /*!< Channel18 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL18_Secure (1UL) /*!< Channel18 has its secure attribute set */

/* Bit 17 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL17_Pos (17UL) /*!< Position of CHANNEL17 field. */
#define SPU_DPPI_PERM_CHANNEL17_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL17_Pos) /*!< Bit mask of CHANNEL17 field. */
#define SPU_DPPI_PERM_CHANNEL17_NonSecure (0UL) /*!< Channel17 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL17_Secure (1UL) /*!< Channel17 has its secure attribute set */

/* Bit 16 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL16_Pos (16UL) /*!< Position of CHANNEL16 field. */
#define SPU_DPPI_PERM_CHANNEL16_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL16_Pos) /*!< Bit mask of CHANNEL16 field. */
#define SPU_DPPI_PERM_CHANNEL16_NonSecure (0UL) /*!< Channel16 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL16_Secure (1UL) /*!< Channel16 has its secure attribute set */

/* Bit 15 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL15_Pos (15UL) /*!< Position of CHANNEL15 field. */
#define SPU_DPPI_PERM_CHANNEL15_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL15_Pos) /*!< Bit mask of CHANNEL15 field. */
#define SPU_DPPI_PERM_CHANNEL15_NonSecure (0UL) /*!< Channel15 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL15_Secure (1UL) /*!< Channel15 has its secure attribute set */

/* Bit 14 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL14_Pos (14UL) /*!< Position of CHANNEL14 field. */
#define SPU_DPPI_PERM_CHANNEL14_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL14_Pos) /*!< Bit mask of CHANNEL14 field. */
#define SPU_DPPI_PERM_CHANNEL14_NonSecure (0UL) /*!< Channel14 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL14_Secure (1UL) /*!< Channel14 has its secure attribute set */

/* Bit 13 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL13_Pos (13UL) /*!< Position of CHANNEL13 field. */
#define SPU_DPPI_PERM_CHANNEL13_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL13_Pos) /*!< Bit mask of CHANNEL13 field. */
#define SPU_DPPI_PERM_CHANNEL13_NonSecure (0UL) /*!< Channel13 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL13_Secure (1UL) /*!< Channel13 has its secure attribute set */

/* Bit 12 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL12_Pos (12UL) /*!< Position of CHANNEL12 field. */
#define SPU_DPPI_PERM_CHANNEL12_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL12_Pos) /*!< Bit mask of CHANNEL12 field. */
#define SPU_DPPI_PERM_CHANNEL12_NonSecure (0UL) /*!< Channel12 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL12_Secure (1UL) /*!< Channel12 has its secure attribute set */

/* Bit 11 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL11_Pos (11UL) /*!< Position of CHANNEL11 field. */
#define SPU_DPPI_PERM_CHANNEL11_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL11_Pos) /*!< Bit mask of CHANNEL11 field. */
#define SPU_DPPI_PERM_CHANNEL11_NonSecure (0UL) /*!< Channel11 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL11_Secure (1UL) /*!< Channel11 has its secure attribute set */

/* Bit 10 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL10_Pos (10UL) /*!< Position of CHANNEL10 field. */
#define SPU_DPPI_PERM_CHANNEL10_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL10_Pos) /*!< Bit mask of CHANNEL10 field. */
#define SPU_DPPI_PERM_CHANNEL10_NonSecure (0UL) /*!< Channel10 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL10_Secure (1UL) /*!< Channel10 has its secure attribute set */

/* Bit 9 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL9_Pos (9UL) /*!< Position of CHANNEL9 field. */
#define SPU_DPPI_PERM_CHANNEL9_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL9_Pos) /*!< Bit mask of CHANNEL9 field. */
#define SPU_DPPI_PERM_CHANNEL9_NonSecure (0UL) /*!< Channel9 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL9_Secure (1UL) /*!< Channel9 has its secure attribute set */

/* Bit 8 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL8_Pos (8UL) /*!< Position of CHANNEL8 field. */
#define SPU_DPPI_PERM_CHANNEL8_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL8_Pos) /*!< Bit mask of CHANNEL8 field. */
#define SPU_DPPI_PERM_CHANNEL8_NonSecure (0UL) /*!< Channel8 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL8_Secure (1UL) /*!< Channel8 has its secure attribute set */

/* Bit 7 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL7_Pos (7UL) /*!< Position of CHANNEL7 field. */
#define SPU_DPPI_PERM_CHANNEL7_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL7_Pos) /*!< Bit mask of CHANNEL7 field. */
#define SPU_DPPI_PERM_CHANNEL7_NonSecure (0UL) /*!< Channel7 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL7_Secure (1UL) /*!< Channel7 has its secure attribute set */

/* Bit 6 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL6_Pos (6UL) /*!< Position of CHANNEL6 field. */
#define SPU_DPPI_PERM_CHANNEL6_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL6_Pos) /*!< Bit mask of CHANNEL6 field. */
#define SPU_DPPI_PERM_CHANNEL6_NonSecure (0UL) /*!< Channel6 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL6_Secure (1UL) /*!< Channel6 has its secure attribute set */

/* Bit 5 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL5_Pos (5UL) /*!< Position of CHANNEL5 field. */
#define SPU_DPPI_PERM_CHANNEL5_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL5_Pos) /*!< Bit mask of CHANNEL5 field. */
#define SPU_DPPI_PERM_CHANNEL5_NonSecure (0UL) /*!< Channel5 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL5_Secure (1UL) /*!< Channel5 has its secure attribute set */

/* Bit 4 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL4_Pos (4UL) /*!< Position of CHANNEL4 field. */
#define SPU_DPPI_PERM_CHANNEL4_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL4_Pos) /*!< Bit mask of CHANNEL4 field. */
#define SPU_DPPI_PERM_CHANNEL4_NonSecure (0UL) /*!< Channel4 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL4_Secure (1UL) /*!< Channel4 has its secure attribute set */

/* Bit 3 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL3_Pos (3UL) /*!< Position of CHANNEL3 field. */
#define SPU_DPPI_PERM_CHANNEL3_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL3_Pos) /*!< Bit mask of CHANNEL3 field. */
#define SPU_DPPI_PERM_CHANNEL3_NonSecure (0UL) /*!< Channel3 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL3_Secure (1UL) /*!< Channel3 has its secure attribute set */

/* Bit 2 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL2_Pos (2UL) /*!< Position of CHANNEL2 field. */
#define SPU_DPPI_PERM_CHANNEL2_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL2_Pos) /*!< Bit mask of CHANNEL2 field. */
#define SPU_DPPI_PERM_CHANNEL2_NonSecure (0UL) /*!< Channel2 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL2_Secure (1UL) /*!< Channel2 has its secure attribute set */

/* Bit 1 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL1_Pos (1UL) /*!< Position of CHANNEL1 field. */
#define SPU_DPPI_PERM_CHANNEL1_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL1_Pos) /*!< Bit mask of CHANNEL1 field. */
#define SPU_DPPI_PERM_CHANNEL1_NonSecure (0UL) /*!< Channel1 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL1_Secure (1UL) /*!< Channel1 has its secure attribute set */

/* Bit 0 : Select secure attribute. */
#define SPU_DPPI_PERM_CHANNEL0_Pos (0UL) /*!< Position of CHANNEL0 field. */
#define SPU_DPPI_PERM_CHANNEL0_Msk (0x1UL << SPU_DPPI_PERM_CHANNEL0_Pos) /*!< Bit mask of CHANNEL0 field. */
#define SPU_DPPI_PERM_CHANNEL0_NonSecure (0UL) /*!< Channel0 has its non-secure attribute set */
#define SPU_DPPI_PERM_CHANNEL0_Secure (1UL) /*!< Channel0 has its secure attribute set */

/* Register: SPU_DPPI_LOCK */
/* Description: Description cluster: Prevent further modification of the corresponding PERM register */

/* Bit 0 :   */
#define SPU_DPPI_LOCK_LOCK_Pos (0UL) /*!< Position of LOCK field. */
#define SPU_DPPI_LOCK_LOCK_Msk (0x1UL << SPU_DPPI_LOCK_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_DPPI_LOCK_LOCK_Unlocked (0UL) /*!< DPPI[n].PERM register content can be changed */
#define SPU_DPPI_LOCK_LOCK_Locked (1UL) /*!< DPPI[n].PERM register can't be changed until next reset */

/* Register: SPU_GPIOPORT_PERM */
/* Description: Description cluster: Select between secure and non-secure attribute  for pins 0 to 31  of port n. */

/* Bit 31 : Select secure attribute attribute for PIN 31. */
#define SPU_GPIOPORT_PERM_PIN31_Pos (31UL) /*!< Position of PIN31 field. */
#define SPU_GPIOPORT_PERM_PIN31_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN31_Pos) /*!< Bit mask of PIN31 field. */
#define SPU_GPIOPORT_PERM_PIN31_NonSecure (0UL) /*!< Pin 31 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN31_Secure (1UL) /*!< Pin 31 has its secure attribute set */

/* Bit 30 : Select secure attribute attribute for PIN 30. */
#define SPU_GPIOPORT_PERM_PIN30_Pos (30UL) /*!< Position of PIN30 field. */
#define SPU_GPIOPORT_PERM_PIN30_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN30_Pos) /*!< Bit mask of PIN30 field. */
#define SPU_GPIOPORT_PERM_PIN30_NonSecure (0UL) /*!< Pin 30 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN30_Secure (1UL) /*!< Pin 30 has its secure attribute set */

/* Bit 29 : Select secure attribute attribute for PIN 29. */
#define SPU_GPIOPORT_PERM_PIN29_Pos (29UL) /*!< Position of PIN29 field. */
#define SPU_GPIOPORT_PERM_PIN29_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN29_Pos) /*!< Bit mask of PIN29 field. */
#define SPU_GPIOPORT_PERM_PIN29_NonSecure (0UL) /*!< Pin 29 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN29_Secure (1UL) /*!< Pin 29 has its secure attribute set */

/* Bit 28 : Select secure attribute attribute for PIN 28. */
#define SPU_GPIOPORT_PERM_PIN28_Pos (28UL) /*!< Position of PIN28 field. */
#define SPU_GPIOPORT_PERM_PIN28_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN28_Pos) /*!< Bit mask of PIN28 field. */
#define SPU_GPIOPORT_PERM_PIN28_NonSecure (0UL) /*!< Pin 28 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN28_Secure (1UL) /*!< Pin 28 has its secure attribute set */

/* Bit 27 : Select secure attribute attribute for PIN 27. */
#define SPU_GPIOPORT_PERM_PIN27_Pos (27UL) /*!< Position of PIN27 field. */
#define SPU_GPIOPORT_PERM_PIN27_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN27_Pos) /*!< Bit mask of PIN27 field. */
#define SPU_GPIOPORT_PERM_PIN27_NonSecure (0UL) /*!< Pin 27 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN27_Secure (1UL) /*!< Pin 27 has its secure attribute set */

/* Bit 26 : Select secure attribute attribute for PIN 26. */
#define SPU_GPIOPORT_PERM_PIN26_Pos (26UL) /*!< Position of PIN26 field. */
#define SPU_GPIOPORT_PERM_PIN26_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN26_Pos) /*!< Bit mask of PIN26 field. */
#define SPU_GPIOPORT_PERM_PIN26_NonSecure (0UL) /*!< Pin 26 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN26_Secure (1UL) /*!< Pin 26 has its secure attribute set */

/* Bit 25 : Select secure attribute attribute for PIN 25. */
#define SPU_GPIOPORT_PERM_PIN25_Pos (25UL) /*!< Position of PIN25 field. */
#define SPU_GPIOPORT_PERM_PIN25_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN25_Pos) /*!< Bit mask of PIN25 field. */
#define SPU_GPIOPORT_PERM_PIN25_NonSecure (0UL) /*!< Pin 25 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN25_Secure (1UL) /*!< Pin 25 has its secure attribute set */

/* Bit 24 : Select secure attribute attribute for PIN 24. */
#define SPU_GPIOPORT_PERM_PIN24_Pos (24UL) /*!< Position of PIN24 field. */
#define SPU_GPIOPORT_PERM_PIN24_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN24_Pos) /*!< Bit mask of PIN24 field. */
#define SPU_GPIOPORT_PERM_PIN24_NonSecure (0UL) /*!< Pin 24 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN24_Secure (1UL) /*!< Pin 24 has its secure attribute set */

/* Bit 23 : Select secure attribute attribute for PIN 23. */
#define SPU_GPIOPORT_PERM_PIN23_Pos (23UL) /*!< Position of PIN23 field. */
#define SPU_GPIOPORT_PERM_PIN23_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN23_Pos) /*!< Bit mask of PIN23 field. */
#define SPU_GPIOPORT_PERM_PIN23_NonSecure (0UL) /*!< Pin 23 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN23_Secure (1UL) /*!< Pin 23 has its secure attribute set */

/* Bit 22 : Select secure attribute attribute for PIN 22. */
#define SPU_GPIOPORT_PERM_PIN22_Pos (22UL) /*!< Position of PIN22 field. */
#define SPU_GPIOPORT_PERM_PIN22_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN22_Pos) /*!< Bit mask of PIN22 field. */
#define SPU_GPIOPORT_PERM_PIN22_NonSecure (0UL) /*!< Pin 22 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN22_Secure (1UL) /*!< Pin 22 has its secure attribute set */

/* Bit 21 : Select secure attribute attribute for PIN 21. */
#define SPU_GPIOPORT_PERM_PIN21_Pos (21UL) /*!< Position of PIN21 field. */
#define SPU_GPIOPORT_PERM_PIN21_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN21_Pos) /*!< Bit mask of PIN21 field. */
#define SPU_GPIOPORT_PERM_PIN21_NonSecure (0UL) /*!< Pin 21 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN21_Secure (1UL) /*!< Pin 21 has its secure attribute set */

/* Bit 20 : Select secure attribute attribute for PIN 20. */
#define SPU_GPIOPORT_PERM_PIN20_Pos (20UL) /*!< Position of PIN20 field. */
#define SPU_GPIOPORT_PERM_PIN20_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN20_Pos) /*!< Bit mask of PIN20 field. */
#define SPU_GPIOPORT_PERM_PIN20_NonSecure (0UL) /*!< Pin 20 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN20_Secure (1UL) /*!< Pin 20 has its secure attribute set */

/* Bit 19 : Select secure attribute attribute for PIN 19. */
#define SPU_GPIOPORT_PERM_PIN19_Pos (19UL) /*!< Position of PIN19 field. */
#define SPU_GPIOPORT_PERM_PIN19_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN19_Pos) /*!< Bit mask of PIN19 field. */
#define SPU_GPIOPORT_PERM_PIN19_NonSecure (0UL) /*!< Pin 19 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN19_Secure (1UL) /*!< Pin 19 has its secure attribute set */

/* Bit 18 : Select secure attribute attribute for PIN 18. */
#define SPU_GPIOPORT_PERM_PIN18_Pos (18UL) /*!< Position of PIN18 field. */
#define SPU_GPIOPORT_PERM_PIN18_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN18_Pos) /*!< Bit mask of PIN18 field. */
#define SPU_GPIOPORT_PERM_PIN18_NonSecure (0UL) /*!< Pin 18 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN18_Secure (1UL) /*!< Pin 18 has its secure attribute set */

/* Bit 17 : Select secure attribute attribute for PIN 17. */
#define SPU_GPIOPORT_PERM_PIN17_Pos (17UL) /*!< Position of PIN17 field. */
#define SPU_GPIOPORT_PERM_PIN17_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN17_Pos) /*!< Bit mask of PIN17 field. */
#define SPU_GPIOPORT_PERM_PIN17_NonSecure (0UL) /*!< Pin 17 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN17_Secure (1UL) /*!< Pin 17 has its secure attribute set */

/* Bit 16 : Select secure attribute attribute for PIN 16. */
#define SPU_GPIOPORT_PERM_PIN16_Pos (16UL) /*!< Position of PIN16 field. */
#define SPU_GPIOPORT_PERM_PIN16_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN16_Pos) /*!< Bit mask of PIN16 field. */
#define SPU_GPIOPORT_PERM_PIN16_NonSecure (0UL) /*!< Pin 16 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN16_Secure (1UL) /*!< Pin 16 has its secure attribute set */

/* Bit 15 : Select secure attribute attribute for PIN 15. */
#define SPU_GPIOPORT_PERM_PIN15_Pos (15UL) /*!< Position of PIN15 field. */
#define SPU_GPIOPORT_PERM_PIN15_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN15_Pos) /*!< Bit mask of PIN15 field. */
#define SPU_GPIOPORT_PERM_PIN15_NonSecure (0UL) /*!< Pin 15 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN15_Secure (1UL) /*!< Pin 15 has its secure attribute set */

/* Bit 14 : Select secure attribute attribute for PIN 14. */
#define SPU_GPIOPORT_PERM_PIN14_Pos (14UL) /*!< Position of PIN14 field. */
#define SPU_GPIOPORT_PERM_PIN14_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN14_Pos) /*!< Bit mask of PIN14 field. */
#define SPU_GPIOPORT_PERM_PIN14_NonSecure (0UL) /*!< Pin 14 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN14_Secure (1UL) /*!< Pin 14 has its secure attribute set */

/* Bit 13 : Select secure attribute attribute for PIN 13. */
#define SPU_GPIOPORT_PERM_PIN13_Pos (13UL) /*!< Position of PIN13 field. */
#define SPU_GPIOPORT_PERM_PIN13_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN13_Pos) /*!< Bit mask of PIN13 field. */
#define SPU_GPIOPORT_PERM_PIN13_NonSecure (0UL) /*!< Pin 13 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN13_Secure (1UL) /*!< Pin 13 has its secure attribute set */

/* Bit 12 : Select secure attribute attribute for PIN 12. */
#define SPU_GPIOPORT_PERM_PIN12_Pos (12UL) /*!< Position of PIN12 field. */
#define SPU_GPIOPORT_PERM_PIN12_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN12_Pos) /*!< Bit mask of PIN12 field. */
#define SPU_GPIOPORT_PERM_PIN12_NonSecure (0UL) /*!< Pin 12 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN12_Secure (1UL) /*!< Pin 12 has its secure attribute set */

/* Bit 11 : Select secure attribute attribute for PIN 11. */
#define SPU_GPIOPORT_PERM_PIN11_Pos (11UL) /*!< Position of PIN11 field. */
#define SPU_GPIOPORT_PERM_PIN11_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN11_Pos) /*!< Bit mask of PIN11 field. */
#define SPU_GPIOPORT_PERM_PIN11_NonSecure (0UL) /*!< Pin 11 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN11_Secure (1UL) /*!< Pin 11 has its secure attribute set */

/* Bit 10 : Select secure attribute attribute for PIN 10. */
#define SPU_GPIOPORT_PERM_PIN10_Pos (10UL) /*!< Position of PIN10 field. */
#define SPU_GPIOPORT_PERM_PIN10_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN10_Pos) /*!< Bit mask of PIN10 field. */
#define SPU_GPIOPORT_PERM_PIN10_NonSecure (0UL) /*!< Pin 10 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN10_Secure (1UL) /*!< Pin 10 has its secure attribute set */

/* Bit 9 : Select secure attribute attribute for PIN 9. */
#define SPU_GPIOPORT_PERM_PIN9_Pos (9UL) /*!< Position of PIN9 field. */
#define SPU_GPIOPORT_PERM_PIN9_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN9_Pos) /*!< Bit mask of PIN9 field. */
#define SPU_GPIOPORT_PERM_PIN9_NonSecure (0UL) /*!< Pin 9 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN9_Secure (1UL) /*!< Pin 9 has its secure attribute set */

/* Bit 8 : Select secure attribute attribute for PIN 8. */
#define SPU_GPIOPORT_PERM_PIN8_Pos (8UL) /*!< Position of PIN8 field. */
#define SPU_GPIOPORT_PERM_PIN8_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN8_Pos) /*!< Bit mask of PIN8 field. */
#define SPU_GPIOPORT_PERM_PIN8_NonSecure (0UL) /*!< Pin 8 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN8_Secure (1UL) /*!< Pin 8 has its secure attribute set */

/* Bit 7 : Select secure attribute attribute for PIN 7. */
#define SPU_GPIOPORT_PERM_PIN7_Pos (7UL) /*!< Position of PIN7 field. */
#define SPU_GPIOPORT_PERM_PIN7_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN7_Pos) /*!< Bit mask of PIN7 field. */
#define SPU_GPIOPORT_PERM_PIN7_NonSecure (0UL) /*!< Pin 7 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN7_Secure (1UL) /*!< Pin 7 has its secure attribute set */

/* Bit 6 : Select secure attribute attribute for PIN 6. */
#define SPU_GPIOPORT_PERM_PIN6_Pos (6UL) /*!< Position of PIN6 field. */
#define SPU_GPIOPORT_PERM_PIN6_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN6_Pos) /*!< Bit mask of PIN6 field. */
#define SPU_GPIOPORT_PERM_PIN6_NonSecure (0UL) /*!< Pin 6 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN6_Secure (1UL) /*!< Pin 6 has its secure attribute set */

/* Bit 5 : Select secure attribute attribute for PIN 5. */
#define SPU_GPIOPORT_PERM_PIN5_Pos (5UL) /*!< Position of PIN5 field. */
#define SPU_GPIOPORT_PERM_PIN5_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN5_Pos) /*!< Bit mask of PIN5 field. */
#define SPU_GPIOPORT_PERM_PIN5_NonSecure (0UL) /*!< Pin 5 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN5_Secure (1UL) /*!< Pin 5 has its secure attribute set */

/* Bit 4 : Select secure attribute attribute for PIN 4. */
#define SPU_GPIOPORT_PERM_PIN4_Pos (4UL) /*!< Position of PIN4 field. */
#define SPU_GPIOPORT_PERM_PIN4_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN4_Pos) /*!< Bit mask of PIN4 field. */
#define SPU_GPIOPORT_PERM_PIN4_NonSecure (0UL) /*!< Pin 4 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN4_Secure (1UL) /*!< Pin 4 has its secure attribute set */

/* Bit 3 : Select secure attribute attribute for PIN 3. */
#define SPU_GPIOPORT_PERM_PIN3_Pos (3UL) /*!< Position of PIN3 field. */
#define SPU_GPIOPORT_PERM_PIN3_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN3_Pos) /*!< Bit mask of PIN3 field. */
#define SPU_GPIOPORT_PERM_PIN3_NonSecure (0UL) /*!< Pin 3 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN3_Secure (1UL) /*!< Pin 3 has its secure attribute set */

/* Bit 2 : Select secure attribute attribute for PIN 2. */
#define SPU_GPIOPORT_PERM_PIN2_Pos (2UL) /*!< Position of PIN2 field. */
#define SPU_GPIOPORT_PERM_PIN2_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN2_Pos) /*!< Bit mask of PIN2 field. */
#define SPU_GPIOPORT_PERM_PIN2_NonSecure (0UL) /*!< Pin 2 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN2_Secure (1UL) /*!< Pin 2 has its secure attribute set */

/* Bit 1 : Select secure attribute attribute for PIN 1. */
#define SPU_GPIOPORT_PERM_PIN1_Pos (1UL) /*!< Position of PIN1 field. */
#define SPU_GPIOPORT_PERM_PIN1_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN1_Pos) /*!< Bit mask of PIN1 field. */
#define SPU_GPIOPORT_PERM_PIN1_NonSecure (0UL) /*!< Pin 1 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN1_Secure (1UL) /*!< Pin 1 has its secure attribute set */

/* Bit 0 : Select secure attribute attribute for PIN 0. */
#define SPU_GPIOPORT_PERM_PIN0_Pos (0UL) /*!< Position of PIN0 field. */
#define SPU_GPIOPORT_PERM_PIN0_Msk (0x1UL << SPU_GPIOPORT_PERM_PIN0_Pos) /*!< Bit mask of PIN0 field. */
#define SPU_GPIOPORT_PERM_PIN0_NonSecure (0UL) /*!< Pin 0 has its non-secure attribute set */
#define SPU_GPIOPORT_PERM_PIN0_Secure (1UL) /*!< Pin 0 has its secure attribute set */

/* Register: SPU_GPIOPORT_LOCK */
/* Description: Description cluster: Prevent further modification of the corresponding PERM register */

/* Bit 0 :   */
#define SPU_GPIOPORT_LOCK_LOCK_Pos (0UL) /*!< Position of LOCK field. */
#define SPU_GPIOPORT_LOCK_LOCK_Msk (0x1UL << SPU_GPIOPORT_LOCK_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_GPIOPORT_LOCK_LOCK_Unlocked (0UL) /*!< GPIOPORT[n].PERM register content can be changed */
#define SPU_GPIOPORT_LOCK_LOCK_Locked (1UL) /*!< GPIOPORT[n].PERM register can't be changed until next reset */

/* Register: SPU_FLASHNSC_REGION */
/* Description: Description cluster: Define which flash region can contain the non-secure callable (NSC) region n */

/* Bit 8 :   */
#define SPU_FLASHNSC_REGION_LOCK_Pos (8UL) /*!< Position of LOCK field. */
#define SPU_FLASHNSC_REGION_LOCK_Msk (0x1UL << SPU_FLASHNSC_REGION_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_FLASHNSC_REGION_LOCK_Unlocked (0UL) /*!< This register can be updated */
#define SPU_FLASHNSC_REGION_LOCK_Locked (1UL) /*!< The content of this register can't be changed until the next reset */

/* Bits 5..0 : Region number */
#define SPU_FLASHNSC_REGION_REGION_Pos (0UL) /*!< Position of REGION field. */
#define SPU_FLASHNSC_REGION_REGION_Msk (0x3FUL << SPU_FLASHNSC_REGION_REGION_Pos) /*!< Bit mask of REGION field. */

/* Register: SPU_FLASHNSC_SIZE */
/* Description: Description cluster: Define the size of the non-secure callable (NSC) region n */

/* Bit 8 :   */
#define SPU_FLASHNSC_SIZE_LOCK_Pos (8UL) /*!< Position of LOCK field. */
#define SPU_FLASHNSC_SIZE_LOCK_Msk (0x1UL << SPU_FLASHNSC_SIZE_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_FLASHNSC_SIZE_LOCK_Unlocked (0UL) /*!< This register can be updated */
#define SPU_FLASHNSC_SIZE_LOCK_Locked (1UL) /*!< The content of this register can't be changed until the next reset */

/* Bits 3..0 : Size of the non-secure callable (NSC) region n */
#define SPU_FLASHNSC_SIZE_SIZE_Pos (0UL) /*!< Position of SIZE field. */
#define SPU_FLASHNSC_SIZE_SIZE_Msk (0xFUL << SPU_FLASHNSC_SIZE_SIZE_Pos) /*!< Bit mask of SIZE field. */
#define SPU_FLASHNSC_SIZE_SIZE_Disabled (0UL) /*!< The region n is not defined as a non-secure callable region. Normal security attributes (secure or non-secure) are enforced. */
#define SPU_FLASHNSC_SIZE_SIZE_32 (1UL) /*!< The region n is defined as non-secure callable with a 32-byte size */
#define SPU_FLASHNSC_SIZE_SIZE_64 (2UL) /*!< The region n is defined as non-secure callable with a 64-byte size */
#define SPU_FLASHNSC_SIZE_SIZE_128 (3UL) /*!< The region n is defined as non-secure callable with a 128-byte size */
#define SPU_FLASHNSC_SIZE_SIZE_256 (4UL) /*!< The region n is defined as non-secure callable with a 256-byte size */
#define SPU_FLASHNSC_SIZE_SIZE_512 (5UL) /*!< The region n is defined as non-secure callable with a 512-byte size */
#define SPU_FLASHNSC_SIZE_SIZE_1024 (6UL) /*!< The region n is defined as non-secure callable with a 1024-byte size */
#define SPU_FLASHNSC_SIZE_SIZE_2048 (7UL) /*!< The region n is defined as non-secure callable with a 2048-byte size */
#define SPU_FLASHNSC_SIZE_SIZE_4096 (8UL) /*!< The region n is defined as non-secure callable with a 4096-byte size */

/* Register: SPU_RAMNSC_REGION */
/* Description: Description cluster: Define which RAM region can contain the non-secure callable (NSC) region n */

/* Bit 8 :   */
#define SPU_RAMNSC_REGION_LOCK_Pos (8UL) /*!< Position of LOCK field. */
#define SPU_RAMNSC_REGION_LOCK_Msk (0x1UL << SPU_RAMNSC_REGION_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_RAMNSC_REGION_LOCK_Unlocked (0UL) /*!< This register can be updated */
#define SPU_RAMNSC_REGION_LOCK_Locked (1UL) /*!< The content of this register can't be changed until the next reset */

/* Bits 5..0 : Region number */
#define SPU_RAMNSC_REGION_REGION_Pos (0UL) /*!< Position of REGION field. */
#define SPU_RAMNSC_REGION_REGION_Msk (0x3FUL << SPU_RAMNSC_REGION_REGION_Pos) /*!< Bit mask of REGION field. */

/* Register: SPU_RAMNSC_SIZE */
/* Description: Description cluster: Define the size of the non-secure callable (NSC) region n */

/* Bit 8 :   */
#define SPU_RAMNSC_SIZE_LOCK_Pos (8UL) /*!< Position of LOCK field. */
#define SPU_RAMNSC_SIZE_LOCK_Msk (0x1UL << SPU_RAMNSC_SIZE_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_RAMNSC_SIZE_LOCK_Unlocked (0UL) /*!< This register can be updated */
#define SPU_RAMNSC_SIZE_LOCK_Locked (1UL) /*!< The content of this register can't be changed until the next reset */

/* Bits 3..0 : Size of the non-secure callable (NSC) region n */
#define SPU_RAMNSC_SIZE_SIZE_Pos (0UL) /*!< Position of SIZE field. */
#define SPU_RAMNSC_SIZE_SIZE_Msk (0xFUL << SPU_RAMNSC_SIZE_SIZE_Pos) /*!< Bit mask of SIZE field. */
#define SPU_RAMNSC_SIZE_SIZE_Disabled (0UL) /*!< The region n is not defined as a non-secure callable region. Normal security attributes (secure or non-secure) are enforced. */
#define SPU_RAMNSC_SIZE_SIZE_32 (1UL) /*!< The region n is defined as non-secure callable with a 32-byte size */
#define SPU_RAMNSC_SIZE_SIZE_64 (2UL) /*!< The region n is defined as non-secure callable with a 64-byte size */
#define SPU_RAMNSC_SIZE_SIZE_128 (3UL) /*!< The region n is defined as non-secure callable with a 128-byte size */
#define SPU_RAMNSC_SIZE_SIZE_256 (4UL) /*!< The region n is defined as non-secure callable with a 256-byte size */
#define SPU_RAMNSC_SIZE_SIZE_512 (5UL) /*!< The region n is defined as non-secure callable with a 512-byte size */
#define SPU_RAMNSC_SIZE_SIZE_1024 (6UL) /*!< The region n is defined as non-secure callable with a 1024-byte size */
#define SPU_RAMNSC_SIZE_SIZE_2048 (7UL) /*!< The region n is defined as non-secure callable with a 2048-byte size */
#define SPU_RAMNSC_SIZE_SIZE_4096 (8UL) /*!< The region n is defined as non-secure callable with a 4096-byte size */

/* Register: SPU_FLASHREGION_PERM */
/* Description: Description cluster: Access permissions for flash region n */

/* Bit 8 :   */
#define SPU_FLASHREGION_PERM_LOCK_Pos (8UL) /*!< Position of LOCK field. */
#define SPU_FLASHREGION_PERM_LOCK_Msk (0x1UL << SPU_FLASHREGION_PERM_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_FLASHREGION_PERM_LOCK_Unlocked (0UL) /*!< This register can be updated */
#define SPU_FLASHREGION_PERM_LOCK_Locked (1UL) /*!< The content of this register can't be changed until the next reset */

/* Bit 4 : Security attribute for flash region n */
#define SPU_FLASHREGION_PERM_SECATTR_Pos (4UL) /*!< Position of SECATTR field. */
#define SPU_FLASHREGION_PERM_SECATTR_Msk (0x1UL << SPU_FLASHREGION_PERM_SECATTR_Pos) /*!< Bit mask of SECATTR field. */
#define SPU_FLASHREGION_PERM_SECATTR_Non_Secure (0UL) /*!< Flash region n security attribute is non-secure */
#define SPU_FLASHREGION_PERM_SECATTR_Secure (1UL) /*!< Flash region n security attribute is secure */

/* Bit 2 : Configure read permissions for flash region n */
#define SPU_FLASHREGION_PERM_READ_Pos (2UL) /*!< Position of READ field. */
#define SPU_FLASHREGION_PERM_READ_Msk (0x1UL << SPU_FLASHREGION_PERM_READ_Pos) /*!< Bit mask of READ field. */
#define SPU_FLASHREGION_PERM_READ_Disable (0UL) /*!< Block read operation from flash region n */
#define SPU_FLASHREGION_PERM_READ_Enable (1UL) /*!< Allow read operation from flash region n */

/* Bit 1 : Configure write permission for flash region n */
#define SPU_FLASHREGION_PERM_WRITE_Pos (1UL) /*!< Position of WRITE field. */
#define SPU_FLASHREGION_PERM_WRITE_Msk (0x1UL << SPU_FLASHREGION_PERM_WRITE_Pos) /*!< Bit mask of WRITE field. */
#define SPU_FLASHREGION_PERM_WRITE_Disable (0UL) /*!< Block write operation to region n */
#define SPU_FLASHREGION_PERM_WRITE_Enable (1UL) /*!< Allow write operation to region n */

/* Bit 0 : Configure instruction fetch permissions from flash region n */
#define SPU_FLASHREGION_PERM_EXECUTE_Pos (0UL) /*!< Position of EXECUTE field. */
#define SPU_FLASHREGION_PERM_EXECUTE_Msk (0x1UL << SPU_FLASHREGION_PERM_EXECUTE_Pos) /*!< Bit mask of EXECUTE field. */
#define SPU_FLASHREGION_PERM_EXECUTE_Disable (0UL) /*!< Block instruction fetches from flash region n */
#define SPU_FLASHREGION_PERM_EXECUTE_Enable (1UL) /*!< Allow instruction fetches from flash region n */

/* Register: SPU_RAMREGION_PERM */
/* Description: Description cluster: Access permissions for RAM region n */

/* Bit 8 :   */
#define SPU_RAMREGION_PERM_LOCK_Pos (8UL) /*!< Position of LOCK field. */
#define SPU_RAMREGION_PERM_LOCK_Msk (0x1UL << SPU_RAMREGION_PERM_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_RAMREGION_PERM_LOCK_Unlocked (0UL) /*!< This register can be updated */
#define SPU_RAMREGION_PERM_LOCK_Locked (1UL) /*!< The content of this register can't be changed until the next reset */

/* Bit 4 : Security attribute for RAM region n */
#define SPU_RAMREGION_PERM_SECATTR_Pos (4UL) /*!< Position of SECATTR field. */
#define SPU_RAMREGION_PERM_SECATTR_Msk (0x1UL << SPU_RAMREGION_PERM_SECATTR_Pos) /*!< Bit mask of SECATTR field. */
#define SPU_RAMREGION_PERM_SECATTR_Non_Secure (0UL) /*!< RAM region n security attribute is non-secure */
#define SPU_RAMREGION_PERM_SECATTR_Secure (1UL) /*!< RAM region n security attribute is secure */

/* Bit 2 : Configure read permissions for RAM region n */
#define SPU_RAMREGION_PERM_READ_Pos (2UL) /*!< Position of READ field. */
#define SPU_RAMREGION_PERM_READ_Msk (0x1UL << SPU_RAMREGION_PERM_READ_Pos) /*!< Bit mask of READ field. */
#define SPU_RAMREGION_PERM_READ_Disable (0UL) /*!< Block read operation from RAM region n */
#define SPU_RAMREGION_PERM_READ_Enable (1UL) /*!< Allow read operation from RAM region n */

/* Bit 1 : Configure write permission for RAM region n */
#define SPU_RAMREGION_PERM_WRITE_Pos (1UL) /*!< Position of WRITE field. */
#define SPU_RAMREGION_PERM_WRITE_Msk (0x1UL << SPU_RAMREGION_PERM_WRITE_Pos) /*!< Bit mask of WRITE field. */
#define SPU_RAMREGION_PERM_WRITE_Disable (0UL) /*!< Block write operation to RAM region n */
#define SPU_RAMREGION_PERM_WRITE_Enable (1UL) /*!< Allow write operation to RAM region n */

/* Bit 0 : Configure instruction fetch permissions from RAM region n */
#define SPU_RAMREGION_PERM_EXECUTE_Pos (0UL) /*!< Position of EXECUTE field. */
#define SPU_RAMREGION_PERM_EXECUTE_Msk (0x1UL << SPU_RAMREGION_PERM_EXECUTE_Pos) /*!< Bit mask of EXECUTE field. */
#define SPU_RAMREGION_PERM_EXECUTE_Disable (0UL) /*!< Block instruction fetches from RAM region n */
#define SPU_RAMREGION_PERM_EXECUTE_Enable (1UL) /*!< Allow instruction fetches from RAM region n */

/* Register: SPU_PERIPHID_PERM */
/* Description: Description cluster: List capabilities and access permissions for the peripheral with ID n */

/* Bit 31 : Indicate if a peripheral is present with ID n */
#define SPU_PERIPHID_PERM_PRESENT_Pos (31UL) /*!< Position of PRESENT field. */
#define SPU_PERIPHID_PERM_PRESENT_Msk (0x1UL << SPU_PERIPHID_PERM_PRESENT_Pos) /*!< Bit mask of PRESENT field. */
#define SPU_PERIPHID_PERM_PRESENT_NotPresent (0UL) /*!< Peripheral is not present */
#define SPU_PERIPHID_PERM_PRESENT_IsPresent (1UL) /*!< Peripheral is present */

/* Bit 8 :   */
#define SPU_PERIPHID_PERM_LOCK_Pos (8UL) /*!< Position of LOCK field. */
#define SPU_PERIPHID_PERM_LOCK_Msk (0x1UL << SPU_PERIPHID_PERM_LOCK_Pos) /*!< Bit mask of LOCK field. */
#define SPU_PERIPHID_PERM_LOCK_Unlocked (0UL) /*!< This register can be updated */
#define SPU_PERIPHID_PERM_LOCK_Locked (1UL) /*!< The content of this register can't be changed until the next reset */

/* Bit 5 : Security attribution for the DMA transfer */
#define SPU_PERIPHID_PERM_DMASEC_Pos (5UL) /*!< Position of DMASEC field. */
#define SPU_PERIPHID_PERM_DMASEC_Msk (0x1UL << SPU_PERIPHID_PERM_DMASEC_Pos) /*!< Bit mask of DMASEC field. */
#define SPU_PERIPHID_PERM_DMASEC_NonSecure (0UL) /*!< DMA transfers initiated by this peripheral have the non-secure attribute set */
#define SPU_PERIPHID_PERM_DMASEC_Secure (1UL) /*!< DMA transfers initiated by this peripheral have the secure attribute set */

/* Bit 4 : Peripheral security mapping */
#define SPU_PERIPHID_PERM_SECATTR_Pos (4UL) /*!< Position of SECATTR field. */
#define SPU_PERIPHID_PERM_SECATTR_Msk (0x1UL << SPU_PERIPHID_PERM_SECATTR_Pos) /*!< Bit mask of SECATTR field. */
#define SPU_PERIPHID_PERM_SECATTR_NonSecure (0UL) /*!< If SECUREMAPPING == UserSelectable: Peripheral is mapped in non-secure peripheral address space. If SECUREMAPPING == Split: Peripheral is mapped in non-secure and secure peripheral address space. */
#define SPU_PERIPHID_PERM_SECATTR_Secure (1UL) /*!< Peripheral is mapped in secure peripheral address space */

/* Bits 3..2 : Indicate if the peripheral has DMA capabilities and if DMA transfer can be assigned to a different security attribute than the peripheral itself */
#define SPU_PERIPHID_PERM_DMA_Pos (2UL) /*!< Position of DMA field. */
#define SPU_PERIPHID_PERM_DMA_Msk (0x3UL << SPU_PERIPHID_PERM_DMA_Pos) /*!< Bit mask of DMA field. */
#define SPU_PERIPHID_PERM_DMA_NoDMA (0UL) /*!< Peripheral has no DMA capability */
#define SPU_PERIPHID_PERM_DMA_NoSeparateAttribute (1UL) /*!< Peripheral has DMA and DMA transfers always have the same security attribute as assigned to the peripheral */
#define SPU_PERIPHID_PERM_DMA_SeparateAttribute (2UL) /*!< Peripheral has DMA and DMA transfers can have a different security attribute than the one assigned to the peripheral */

/* Bits 1..0 : Define configuration capabilities for TrustZone Cortex-M secure attribute */
#define SPU_PERIPHID_PERM_SECUREMAPPING_Pos (0UL) /*!< Position of SECUREMAPPING field. */
#define SPU_PERIPHID_PERM_SECUREMAPPING_Msk (0x3UL << SPU_PERIPHID_PERM_SECUREMAPPING_Pos) /*!< Bit mask of SECUREMAPPING field. */
#define SPU_PERIPHID_PERM_SECUREMAPPING_NonSecure (0UL) /*!< This peripheral is always accessible as a non-secure peripheral */
#define SPU_PERIPHID_PERM_SECUREMAPPING_Secure (1UL) /*!< This peripheral is always accessible as a secure peripheral */
#define SPU_PERIPHID_PERM_SECUREMAPPING_UserSelectable (2UL) /*!< Non-secure or secure attribute for this peripheral is defined by the PERIPHID[n].PERM register */
#define SPU_PERIPHID_PERM_SECUREMAPPING_Split (3UL) /*!< This peripheral implements the split security mechanism. Non-secure or secure attribute for this peripheral is defined by the PERIPHID[n].PERM register. */


/* Peripheral: TAD */
/* Description: Trace and debug control */

/* Register: TAD_FORCEON */
/* Description: Force on debug domain */

/* Bit 0 : Force on debug domain */
#define TAD_FORCEON_FORCEON_Pos (0UL) /*!< Position of FORCEON field. */
#define TAD_FORCEON_FORCEON_Msk (0x1UL << TAD_FORCEON_FORCEON_Pos) /*!< Bit mask of FORCEON field. */
#define TAD_FORCEON_FORCEON_DISABLED (0UL) /*!< Disable force-on of debug domain */
#define TAD_FORCEON_FORCEON_ENABLED (1UL) /*!< Enable force-on of debug domain */

/* Register: TAD_CLOCKSTART */
/* Description: Start all trace and debug clocks. */

/* Bit 0 :   */
#define TAD_CLOCKSTART_START_Pos (0UL) /*!< Position of START field. */
#define TAD_CLOCKSTART_START_Msk (0x1UL << TAD_CLOCKSTART_START_Pos) /*!< Bit mask of START field. */
#define TAD_CLOCKSTART_START_Start (1UL) /*!< Start all trace and debug clocks. */

/* Register: TAD_CLOCKSTOP */
/* Description: Stop all trace and debug clocks. */

/* Bit 0 :   */
#define TAD_CLOCKSTOP_STOP_Pos (0UL) /*!< Position of STOP field. */
#define TAD_CLOCKSTOP_STOP_Msk (0x1UL << TAD_CLOCKSTOP_STOP_Pos) /*!< Bit mask of STOP field. */
#define TAD_CLOCKSTOP_STOP_Stop (1UL) /*!< Stop all trace and debug clocks. */

/* Register: TAD_ENABLE */
/* Description: Enable debug domain and aquire selected GPIOs */

/* Bit 0 :   */
#define TAD_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define TAD_ENABLE_ENABLE_Msk (0x1UL << TAD_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define TAD_ENABLE_ENABLE_DISABLED (0UL) /*!< Disable debug domain and release selected GPIOs */
#define TAD_ENABLE_ENABLE_ENABLED (1UL) /*!< Enable debug domain and aquire selected GPIOs */

/* Register: TAD_PSEL_TRACECLK */
/* Description: Pin configuration for TRACECLK */

/* Bit 31 : Connection */
#define TAD_PSEL_TRACECLK_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TAD_PSEL_TRACECLK_CONNECT_Msk (0x1UL << TAD_PSEL_TRACECLK_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TAD_PSEL_TRACECLK_CONNECT_Connected (0UL) /*!< Connect */
#define TAD_PSEL_TRACECLK_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bits 4..0 : Pin number */
#define TAD_PSEL_TRACECLK_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TAD_PSEL_TRACECLK_PIN_Msk (0x1FUL << TAD_PSEL_TRACECLK_PIN_Pos) /*!< Bit mask of PIN field. */
#define TAD_PSEL_TRACECLK_PIN_Traceclk (12UL) /*!< TRACECLK pin */

/* Register: TAD_PSEL_TRACEDATA0 */
/* Description: Pin configuration for TRACEDATA[0] and SWO */

/* Bit 31 : Connection */
#define TAD_PSEL_TRACEDATA0_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TAD_PSEL_TRACEDATA0_CONNECT_Msk (0x1UL << TAD_PSEL_TRACEDATA0_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TAD_PSEL_TRACEDATA0_CONNECT_Connected (0UL) /*!< Connect */
#define TAD_PSEL_TRACEDATA0_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bits 4..0 : Pin number */
#define TAD_PSEL_TRACEDATA0_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TAD_PSEL_TRACEDATA0_PIN_Msk (0x1FUL << TAD_PSEL_TRACEDATA0_PIN_Pos) /*!< Bit mask of PIN field. */
#define TAD_PSEL_TRACEDATA0_PIN_Tracedata0 (11UL) /*!< TRACEDATA0/SWO pin */

/* Register: TAD_PSEL_TRACEDATA1 */
/* Description: Pin configuration for TRACEDATA[1] */

/* Bit 31 : Connection */
#define TAD_PSEL_TRACEDATA1_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TAD_PSEL_TRACEDATA1_CONNECT_Msk (0x1UL << TAD_PSEL_TRACEDATA1_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TAD_PSEL_TRACEDATA1_CONNECT_Connected (0UL) /*!< Connect */
#define TAD_PSEL_TRACEDATA1_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bits 4..0 : Pin number */
#define TAD_PSEL_TRACEDATA1_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TAD_PSEL_TRACEDATA1_PIN_Msk (0x1FUL << TAD_PSEL_TRACEDATA1_PIN_Pos) /*!< Bit mask of PIN field. */
#define TAD_PSEL_TRACEDATA1_PIN_Tracedata1 (10UL) /*!< TRACEDATA1 pin */

/* Register: TAD_PSEL_TRACEDATA2 */
/* Description: Pin configuration for TRACEDATA[2] */

/* Bit 31 : Connection */
#define TAD_PSEL_TRACEDATA2_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TAD_PSEL_TRACEDATA2_CONNECT_Msk (0x1UL << TAD_PSEL_TRACEDATA2_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TAD_PSEL_TRACEDATA2_CONNECT_Connected (0UL) /*!< Connect */
#define TAD_PSEL_TRACEDATA2_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bits 4..0 : Pin number */
#define TAD_PSEL_TRACEDATA2_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TAD_PSEL_TRACEDATA2_PIN_Msk (0x1FUL << TAD_PSEL_TRACEDATA2_PIN_Pos) /*!< Bit mask of PIN field. */
#define TAD_PSEL_TRACEDATA2_PIN_Tracedata2 (9UL) /*!< TRACEDATA2 pin */

/* Register: TAD_PSEL_TRACEDATA3 */
/* Description: Pin configuration for TRACEDATA[3] */

/* Bit 31 : Connection */
#define TAD_PSEL_TRACEDATA3_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TAD_PSEL_TRACEDATA3_CONNECT_Msk (0x1UL << TAD_PSEL_TRACEDATA3_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TAD_PSEL_TRACEDATA3_CONNECT_Connected (0UL) /*!< Connect */
#define TAD_PSEL_TRACEDATA3_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bits 4..0 : Pin number */
#define TAD_PSEL_TRACEDATA3_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TAD_PSEL_TRACEDATA3_PIN_Msk (0x1FUL << TAD_PSEL_TRACEDATA3_PIN_Pos) /*!< Bit mask of PIN field. */
#define TAD_PSEL_TRACEDATA3_PIN_Tracedata3 (8UL) /*!< TRACEDATA3 pin */

/* Register: TAD_TRACEPORTSPEED */
/* Description: Clocking options for the Trace Port debug interface. */

/* Bits 1..0 : Speed of Trace Port clock. Note that the TRACECLK pin output will be divided again by two from the Trace Port clock. */
#define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Pos (0UL) /*!< Position of TRACEPORTSPEED field. */
#define TAD_TRACEPORTSPEED_TRACEPORTSPEED_Msk (0x3UL << TAD_TRACEPORTSPEED_TRACEPORTSPEED_Pos) /*!< Bit mask of TRACEPORTSPEED field. */
#define TAD_TRACEPORTSPEED_TRACEPORTSPEED_64MHz (0UL) /*!< Trace Port clock is: 64MHz */
#define TAD_TRACEPORTSPEED_TRACEPORTSPEED_32MHz (1UL) /*!< Trace Port clock is: 32MHz */
#define TAD_TRACEPORTSPEED_TRACEPORTSPEED_8MHz (2UL) /*!< Trace Port clock is: 8MHz */
#define TAD_TRACEPORTSPEED_TRACEPORTSPEED_4MHz (3UL) /*!< Trace Port clock is: 4MHz */


/* Peripheral: TIMER */
/* Description: Timer/Counter 0 */

/* Register: TIMER_TASKS_START */
/* Description: Start Timer */

/* Bit 0 : Start Timer */
#define TIMER_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define TIMER_TASKS_START_TASKS_START_Msk (0x1UL << TIMER_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define TIMER_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: TIMER_TASKS_STOP */
/* Description: Stop Timer */

/* Bit 0 : Stop Timer */
#define TIMER_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define TIMER_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TIMER_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define TIMER_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: TIMER_TASKS_COUNT */
/* Description: Increment Timer (Counter mode only) */

/* Bit 0 : Increment Timer (Counter mode only) */
#define TIMER_TASKS_COUNT_TASKS_COUNT_Pos (0UL) /*!< Position of TASKS_COUNT field. */
#define TIMER_TASKS_COUNT_TASKS_COUNT_Msk (0x1UL << TIMER_TASKS_COUNT_TASKS_COUNT_Pos) /*!< Bit mask of TASKS_COUNT field. */
#define TIMER_TASKS_COUNT_TASKS_COUNT_Trigger (1UL) /*!< Trigger task */

/* Register: TIMER_TASKS_CLEAR */
/* Description: Clear time */

/* Bit 0 : Clear time */
#define TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos (0UL) /*!< Position of TASKS_CLEAR field. */
#define TIMER_TASKS_CLEAR_TASKS_CLEAR_Msk (0x1UL << TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos) /*!< Bit mask of TASKS_CLEAR field. */
#define TIMER_TASKS_CLEAR_TASKS_CLEAR_Trigger (1UL) /*!< Trigger task */

/* Register: TIMER_TASKS_SHUTDOWN */
/* Description: Deprecated register - Shut down timer */

/* Bit 0 : Deprecated field -  Shut down timer */
#define TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Pos (0UL) /*!< Position of TASKS_SHUTDOWN field. */
#define TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Msk (0x1UL << TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Pos) /*!< Bit mask of TASKS_SHUTDOWN field. */
#define TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Trigger (1UL) /*!< Trigger task */

/* Register: TIMER_TASKS_CAPTURE */
/* Description: Description collection: Capture Timer value to CC[n] register */

/* Bit 0 : Capture Timer value to CC[n] register */
#define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos (0UL) /*!< Position of TASKS_CAPTURE field. */
#define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Msk (0x1UL << TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos) /*!< Bit mask of TASKS_CAPTURE field. */
#define TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Trigger (1UL) /*!< Trigger task */

/* Register: TIMER_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define TIMER_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define TIMER_SUBSCRIBE_START_EN_Msk (0x1UL << TIMER_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define TIMER_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define TIMER_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define TIMER_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TIMER_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TIMER_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define TIMER_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define TIMER_SUBSCRIBE_STOP_EN_Msk (0x1UL << TIMER_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define TIMER_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define TIMER_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define TIMER_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TIMER_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TIMER_SUBSCRIBE_COUNT */
/* Description: Subscribe configuration for task COUNT */

/* Bit 31 :   */
#define TIMER_SUBSCRIBE_COUNT_EN_Pos (31UL) /*!< Position of EN field. */
#define TIMER_SUBSCRIBE_COUNT_EN_Msk (0x1UL << TIMER_SUBSCRIBE_COUNT_EN_Pos) /*!< Bit mask of EN field. */
#define TIMER_SUBSCRIBE_COUNT_EN_Disabled (0UL) /*!< Disable subscription */
#define TIMER_SUBSCRIBE_COUNT_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task COUNT will subscribe to */
#define TIMER_SUBSCRIBE_COUNT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TIMER_SUBSCRIBE_COUNT_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_COUNT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TIMER_SUBSCRIBE_CLEAR */
/* Description: Subscribe configuration for task CLEAR */

/* Bit 31 :   */
#define TIMER_SUBSCRIBE_CLEAR_EN_Pos (31UL) /*!< Position of EN field. */
#define TIMER_SUBSCRIBE_CLEAR_EN_Msk (0x1UL << TIMER_SUBSCRIBE_CLEAR_EN_Pos) /*!< Bit mask of EN field. */
#define TIMER_SUBSCRIBE_CLEAR_EN_Disabled (0UL) /*!< Disable subscription */
#define TIMER_SUBSCRIBE_CLEAR_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CLEAR will subscribe to */
#define TIMER_SUBSCRIBE_CLEAR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TIMER_SUBSCRIBE_CLEAR_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_CLEAR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TIMER_SUBSCRIBE_SHUTDOWN */
/* Description: Deprecated register - Subscribe configuration for task SHUTDOWN */

/* Bit 31 :   */
#define TIMER_SUBSCRIBE_SHUTDOWN_EN_Pos (31UL) /*!< Position of EN field. */
#define TIMER_SUBSCRIBE_SHUTDOWN_EN_Msk (0x1UL << TIMER_SUBSCRIBE_SHUTDOWN_EN_Pos) /*!< Bit mask of EN field. */
#define TIMER_SUBSCRIBE_SHUTDOWN_EN_Disabled (0UL) /*!< Disable subscription */
#define TIMER_SUBSCRIBE_SHUTDOWN_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SHUTDOWN will subscribe to */
#define TIMER_SUBSCRIBE_SHUTDOWN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TIMER_SUBSCRIBE_SHUTDOWN_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_SHUTDOWN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TIMER_SUBSCRIBE_CAPTURE */
/* Description: Description collection: Subscribe configuration for task CAPTURE[n] */

/* Bit 31 :   */
#define TIMER_SUBSCRIBE_CAPTURE_EN_Pos (31UL) /*!< Position of EN field. */
#define TIMER_SUBSCRIBE_CAPTURE_EN_Msk (0x1UL << TIMER_SUBSCRIBE_CAPTURE_EN_Pos) /*!< Bit mask of EN field. */
#define TIMER_SUBSCRIBE_CAPTURE_EN_Disabled (0UL) /*!< Disable subscription */
#define TIMER_SUBSCRIBE_CAPTURE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task CAPTURE[n] will subscribe to */
#define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TIMER_SUBSCRIBE_CAPTURE_CHIDX_Msk (0xFFUL << TIMER_SUBSCRIBE_CAPTURE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TIMER_EVENTS_COMPARE */
/* Description: Description collection: Compare event on CC[n] match */

/* Bit 0 : Compare event on CC[n] match */
#define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos (0UL) /*!< Position of EVENTS_COMPARE field. */
#define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Msk (0x1UL << TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos) /*!< Bit mask of EVENTS_COMPARE field. */
#define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated (0UL) /*!< Event not generated */
#define TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Generated (1UL) /*!< Event generated */

/* Register: TIMER_PUBLISH_COMPARE */
/* Description: Description collection: Publish configuration for event COMPARE[n] */

/* Bit 31 :   */
#define TIMER_PUBLISH_COMPARE_EN_Pos (31UL) /*!< Position of EN field. */
#define TIMER_PUBLISH_COMPARE_EN_Msk (0x1UL << TIMER_PUBLISH_COMPARE_EN_Pos) /*!< Bit mask of EN field. */
#define TIMER_PUBLISH_COMPARE_EN_Disabled (0UL) /*!< Disable publishing */
#define TIMER_PUBLISH_COMPARE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event COMPARE[n] will publish to. */
#define TIMER_PUBLISH_COMPARE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TIMER_PUBLISH_COMPARE_CHIDX_Msk (0xFFUL << TIMER_PUBLISH_COMPARE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TIMER_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 21 : Shortcut between event COMPARE[5] and task STOP */
#define TIMER_SHORTS_COMPARE5_STOP_Pos (21UL) /*!< Position of COMPARE5_STOP field. */
#define TIMER_SHORTS_COMPARE5_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE5_STOP_Pos) /*!< Bit mask of COMPARE5_STOP field. */
#define TIMER_SHORTS_COMPARE5_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE5_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 20 : Shortcut between event COMPARE[4] and task STOP */
#define TIMER_SHORTS_COMPARE4_STOP_Pos (20UL) /*!< Position of COMPARE4_STOP field. */
#define TIMER_SHORTS_COMPARE4_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE4_STOP_Pos) /*!< Bit mask of COMPARE4_STOP field. */
#define TIMER_SHORTS_COMPARE4_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE4_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 19 : Shortcut between event COMPARE[3] and task STOP */
#define TIMER_SHORTS_COMPARE3_STOP_Pos (19UL) /*!< Position of COMPARE3_STOP field. */
#define TIMER_SHORTS_COMPARE3_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE3_STOP_Pos) /*!< Bit mask of COMPARE3_STOP field. */
#define TIMER_SHORTS_COMPARE3_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE3_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 18 : Shortcut between event COMPARE[2] and task STOP */
#define TIMER_SHORTS_COMPARE2_STOP_Pos (18UL) /*!< Position of COMPARE2_STOP field. */
#define TIMER_SHORTS_COMPARE2_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE2_STOP_Pos) /*!< Bit mask of COMPARE2_STOP field. */
#define TIMER_SHORTS_COMPARE2_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE2_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 17 : Shortcut between event COMPARE[1] and task STOP */
#define TIMER_SHORTS_COMPARE1_STOP_Pos (17UL) /*!< Position of COMPARE1_STOP field. */
#define TIMER_SHORTS_COMPARE1_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE1_STOP_Pos) /*!< Bit mask of COMPARE1_STOP field. */
#define TIMER_SHORTS_COMPARE1_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE1_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 16 : Shortcut between event COMPARE[0] and task STOP */
#define TIMER_SHORTS_COMPARE0_STOP_Pos (16UL) /*!< Position of COMPARE0_STOP field. */
#define TIMER_SHORTS_COMPARE0_STOP_Msk (0x1UL << TIMER_SHORTS_COMPARE0_STOP_Pos) /*!< Bit mask of COMPARE0_STOP field. */
#define TIMER_SHORTS_COMPARE0_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE0_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 5 : Shortcut between event COMPARE[5] and task CLEAR */
#define TIMER_SHORTS_COMPARE5_CLEAR_Pos (5UL) /*!< Position of COMPARE5_CLEAR field. */
#define TIMER_SHORTS_COMPARE5_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE5_CLEAR_Pos) /*!< Bit mask of COMPARE5_CLEAR field. */
#define TIMER_SHORTS_COMPARE5_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE5_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Bit 4 : Shortcut between event COMPARE[4] and task CLEAR */
#define TIMER_SHORTS_COMPARE4_CLEAR_Pos (4UL) /*!< Position of COMPARE4_CLEAR field. */
#define TIMER_SHORTS_COMPARE4_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE4_CLEAR_Pos) /*!< Bit mask of COMPARE4_CLEAR field. */
#define TIMER_SHORTS_COMPARE4_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE4_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event COMPARE[3] and task CLEAR */
#define TIMER_SHORTS_COMPARE3_CLEAR_Pos (3UL) /*!< Position of COMPARE3_CLEAR field. */
#define TIMER_SHORTS_COMPARE3_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE3_CLEAR_Pos) /*!< Bit mask of COMPARE3_CLEAR field. */
#define TIMER_SHORTS_COMPARE3_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE3_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Bit 2 : Shortcut between event COMPARE[2] and task CLEAR */
#define TIMER_SHORTS_COMPARE2_CLEAR_Pos (2UL) /*!< Position of COMPARE2_CLEAR field. */
#define TIMER_SHORTS_COMPARE2_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE2_CLEAR_Pos) /*!< Bit mask of COMPARE2_CLEAR field. */
#define TIMER_SHORTS_COMPARE2_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE2_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Bit 1 : Shortcut between event COMPARE[1] and task CLEAR */
#define TIMER_SHORTS_COMPARE1_CLEAR_Pos (1UL) /*!< Position of COMPARE1_CLEAR field. */
#define TIMER_SHORTS_COMPARE1_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE1_CLEAR_Pos) /*!< Bit mask of COMPARE1_CLEAR field. */
#define TIMER_SHORTS_COMPARE1_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE1_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event COMPARE[0] and task CLEAR */
#define TIMER_SHORTS_COMPARE0_CLEAR_Pos (0UL) /*!< Position of COMPARE0_CLEAR field. */
#define TIMER_SHORTS_COMPARE0_CLEAR_Msk (0x1UL << TIMER_SHORTS_COMPARE0_CLEAR_Pos) /*!< Bit mask of COMPARE0_CLEAR field. */
#define TIMER_SHORTS_COMPARE0_CLEAR_Disabled (0UL) /*!< Disable shortcut */
#define TIMER_SHORTS_COMPARE0_CLEAR_Enabled (1UL) /*!< Enable shortcut */

/* Register: TIMER_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 21 : Enable or disable interrupt for event COMPARE[5] */
#define TIMER_INTEN_COMPARE5_Pos (21UL) /*!< Position of COMPARE5 field. */
#define TIMER_INTEN_COMPARE5_Msk (0x1UL << TIMER_INTEN_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field. */
#define TIMER_INTEN_COMPARE5_Disabled (0UL) /*!< Disable */
#define TIMER_INTEN_COMPARE5_Enabled (1UL) /*!< Enable */

/* Bit 20 : Enable or disable interrupt for event COMPARE[4] */
#define TIMER_INTEN_COMPARE4_Pos (20UL) /*!< Position of COMPARE4 field. */
#define TIMER_INTEN_COMPARE4_Msk (0x1UL << TIMER_INTEN_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field. */
#define TIMER_INTEN_COMPARE4_Disabled (0UL) /*!< Disable */
#define TIMER_INTEN_COMPARE4_Enabled (1UL) /*!< Enable */

/* Bit 19 : Enable or disable interrupt for event COMPARE[3] */
#define TIMER_INTEN_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define TIMER_INTEN_COMPARE3_Msk (0x1UL << TIMER_INTEN_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define TIMER_INTEN_COMPARE3_Disabled (0UL) /*!< Disable */
#define TIMER_INTEN_COMPARE3_Enabled (1UL) /*!< Enable */

/* Bit 18 : Enable or disable interrupt for event COMPARE[2] */
#define TIMER_INTEN_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define TIMER_INTEN_COMPARE2_Msk (0x1UL << TIMER_INTEN_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define TIMER_INTEN_COMPARE2_Disabled (0UL) /*!< Disable */
#define TIMER_INTEN_COMPARE2_Enabled (1UL) /*!< Enable */

/* Bit 17 : Enable or disable interrupt for event COMPARE[1] */
#define TIMER_INTEN_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define TIMER_INTEN_COMPARE1_Msk (0x1UL << TIMER_INTEN_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define TIMER_INTEN_COMPARE1_Disabled (0UL) /*!< Disable */
#define TIMER_INTEN_COMPARE1_Enabled (1UL) /*!< Enable */

/* Bit 16 : Enable or disable interrupt for event COMPARE[0] */
#define TIMER_INTEN_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define TIMER_INTEN_COMPARE0_Msk (0x1UL << TIMER_INTEN_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define TIMER_INTEN_COMPARE0_Disabled (0UL) /*!< Disable */
#define TIMER_INTEN_COMPARE0_Enabled (1UL) /*!< Enable */

/* Register: TIMER_INTENSET */
/* Description: Enable interrupt */

/* Bit 21 : Write '1' to enable interrupt for event COMPARE[5] */
#define TIMER_INTENSET_COMPARE5_Pos (21UL) /*!< Position of COMPARE5 field. */
#define TIMER_INTENSET_COMPARE5_Msk (0x1UL << TIMER_INTENSET_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field. */
#define TIMER_INTENSET_COMPARE5_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENSET_COMPARE5_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENSET_COMPARE5_Set (1UL) /*!< Enable */

/* Bit 20 : Write '1' to enable interrupt for event COMPARE[4] */
#define TIMER_INTENSET_COMPARE4_Pos (20UL) /*!< Position of COMPARE4 field. */
#define TIMER_INTENSET_COMPARE4_Msk (0x1UL << TIMER_INTENSET_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field. */
#define TIMER_INTENSET_COMPARE4_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENSET_COMPARE4_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENSET_COMPARE4_Set (1UL) /*!< Enable */

/* Bit 19 : Write '1' to enable interrupt for event COMPARE[3] */
#define TIMER_INTENSET_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define TIMER_INTENSET_COMPARE3_Msk (0x1UL << TIMER_INTENSET_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define TIMER_INTENSET_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENSET_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENSET_COMPARE3_Set (1UL) /*!< Enable */

/* Bit 18 : Write '1' to enable interrupt for event COMPARE[2] */
#define TIMER_INTENSET_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define TIMER_INTENSET_COMPARE2_Msk (0x1UL << TIMER_INTENSET_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define TIMER_INTENSET_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENSET_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENSET_COMPARE2_Set (1UL) /*!< Enable */

/* Bit 17 : Write '1' to enable interrupt for event COMPARE[1] */
#define TIMER_INTENSET_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define TIMER_INTENSET_COMPARE1_Msk (0x1UL << TIMER_INTENSET_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define TIMER_INTENSET_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENSET_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENSET_COMPARE1_Set (1UL) /*!< Enable */

/* Bit 16 : Write '1' to enable interrupt for event COMPARE[0] */
#define TIMER_INTENSET_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define TIMER_INTENSET_COMPARE0_Msk (0x1UL << TIMER_INTENSET_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define TIMER_INTENSET_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENSET_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENSET_COMPARE0_Set (1UL) /*!< Enable */

/* Register: TIMER_INTENCLR */
/* Description: Disable interrupt */

/* Bit 21 : Write '1' to disable interrupt for event COMPARE[5] */
#define TIMER_INTENCLR_COMPARE5_Pos (21UL) /*!< Position of COMPARE5 field. */
#define TIMER_INTENCLR_COMPARE5_Msk (0x1UL << TIMER_INTENCLR_COMPARE5_Pos) /*!< Bit mask of COMPARE5 field. */
#define TIMER_INTENCLR_COMPARE5_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENCLR_COMPARE5_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENCLR_COMPARE5_Clear (1UL) /*!< Disable */

/* Bit 20 : Write '1' to disable interrupt for event COMPARE[4] */
#define TIMER_INTENCLR_COMPARE4_Pos (20UL) /*!< Position of COMPARE4 field. */
#define TIMER_INTENCLR_COMPARE4_Msk (0x1UL << TIMER_INTENCLR_COMPARE4_Pos) /*!< Bit mask of COMPARE4 field. */
#define TIMER_INTENCLR_COMPARE4_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENCLR_COMPARE4_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENCLR_COMPARE4_Clear (1UL) /*!< Disable */

/* Bit 19 : Write '1' to disable interrupt for event COMPARE[3] */
#define TIMER_INTENCLR_COMPARE3_Pos (19UL) /*!< Position of COMPARE3 field. */
#define TIMER_INTENCLR_COMPARE3_Msk (0x1UL << TIMER_INTENCLR_COMPARE3_Pos) /*!< Bit mask of COMPARE3 field. */
#define TIMER_INTENCLR_COMPARE3_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENCLR_COMPARE3_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENCLR_COMPARE3_Clear (1UL) /*!< Disable */

/* Bit 18 : Write '1' to disable interrupt for event COMPARE[2] */
#define TIMER_INTENCLR_COMPARE2_Pos (18UL) /*!< Position of COMPARE2 field. */
#define TIMER_INTENCLR_COMPARE2_Msk (0x1UL << TIMER_INTENCLR_COMPARE2_Pos) /*!< Bit mask of COMPARE2 field. */
#define TIMER_INTENCLR_COMPARE2_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENCLR_COMPARE2_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENCLR_COMPARE2_Clear (1UL) /*!< Disable */

/* Bit 17 : Write '1' to disable interrupt for event COMPARE[1] */
#define TIMER_INTENCLR_COMPARE1_Pos (17UL) /*!< Position of COMPARE1 field. */
#define TIMER_INTENCLR_COMPARE1_Msk (0x1UL << TIMER_INTENCLR_COMPARE1_Pos) /*!< Bit mask of COMPARE1 field. */
#define TIMER_INTENCLR_COMPARE1_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENCLR_COMPARE1_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENCLR_COMPARE1_Clear (1UL) /*!< Disable */

/* Bit 16 : Write '1' to disable interrupt for event COMPARE[0] */
#define TIMER_INTENCLR_COMPARE0_Pos (16UL) /*!< Position of COMPARE0 field. */
#define TIMER_INTENCLR_COMPARE0_Msk (0x1UL << TIMER_INTENCLR_COMPARE0_Pos) /*!< Bit mask of COMPARE0 field. */
#define TIMER_INTENCLR_COMPARE0_Disabled (0UL) /*!< Read: Disabled */
#define TIMER_INTENCLR_COMPARE0_Enabled (1UL) /*!< Read: Enabled */
#define TIMER_INTENCLR_COMPARE0_Clear (1UL) /*!< Disable */

/* Register: TIMER_MODE */
/* Description: Timer mode selection */

/* Bits 1..0 : Timer mode */
#define TIMER_MODE_MODE_Pos (0UL) /*!< Position of MODE field. */
#define TIMER_MODE_MODE_Msk (0x3UL << TIMER_MODE_MODE_Pos) /*!< Bit mask of MODE field. */
#define TIMER_MODE_MODE_Timer (0UL) /*!< Select Timer mode */
#define TIMER_MODE_MODE_Counter (1UL) /*!< Deprecated enumerator -  Select Counter mode */
#define TIMER_MODE_MODE_LowPowerCounter (2UL) /*!< Select Low Power Counter mode */

/* Register: TIMER_BITMODE */
/* Description: Configure the number of bits used by the TIMER */

/* Bits 1..0 : Timer bit width */
#define TIMER_BITMODE_BITMODE_Pos (0UL) /*!< Position of BITMODE field. */
#define TIMER_BITMODE_BITMODE_Msk (0x3UL << TIMER_BITMODE_BITMODE_Pos) /*!< Bit mask of BITMODE field. */
#define TIMER_BITMODE_BITMODE_16Bit (0UL) /*!< 16 bit timer bit width */
#define TIMER_BITMODE_BITMODE_08Bit (1UL) /*!< 8 bit timer bit width */
#define TIMER_BITMODE_BITMODE_24Bit (2UL) /*!< 24 bit timer bit width */
#define TIMER_BITMODE_BITMODE_32Bit (3UL) /*!< 32 bit timer bit width */

/* Register: TIMER_PRESCALER */
/* Description: Timer prescaler register */

/* Bits 3..0 : Prescaler value */
#define TIMER_PRESCALER_PRESCALER_Pos (0UL) /*!< Position of PRESCALER field. */
#define TIMER_PRESCALER_PRESCALER_Msk (0xFUL << TIMER_PRESCALER_PRESCALER_Pos) /*!< Bit mask of PRESCALER field. */

/* Register: TIMER_CC */
/* Description: Description collection: Capture/Compare register n */

/* Bits 31..0 : Capture/Compare value */
#define TIMER_CC_CC_Pos (0UL) /*!< Position of CC field. */
#define TIMER_CC_CC_Msk (0xFFFFFFFFUL << TIMER_CC_CC_Pos) /*!< Bit mask of CC field. */

/* Register: TIMER_ONESHOTEN */
/* Description: Description collection: Enable one-shot operation for Capture/Compare channel n */

/* Bit 0 : Enable one-shot operation */
#define TIMER_ONESHOTEN_ONESHOTEN_Pos (0UL) /*!< Position of ONESHOTEN field. */
#define TIMER_ONESHOTEN_ONESHOTEN_Msk (0x1UL << TIMER_ONESHOTEN_ONESHOTEN_Pos) /*!< Bit mask of ONESHOTEN field. */
#define TIMER_ONESHOTEN_ONESHOTEN_Disable (0UL) /*!< Disable one-shot operation */
#define TIMER_ONESHOTEN_ONESHOTEN_Enable (1UL) /*!< Enable one-shot operation */


/* Peripheral: TWI */
/* Description: I2C compatible Two-Wire Interface 0 */

/* Register: TWI_TASKS_STARTRX */
/* Description: Start TWI receive sequence */

/* Bit 0 : Start TWI receive sequence */
#define TWI_TASKS_STARTRX_TASKS_STARTRX_Pos (0UL) /*!< Position of TASKS_STARTRX field. */
#define TWI_TASKS_STARTRX_TASKS_STARTRX_Msk (0x1UL << TWI_TASKS_STARTRX_TASKS_STARTRX_Pos) /*!< Bit mask of TASKS_STARTRX field. */
#define TWI_TASKS_STARTRX_TASKS_STARTRX_Trigger (1UL) /*!< Trigger task */

/* Register: TWI_TASKS_STARTTX */
/* Description: Start TWI transmit sequence */

/* Bit 0 : Start TWI transmit sequence */
#define TWI_TASKS_STARTTX_TASKS_STARTTX_Pos (0UL) /*!< Position of TASKS_STARTTX field. */
#define TWI_TASKS_STARTTX_TASKS_STARTTX_Msk (0x1UL << TWI_TASKS_STARTTX_TASKS_STARTTX_Pos) /*!< Bit mask of TASKS_STARTTX field. */
#define TWI_TASKS_STARTTX_TASKS_STARTTX_Trigger (1UL) /*!< Trigger task */

/* Register: TWI_TASKS_STOP */
/* Description: Stop TWI transaction */

/* Bit 0 : Stop TWI transaction */
#define TWI_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define TWI_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWI_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define TWI_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: TWI_TASKS_SUSPEND */
/* Description: Suspend TWI transaction */

/* Bit 0 : Suspend TWI transaction */
#define TWI_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field. */
#define TWI_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWI_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND field. */
#define TWI_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (1UL) /*!< Trigger task */

/* Register: TWI_TASKS_RESUME */
/* Description: Resume TWI transaction */

/* Bit 0 : Resume TWI transaction */
#define TWI_TASKS_RESUME_TASKS_RESUME_Pos (0UL) /*!< Position of TASKS_RESUME field. */
#define TWI_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWI_TASKS_RESUME_TASKS_RESUME_Pos) /*!< Bit mask of TASKS_RESUME field. */
#define TWI_TASKS_RESUME_TASKS_RESUME_Trigger (1UL) /*!< Trigger task */

/* Register: TWI_SUBSCRIBE_STARTRX */
/* Description: Subscribe configuration for task STARTRX */

/* Bit 31 :   */
#define TWI_SUBSCRIBE_STARTRX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_SUBSCRIBE_STARTRX_EN_Msk (0x1UL << TWI_SUBSCRIBE_STARTRX_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_SUBSCRIBE_STARTRX_EN_Disabled (0UL) /*!< Disable subscription */
#define TWI_SUBSCRIBE_STARTRX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTRX will subscribe to */
#define TWI_SUBSCRIBE_STARTRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_SUBSCRIBE_STARTRX_CHIDX_Msk (0xFFUL << TWI_SUBSCRIBE_STARTRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_SUBSCRIBE_STARTTX */
/* Description: Subscribe configuration for task STARTTX */

/* Bit 31 :   */
#define TWI_SUBSCRIBE_STARTTX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_SUBSCRIBE_STARTTX_EN_Msk (0x1UL << TWI_SUBSCRIBE_STARTTX_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_SUBSCRIBE_STARTTX_EN_Disabled (0UL) /*!< Disable subscription */
#define TWI_SUBSCRIBE_STARTTX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTTX will subscribe to */
#define TWI_SUBSCRIBE_STARTTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_SUBSCRIBE_STARTTX_CHIDX_Msk (0xFFUL << TWI_SUBSCRIBE_STARTTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define TWI_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWI_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define TWI_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define TWI_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWI_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_SUBSCRIBE_SUSPEND */
/* Description: Subscribe configuration for task SUSPEND */

/* Bit 31 :   */
#define TWI_SUBSCRIBE_SUSPEND_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWI_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_SUBSCRIBE_SUSPEND_EN_Disabled (0UL) /*!< Disable subscription */
#define TWI_SUBSCRIBE_SUSPEND_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SUSPEND will subscribe to */
#define TWI_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWI_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_SUBSCRIBE_RESUME */
/* Description: Subscribe configuration for task RESUME */

/* Bit 31 :   */
#define TWI_SUBSCRIBE_RESUME_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWI_SUBSCRIBE_RESUME_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_SUBSCRIBE_RESUME_EN_Disabled (0UL) /*!< Disable subscription */
#define TWI_SUBSCRIBE_RESUME_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task RESUME will subscribe to */
#define TWI_SUBSCRIBE_RESUME_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWI_SUBSCRIBE_RESUME_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_EVENTS_STOPPED */
/* Description: TWI stopped */

/* Bit 0 : TWI stopped */
#define TWI_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define TWI_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWI_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define TWI_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define TWI_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: TWI_EVENTS_RXDREADY */
/* Description: TWI RXD byte received */

/* Bit 0 : TWI RXD byte received */
#define TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Pos (0UL) /*!< Position of EVENTS_RXDREADY field. */
#define TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Msk (0x1UL << TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Pos) /*!< Bit mask of EVENTS_RXDREADY field. */
#define TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_NotGenerated (0UL) /*!< Event not generated */
#define TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Generated (1UL) /*!< Event generated */

/* Register: TWI_EVENTS_TXDSENT */
/* Description: TWI TXD byte sent */

/* Bit 0 : TWI TXD byte sent */
#define TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Pos (0UL) /*!< Position of EVENTS_TXDSENT field. */
#define TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Msk (0x1UL << TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Pos) /*!< Bit mask of EVENTS_TXDSENT field. */
#define TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_NotGenerated (0UL) /*!< Event not generated */
#define TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Generated (1UL) /*!< Event generated */

/* Register: TWI_EVENTS_ERROR */
/* Description: TWI error */

/* Bit 0 : TWI error */
#define TWI_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL) /*!< Position of EVENTS_ERROR field. */
#define TWI_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWI_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field. */
#define TWI_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0UL) /*!< Event not generated */
#define TWI_EVENTS_ERROR_EVENTS_ERROR_Generated (1UL) /*!< Event generated */

/* Register: TWI_EVENTS_BB */
/* Description: TWI byte boundary, generated before each byte that is sent or received */

/* Bit 0 : TWI byte boundary, generated before each byte that is sent or received */
#define TWI_EVENTS_BB_EVENTS_BB_Pos (0UL) /*!< Position of EVENTS_BB field. */
#define TWI_EVENTS_BB_EVENTS_BB_Msk (0x1UL << TWI_EVENTS_BB_EVENTS_BB_Pos) /*!< Bit mask of EVENTS_BB field. */
#define TWI_EVENTS_BB_EVENTS_BB_NotGenerated (0UL) /*!< Event not generated */
#define TWI_EVENTS_BB_EVENTS_BB_Generated (1UL) /*!< Event generated */

/* Register: TWI_EVENTS_SUSPENDED */
/* Description: TWI entered the suspended state */

/* Bit 0 : TWI entered the suspended state */
#define TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos (0UL) /*!< Position of EVENTS_SUSPENDED field. */
#define TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk (0x1UL << TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos) /*!< Bit mask of EVENTS_SUSPENDED field. */
#define TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated (0UL) /*!< Event not generated */
#define TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated (1UL) /*!< Event generated */

/* Register: TWI_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define TWI_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_PUBLISH_STOPPED_EN_Msk (0x1UL << TWI_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWI_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define TWI_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWI_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_PUBLISH_RXDREADY */
/* Description: Publish configuration for event RXDREADY */

/* Bit 31 :   */
#define TWI_PUBLISH_RXDREADY_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_PUBLISH_RXDREADY_EN_Msk (0x1UL << TWI_PUBLISH_RXDREADY_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_PUBLISH_RXDREADY_EN_Disabled (0UL) /*!< Disable publishing */
#define TWI_PUBLISH_RXDREADY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXDREADY will publish to. */
#define TWI_PUBLISH_RXDREADY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_PUBLISH_RXDREADY_CHIDX_Msk (0xFFUL << TWI_PUBLISH_RXDREADY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_PUBLISH_TXDSENT */
/* Description: Publish configuration for event TXDSENT */

/* Bit 31 :   */
#define TWI_PUBLISH_TXDSENT_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_PUBLISH_TXDSENT_EN_Msk (0x1UL << TWI_PUBLISH_TXDSENT_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_PUBLISH_TXDSENT_EN_Disabled (0UL) /*!< Disable publishing */
#define TWI_PUBLISH_TXDSENT_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXDSENT will publish to. */
#define TWI_PUBLISH_TXDSENT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_PUBLISH_TXDSENT_CHIDX_Msk (0xFFUL << TWI_PUBLISH_TXDSENT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_PUBLISH_ERROR */
/* Description: Publish configuration for event ERROR */

/* Bit 31 :   */
#define TWI_PUBLISH_ERROR_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_PUBLISH_ERROR_EN_Msk (0x1UL << TWI_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_PUBLISH_ERROR_EN_Disabled (0UL) /*!< Disable publishing */
#define TWI_PUBLISH_ERROR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ERROR will publish to. */
#define TWI_PUBLISH_ERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWI_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_PUBLISH_BB */
/* Description: Publish configuration for event BB */

/* Bit 31 :   */
#define TWI_PUBLISH_BB_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_PUBLISH_BB_EN_Msk (0x1UL << TWI_PUBLISH_BB_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_PUBLISH_BB_EN_Disabled (0UL) /*!< Disable publishing */
#define TWI_PUBLISH_BB_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event BB will publish to. */
#define TWI_PUBLISH_BB_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_PUBLISH_BB_CHIDX_Msk (0xFFUL << TWI_PUBLISH_BB_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_PUBLISH_SUSPENDED */
/* Description: Publish configuration for event SUSPENDED */

/* Bit 31 :   */
#define TWI_PUBLISH_SUSPENDED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWI_PUBLISH_SUSPENDED_EN_Msk (0x1UL << TWI_PUBLISH_SUSPENDED_EN_Pos) /*!< Bit mask of EN field. */
#define TWI_PUBLISH_SUSPENDED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWI_PUBLISH_SUSPENDED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SUSPENDED will publish to. */
#define TWI_PUBLISH_SUSPENDED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWI_PUBLISH_SUSPENDED_CHIDX_Msk (0xFFUL << TWI_PUBLISH_SUSPENDED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWI_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 1 : Shortcut between event BB and task STOP */
#define TWI_SHORTS_BB_STOP_Pos (1UL) /*!< Position of BB_STOP field. */
#define TWI_SHORTS_BB_STOP_Msk (0x1UL << TWI_SHORTS_BB_STOP_Pos) /*!< Bit mask of BB_STOP field. */
#define TWI_SHORTS_BB_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TWI_SHORTS_BB_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event BB and task SUSPEND */
#define TWI_SHORTS_BB_SUSPEND_Pos (0UL) /*!< Position of BB_SUSPEND field. */
#define TWI_SHORTS_BB_SUSPEND_Msk (0x1UL << TWI_SHORTS_BB_SUSPEND_Pos) /*!< Bit mask of BB_SUSPEND field. */
#define TWI_SHORTS_BB_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
#define TWI_SHORTS_BB_SUSPEND_Enabled (1UL) /*!< Enable shortcut */

/* Register: TWI_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 18 : Enable or disable interrupt for event SUSPENDED */
#define TWI_INTEN_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
#define TWI_INTEN_SUSPENDED_Msk (0x1UL << TWI_INTEN_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
#define TWI_INTEN_SUSPENDED_Disabled (0UL) /*!< Disable */
#define TWI_INTEN_SUSPENDED_Enabled (1UL) /*!< Enable */

/* Bit 14 : Enable or disable interrupt for event BB */
#define TWI_INTEN_BB_Pos (14UL) /*!< Position of BB field. */
#define TWI_INTEN_BB_Msk (0x1UL << TWI_INTEN_BB_Pos) /*!< Bit mask of BB field. */
#define TWI_INTEN_BB_Disabled (0UL) /*!< Disable */
#define TWI_INTEN_BB_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event ERROR */
#define TWI_INTEN_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWI_INTEN_ERROR_Msk (0x1UL << TWI_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWI_INTEN_ERROR_Disabled (0UL) /*!< Disable */
#define TWI_INTEN_ERROR_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event TXDSENT */
#define TWI_INTEN_TXDSENT_Pos (7UL) /*!< Position of TXDSENT field. */
#define TWI_INTEN_TXDSENT_Msk (0x1UL << TWI_INTEN_TXDSENT_Pos) /*!< Bit mask of TXDSENT field. */
#define TWI_INTEN_TXDSENT_Disabled (0UL) /*!< Disable */
#define TWI_INTEN_TXDSENT_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event RXDREADY */
#define TWI_INTEN_RXDREADY_Pos (2UL) /*!< Position of RXDREADY field. */
#define TWI_INTEN_RXDREADY_Msk (0x1UL << TWI_INTEN_RXDREADY_Pos) /*!< Bit mask of RXDREADY field. */
#define TWI_INTEN_RXDREADY_Disabled (0UL) /*!< Disable */
#define TWI_INTEN_RXDREADY_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event STOPPED */
#define TWI_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWI_INTEN_STOPPED_Msk (0x1UL << TWI_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWI_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define TWI_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Register: TWI_INTENSET */
/* Description: Enable interrupt */

/* Bit 18 : Write '1' to enable interrupt for event SUSPENDED */
#define TWI_INTENSET_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
#define TWI_INTENSET_SUSPENDED_Msk (0x1UL << TWI_INTENSET_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
#define TWI_INTENSET_SUSPENDED_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENSET_SUSPENDED_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENSET_SUSPENDED_Set (1UL) /*!< Enable */

/* Bit 14 : Write '1' to enable interrupt for event BB */
#define TWI_INTENSET_BB_Pos (14UL) /*!< Position of BB field. */
#define TWI_INTENSET_BB_Msk (0x1UL << TWI_INTENSET_BB_Pos) /*!< Bit mask of BB field. */
#define TWI_INTENSET_BB_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENSET_BB_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENSET_BB_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event ERROR */
#define TWI_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWI_INTENSET_ERROR_Msk (0x1UL << TWI_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWI_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENSET_ERROR_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event TXDSENT */
#define TWI_INTENSET_TXDSENT_Pos (7UL) /*!< Position of TXDSENT field. */
#define TWI_INTENSET_TXDSENT_Msk (0x1UL << TWI_INTENSET_TXDSENT_Pos) /*!< Bit mask of TXDSENT field. */
#define TWI_INTENSET_TXDSENT_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENSET_TXDSENT_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENSET_TXDSENT_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event RXDREADY */
#define TWI_INTENSET_RXDREADY_Pos (2UL) /*!< Position of RXDREADY field. */
#define TWI_INTENSET_RXDREADY_Msk (0x1UL << TWI_INTENSET_RXDREADY_Pos) /*!< Bit mask of RXDREADY field. */
#define TWI_INTENSET_RXDREADY_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENSET_RXDREADY_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENSET_RXDREADY_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event STOPPED */
#define TWI_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWI_INTENSET_STOPPED_Msk (0x1UL << TWI_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWI_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Register: TWI_INTENCLR */
/* Description: Disable interrupt */

/* Bit 18 : Write '1' to disable interrupt for event SUSPENDED */
#define TWI_INTENCLR_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
#define TWI_INTENCLR_SUSPENDED_Msk (0x1UL << TWI_INTENCLR_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
#define TWI_INTENCLR_SUSPENDED_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENCLR_SUSPENDED_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENCLR_SUSPENDED_Clear (1UL) /*!< Disable */

/* Bit 14 : Write '1' to disable interrupt for event BB */
#define TWI_INTENCLR_BB_Pos (14UL) /*!< Position of BB field. */
#define TWI_INTENCLR_BB_Msk (0x1UL << TWI_INTENCLR_BB_Pos) /*!< Bit mask of BB field. */
#define TWI_INTENCLR_BB_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENCLR_BB_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENCLR_BB_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event ERROR */
#define TWI_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWI_INTENCLR_ERROR_Msk (0x1UL << TWI_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWI_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENCLR_ERROR_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event TXDSENT */
#define TWI_INTENCLR_TXDSENT_Pos (7UL) /*!< Position of TXDSENT field. */
#define TWI_INTENCLR_TXDSENT_Msk (0x1UL << TWI_INTENCLR_TXDSENT_Pos) /*!< Bit mask of TXDSENT field. */
#define TWI_INTENCLR_TXDSENT_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENCLR_TXDSENT_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENCLR_TXDSENT_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event RXDREADY */
#define TWI_INTENCLR_RXDREADY_Pos (2UL) /*!< Position of RXDREADY field. */
#define TWI_INTENCLR_RXDREADY_Msk (0x1UL << TWI_INTENCLR_RXDREADY_Pos) /*!< Bit mask of RXDREADY field. */
#define TWI_INTENCLR_RXDREADY_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENCLR_RXDREADY_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENCLR_RXDREADY_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event STOPPED */
#define TWI_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWI_INTENCLR_STOPPED_Msk (0x1UL << TWI_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWI_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define TWI_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define TWI_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Register: TWI_ERRORSRC */
/* Description: Error source */

/* Bit 2 : NACK received after sending a data byte (write '1' to clear) */
#define TWI_ERRORSRC_DNACK_Pos (2UL) /*!< Position of DNACK field. */
#define TWI_ERRORSRC_DNACK_Msk (0x1UL << TWI_ERRORSRC_DNACK_Pos) /*!< Bit mask of DNACK field. */
#define TWI_ERRORSRC_DNACK_NotPresent (0UL) /*!< Read: error not present */
#define TWI_ERRORSRC_DNACK_Present (1UL) /*!< Read: error present */

/* Bit 1 : NACK received after sending the address (write '1' to clear) */
#define TWI_ERRORSRC_ANACK_Pos (1UL) /*!< Position of ANACK field. */
#define TWI_ERRORSRC_ANACK_Msk (0x1UL << TWI_ERRORSRC_ANACK_Pos) /*!< Bit mask of ANACK field. */
#define TWI_ERRORSRC_ANACK_NotPresent (0UL) /*!< Read: error not present */
#define TWI_ERRORSRC_ANACK_Present (1UL) /*!< Read: error present */

/* Bit 0 : Overrun error */
#define TWI_ERRORSRC_OVERRUN_Pos (0UL) /*!< Position of OVERRUN field. */
#define TWI_ERRORSRC_OVERRUN_Msk (0x1UL << TWI_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
#define TWI_ERRORSRC_OVERRUN_NotPresent (0UL) /*!< Read: no overrun occured */
#define TWI_ERRORSRC_OVERRUN_Present (1UL) /*!< Read: overrun occured */

/* Register: TWI_ENABLE */
/* Description: Enable TWI */

/* Bits 3..0 : Enable or disable TWI */
#define TWI_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define TWI_ENABLE_ENABLE_Msk (0xFUL << TWI_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define TWI_ENABLE_ENABLE_Disabled (0UL) /*!< Disable TWI */
#define TWI_ENABLE_ENABLE_Enabled (5UL) /*!< Enable TWI */

/* Register: TWI_PSEL_SCL */
/* Description: Pin select for SCL */

/* Bit 31 : Connection */
#define TWI_PSEL_SCL_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TWI_PSEL_SCL_CONNECT_Msk (0x1UL << TWI_PSEL_SCL_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TWI_PSEL_SCL_CONNECT_Connected (0UL) /*!< Connect */
#define TWI_PSEL_SCL_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define TWI_PSEL_SCL_PORT_Pos (5UL) /*!< Position of PORT field. */
#define TWI_PSEL_SCL_PORT_Msk (0x1UL << TWI_PSEL_SCL_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define TWI_PSEL_SCL_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TWI_PSEL_SCL_PIN_Msk (0x1FUL << TWI_PSEL_SCL_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: TWI_PSEL_SDA */
/* Description: Pin select for SDA */

/* Bit 31 : Connection */
#define TWI_PSEL_SDA_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TWI_PSEL_SDA_CONNECT_Msk (0x1UL << TWI_PSEL_SDA_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TWI_PSEL_SDA_CONNECT_Connected (0UL) /*!< Connect */
#define TWI_PSEL_SDA_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define TWI_PSEL_SDA_PORT_Pos (5UL) /*!< Position of PORT field. */
#define TWI_PSEL_SDA_PORT_Msk (0x1UL << TWI_PSEL_SDA_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define TWI_PSEL_SDA_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TWI_PSEL_SDA_PIN_Msk (0x1FUL << TWI_PSEL_SDA_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: TWI_RXD */
/* Description: RXD register */

/* Bits 7..0 : RXD register */
#define TWI_RXD_RXD_Pos (0UL) /*!< Position of RXD field. */
#define TWI_RXD_RXD_Msk (0xFFUL << TWI_RXD_RXD_Pos) /*!< Bit mask of RXD field. */

/* Register: TWI_TXD */
/* Description: TXD register */

/* Bits 7..0 : TXD register */
#define TWI_TXD_TXD_Pos (0UL) /*!< Position of TXD field. */
#define TWI_TXD_TXD_Msk (0xFFUL << TWI_TXD_TXD_Pos) /*!< Bit mask of TXD field. */

/* Register: TWI_FREQUENCY */
/* Description: TWI frequency. Accuracy depends on the HFCLK source selected. */

/* Bits 31..0 : TWI master clock frequency */
#define TWI_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
#define TWI_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << TWI_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
#define TWI_FREQUENCY_FREQUENCY_K100 (0x01980000UL) /*!< 100 kbps */
#define TWI_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps */
#define TWI_FREQUENCY_FREQUENCY_K400 (0x06680000UL) /*!< 400 kbps (actual rate 410.256 kbps) */

/* Register: TWI_ADDRESS */
/* Description: Address used in the TWI transfer */

/* Bits 6..0 : Address used in the TWI transfer */
#define TWI_ADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field. */
#define TWI_ADDRESS_ADDRESS_Msk (0x7FUL << TWI_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field. */

/* Register: TWI_POWER */
/* Description: Peripheral power control */

/* Bit 0 : Peripheral power control. The peripheral and its registers will be reset to its initial state by switching the peripheral off and then back on again. */
#define TWI_POWER_POWER_Pos (0UL) /*!< Position of POWER field. */
#define TWI_POWER_POWER_Msk (0x1UL << TWI_POWER_POWER_Pos) /*!< Bit mask of POWER field. */
#define TWI_POWER_POWER_Disabled (0UL) /*!< Peripheral is powered off */
#define TWI_POWER_POWER_Enabled (1UL) /*!< Peripheral is powered on */


/* Peripheral: TWIM */
/* Description: I2C compatible Two-Wire Master Interface with EasyDMA 0 */

/* Register: TWIM_TASKS_STARTRX */
/* Description: Start TWI receive sequence */

/* Bit 0 : Start TWI receive sequence */
#define TWIM_TASKS_STARTRX_TASKS_STARTRX_Pos (0UL) /*!< Position of TASKS_STARTRX field. */
#define TWIM_TASKS_STARTRX_TASKS_STARTRX_Msk (0x1UL << TWIM_TASKS_STARTRX_TASKS_STARTRX_Pos) /*!< Bit mask of TASKS_STARTRX field. */
#define TWIM_TASKS_STARTRX_TASKS_STARTRX_Trigger (1UL) /*!< Trigger task */

/* Register: TWIM_TASKS_STARTTX */
/* Description: Start TWI transmit sequence */

/* Bit 0 : Start TWI transmit sequence */
#define TWIM_TASKS_STARTTX_TASKS_STARTTX_Pos (0UL) /*!< Position of TASKS_STARTTX field. */
#define TWIM_TASKS_STARTTX_TASKS_STARTTX_Msk (0x1UL << TWIM_TASKS_STARTTX_TASKS_STARTTX_Pos) /*!< Bit mask of TASKS_STARTTX field. */
#define TWIM_TASKS_STARTTX_TASKS_STARTTX_Trigger (1UL) /*!< Trigger task */

/* Register: TWIM_TASKS_STOP */
/* Description: Stop TWI transaction. Must be issued while the TWI master is not suspended. */

/* Bit 0 : Stop TWI transaction. Must be issued while the TWI master is not suspended. */
#define TWIM_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define TWIM_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWIM_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define TWIM_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: TWIM_TASKS_SUSPEND */
/* Description: Suspend TWI transaction */

/* Bit 0 : Suspend TWI transaction */
#define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field. */
#define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND field. */
#define TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (1UL) /*!< Trigger task */

/* Register: TWIM_TASKS_RESUME */
/* Description: Resume TWI transaction */

/* Bit 0 : Resume TWI transaction */
#define TWIM_TASKS_RESUME_TASKS_RESUME_Pos (0UL) /*!< Position of TASKS_RESUME field. */
#define TWIM_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWIM_TASKS_RESUME_TASKS_RESUME_Pos) /*!< Bit mask of TASKS_RESUME field. */
#define TWIM_TASKS_RESUME_TASKS_RESUME_Trigger (1UL) /*!< Trigger task */

/* Register: TWIM_SUBSCRIBE_STARTRX */
/* Description: Subscribe configuration for task STARTRX */

/* Bit 31 :   */
#define TWIM_SUBSCRIBE_STARTRX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_SUBSCRIBE_STARTRX_EN_Msk (0x1UL << TWIM_SUBSCRIBE_STARTRX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_SUBSCRIBE_STARTRX_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIM_SUBSCRIBE_STARTRX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTRX will subscribe to */
#define TWIM_SUBSCRIBE_STARTRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_SUBSCRIBE_STARTRX_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_STARTRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_SUBSCRIBE_STARTTX */
/* Description: Subscribe configuration for task STARTTX */

/* Bit 31 :   */
#define TWIM_SUBSCRIBE_STARTTX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_SUBSCRIBE_STARTTX_EN_Msk (0x1UL << TWIM_SUBSCRIBE_STARTTX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_SUBSCRIBE_STARTTX_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIM_SUBSCRIBE_STARTTX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTTX will subscribe to */
#define TWIM_SUBSCRIBE_STARTTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_SUBSCRIBE_STARTTX_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_STARTTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define TWIM_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWIM_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIM_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define TWIM_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_SUBSCRIBE_SUSPEND */
/* Description: Subscribe configuration for task SUSPEND */

/* Bit 31 :   */
#define TWIM_SUBSCRIBE_SUSPEND_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWIM_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_SUBSCRIBE_SUSPEND_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIM_SUBSCRIBE_SUSPEND_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SUSPEND will subscribe to */
#define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_SUBSCRIBE_RESUME */
/* Description: Subscribe configuration for task RESUME */

/* Bit 31 :   */
#define TWIM_SUBSCRIBE_RESUME_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWIM_SUBSCRIBE_RESUME_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_SUBSCRIBE_RESUME_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIM_SUBSCRIBE_RESUME_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task RESUME will subscribe to */
#define TWIM_SUBSCRIBE_RESUME_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWIM_SUBSCRIBE_RESUME_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_EVENTS_STOPPED */
/* Description: TWI stopped */

/* Bit 0 : TWI stopped */
#define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_ENDRX */
/* Description: End of RXD buffer access by EasyDMA */

/* Bit 0 : End of RXD buffer access by EasyDMA */
#define TWIM_EVENTS_ENDRX_EVENTS_ENDRX_Pos (0UL) /*!< Position of EVENTS_ENDRX field. */
#define TWIM_EVENTS_ENDRX_EVENTS_ENDRX_Msk (0x1UL << TWIM_EVENTS_ENDRX_EVENTS_ENDRX_Pos) /*!< Bit mask of EVENTS_ENDRX field. */
#define TWIM_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_ENDRX_EVENTS_ENDRX_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_ENDTX */
/* Description: END of TXD buffer access by EasyDMA */

/* Bit 0 : END of TXD buffer access by EasyDMA */
#define TWIM_EVENTS_ENDTX_EVENTS_ENDTX_Pos (0UL) /*!< Position of EVENTS_ENDTX field. */
#define TWIM_EVENTS_ENDTX_EVENTS_ENDTX_Msk (0x1UL << TWIM_EVENTS_ENDTX_EVENTS_ENDTX_Pos) /*!< Bit mask of EVENTS_ENDTX field. */
#define TWIM_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_ENDTX_EVENTS_ENDTX_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_ERROR */
/* Description: TWI error */

/* Bit 0 : TWI error */
#define TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL) /*!< Position of EVENTS_ERROR field. */
#define TWIM_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field. */
#define TWIM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_ERROR_EVENTS_ERROR_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_BB */
/* Description: TWI byte boundary, generated before each byte that is sent or received */

/* Bit 0 : TWI byte boundary, generated before each byte that is sent or received */
#define TWIM_EVENTS_BB_EVENTS_BB_Pos (0UL) /*!< Position of EVENTS_BB field. */
#define TWIM_EVENTS_BB_EVENTS_BB_Msk (0x1UL << TWIM_EVENTS_BB_EVENTS_BB_Pos) /*!< Bit mask of EVENTS_BB field. */
#define TWIM_EVENTS_BB_EVENTS_BB_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_BB_EVENTS_BB_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_SUSPENDED */
/* Description: SUSPEND task has been issued, TWI traffic is now suspended. */

/* Bit 0 : SUSPEND task has been issued, TWI traffic is now suspended. */
#define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos (0UL) /*!< Position of EVENTS_SUSPENDED field. */
#define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk (0x1UL << TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos) /*!< Bit mask of EVENTS_SUSPENDED field. */
#define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_RXSTARTED */
/* Description: Receive sequence started */

/* Bit 0 : Receive sequence started */
#define TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos (0UL) /*!< Position of EVENTS_RXSTARTED field. */
#define TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk (0x1UL << TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos) /*!< Bit mask of EVENTS_RXSTARTED field. */
#define TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_TXSTARTED */
/* Description: Transmit sequence started */

/* Bit 0 : Transmit sequence started */
#define TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos (0UL) /*!< Position of EVENTS_TXSTARTED field. */
#define TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk (0x1UL << TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos) /*!< Bit mask of EVENTS_TXSTARTED field. */
#define TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_LASTRX */
/* Description: Byte boundary, starting to receive the last byte */

/* Bit 0 : Byte boundary, starting to receive the last byte */
#define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos (0UL) /*!< Position of EVENTS_LASTRX field. */
#define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Msk (0x1UL << TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos) /*!< Bit mask of EVENTS_LASTRX field. */
#define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Generated (1UL) /*!< Event generated */

/* Register: TWIM_EVENTS_LASTTX */
/* Description: Byte boundary, starting to transmit the last byte */

/* Bit 0 : Byte boundary, starting to transmit the last byte */
#define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos (0UL) /*!< Position of EVENTS_LASTTX field. */
#define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Msk (0x1UL << TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos) /*!< Bit mask of EVENTS_LASTTX field. */
#define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_NotGenerated (0UL) /*!< Event not generated */
#define TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Generated (1UL) /*!< Event generated */

/* Register: TWIM_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define TWIM_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_STOPPED_EN_Msk (0x1UL << TWIM_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define TWIM_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_ENDRX */
/* Description: Publish configuration for event ENDRX */

/* Bit 31 :   */
#define TWIM_PUBLISH_ENDRX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_ENDRX_EN_Msk (0x1UL << TWIM_PUBLISH_ENDRX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_ENDRX_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_ENDRX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDRX will publish to. */
#define TWIM_PUBLISH_ENDRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_ENDRX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_ENDRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_ENDTX */
/* Description: Publish configuration for event ENDTX */

/* Bit 31 :   */
#define TWIM_PUBLISH_ENDTX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_ENDTX_EN_Msk (0x1UL << TWIM_PUBLISH_ENDTX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_ENDTX_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_ENDTX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDTX will publish to. */
#define TWIM_PUBLISH_ENDTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_ENDTX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_ENDTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_ERROR */
/* Description: Publish configuration for event ERROR */

/* Bit 31 :   */
#define TWIM_PUBLISH_ERROR_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_ERROR_EN_Msk (0x1UL << TWIM_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_ERROR_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_ERROR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ERROR will publish to. */
#define TWIM_PUBLISH_ERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_BB */
/* Description: Publish configuration for event BB */

/* Bit 31 :   */
#define TWIM_PUBLISH_BB_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_BB_EN_Msk (0x1UL << TWIM_PUBLISH_BB_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_BB_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_BB_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event BB will publish to. */
#define TWIM_PUBLISH_BB_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_BB_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_BB_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_SUSPENDED */
/* Description: Publish configuration for event SUSPENDED */

/* Bit 31 :   */
#define TWIM_PUBLISH_SUSPENDED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_SUSPENDED_EN_Msk (0x1UL << TWIM_PUBLISH_SUSPENDED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_SUSPENDED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_SUSPENDED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SUSPENDED will publish to. */
#define TWIM_PUBLISH_SUSPENDED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_SUSPENDED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_SUSPENDED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_RXSTARTED */
/* Description: Publish configuration for event RXSTARTED */

/* Bit 31 :   */
#define TWIM_PUBLISH_RXSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_RXSTARTED_EN_Msk (0x1UL << TWIM_PUBLISH_RXSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_RXSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_RXSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXSTARTED will publish to. */
#define TWIM_PUBLISH_RXSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_RXSTARTED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_RXSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_TXSTARTED */
/* Description: Publish configuration for event TXSTARTED */

/* Bit 31 :   */
#define TWIM_PUBLISH_TXSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_TXSTARTED_EN_Msk (0x1UL << TWIM_PUBLISH_TXSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_TXSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_TXSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXSTARTED will publish to. */
#define TWIM_PUBLISH_TXSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_TXSTARTED_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_TXSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_LASTRX */
/* Description: Publish configuration for event LASTRX */

/* Bit 31 :   */
#define TWIM_PUBLISH_LASTRX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_LASTRX_EN_Msk (0x1UL << TWIM_PUBLISH_LASTRX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_LASTRX_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_LASTRX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event LASTRX will publish to. */
#define TWIM_PUBLISH_LASTRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_LASTRX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_LASTRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_PUBLISH_LASTTX */
/* Description: Publish configuration for event LASTTX */

/* Bit 31 :   */
#define TWIM_PUBLISH_LASTTX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIM_PUBLISH_LASTTX_EN_Msk (0x1UL << TWIM_PUBLISH_LASTTX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIM_PUBLISH_LASTTX_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIM_PUBLISH_LASTTX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event LASTTX will publish to. */
#define TWIM_PUBLISH_LASTTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIM_PUBLISH_LASTTX_CHIDX_Msk (0xFFUL << TWIM_PUBLISH_LASTTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIM_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 12 : Shortcut between event LASTRX and task STOP */
#define TWIM_SHORTS_LASTRX_STOP_Pos (12UL) /*!< Position of LASTRX_STOP field. */
#define TWIM_SHORTS_LASTRX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTRX_STOP_Pos) /*!< Bit mask of LASTRX_STOP field. */
#define TWIM_SHORTS_LASTRX_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TWIM_SHORTS_LASTRX_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 11 : Shortcut between event LASTRX and task SUSPEND */
#define TWIM_SHORTS_LASTRX_SUSPEND_Pos (11UL) /*!< Position of LASTRX_SUSPEND field. */
#define TWIM_SHORTS_LASTRX_SUSPEND_Msk (0x1UL << TWIM_SHORTS_LASTRX_SUSPEND_Pos) /*!< Bit mask of LASTRX_SUSPEND field. */
#define TWIM_SHORTS_LASTRX_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
#define TWIM_SHORTS_LASTRX_SUSPEND_Enabled (1UL) /*!< Enable shortcut */

/* Bit 10 : Shortcut between event LASTRX and task STARTTX */
#define TWIM_SHORTS_LASTRX_STARTTX_Pos (10UL) /*!< Position of LASTRX_STARTTX field. */
#define TWIM_SHORTS_LASTRX_STARTTX_Msk (0x1UL << TWIM_SHORTS_LASTRX_STARTTX_Pos) /*!< Bit mask of LASTRX_STARTTX field. */
#define TWIM_SHORTS_LASTRX_STARTTX_Disabled (0UL) /*!< Disable shortcut */
#define TWIM_SHORTS_LASTRX_STARTTX_Enabled (1UL) /*!< Enable shortcut */

/* Bit 9 : Shortcut between event LASTTX and task STOP */
#define TWIM_SHORTS_LASTTX_STOP_Pos (9UL) /*!< Position of LASTTX_STOP field. */
#define TWIM_SHORTS_LASTTX_STOP_Msk (0x1UL << TWIM_SHORTS_LASTTX_STOP_Pos) /*!< Bit mask of LASTTX_STOP field. */
#define TWIM_SHORTS_LASTTX_STOP_Disabled (0UL) /*!< Disable shortcut */
#define TWIM_SHORTS_LASTTX_STOP_Enabled (1UL) /*!< Enable shortcut */

/* Bit 8 : Shortcut between event LASTTX and task SUSPEND */
#define TWIM_SHORTS_LASTTX_SUSPEND_Pos (8UL) /*!< Position of LASTTX_SUSPEND field. */
#define TWIM_SHORTS_LASTTX_SUSPEND_Msk (0x1UL << TWIM_SHORTS_LASTTX_SUSPEND_Pos) /*!< Bit mask of LASTTX_SUSPEND field. */
#define TWIM_SHORTS_LASTTX_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
#define TWIM_SHORTS_LASTTX_SUSPEND_Enabled (1UL) /*!< Enable shortcut */

/* Bit 7 : Shortcut between event LASTTX and task STARTRX */
#define TWIM_SHORTS_LASTTX_STARTRX_Pos (7UL) /*!< Position of LASTTX_STARTRX field. */
#define TWIM_SHORTS_LASTTX_STARTRX_Msk (0x1UL << TWIM_SHORTS_LASTTX_STARTRX_Pos) /*!< Bit mask of LASTTX_STARTRX field. */
#define TWIM_SHORTS_LASTTX_STARTRX_Disabled (0UL) /*!< Disable shortcut */
#define TWIM_SHORTS_LASTTX_STARTRX_Enabled (1UL) /*!< Enable shortcut */

/* Register: TWIM_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 24 : Enable or disable interrupt for event LASTTX */
#define TWIM_INTEN_LASTTX_Pos (24UL) /*!< Position of LASTTX field. */
#define TWIM_INTEN_LASTTX_Msk (0x1UL << TWIM_INTEN_LASTTX_Pos) /*!< Bit mask of LASTTX field. */
#define TWIM_INTEN_LASTTX_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_LASTTX_Enabled (1UL) /*!< Enable */

/* Bit 23 : Enable or disable interrupt for event LASTRX */
#define TWIM_INTEN_LASTRX_Pos (23UL) /*!< Position of LASTRX field. */
#define TWIM_INTEN_LASTRX_Msk (0x1UL << TWIM_INTEN_LASTRX_Pos) /*!< Bit mask of LASTRX field. */
#define TWIM_INTEN_LASTRX_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_LASTRX_Enabled (1UL) /*!< Enable */

/* Bit 20 : Enable or disable interrupt for event TXSTARTED */
#define TWIM_INTEN_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define TWIM_INTEN_TXSTARTED_Msk (0x1UL << TWIM_INTEN_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define TWIM_INTEN_TXSTARTED_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_TXSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 19 : Enable or disable interrupt for event RXSTARTED */
#define TWIM_INTEN_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define TWIM_INTEN_RXSTARTED_Msk (0x1UL << TWIM_INTEN_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define TWIM_INTEN_RXSTARTED_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_RXSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 18 : Enable or disable interrupt for event SUSPENDED */
#define TWIM_INTEN_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
#define TWIM_INTEN_SUSPENDED_Msk (0x1UL << TWIM_INTEN_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
#define TWIM_INTEN_SUSPENDED_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_SUSPENDED_Enabled (1UL) /*!< Enable */

/* Bit 14 : Enable or disable interrupt for event BB */
#define TWIM_INTEN_BB_Pos (14UL) /*!< Position of BB field. */
#define TWIM_INTEN_BB_Msk (0x1UL << TWIM_INTEN_BB_Pos) /*!< Bit mask of BB field. */
#define TWIM_INTEN_BB_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_BB_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event ERROR */
#define TWIM_INTEN_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWIM_INTEN_ERROR_Msk (0x1UL << TWIM_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWIM_INTEN_ERROR_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_ERROR_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event ENDTX */
#define TWIM_INTEN_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define TWIM_INTEN_ENDTX_Msk (0x1UL << TWIM_INTEN_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define TWIM_INTEN_ENDTX_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_ENDTX_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event ENDRX */
#define TWIM_INTEN_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define TWIM_INTEN_ENDRX_Msk (0x1UL << TWIM_INTEN_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define TWIM_INTEN_ENDRX_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_ENDRX_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event STOPPED */
#define TWIM_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWIM_INTEN_STOPPED_Msk (0x1UL << TWIM_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWIM_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define TWIM_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Register: TWIM_INTENSET */
/* Description: Enable interrupt */

/* Bit 24 : Write '1' to enable interrupt for event LASTTX */
#define TWIM_INTENSET_LASTTX_Pos (24UL) /*!< Position of LASTTX field. */
#define TWIM_INTENSET_LASTTX_Msk (0x1UL << TWIM_INTENSET_LASTTX_Pos) /*!< Bit mask of LASTTX field. */
#define TWIM_INTENSET_LASTTX_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_LASTTX_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_LASTTX_Set (1UL) /*!< Enable */

/* Bit 23 : Write '1' to enable interrupt for event LASTRX */
#define TWIM_INTENSET_LASTRX_Pos (23UL) /*!< Position of LASTRX field. */
#define TWIM_INTENSET_LASTRX_Msk (0x1UL << TWIM_INTENSET_LASTRX_Pos) /*!< Bit mask of LASTRX field. */
#define TWIM_INTENSET_LASTRX_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_LASTRX_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_LASTRX_Set (1UL) /*!< Enable */

/* Bit 20 : Write '1' to enable interrupt for event TXSTARTED */
#define TWIM_INTENSET_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define TWIM_INTENSET_TXSTARTED_Msk (0x1UL << TWIM_INTENSET_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define TWIM_INTENSET_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_TXSTARTED_Set (1UL) /*!< Enable */

/* Bit 19 : Write '1' to enable interrupt for event RXSTARTED */
#define TWIM_INTENSET_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define TWIM_INTENSET_RXSTARTED_Msk (0x1UL << TWIM_INTENSET_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define TWIM_INTENSET_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_RXSTARTED_Set (1UL) /*!< Enable */

/* Bit 18 : Write '1' to enable interrupt for event SUSPENDED */
#define TWIM_INTENSET_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
#define TWIM_INTENSET_SUSPENDED_Msk (0x1UL << TWIM_INTENSET_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
#define TWIM_INTENSET_SUSPENDED_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_SUSPENDED_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_SUSPENDED_Set (1UL) /*!< Enable */

/* Bit 14 : Write '1' to enable interrupt for event BB */
#define TWIM_INTENSET_BB_Pos (14UL) /*!< Position of BB field. */
#define TWIM_INTENSET_BB_Msk (0x1UL << TWIM_INTENSET_BB_Pos) /*!< Bit mask of BB field. */
#define TWIM_INTENSET_BB_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_BB_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_BB_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event ERROR */
#define TWIM_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWIM_INTENSET_ERROR_Msk (0x1UL << TWIM_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWIM_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_ERROR_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event ENDTX */
#define TWIM_INTENSET_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define TWIM_INTENSET_ENDTX_Msk (0x1UL << TWIM_INTENSET_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define TWIM_INTENSET_ENDTX_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_ENDTX_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_ENDTX_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event ENDRX */
#define TWIM_INTENSET_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define TWIM_INTENSET_ENDRX_Msk (0x1UL << TWIM_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define TWIM_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_ENDRX_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event STOPPED */
#define TWIM_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWIM_INTENSET_STOPPED_Msk (0x1UL << TWIM_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWIM_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Register: TWIM_INTENCLR */
/* Description: Disable interrupt */

/* Bit 24 : Write '1' to disable interrupt for event LASTTX */
#define TWIM_INTENCLR_LASTTX_Pos (24UL) /*!< Position of LASTTX field. */
#define TWIM_INTENCLR_LASTTX_Msk (0x1UL << TWIM_INTENCLR_LASTTX_Pos) /*!< Bit mask of LASTTX field. */
#define TWIM_INTENCLR_LASTTX_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_LASTTX_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_LASTTX_Clear (1UL) /*!< Disable */

/* Bit 23 : Write '1' to disable interrupt for event LASTRX */
#define TWIM_INTENCLR_LASTRX_Pos (23UL) /*!< Position of LASTRX field. */
#define TWIM_INTENCLR_LASTRX_Msk (0x1UL << TWIM_INTENCLR_LASTRX_Pos) /*!< Bit mask of LASTRX field. */
#define TWIM_INTENCLR_LASTRX_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_LASTRX_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_LASTRX_Clear (1UL) /*!< Disable */

/* Bit 20 : Write '1' to disable interrupt for event TXSTARTED */
#define TWIM_INTENCLR_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define TWIM_INTENCLR_TXSTARTED_Msk (0x1UL << TWIM_INTENCLR_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define TWIM_INTENCLR_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_TXSTARTED_Clear (1UL) /*!< Disable */

/* Bit 19 : Write '1' to disable interrupt for event RXSTARTED */
#define TWIM_INTENCLR_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define TWIM_INTENCLR_RXSTARTED_Msk (0x1UL << TWIM_INTENCLR_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define TWIM_INTENCLR_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_RXSTARTED_Clear (1UL) /*!< Disable */

/* Bit 18 : Write '1' to disable interrupt for event SUSPENDED */
#define TWIM_INTENCLR_SUSPENDED_Pos (18UL) /*!< Position of SUSPENDED field. */
#define TWIM_INTENCLR_SUSPENDED_Msk (0x1UL << TWIM_INTENCLR_SUSPENDED_Pos) /*!< Bit mask of SUSPENDED field. */
#define TWIM_INTENCLR_SUSPENDED_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_SUSPENDED_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_SUSPENDED_Clear (1UL) /*!< Disable */

/* Bit 14 : Write '1' to disable interrupt for event BB */
#define TWIM_INTENCLR_BB_Pos (14UL) /*!< Position of BB field. */
#define TWIM_INTENCLR_BB_Msk (0x1UL << TWIM_INTENCLR_BB_Pos) /*!< Bit mask of BB field. */
#define TWIM_INTENCLR_BB_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_BB_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_BB_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event ERROR */
#define TWIM_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWIM_INTENCLR_ERROR_Msk (0x1UL << TWIM_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWIM_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_ERROR_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event ENDTX */
#define TWIM_INTENCLR_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define TWIM_INTENCLR_ENDTX_Msk (0x1UL << TWIM_INTENCLR_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define TWIM_INTENCLR_ENDTX_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_ENDTX_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_ENDTX_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event ENDRX */
#define TWIM_INTENCLR_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define TWIM_INTENCLR_ENDRX_Msk (0x1UL << TWIM_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define TWIM_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event STOPPED */
#define TWIM_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWIM_INTENCLR_STOPPED_Msk (0x1UL << TWIM_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWIM_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define TWIM_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define TWIM_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Register: TWIM_ERRORSRC */
/* Description: Error source */

/* Bit 2 : NACK received after sending a data byte (write '1' to clear) */
#define TWIM_ERRORSRC_DNACK_Pos (2UL) /*!< Position of DNACK field. */
#define TWIM_ERRORSRC_DNACK_Msk (0x1UL << TWIM_ERRORSRC_DNACK_Pos) /*!< Bit mask of DNACK field. */
#define TWIM_ERRORSRC_DNACK_NotReceived (0UL) /*!< Error did not occur */
#define TWIM_ERRORSRC_DNACK_Received (1UL) /*!< Error occurred */

/* Bit 1 : NACK received after sending the address (write '1' to clear) */
#define TWIM_ERRORSRC_ANACK_Pos (1UL) /*!< Position of ANACK field. */
#define TWIM_ERRORSRC_ANACK_Msk (0x1UL << TWIM_ERRORSRC_ANACK_Pos) /*!< Bit mask of ANACK field. */
#define TWIM_ERRORSRC_ANACK_NotReceived (0UL) /*!< Error did not occur */
#define TWIM_ERRORSRC_ANACK_Received (1UL) /*!< Error occurred */

/* Bit 0 : Overrun error */
#define TWIM_ERRORSRC_OVERRUN_Pos (0UL) /*!< Position of OVERRUN field. */
#define TWIM_ERRORSRC_OVERRUN_Msk (0x1UL << TWIM_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
#define TWIM_ERRORSRC_OVERRUN_NotReceived (0UL) /*!< Error did not occur */
#define TWIM_ERRORSRC_OVERRUN_Received (1UL) /*!< Error occurred */

/* Register: TWIM_ENABLE */
/* Description: Enable TWIM */

/* Bits 3..0 : Enable or disable TWIM */
#define TWIM_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define TWIM_ENABLE_ENABLE_Msk (0xFUL << TWIM_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define TWIM_ENABLE_ENABLE_Disabled (0UL) /*!< Disable TWIM */
#define TWIM_ENABLE_ENABLE_Enabled (6UL) /*!< Enable TWIM */

/* Register: TWIM_CONFIG */
/* Description: Configuration register */

/* Bits 2..1 : Internal read-only status information */
#define TWIM_CONFIG_RG_Pos (1UL) /*!< Position of RG field. */
#define TWIM_CONFIG_RG_Msk (0x3UL << TWIM_CONFIG_RG_Pos) /*!< Bit mask of RG field. */
#define TWIM_CONFIG_RG_K100 (1UL) /*!< 100 kbit/s */
#define TWIM_CONFIG_RG_K1000 (3UL) /*!< 1000 kbps */

/* Register: TWIM_PSEL_SCL */
/* Description: Pin select for SCL signal */

/* Bit 31 : Connection */
#define TWIM_PSEL_SCL_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TWIM_PSEL_SCL_CONNECT_Msk (0x1UL << TWIM_PSEL_SCL_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TWIM_PSEL_SCL_CONNECT_Connected (0UL) /*!< Connect */
#define TWIM_PSEL_SCL_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define TWIM_PSEL_SCL_PORT_Pos (5UL) /*!< Position of PORT field. */
#define TWIM_PSEL_SCL_PORT_Msk (0x1UL << TWIM_PSEL_SCL_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define TWIM_PSEL_SCL_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TWIM_PSEL_SCL_PIN_Msk (0x1FUL << TWIM_PSEL_SCL_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: TWIM_PSEL_SDA */
/* Description: Pin select for SDA signal */

/* Bit 31 : Connection */
#define TWIM_PSEL_SDA_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TWIM_PSEL_SDA_CONNECT_Msk (0x1UL << TWIM_PSEL_SDA_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TWIM_PSEL_SDA_CONNECT_Connected (0UL) /*!< Connect */
#define TWIM_PSEL_SDA_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define TWIM_PSEL_SDA_PORT_Pos (5UL) /*!< Position of PORT field. */
#define TWIM_PSEL_SDA_PORT_Msk (0x1UL << TWIM_PSEL_SDA_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define TWIM_PSEL_SDA_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TWIM_PSEL_SDA_PIN_Msk (0x1FUL << TWIM_PSEL_SDA_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: TWIM_FMPLUS_THRESHOLD */
/* Description: FREQUENCY threshold for switch from regular mode to to FastMode+ */

/* Bits 31..0 : Threshold value */
#define TWIM_FMPLUS_THRESHOLD_FMPLUS_THRESHOLD_Pos (0UL) /*!< Position of FMPLUS_THRESHOLD field. */
#define TWIM_FMPLUS_THRESHOLD_FMPLUS_THRESHOLD_Msk (0xFFFFFFFFUL << TWIM_FMPLUS_THRESHOLD_FMPLUS_THRESHOLD_Pos) /*!< Bit mask of FMPLUS_THRESHOLD field. */

/* Register: TWIM_FREQUENCY */
/* Description: TWI frequency. Accuracy depends on the HFCLK source selected. */

/* Bits 31..0 : TWI master clock frequency */
#define TWIM_FREQUENCY_FREQUENCY_Pos (0UL) /*!< Position of FREQUENCY field. */
#define TWIM_FREQUENCY_FREQUENCY_Msk (0xFFFFFFFFUL << TWIM_FREQUENCY_FREQUENCY_Pos) /*!< Bit mask of FREQUENCY field. */
#define TWIM_FREQUENCY_FREQUENCY_K100 (0x01980000UL) /*!< 100 kbps */
#define TWIM_FREQUENCY_FREQUENCY_K250 (0x04000000UL) /*!< 250 kbps */
#define TWIM_FREQUENCY_FREQUENCY_K400 (0x06400000UL) /*!< 400 kbps */
#define TWIM_FREQUENCY_FREQUENCY_K1000 (0x0FF00000UL) /*!< 1000 kbps */

/* Register: TWIM_RXD_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define TWIM_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define TWIM_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: TWIM_RXD_MAXCNT */
/* Description: Maximum number of bytes in receive buffer */

/* Bits 15..0 : Maximum number of bytes in receive buffer */
#define TWIM_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define TWIM_RXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIM_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: TWIM_RXD_AMOUNT */
/* Description: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
#define TWIM_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define TWIM_RXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIM_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: TWIM_RXD_LIST */
/* Description: EasyDMA list type */

/* Bits 2..0 : List type */
#define TWIM_RXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define TWIM_RXD_LIST_LIST_Msk (0x7UL << TWIM_RXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define TWIM_RXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
#define TWIM_RXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */

/* Register: TWIM_TXD_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define TWIM_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define TWIM_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << TWIM_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: TWIM_TXD_MAXCNT */
/* Description: Maximum number of bytes in transmit buffer */

/* Bits 15..0 : Maximum number of bytes in transmit buffer */
#define TWIM_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define TWIM_TXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIM_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: TWIM_TXD_AMOUNT */
/* Description: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction. In case of NACK error, includes the NACK'ed byte. */
#define TWIM_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define TWIM_TXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIM_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: TWIM_TXD_LIST */
/* Description: EasyDMA list type */

/* Bits 2..0 : List type */
#define TWIM_TXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define TWIM_TXD_LIST_LIST_Msk (0x7UL << TWIM_TXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define TWIM_TXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
#define TWIM_TXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */

/* Register: TWIM_ADDRESS */
/* Description: Address used in the TWI transfer */

/* Bits 6..0 : Address used in the TWI transfer */
#define TWIM_ADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field. */
#define TWIM_ADDRESS_ADDRESS_Msk (0x7FUL << TWIM_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field. */


/* Peripheral: TWIS */
/* Description: I2C compatible Two-Wire Slave Interface with EasyDMA 0 */

/* Register: TWIS_TASKS_STOP */
/* Description: Stop TWI transaction */

/* Bit 0 : Stop TWI transaction */
#define TWIS_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define TWIS_TASKS_STOP_TASKS_STOP_Msk (0x1UL << TWIS_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define TWIS_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: TWIS_TASKS_SUSPEND */
/* Description: Suspend TWI transaction */

/* Bit 0 : Suspend TWI transaction */
#define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field. */
#define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND field. */
#define TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (1UL) /*!< Trigger task */

/* Register: TWIS_TASKS_RESUME */
/* Description: Resume TWI transaction */

/* Bit 0 : Resume TWI transaction */
#define TWIS_TASKS_RESUME_TASKS_RESUME_Pos (0UL) /*!< Position of TASKS_RESUME field. */
#define TWIS_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << TWIS_TASKS_RESUME_TASKS_RESUME_Pos) /*!< Bit mask of TASKS_RESUME field. */
#define TWIS_TASKS_RESUME_TASKS_RESUME_Trigger (1UL) /*!< Trigger task */

/* Register: TWIS_TASKS_PREPARERX */
/* Description: Prepare the TWI slave to respond to a write command */

/* Bit 0 : Prepare the TWI slave to respond to a write command */
#define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos (0UL) /*!< Position of TASKS_PREPARERX field. */
#define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Msk (0x1UL << TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos) /*!< Bit mask of TASKS_PREPARERX field. */
#define TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Trigger (1UL) /*!< Trigger task */

/* Register: TWIS_TASKS_PREPARETX */
/* Description: Prepare the TWI slave to respond to a read command */

/* Bit 0 : Prepare the TWI slave to respond to a read command */
#define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos (0UL) /*!< Position of TASKS_PREPARETX field. */
#define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Msk (0x1UL << TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos) /*!< Bit mask of TASKS_PREPARETX field. */
#define TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Trigger (1UL) /*!< Trigger task */

/* Register: TWIS_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define TWIS_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_SUBSCRIBE_STOP_EN_Msk (0x1UL << TWIS_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIS_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define TWIS_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_SUBSCRIBE_SUSPEND */
/* Description: Subscribe configuration for task SUSPEND */

/* Bit 31 :   */
#define TWIS_SUBSCRIBE_SUSPEND_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << TWIS_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_SUBSCRIBE_SUSPEND_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIS_SUBSCRIBE_SUSPEND_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SUSPEND will subscribe to */
#define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_SUBSCRIBE_RESUME */
/* Description: Subscribe configuration for task RESUME */

/* Bit 31 :   */
#define TWIS_SUBSCRIBE_RESUME_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_SUBSCRIBE_RESUME_EN_Msk (0x1UL << TWIS_SUBSCRIBE_RESUME_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_SUBSCRIBE_RESUME_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIS_SUBSCRIBE_RESUME_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task RESUME will subscribe to */
#define TWIS_SUBSCRIBE_RESUME_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_RESUME_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_SUBSCRIBE_PREPARERX */
/* Description: Subscribe configuration for task PREPARERX */

/* Bit 31 :   */
#define TWIS_SUBSCRIBE_PREPARERX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_SUBSCRIBE_PREPARERX_EN_Msk (0x1UL << TWIS_SUBSCRIBE_PREPARERX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_SUBSCRIBE_PREPARERX_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIS_SUBSCRIBE_PREPARERX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task PREPARERX will subscribe to */
#define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_SUBSCRIBE_PREPARERX_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_PREPARERX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_SUBSCRIBE_PREPARETX */
/* Description: Subscribe configuration for task PREPARETX */

/* Bit 31 :   */
#define TWIS_SUBSCRIBE_PREPARETX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_SUBSCRIBE_PREPARETX_EN_Msk (0x1UL << TWIS_SUBSCRIBE_PREPARETX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_SUBSCRIBE_PREPARETX_EN_Disabled (0UL) /*!< Disable subscription */
#define TWIS_SUBSCRIBE_PREPARETX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task PREPARETX will subscribe to */
#define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_SUBSCRIBE_PREPARETX_CHIDX_Msk (0xFFUL << TWIS_SUBSCRIBE_PREPARETX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_EVENTS_STOPPED */
/* Description: TWI stopped */

/* Bit 0 : TWI stopped */
#define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_ERROR */
/* Description: TWI error */

/* Bit 0 : TWI error */
#define TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL) /*!< Position of EVENTS_ERROR field. */
#define TWIS_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field. */
#define TWIS_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_ERROR_EVENTS_ERROR_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_NACKTX */
/* Description: NACK on TX */

/* Bit 0 : NACK on TX */
#define TWIS_EVENTS_NACKTX_EVENTS_NACKTX_Pos (0UL) /*!< Position of EVENTS_NACKTX field. */
#define TWIS_EVENTS_NACKTX_EVENTS_NACKTX_Msk (0x1UL << TWIS_EVENTS_NACKTX_EVENTS_NACKTX_Pos) /*!< Bit mask of EVENTS_NACKTX field. */
#define TWIS_EVENTS_NACKTX_EVENTS_NACKTX_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_NACKTX_EVENTS_NACKTX_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_BB */
/* Description: TWI byte boundary, generated before each byte that is sent or received */

/* Bit 0 : TWI byte boundary, generated before each byte that is sent or received */
#define TWIS_EVENTS_BB_EVENTS_BB_Pos (0UL) /*!< Position of EVENTS_BB field. */
#define TWIS_EVENTS_BB_EVENTS_BB_Msk (0x1UL << TWIS_EVENTS_BB_EVENTS_BB_Pos) /*!< Bit mask of EVENTS_BB field. */
#define TWIS_EVENTS_BB_EVENTS_BB_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_BB_EVENTS_BB_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_RXSTARTED */
/* Description: Receive sequence started */

/* Bit 0 : Receive sequence started */
#define TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos (0UL) /*!< Position of EVENTS_RXSTARTED field. */
#define TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk (0x1UL << TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos) /*!< Bit mask of EVENTS_RXSTARTED field. */
#define TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_TXSTARTED */
/* Description: Transmit sequence started */

/* Bit 0 : Transmit sequence started */
#define TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos (0UL) /*!< Position of EVENTS_TXSTARTED field. */
#define TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk (0x1UL << TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos) /*!< Bit mask of EVENTS_TXSTARTED field. */
#define TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_WRITE */
/* Description: Write command received */

/* Bit 0 : Write command received */
#define TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos (0UL) /*!< Position of EVENTS_WRITE field. */
#define TWIS_EVENTS_WRITE_EVENTS_WRITE_Msk (0x1UL << TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos) /*!< Bit mask of EVENTS_WRITE field. */
#define TWIS_EVENTS_WRITE_EVENTS_WRITE_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_WRITE_EVENTS_WRITE_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_READ */
/* Description: Read command received */

/* Bit 0 : Read command received */
#define TWIS_EVENTS_READ_EVENTS_READ_Pos (0UL) /*!< Position of EVENTS_READ field. */
#define TWIS_EVENTS_READ_EVENTS_READ_Msk (0x1UL << TWIS_EVENTS_READ_EVENTS_READ_Pos) /*!< Bit mask of EVENTS_READ field. */
#define TWIS_EVENTS_READ_EVENTS_READ_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_READ_EVENTS_READ_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_CSSTARTED */
/* Description: TWI started stretching the clock */

/* Bit 0 : TWI started stretching the clock */
#define TWIS_EVENTS_CSSTARTED_EVENTS_CSSTARTED_Pos (0UL) /*!< Position of EVENTS_CSSTARTED field. */
#define TWIS_EVENTS_CSSTARTED_EVENTS_CSSTARTED_Msk (0x1UL << TWIS_EVENTS_CSSTARTED_EVENTS_CSSTARTED_Pos) /*!< Bit mask of EVENTS_CSSTARTED field. */
#define TWIS_EVENTS_CSSTARTED_EVENTS_CSSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_CSSTARTED_EVENTS_CSSTARTED_Generated (1UL) /*!< Event generated */

/* Register: TWIS_EVENTS_CSSTOPPED */
/* Description: TWI stopped stretching the clock */

/* Bit 0 : TWI stopped stretching the clock */
#define TWIS_EVENTS_CSSTOPPED_EVENTS_CSSTOPPED_Pos (0UL) /*!< Position of EVENTS_CSSTOPPED field. */
#define TWIS_EVENTS_CSSTOPPED_EVENTS_CSSTOPPED_Msk (0x1UL << TWIS_EVENTS_CSSTOPPED_EVENTS_CSSTOPPED_Pos) /*!< Bit mask of EVENTS_CSSTOPPED field. */
#define TWIS_EVENTS_CSSTOPPED_EVENTS_CSSTOPPED_NotGenerated (0UL) /*!< Event not generated */
#define TWIS_EVENTS_CSSTOPPED_EVENTS_CSSTOPPED_Generated (1UL) /*!< Event generated */

/* Register: TWIS_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define TWIS_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_STOPPED_EN_Msk (0x1UL << TWIS_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define TWIS_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_ERROR */
/* Description: Publish configuration for event ERROR */

/* Bit 31 :   */
#define TWIS_PUBLISH_ERROR_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_ERROR_EN_Msk (0x1UL << TWIS_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_ERROR_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_ERROR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ERROR will publish to. */
#define TWIS_PUBLISH_ERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_NACKTX */
/* Description: Publish configuration for event NACKTX */

/* Bit 31 :   */
#define TWIS_PUBLISH_NACKTX_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_NACKTX_EN_Msk (0x1UL << TWIS_PUBLISH_NACKTX_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_NACKTX_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_NACKTX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event NACKTX will publish to. */
#define TWIS_PUBLISH_NACKTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_NACKTX_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_NACKTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_BB */
/* Description: Publish configuration for event BB */

/* Bit 31 :   */
#define TWIS_PUBLISH_BB_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_BB_EN_Msk (0x1UL << TWIS_PUBLISH_BB_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_BB_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_BB_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event BB will publish to. */
#define TWIS_PUBLISH_BB_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_BB_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_BB_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_RXSTARTED */
/* Description: Publish configuration for event RXSTARTED */

/* Bit 31 :   */
#define TWIS_PUBLISH_RXSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_RXSTARTED_EN_Msk (0x1UL << TWIS_PUBLISH_RXSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_RXSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_RXSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXSTARTED will publish to. */
#define TWIS_PUBLISH_RXSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_RXSTARTED_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_RXSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_TXSTARTED */
/* Description: Publish configuration for event TXSTARTED */

/* Bit 31 :   */
#define TWIS_PUBLISH_TXSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_TXSTARTED_EN_Msk (0x1UL << TWIS_PUBLISH_TXSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_TXSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_TXSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXSTARTED will publish to. */
#define TWIS_PUBLISH_TXSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_TXSTARTED_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_TXSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_WRITE */
/* Description: Publish configuration for event WRITE */

/* Bit 31 :   */
#define TWIS_PUBLISH_WRITE_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_WRITE_EN_Msk (0x1UL << TWIS_PUBLISH_WRITE_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_WRITE_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_WRITE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event WRITE will publish to. */
#define TWIS_PUBLISH_WRITE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_WRITE_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_WRITE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_READ */
/* Description: Publish configuration for event READ */

/* Bit 31 :   */
#define TWIS_PUBLISH_READ_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_READ_EN_Msk (0x1UL << TWIS_PUBLISH_READ_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_READ_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_READ_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event READ will publish to. */
#define TWIS_PUBLISH_READ_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_READ_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_READ_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_CSSTARTED */
/* Description: Publish configuration for event CSSTARTED */

/* Bit 31 :   */
#define TWIS_PUBLISH_CSSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_CSSTARTED_EN_Msk (0x1UL << TWIS_PUBLISH_CSSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_CSSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_CSSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CSSTARTED will publish to. */
#define TWIS_PUBLISH_CSSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_CSSTARTED_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_CSSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_PUBLISH_CSSTOPPED */
/* Description: Publish configuration for event CSSTOPPED */

/* Bit 31 :   */
#define TWIS_PUBLISH_CSSTOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define TWIS_PUBLISH_CSSTOPPED_EN_Msk (0x1UL << TWIS_PUBLISH_CSSTOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define TWIS_PUBLISH_CSSTOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define TWIS_PUBLISH_CSSTOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CSSTOPPED will publish to. */
#define TWIS_PUBLISH_CSSTOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define TWIS_PUBLISH_CSSTOPPED_CHIDX_Msk (0xFFUL << TWIS_PUBLISH_CSSTOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: TWIS_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 16 : Shortcut between event READ and task PREPARETX */
#define TWIS_SHORTS_READ_PREPARETX_Pos (16UL) /*!< Position of READ_PREPARETX field. */
#define TWIS_SHORTS_READ_PREPARETX_Msk (0x1UL << TWIS_SHORTS_READ_PREPARETX_Pos) /*!< Bit mask of READ_PREPARETX field. */
#define TWIS_SHORTS_READ_PREPARETX_Disabled (0UL) /*!< Disable shortcut */
#define TWIS_SHORTS_READ_PREPARETX_Enabled (1UL) /*!< Enable shortcut */

/* Bit 15 : Shortcut between event WRITE and task PREPARERX */
#define TWIS_SHORTS_WRITE_PREPARERX_Pos (15UL) /*!< Position of WRITE_PREPARERX field. */
#define TWIS_SHORTS_WRITE_PREPARERX_Msk (0x1UL << TWIS_SHORTS_WRITE_PREPARERX_Pos) /*!< Bit mask of WRITE_PREPARERX field. */
#define TWIS_SHORTS_WRITE_PREPARERX_Disabled (0UL) /*!< Disable shortcut */
#define TWIS_SHORTS_WRITE_PREPARERX_Enabled (1UL) /*!< Enable shortcut */

/* Bit 14 : Shortcut between event READ and task SUSPEND */
#define TWIS_SHORTS_READ_SUSPEND_Pos (14UL) /*!< Position of READ_SUSPEND field. */
#define TWIS_SHORTS_READ_SUSPEND_Msk (0x1UL << TWIS_SHORTS_READ_SUSPEND_Pos) /*!< Bit mask of READ_SUSPEND field. */
#define TWIS_SHORTS_READ_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
#define TWIS_SHORTS_READ_SUSPEND_Enabled (1UL) /*!< Enable shortcut */

/* Bit 13 : Shortcut between event WRITE and task SUSPEND */
#define TWIS_SHORTS_WRITE_SUSPEND_Pos (13UL) /*!< Position of WRITE_SUSPEND field. */
#define TWIS_SHORTS_WRITE_SUSPEND_Msk (0x1UL << TWIS_SHORTS_WRITE_SUSPEND_Pos) /*!< Bit mask of WRITE_SUSPEND field. */
#define TWIS_SHORTS_WRITE_SUSPEND_Disabled (0UL) /*!< Disable shortcut */
#define TWIS_SHORTS_WRITE_SUSPEND_Enabled (1UL) /*!< Enable shortcut */

/* Register: TWIS_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 28 : Enable or disable interrupt for event CSSTOPPED */
#define TWIS_INTEN_CSSTOPPED_Pos (28UL) /*!< Position of CSSTOPPED field. */
#define TWIS_INTEN_CSSTOPPED_Msk (0x1UL << TWIS_INTEN_CSSTOPPED_Pos) /*!< Bit mask of CSSTOPPED field. */
#define TWIS_INTEN_CSSTOPPED_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_CSSTOPPED_Enabled (1UL) /*!< Enable */

/* Bit 27 : Enable or disable interrupt for event CSSTARTED */
#define TWIS_INTEN_CSSTARTED_Pos (27UL) /*!< Position of CSSTARTED field. */
#define TWIS_INTEN_CSSTARTED_Msk (0x1UL << TWIS_INTEN_CSSTARTED_Pos) /*!< Bit mask of CSSTARTED field. */
#define TWIS_INTEN_CSSTARTED_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_CSSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 26 : Enable or disable interrupt for event READ */
#define TWIS_INTEN_READ_Pos (26UL) /*!< Position of READ field. */
#define TWIS_INTEN_READ_Msk (0x1UL << TWIS_INTEN_READ_Pos) /*!< Bit mask of READ field. */
#define TWIS_INTEN_READ_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_READ_Enabled (1UL) /*!< Enable */

/* Bit 25 : Enable or disable interrupt for event WRITE */
#define TWIS_INTEN_WRITE_Pos (25UL) /*!< Position of WRITE field. */
#define TWIS_INTEN_WRITE_Msk (0x1UL << TWIS_INTEN_WRITE_Pos) /*!< Bit mask of WRITE field. */
#define TWIS_INTEN_WRITE_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_WRITE_Enabled (1UL) /*!< Enable */

/* Bit 20 : Enable or disable interrupt for event TXSTARTED */
#define TWIS_INTEN_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define TWIS_INTEN_TXSTARTED_Msk (0x1UL << TWIS_INTEN_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define TWIS_INTEN_TXSTARTED_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_TXSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 19 : Enable or disable interrupt for event RXSTARTED */
#define TWIS_INTEN_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define TWIS_INTEN_RXSTARTED_Msk (0x1UL << TWIS_INTEN_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define TWIS_INTEN_RXSTARTED_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_RXSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 14 : Enable or disable interrupt for event BB */
#define TWIS_INTEN_BB_Pos (14UL) /*!< Position of BB field. */
#define TWIS_INTEN_BB_Msk (0x1UL << TWIS_INTEN_BB_Pos) /*!< Bit mask of BB field. */
#define TWIS_INTEN_BB_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_BB_Enabled (1UL) /*!< Enable */

/* Bit 13 : Enable or disable interrupt for event NACKTX */
#define TWIS_INTEN_NACKTX_Pos (13UL) /*!< Position of NACKTX field. */
#define TWIS_INTEN_NACKTX_Msk (0x1UL << TWIS_INTEN_NACKTX_Pos) /*!< Bit mask of NACKTX field. */
#define TWIS_INTEN_NACKTX_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_NACKTX_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event ERROR */
#define TWIS_INTEN_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWIS_INTEN_ERROR_Msk (0x1UL << TWIS_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWIS_INTEN_ERROR_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_ERROR_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event STOPPED */
#define TWIS_INTEN_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWIS_INTEN_STOPPED_Msk (0x1UL << TWIS_INTEN_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWIS_INTEN_STOPPED_Disabled (0UL) /*!< Disable */
#define TWIS_INTEN_STOPPED_Enabled (1UL) /*!< Enable */

/* Register: TWIS_INTENSET */
/* Description: Enable interrupt */

/* Bit 28 : Write '1' to enable interrupt for event CSSTOPPED */
#define TWIS_INTENSET_CSSTOPPED_Pos (28UL) /*!< Position of CSSTOPPED field. */
#define TWIS_INTENSET_CSSTOPPED_Msk (0x1UL << TWIS_INTENSET_CSSTOPPED_Pos) /*!< Bit mask of CSSTOPPED field. */
#define TWIS_INTENSET_CSSTOPPED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_CSSTOPPED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_CSSTOPPED_Set (1UL) /*!< Enable */

/* Bit 27 : Write '1' to enable interrupt for event CSSTARTED */
#define TWIS_INTENSET_CSSTARTED_Pos (27UL) /*!< Position of CSSTARTED field. */
#define TWIS_INTENSET_CSSTARTED_Msk (0x1UL << TWIS_INTENSET_CSSTARTED_Pos) /*!< Bit mask of CSSTARTED field. */
#define TWIS_INTENSET_CSSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_CSSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_CSSTARTED_Set (1UL) /*!< Enable */

/* Bit 26 : Write '1' to enable interrupt for event READ */
#define TWIS_INTENSET_READ_Pos (26UL) /*!< Position of READ field. */
#define TWIS_INTENSET_READ_Msk (0x1UL << TWIS_INTENSET_READ_Pos) /*!< Bit mask of READ field. */
#define TWIS_INTENSET_READ_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_READ_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_READ_Set (1UL) /*!< Enable */

/* Bit 25 : Write '1' to enable interrupt for event WRITE */
#define TWIS_INTENSET_WRITE_Pos (25UL) /*!< Position of WRITE field. */
#define TWIS_INTENSET_WRITE_Msk (0x1UL << TWIS_INTENSET_WRITE_Pos) /*!< Bit mask of WRITE field. */
#define TWIS_INTENSET_WRITE_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_WRITE_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_WRITE_Set (1UL) /*!< Enable */

/* Bit 20 : Write '1' to enable interrupt for event TXSTARTED */
#define TWIS_INTENSET_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define TWIS_INTENSET_TXSTARTED_Msk (0x1UL << TWIS_INTENSET_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define TWIS_INTENSET_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_TXSTARTED_Set (1UL) /*!< Enable */

/* Bit 19 : Write '1' to enable interrupt for event RXSTARTED */
#define TWIS_INTENSET_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define TWIS_INTENSET_RXSTARTED_Msk (0x1UL << TWIS_INTENSET_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define TWIS_INTENSET_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_RXSTARTED_Set (1UL) /*!< Enable */

/* Bit 14 : Write '1' to enable interrupt for event BB */
#define TWIS_INTENSET_BB_Pos (14UL) /*!< Position of BB field. */
#define TWIS_INTENSET_BB_Msk (0x1UL << TWIS_INTENSET_BB_Pos) /*!< Bit mask of BB field. */
#define TWIS_INTENSET_BB_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_BB_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_BB_Set (1UL) /*!< Enable */

/* Bit 13 : Write '1' to enable interrupt for event NACKTX */
#define TWIS_INTENSET_NACKTX_Pos (13UL) /*!< Position of NACKTX field. */
#define TWIS_INTENSET_NACKTX_Msk (0x1UL << TWIS_INTENSET_NACKTX_Pos) /*!< Bit mask of NACKTX field. */
#define TWIS_INTENSET_NACKTX_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_NACKTX_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_NACKTX_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event ERROR */
#define TWIS_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWIS_INTENSET_ERROR_Msk (0x1UL << TWIS_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWIS_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_ERROR_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event STOPPED */
#define TWIS_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWIS_INTENSET_STOPPED_Msk (0x1UL << TWIS_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWIS_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Register: TWIS_INTENCLR */
/* Description: Disable interrupt */

/* Bit 28 : Write '1' to disable interrupt for event CSSTOPPED */
#define TWIS_INTENCLR_CSSTOPPED_Pos (28UL) /*!< Position of CSSTOPPED field. */
#define TWIS_INTENCLR_CSSTOPPED_Msk (0x1UL << TWIS_INTENCLR_CSSTOPPED_Pos) /*!< Bit mask of CSSTOPPED field. */
#define TWIS_INTENCLR_CSSTOPPED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_CSSTOPPED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_CSSTOPPED_Clear (1UL) /*!< Disable */

/* Bit 27 : Write '1' to disable interrupt for event CSSTARTED */
#define TWIS_INTENCLR_CSSTARTED_Pos (27UL) /*!< Position of CSSTARTED field. */
#define TWIS_INTENCLR_CSSTARTED_Msk (0x1UL << TWIS_INTENCLR_CSSTARTED_Pos) /*!< Bit mask of CSSTARTED field. */
#define TWIS_INTENCLR_CSSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_CSSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_CSSTARTED_Clear (1UL) /*!< Disable */

/* Bit 26 : Write '1' to disable interrupt for event READ */
#define TWIS_INTENCLR_READ_Pos (26UL) /*!< Position of READ field. */
#define TWIS_INTENCLR_READ_Msk (0x1UL << TWIS_INTENCLR_READ_Pos) /*!< Bit mask of READ field. */
#define TWIS_INTENCLR_READ_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_READ_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_READ_Clear (1UL) /*!< Disable */

/* Bit 25 : Write '1' to disable interrupt for event WRITE */
#define TWIS_INTENCLR_WRITE_Pos (25UL) /*!< Position of WRITE field. */
#define TWIS_INTENCLR_WRITE_Msk (0x1UL << TWIS_INTENCLR_WRITE_Pos) /*!< Bit mask of WRITE field. */
#define TWIS_INTENCLR_WRITE_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_WRITE_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_WRITE_Clear (1UL) /*!< Disable */

/* Bit 20 : Write '1' to disable interrupt for event TXSTARTED */
#define TWIS_INTENCLR_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define TWIS_INTENCLR_TXSTARTED_Msk (0x1UL << TWIS_INTENCLR_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define TWIS_INTENCLR_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_TXSTARTED_Clear (1UL) /*!< Disable */

/* Bit 19 : Write '1' to disable interrupt for event RXSTARTED */
#define TWIS_INTENCLR_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define TWIS_INTENCLR_RXSTARTED_Msk (0x1UL << TWIS_INTENCLR_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define TWIS_INTENCLR_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_RXSTARTED_Clear (1UL) /*!< Disable */

/* Bit 14 : Write '1' to disable interrupt for event BB */
#define TWIS_INTENCLR_BB_Pos (14UL) /*!< Position of BB field. */
#define TWIS_INTENCLR_BB_Msk (0x1UL << TWIS_INTENCLR_BB_Pos) /*!< Bit mask of BB field. */
#define TWIS_INTENCLR_BB_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_BB_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_BB_Clear (1UL) /*!< Disable */

/* Bit 13 : Write '1' to disable interrupt for event NACKTX */
#define TWIS_INTENCLR_NACKTX_Pos (13UL) /*!< Position of NACKTX field. */
#define TWIS_INTENCLR_NACKTX_Msk (0x1UL << TWIS_INTENCLR_NACKTX_Pos) /*!< Bit mask of NACKTX field. */
#define TWIS_INTENCLR_NACKTX_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_NACKTX_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_NACKTX_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event ERROR */
#define TWIS_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define TWIS_INTENCLR_ERROR_Msk (0x1UL << TWIS_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define TWIS_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_ERROR_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event STOPPED */
#define TWIS_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define TWIS_INTENCLR_STOPPED_Msk (0x1UL << TWIS_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define TWIS_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define TWIS_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define TWIS_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Register: TWIS_ERRORSRC */
/* Description: Error source */

/* Bit 3 : TX buffer over-read detected, and prevented */
#define TWIS_ERRORSRC_OVERREAD_Pos (3UL) /*!< Position of OVERREAD field. */
#define TWIS_ERRORSRC_OVERREAD_Msk (0x1UL << TWIS_ERRORSRC_OVERREAD_Pos) /*!< Bit mask of OVERREAD field. */
#define TWIS_ERRORSRC_OVERREAD_NotDetected (0UL) /*!< Error did not occur */
#define TWIS_ERRORSRC_OVERREAD_Detected (1UL) /*!< Error occurred */

/* Bit 2 : NACK sent after receiving a data byte */
#define TWIS_ERRORSRC_DNACK_Pos (2UL) /*!< Position of DNACK field. */
#define TWIS_ERRORSRC_DNACK_Msk (0x1UL << TWIS_ERRORSRC_DNACK_Pos) /*!< Bit mask of DNACK field. */
#define TWIS_ERRORSRC_DNACK_NotReceived (0UL) /*!< Error did not occur */
#define TWIS_ERRORSRC_DNACK_Received (1UL) /*!< Error occurred */

/* Bit 0 : RX buffer overflow detected, and prevented */
#define TWIS_ERRORSRC_OVERFLOW_Pos (0UL) /*!< Position of OVERFLOW field. */
#define TWIS_ERRORSRC_OVERFLOW_Msk (0x1UL << TWIS_ERRORSRC_OVERFLOW_Pos) /*!< Bit mask of OVERFLOW field. */
#define TWIS_ERRORSRC_OVERFLOW_NotDetected (0UL) /*!< Error did not occur */
#define TWIS_ERRORSRC_OVERFLOW_Detected (1UL) /*!< Error occurred */

/* Register: TWIS_MATCH */
/* Description: Status register indicating which address had a match */

/* Bit 0 : Which of the addresses in {ADDRESS} matched the incoming address */
#define TWIS_MATCH_MATCH_Pos (0UL) /*!< Position of MATCH field. */
#define TWIS_MATCH_MATCH_Msk (0x1UL << TWIS_MATCH_MATCH_Pos) /*!< Bit mask of MATCH field. */

/* Register: TWIS_PINSTATUS */
/* Description: Returns state of signals reflecting the SDA and SCL line status. All fields will return a '0' if DEBUGENABLE is not Enabled. */

/* Bit 3 : State of SDAO register in dataHandler */
#define TWIS_PINSTATUS_SDAO_Pos (3UL) /*!< Position of SDAO field. */
#define TWIS_PINSTATUS_SDAO_Msk (0x1UL << TWIS_PINSTATUS_SDAO_Pos) /*!< Bit mask of SDAO field. */

/* Bit 2 : State of SCLO register in dataHandler */
#define TWIS_PINSTATUS_SCLO_Pos (2UL) /*!< Position of SCLO field. */
#define TWIS_PINSTATUS_SCLO_Msk (0x1UL << TWIS_PINSTATUS_SCLO_Pos) /*!< Bit mask of SCLO field. */

/* Bit 1 : State of SDA line, signal taken after the filer but without synchronizing to the 16 MHz clock */
#define TWIS_PINSTATUS_SDAIFILTERED_Pos (1UL) /*!< Position of SDAIFILTERED field. */
#define TWIS_PINSTATUS_SDAIFILTERED_Msk (0x1UL << TWIS_PINSTATUS_SDAIFILTERED_Pos) /*!< Bit mask of SDAIFILTERED field. */

/* Bit 0 : State of SCL line, signal taken after the filer but without synchronizing to the 16 MHz clock */
#define TWIS_PINSTATUS_SCLIFILTERED_Pos (0UL) /*!< Position of SCLIFILTERED field. */
#define TWIS_PINSTATUS_SCLIFILTERED_Msk (0x1UL << TWIS_PINSTATUS_SCLIFILTERED_Pos) /*!< Bit mask of SCLIFILTERED field. */

/* Register: TWIS_ENABLE */
/* Description: Enable TWIS */

/* Bits 3..0 : Enable or disable TWIS */
#define TWIS_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define TWIS_ENABLE_ENABLE_Msk (0xFUL << TWIS_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define TWIS_ENABLE_ENABLE_Disabled (0UL) /*!< Disable TWIS */
#define TWIS_ENABLE_ENABLE_Enabled (9UL) /*!< Enable TWIS */

/* Register: TWIS_PSEL_SCL */
/* Description: Pin select for SCL signal */

/* Bit 31 : Connection */
#define TWIS_PSEL_SCL_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TWIS_PSEL_SCL_CONNECT_Msk (0x1UL << TWIS_PSEL_SCL_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TWIS_PSEL_SCL_CONNECT_Connected (0UL) /*!< Connect */
#define TWIS_PSEL_SCL_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define TWIS_PSEL_SCL_PORT_Pos (5UL) /*!< Position of PORT field. */
#define TWIS_PSEL_SCL_PORT_Msk (0x1UL << TWIS_PSEL_SCL_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define TWIS_PSEL_SCL_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TWIS_PSEL_SCL_PIN_Msk (0x1FUL << TWIS_PSEL_SCL_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: TWIS_PSEL_SDA */
/* Description: Pin select for SDA signal */

/* Bit 31 : Connection */
#define TWIS_PSEL_SDA_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define TWIS_PSEL_SDA_CONNECT_Msk (0x1UL << TWIS_PSEL_SDA_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define TWIS_PSEL_SDA_CONNECT_Connected (0UL) /*!< Connect */
#define TWIS_PSEL_SDA_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define TWIS_PSEL_SDA_PORT_Pos (5UL) /*!< Position of PORT field. */
#define TWIS_PSEL_SDA_PORT_Msk (0x1UL << TWIS_PSEL_SDA_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define TWIS_PSEL_SDA_PIN_Pos (0UL) /*!< Position of PIN field. */
#define TWIS_PSEL_SDA_PIN_Msk (0x1FUL << TWIS_PSEL_SDA_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: TWIS_RXD_PTR */
/* Description: RXD Data pointer */

/* Bits 31..0 : RXD Data pointer */
#define TWIS_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define TWIS_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: TWIS_RXD_MAXCNT */
/* Description: Maximum number of bytes in RXD buffer */

/* Bits 15..0 : Maximum number of bytes in RXD buffer */
#define TWIS_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define TWIS_RXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIS_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: TWIS_RXD_AMOUNT */
/* Description: Number of bytes transferred in the last RXD transaction */

/* Bits 15..0 : Number of bytes transferred in the last RXD transaction */
#define TWIS_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define TWIS_RXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIS_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: TWIS_RXD_LIST */
/* Description: EasyDMA list type */

/* Bits 1..0 : List type */
#define TWIS_RXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define TWIS_RXD_LIST_LIST_Msk (0x3UL << TWIS_RXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define TWIS_RXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
#define TWIS_RXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */

/* Register: TWIS_TXD_PTR */
/* Description: TXD Data pointer */

/* Bits 31..0 : TXD Data pointer */
#define TWIS_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define TWIS_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << TWIS_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: TWIS_TXD_MAXCNT */
/* Description: Maximum number of bytes in TXD buffer */

/* Bits 15..0 : Maximum number of bytes in TXD buffer */
#define TWIS_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define TWIS_TXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << TWIS_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: TWIS_TXD_AMOUNT */
/* Description: Number of bytes transferred in the last TXD transaction */

/* Bits 15..0 : Number of bytes transferred in the last TXD transaction */
#define TWIS_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define TWIS_TXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << TWIS_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: TWIS_TXD_LIST */
/* Description: EasyDMA list type */

/* Bits 1..0 : List type */
#define TWIS_TXD_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define TWIS_TXD_LIST_LIST_Msk (0x3UL << TWIS_TXD_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define TWIS_TXD_LIST_LIST_Disabled (0UL) /*!< Disable EasyDMA list */
#define TWIS_TXD_LIST_LIST_ArrayList (1UL) /*!< Use array list */

/* Register: TWIS_ADDRESS */
/* Description: Description collection: TWI slave address n */

/* Bits 6..0 : TWI slave address */
#define TWIS_ADDRESS_ADDRESS_Pos (0UL) /*!< Position of ADDRESS field. */
#define TWIS_ADDRESS_ADDRESS_Msk (0x7FUL << TWIS_ADDRESS_ADDRESS_Pos) /*!< Bit mask of ADDRESS field. */

/* Register: TWIS_CONFIG */
/* Description: Configuration register for the address match mechanism */

/* Bit 1 : Enable or disable address matching on ADDRESS[1] */
#define TWIS_CONFIG_ADDRESS1_Pos (1UL) /*!< Position of ADDRESS1 field. */
#define TWIS_CONFIG_ADDRESS1_Msk (0x1UL << TWIS_CONFIG_ADDRESS1_Pos) /*!< Bit mask of ADDRESS1 field. */
#define TWIS_CONFIG_ADDRESS1_Disabled (0UL) /*!< Disabled */
#define TWIS_CONFIG_ADDRESS1_Enabled (1UL) /*!< Enabled */

/* Bit 0 : Enable or disable address matching on ADDRESS[0] */
#define TWIS_CONFIG_ADDRESS0_Pos (0UL) /*!< Position of ADDRESS0 field. */
#define TWIS_CONFIG_ADDRESS0_Msk (0x1UL << TWIS_CONFIG_ADDRESS0_Pos) /*!< Bit mask of ADDRESS0 field. */
#define TWIS_CONFIG_ADDRESS0_Disabled (0UL) /*!< Disabled */
#define TWIS_CONFIG_ADDRESS0_Enabled (1UL) /*!< Enabled */

/* Register: TWIS_INPUTMODE */
/* Description: Input mode */

/* Bits 1..0 : Input mode */
#define TWIS_INPUTMODE_INPUTMODE_Pos (0UL) /*!< Position of INPUTMODE field. */
#define TWIS_INPUTMODE_INPUTMODE_Msk (0x3UL << TWIS_INPUTMODE_INPUTMODE_Pos) /*!< Bit mask of INPUTMODE field. */
#define TWIS_INPUTMODE_INPUTMODE_Analog (0UL) /*!< Analog filtering */
#define TWIS_INPUTMODE_INPUTMODE_Digital (1UL) /*!< Digital filtering */
#define TWIS_INPUTMODE_INPUTMODE_Disabled (2UL) /*!< No filtering */

/* Register: TWIS_DEBUGENABLE */
/* Description: Enable TWIS debug features (PINSTATUS register) */

/* Bit 0 : Enable or disable TWIS */
#define TWIS_DEBUGENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define TWIS_DEBUGENABLE_ENABLE_Msk (0x1UL << TWIS_DEBUGENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define TWIS_DEBUGENABLE_ENABLE_Disabled (0UL) /*!< Disable TWIS */
#define TWIS_DEBUGENABLE_ENABLE_Enabled (1UL) /*!< Enable TWIS debug features */

/* Register: TWIS_ORC */
/* Description: Over-read character. Character sent out in case of an over-read of the transmit buffer. */

/* Bits 7..0 : Over-read character. Character sent out in case of an over-read of the transmit buffer. */
#define TWIS_ORC_ORC_Pos (0UL) /*!< Position of ORC field. */
#define TWIS_ORC_ORC_Msk (0xFFUL << TWIS_ORC_ORC_Pos) /*!< Bit mask of ORC field. */


/* Peripheral: UART */
/* Description: Universal Asynchronous Receiver/Transmitter 0 */

/* Register: UART_TASKS_STARTRX */
/* Description: Start UART receiver */

/* Bit 0 : Start UART receiver */
#define UART_TASKS_STARTRX_TASKS_STARTRX_Pos (0UL) /*!< Position of TASKS_STARTRX field. */
#define UART_TASKS_STARTRX_TASKS_STARTRX_Msk (0x1UL << UART_TASKS_STARTRX_TASKS_STARTRX_Pos) /*!< Bit mask of TASKS_STARTRX field. */
#define UART_TASKS_STARTRX_TASKS_STARTRX_Trigger (1UL) /*!< Trigger task */

/* Register: UART_TASKS_STOPRX */
/* Description: Stop UART receiver */

/* Bit 0 : Stop UART receiver */
#define UART_TASKS_STOPRX_TASKS_STOPRX_Pos (0UL) /*!< Position of TASKS_STOPRX field. */
#define UART_TASKS_STOPRX_TASKS_STOPRX_Msk (0x1UL << UART_TASKS_STOPRX_TASKS_STOPRX_Pos) /*!< Bit mask of TASKS_STOPRX field. */
#define UART_TASKS_STOPRX_TASKS_STOPRX_Trigger (1UL) /*!< Trigger task */

/* Register: UART_TASKS_STARTTX */
/* Description: Start UART transmitter */

/* Bit 0 : Start UART transmitter */
#define UART_TASKS_STARTTX_TASKS_STARTTX_Pos (0UL) /*!< Position of TASKS_STARTTX field. */
#define UART_TASKS_STARTTX_TASKS_STARTTX_Msk (0x1UL << UART_TASKS_STARTTX_TASKS_STARTTX_Pos) /*!< Bit mask of TASKS_STARTTX field. */
#define UART_TASKS_STARTTX_TASKS_STARTTX_Trigger (1UL) /*!< Trigger task */

/* Register: UART_TASKS_STOPTX */
/* Description: Stop UART transmitter */

/* Bit 0 : Stop UART transmitter */
#define UART_TASKS_STOPTX_TASKS_STOPTX_Pos (0UL) /*!< Position of TASKS_STOPTX field. */
#define UART_TASKS_STOPTX_TASKS_STOPTX_Msk (0x1UL << UART_TASKS_STOPTX_TASKS_STOPTX_Pos) /*!< Bit mask of TASKS_STOPTX field. */
#define UART_TASKS_STOPTX_TASKS_STOPTX_Trigger (1UL) /*!< Trigger task */

/* Register: UART_TASKS_SUSPEND */
/* Description: Suspend UART */

/* Bit 0 : Suspend UART */
#define UART_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field. */
#define UART_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << UART_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND field. */
#define UART_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (1UL) /*!< Trigger task */

/* Register: UART_SUBSCRIBE_STARTRX */
/* Description: Subscribe configuration for task STARTRX */

/* Bit 31 :   */
#define UART_SUBSCRIBE_STARTRX_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_SUBSCRIBE_STARTRX_EN_Msk (0x1UL << UART_SUBSCRIBE_STARTRX_EN_Pos) /*!< Bit mask of EN field. */
#define UART_SUBSCRIBE_STARTRX_EN_Disabled (0UL) /*!< Disable subscription */
#define UART_SUBSCRIBE_STARTRX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTRX will subscribe to */
#define UART_SUBSCRIBE_STARTRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_SUBSCRIBE_STARTRX_CHIDX_Msk (0xFFUL << UART_SUBSCRIBE_STARTRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_SUBSCRIBE_STOPRX */
/* Description: Subscribe configuration for task STOPRX */

/* Bit 31 :   */
#define UART_SUBSCRIBE_STOPRX_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_SUBSCRIBE_STOPRX_EN_Msk (0x1UL << UART_SUBSCRIBE_STOPRX_EN_Pos) /*!< Bit mask of EN field. */
#define UART_SUBSCRIBE_STOPRX_EN_Disabled (0UL) /*!< Disable subscription */
#define UART_SUBSCRIBE_STOPRX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOPRX will subscribe to */
#define UART_SUBSCRIBE_STOPRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_SUBSCRIBE_STOPRX_CHIDX_Msk (0xFFUL << UART_SUBSCRIBE_STOPRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_SUBSCRIBE_STARTTX */
/* Description: Subscribe configuration for task STARTTX */

/* Bit 31 :   */
#define UART_SUBSCRIBE_STARTTX_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_SUBSCRIBE_STARTTX_EN_Msk (0x1UL << UART_SUBSCRIBE_STARTTX_EN_Pos) /*!< Bit mask of EN field. */
#define UART_SUBSCRIBE_STARTTX_EN_Disabled (0UL) /*!< Disable subscription */
#define UART_SUBSCRIBE_STARTTX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTTX will subscribe to */
#define UART_SUBSCRIBE_STARTTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_SUBSCRIBE_STARTTX_CHIDX_Msk (0xFFUL << UART_SUBSCRIBE_STARTTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_SUBSCRIBE_STOPTX */
/* Description: Subscribe configuration for task STOPTX */

/* Bit 31 :   */
#define UART_SUBSCRIBE_STOPTX_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_SUBSCRIBE_STOPTX_EN_Msk (0x1UL << UART_SUBSCRIBE_STOPTX_EN_Pos) /*!< Bit mask of EN field. */
#define UART_SUBSCRIBE_STOPTX_EN_Disabled (0UL) /*!< Disable subscription */
#define UART_SUBSCRIBE_STOPTX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOPTX will subscribe to */
#define UART_SUBSCRIBE_STOPTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_SUBSCRIBE_STOPTX_CHIDX_Msk (0xFFUL << UART_SUBSCRIBE_STOPTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_SUBSCRIBE_SUSPEND */
/* Description: Subscribe configuration for task SUSPEND */

/* Bit 31 :   */
#define UART_SUBSCRIBE_SUSPEND_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << UART_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field. */
#define UART_SUBSCRIBE_SUSPEND_EN_Disabled (0UL) /*!< Disable subscription */
#define UART_SUBSCRIBE_SUSPEND_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SUSPEND will subscribe to */
#define UART_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << UART_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_EVENTS_CTS */
/* Description: CTS is activated (set low). Clear To Send. */

/* Bit 0 : CTS is activated (set low). Clear To Send. */
#define UART_EVENTS_CTS_EVENTS_CTS_Pos (0UL) /*!< Position of EVENTS_CTS field. */
#define UART_EVENTS_CTS_EVENTS_CTS_Msk (0x1UL << UART_EVENTS_CTS_EVENTS_CTS_Pos) /*!< Bit mask of EVENTS_CTS field. */
#define UART_EVENTS_CTS_EVENTS_CTS_NotGenerated (0UL) /*!< Event not generated */
#define UART_EVENTS_CTS_EVENTS_CTS_Generated (1UL) /*!< Event generated */

/* Register: UART_EVENTS_NCTS */
/* Description: CTS is deactivated (set high). Not Clear To Send. */

/* Bit 0 : CTS is deactivated (set high). Not Clear To Send. */
#define UART_EVENTS_NCTS_EVENTS_NCTS_Pos (0UL) /*!< Position of EVENTS_NCTS field. */
#define UART_EVENTS_NCTS_EVENTS_NCTS_Msk (0x1UL << UART_EVENTS_NCTS_EVENTS_NCTS_Pos) /*!< Bit mask of EVENTS_NCTS field. */
#define UART_EVENTS_NCTS_EVENTS_NCTS_NotGenerated (0UL) /*!< Event not generated */
#define UART_EVENTS_NCTS_EVENTS_NCTS_Generated (1UL) /*!< Event generated */

/* Register: UART_EVENTS_RXDRDY */
/* Description: Data received in RXD */

/* Bit 0 : Data received in RXD */
#define UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos (0UL) /*!< Position of EVENTS_RXDRDY field. */
#define UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk (0x1UL << UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos) /*!< Bit mask of EVENTS_RXDRDY field. */
#define UART_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated (0UL) /*!< Event not generated */
#define UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated (1UL) /*!< Event generated */

/* Register: UART_EVENTS_TXDRDY */
/* Description: Data sent from TXD */

/* Bit 0 : Data sent from TXD */
#define UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos (0UL) /*!< Position of EVENTS_TXDRDY field. */
#define UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk (0x1UL << UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos) /*!< Bit mask of EVENTS_TXDRDY field. */
#define UART_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated (0UL) /*!< Event not generated */
#define UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated (1UL) /*!< Event generated */

/* Register: UART_EVENTS_ERROR */
/* Description: Error detected */

/* Bit 0 : Error detected */
#define UART_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL) /*!< Position of EVENTS_ERROR field. */
#define UART_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << UART_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field. */
#define UART_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0UL) /*!< Event not generated */
#define UART_EVENTS_ERROR_EVENTS_ERROR_Generated (1UL) /*!< Event generated */

/* Register: UART_EVENTS_RXTO */
/* Description: Receiver timeout */

/* Bit 0 : Receiver timeout */
#define UART_EVENTS_RXTO_EVENTS_RXTO_Pos (0UL) /*!< Position of EVENTS_RXTO field. */
#define UART_EVENTS_RXTO_EVENTS_RXTO_Msk (0x1UL << UART_EVENTS_RXTO_EVENTS_RXTO_Pos) /*!< Bit mask of EVENTS_RXTO field. */
#define UART_EVENTS_RXTO_EVENTS_RXTO_NotGenerated (0UL) /*!< Event not generated */
#define UART_EVENTS_RXTO_EVENTS_RXTO_Generated (1UL) /*!< Event generated */

/* Register: UART_PUBLISH_CTS */
/* Description: Publish configuration for event CTS */

/* Bit 31 :   */
#define UART_PUBLISH_CTS_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_PUBLISH_CTS_EN_Msk (0x1UL << UART_PUBLISH_CTS_EN_Pos) /*!< Bit mask of EN field. */
#define UART_PUBLISH_CTS_EN_Disabled (0UL) /*!< Disable publishing */
#define UART_PUBLISH_CTS_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CTS will publish to. */
#define UART_PUBLISH_CTS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_PUBLISH_CTS_CHIDX_Msk (0xFFUL << UART_PUBLISH_CTS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_PUBLISH_NCTS */
/* Description: Publish configuration for event NCTS */

/* Bit 31 :   */
#define UART_PUBLISH_NCTS_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_PUBLISH_NCTS_EN_Msk (0x1UL << UART_PUBLISH_NCTS_EN_Pos) /*!< Bit mask of EN field. */
#define UART_PUBLISH_NCTS_EN_Disabled (0UL) /*!< Disable publishing */
#define UART_PUBLISH_NCTS_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event NCTS will publish to. */
#define UART_PUBLISH_NCTS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_PUBLISH_NCTS_CHIDX_Msk (0xFFUL << UART_PUBLISH_NCTS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_PUBLISH_RXDRDY */
/* Description: Publish configuration for event RXDRDY */

/* Bit 31 :   */
#define UART_PUBLISH_RXDRDY_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_PUBLISH_RXDRDY_EN_Msk (0x1UL << UART_PUBLISH_RXDRDY_EN_Pos) /*!< Bit mask of EN field. */
#define UART_PUBLISH_RXDRDY_EN_Disabled (0UL) /*!< Disable publishing */
#define UART_PUBLISH_RXDRDY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXDRDY will publish to. */
#define UART_PUBLISH_RXDRDY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_PUBLISH_RXDRDY_CHIDX_Msk (0xFFUL << UART_PUBLISH_RXDRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_PUBLISH_TXDRDY */
/* Description: Publish configuration for event TXDRDY */

/* Bit 31 :   */
#define UART_PUBLISH_TXDRDY_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_PUBLISH_TXDRDY_EN_Msk (0x1UL << UART_PUBLISH_TXDRDY_EN_Pos) /*!< Bit mask of EN field. */
#define UART_PUBLISH_TXDRDY_EN_Disabled (0UL) /*!< Disable publishing */
#define UART_PUBLISH_TXDRDY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXDRDY will publish to. */
#define UART_PUBLISH_TXDRDY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_PUBLISH_TXDRDY_CHIDX_Msk (0xFFUL << UART_PUBLISH_TXDRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_PUBLISH_ERROR */
/* Description: Publish configuration for event ERROR */

/* Bit 31 :   */
#define UART_PUBLISH_ERROR_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_PUBLISH_ERROR_EN_Msk (0x1UL << UART_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field. */
#define UART_PUBLISH_ERROR_EN_Disabled (0UL) /*!< Disable publishing */
#define UART_PUBLISH_ERROR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ERROR will publish to. */
#define UART_PUBLISH_ERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << UART_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_PUBLISH_RXTO */
/* Description: Publish configuration for event RXTO */

/* Bit 31 :   */
#define UART_PUBLISH_RXTO_EN_Pos (31UL) /*!< Position of EN field. */
#define UART_PUBLISH_RXTO_EN_Msk (0x1UL << UART_PUBLISH_RXTO_EN_Pos) /*!< Bit mask of EN field. */
#define UART_PUBLISH_RXTO_EN_Disabled (0UL) /*!< Disable publishing */
#define UART_PUBLISH_RXTO_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXTO will publish to. */
#define UART_PUBLISH_RXTO_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UART_PUBLISH_RXTO_CHIDX_Msk (0xFFUL << UART_PUBLISH_RXTO_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UART_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 4 : Shortcut between event NCTS and task STOPRX */
#define UART_SHORTS_NCTS_STOPRX_Pos (4UL) /*!< Position of NCTS_STOPRX field. */
#define UART_SHORTS_NCTS_STOPRX_Msk (0x1UL << UART_SHORTS_NCTS_STOPRX_Pos) /*!< Bit mask of NCTS_STOPRX field. */
#define UART_SHORTS_NCTS_STOPRX_Disabled (0UL) /*!< Disable shortcut */
#define UART_SHORTS_NCTS_STOPRX_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event CTS and task STARTRX */
#define UART_SHORTS_CTS_STARTRX_Pos (3UL) /*!< Position of CTS_STARTRX field. */
#define UART_SHORTS_CTS_STARTRX_Msk (0x1UL << UART_SHORTS_CTS_STARTRX_Pos) /*!< Bit mask of CTS_STARTRX field. */
#define UART_SHORTS_CTS_STARTRX_Disabled (0UL) /*!< Disable shortcut */
#define UART_SHORTS_CTS_STARTRX_Enabled (1UL) /*!< Enable shortcut */

/* Register: UART_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 17 : Enable or disable interrupt for event RXTO */
#define UART_INTEN_RXTO_Pos (17UL) /*!< Position of RXTO field. */
#define UART_INTEN_RXTO_Msk (0x1UL << UART_INTEN_RXTO_Pos) /*!< Bit mask of RXTO field. */
#define UART_INTEN_RXTO_Disabled (0UL) /*!< Disable */
#define UART_INTEN_RXTO_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event ERROR */
#define UART_INTEN_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define UART_INTEN_ERROR_Msk (0x1UL << UART_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define UART_INTEN_ERROR_Disabled (0UL) /*!< Disable */
#define UART_INTEN_ERROR_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event TXDRDY */
#define UART_INTEN_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
#define UART_INTEN_TXDRDY_Msk (0x1UL << UART_INTEN_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
#define UART_INTEN_TXDRDY_Disabled (0UL) /*!< Disable */
#define UART_INTEN_TXDRDY_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event RXDRDY */
#define UART_INTEN_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
#define UART_INTEN_RXDRDY_Msk (0x1UL << UART_INTEN_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
#define UART_INTEN_RXDRDY_Disabled (0UL) /*!< Disable */
#define UART_INTEN_RXDRDY_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event NCTS */
#define UART_INTEN_NCTS_Pos (1UL) /*!< Position of NCTS field. */
#define UART_INTEN_NCTS_Msk (0x1UL << UART_INTEN_NCTS_Pos) /*!< Bit mask of NCTS field. */
#define UART_INTEN_NCTS_Disabled (0UL) /*!< Disable */
#define UART_INTEN_NCTS_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event CTS */
#define UART_INTEN_CTS_Pos (0UL) /*!< Position of CTS field. */
#define UART_INTEN_CTS_Msk (0x1UL << UART_INTEN_CTS_Pos) /*!< Bit mask of CTS field. */
#define UART_INTEN_CTS_Disabled (0UL) /*!< Disable */
#define UART_INTEN_CTS_Enabled (1UL) /*!< Enable */

/* Register: UART_INTENSET */
/* Description: Enable interrupt */

/* Bit 17 : Write '1' to enable interrupt for event RXTO */
#define UART_INTENSET_RXTO_Pos (17UL) /*!< Position of RXTO field. */
#define UART_INTENSET_RXTO_Msk (0x1UL << UART_INTENSET_RXTO_Pos) /*!< Bit mask of RXTO field. */
#define UART_INTENSET_RXTO_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENSET_RXTO_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENSET_RXTO_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event ERROR */
#define UART_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define UART_INTENSET_ERROR_Msk (0x1UL << UART_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define UART_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENSET_ERROR_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event TXDRDY */
#define UART_INTENSET_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
#define UART_INTENSET_TXDRDY_Msk (0x1UL << UART_INTENSET_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
#define UART_INTENSET_TXDRDY_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENSET_TXDRDY_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENSET_TXDRDY_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event RXDRDY */
#define UART_INTENSET_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
#define UART_INTENSET_RXDRDY_Msk (0x1UL << UART_INTENSET_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
#define UART_INTENSET_RXDRDY_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENSET_RXDRDY_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENSET_RXDRDY_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event NCTS */
#define UART_INTENSET_NCTS_Pos (1UL) /*!< Position of NCTS field. */
#define UART_INTENSET_NCTS_Msk (0x1UL << UART_INTENSET_NCTS_Pos) /*!< Bit mask of NCTS field. */
#define UART_INTENSET_NCTS_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENSET_NCTS_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENSET_NCTS_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event CTS */
#define UART_INTENSET_CTS_Pos (0UL) /*!< Position of CTS field. */
#define UART_INTENSET_CTS_Msk (0x1UL << UART_INTENSET_CTS_Pos) /*!< Bit mask of CTS field. */
#define UART_INTENSET_CTS_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENSET_CTS_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENSET_CTS_Set (1UL) /*!< Enable */

/* Register: UART_INTENCLR */
/* Description: Disable interrupt */

/* Bit 17 : Write '1' to disable interrupt for event RXTO */
#define UART_INTENCLR_RXTO_Pos (17UL) /*!< Position of RXTO field. */
#define UART_INTENCLR_RXTO_Msk (0x1UL << UART_INTENCLR_RXTO_Pos) /*!< Bit mask of RXTO field. */
#define UART_INTENCLR_RXTO_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENCLR_RXTO_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENCLR_RXTO_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event ERROR */
#define UART_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define UART_INTENCLR_ERROR_Msk (0x1UL << UART_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define UART_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENCLR_ERROR_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event TXDRDY */
#define UART_INTENCLR_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
#define UART_INTENCLR_TXDRDY_Msk (0x1UL << UART_INTENCLR_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
#define UART_INTENCLR_TXDRDY_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENCLR_TXDRDY_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENCLR_TXDRDY_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event RXDRDY */
#define UART_INTENCLR_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
#define UART_INTENCLR_RXDRDY_Msk (0x1UL << UART_INTENCLR_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
#define UART_INTENCLR_RXDRDY_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENCLR_RXDRDY_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENCLR_RXDRDY_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event NCTS */
#define UART_INTENCLR_NCTS_Pos (1UL) /*!< Position of NCTS field. */
#define UART_INTENCLR_NCTS_Msk (0x1UL << UART_INTENCLR_NCTS_Pos) /*!< Bit mask of NCTS field. */
#define UART_INTENCLR_NCTS_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENCLR_NCTS_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENCLR_NCTS_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event CTS */
#define UART_INTENCLR_CTS_Pos (0UL) /*!< Position of CTS field. */
#define UART_INTENCLR_CTS_Msk (0x1UL << UART_INTENCLR_CTS_Pos) /*!< Bit mask of CTS field. */
#define UART_INTENCLR_CTS_Disabled (0UL) /*!< Read: Disabled */
#define UART_INTENCLR_CTS_Enabled (1UL) /*!< Read: Enabled */
#define UART_INTENCLR_CTS_Clear (1UL) /*!< Disable */

/* Register: UART_ERRORSRC */
/* Description: Error source */

/* Bit 3 : Break condition */
#define UART_ERRORSRC_BREAK_Pos (3UL) /*!< Position of BREAK field. */
#define UART_ERRORSRC_BREAK_Msk (0x1UL << UART_ERRORSRC_BREAK_Pos) /*!< Bit mask of BREAK field. */
#define UART_ERRORSRC_BREAK_NotPresent (0UL) /*!< Read: error not present */
#define UART_ERRORSRC_BREAK_Present (1UL) /*!< Read: error present */

/* Bit 2 : Framing error occurred */
#define UART_ERRORSRC_FRAMING_Pos (2UL) /*!< Position of FRAMING field. */
#define UART_ERRORSRC_FRAMING_Msk (0x1UL << UART_ERRORSRC_FRAMING_Pos) /*!< Bit mask of FRAMING field. */
#define UART_ERRORSRC_FRAMING_NotPresent (0UL) /*!< Read: error not present */
#define UART_ERRORSRC_FRAMING_Present (1UL) /*!< Read: error present */

/* Bit 1 : Parity error */
#define UART_ERRORSRC_PARITY_Pos (1UL) /*!< Position of PARITY field. */
#define UART_ERRORSRC_PARITY_Msk (0x1UL << UART_ERRORSRC_PARITY_Pos) /*!< Bit mask of PARITY field. */
#define UART_ERRORSRC_PARITY_NotPresent (0UL) /*!< Read: error not present */
#define UART_ERRORSRC_PARITY_Present (1UL) /*!< Read: error present */

/* Bit 0 : Overrun error */
#define UART_ERRORSRC_OVERRUN_Pos (0UL) /*!< Position of OVERRUN field. */
#define UART_ERRORSRC_OVERRUN_Msk (0x1UL << UART_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
#define UART_ERRORSRC_OVERRUN_NotPresent (0UL) /*!< Read: error not present */
#define UART_ERRORSRC_OVERRUN_Present (1UL) /*!< Read: error present */

/* Register: UART_ENABLE */
/* Description: Enable UART */

/* Bits 3..0 : Enable or disable UART */
#define UART_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define UART_ENABLE_ENABLE_Msk (0xFUL << UART_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define UART_ENABLE_ENABLE_Disabled (0UL) /*!< Disable UART */
#define UART_ENABLE_ENABLE_Enabled (4UL) /*!< Enable UART */

/* Register: UART_PSEL_RTS */
/* Description: Pin select for RTS */

/* Bit 31 : Connection */
#define UART_PSEL_RTS_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define UART_PSEL_RTS_CONNECT_Msk (0x1UL << UART_PSEL_RTS_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define UART_PSEL_RTS_CONNECT_Connected (0UL) /*!< Connect */
#define UART_PSEL_RTS_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define UART_PSEL_RTS_PORT_Pos (5UL) /*!< Position of PORT field. */
#define UART_PSEL_RTS_PORT_Msk (0x1UL << UART_PSEL_RTS_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define UART_PSEL_RTS_PIN_Pos (0UL) /*!< Position of PIN field. */
#define UART_PSEL_RTS_PIN_Msk (0x1FUL << UART_PSEL_RTS_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: UART_PSEL_TXD */
/* Description: Pin select for TXD */

/* Bit 31 : Connection */
#define UART_PSEL_TXD_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define UART_PSEL_TXD_CONNECT_Msk (0x1UL << UART_PSEL_TXD_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define UART_PSEL_TXD_CONNECT_Connected (0UL) /*!< Connect */
#define UART_PSEL_TXD_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define UART_PSEL_TXD_PORT_Pos (5UL) /*!< Position of PORT field. */
#define UART_PSEL_TXD_PORT_Msk (0x1UL << UART_PSEL_TXD_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define UART_PSEL_TXD_PIN_Pos (0UL) /*!< Position of PIN field. */
#define UART_PSEL_TXD_PIN_Msk (0x1FUL << UART_PSEL_TXD_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: UART_PSEL_CTS */
/* Description: Pin select for CTS */

/* Bit 31 : Connection */
#define UART_PSEL_CTS_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define UART_PSEL_CTS_CONNECT_Msk (0x1UL << UART_PSEL_CTS_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define UART_PSEL_CTS_CONNECT_Connected (0UL) /*!< Connect */
#define UART_PSEL_CTS_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define UART_PSEL_CTS_PORT_Pos (5UL) /*!< Position of PORT field. */
#define UART_PSEL_CTS_PORT_Msk (0x1UL << UART_PSEL_CTS_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define UART_PSEL_CTS_PIN_Pos (0UL) /*!< Position of PIN field. */
#define UART_PSEL_CTS_PIN_Msk (0x1FUL << UART_PSEL_CTS_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: UART_PSEL_RXD */
/* Description: Pin select for RXD */

/* Bit 31 : Connection */
#define UART_PSEL_RXD_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define UART_PSEL_RXD_CONNECT_Msk (0x1UL << UART_PSEL_RXD_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define UART_PSEL_RXD_CONNECT_Connected (0UL) /*!< Connect */
#define UART_PSEL_RXD_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define UART_PSEL_RXD_PORT_Pos (5UL) /*!< Position of PORT field. */
#define UART_PSEL_RXD_PORT_Msk (0x1UL << UART_PSEL_RXD_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define UART_PSEL_RXD_PIN_Pos (0UL) /*!< Position of PIN field. */
#define UART_PSEL_RXD_PIN_Msk (0x1FUL << UART_PSEL_RXD_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: UART_RXD */
/* Description: RXD register */

/* Bits 7..0 : RX data received in previous transfers, double buffered */
#define UART_RXD_RXD_Pos (0UL) /*!< Position of RXD field. */
#define UART_RXD_RXD_Msk (0xFFUL << UART_RXD_RXD_Pos) /*!< Bit mask of RXD field. */

/* Register: UART_TXD */
/* Description: TXD register */

/* Bits 7..0 : TX data to be transferred */
#define UART_TXD_TXD_Pos (0UL) /*!< Position of TXD field. */
#define UART_TXD_TXD_Msk (0xFFUL << UART_TXD_TXD_Pos) /*!< Bit mask of TXD field. */

/* Register: UART_BAUDRATE */
/* Description: Baud rate. Accuracy depends on the HFCLK source selected. */

/* Bits 31..0 : Baud rate */
#define UART_BAUDRATE_BAUDRATE_Pos (0UL) /*!< Position of BAUDRATE field. */
#define UART_BAUDRATE_BAUDRATE_Msk (0xFFFFFFFFUL << UART_BAUDRATE_BAUDRATE_Pos) /*!< Bit mask of BAUDRATE field. */
#define UART_BAUDRATE_BAUDRATE_Baud1200 (0x0004F000UL) /*!< 1200 baud (actual rate: 1205) */
#define UART_BAUDRATE_BAUDRATE_Baud2400 (0x0009D000UL) /*!< 2400 baud (actual rate: 2396) */
#define UART_BAUDRATE_BAUDRATE_Baud4800 (0x0013B000UL) /*!< 4800 baud (actual rate: 4808) */
#define UART_BAUDRATE_BAUDRATE_Baud9600 (0x00275000UL) /*!< 9600 baud (actual rate: 9598) */
#define UART_BAUDRATE_BAUDRATE_Baud14400 (0x003B0000UL) /*!< 14400 baud (actual rate: 14414) */
#define UART_BAUDRATE_BAUDRATE_Baud19200 (0x004EA000UL) /*!< 19200 baud (actual rate: 19208) */
#define UART_BAUDRATE_BAUDRATE_Baud28800 (0x0075F000UL) /*!< 28800 baud (actual rate: 28829) */
#define UART_BAUDRATE_BAUDRATE_Baud31250 (0x00800000UL) /*!< 31250 baud */
#define UART_BAUDRATE_BAUDRATE_Baud38400 (0x009D5000UL) /*!< 38400 baud (actual rate: 38462) */
#define UART_BAUDRATE_BAUDRATE_Baud56000 (0x00E50000UL) /*!< 56000 baud (actual rate: 55944) */
#define UART_BAUDRATE_BAUDRATE_Baud57600 (0x00EBF000UL) /*!< 57600 baud (actual rate: 57762) */
#define UART_BAUDRATE_BAUDRATE_Baud76800 (0x013A9000UL) /*!< 76800 baud (actual rate: 76923) */
#define UART_BAUDRATE_BAUDRATE_Baud115200 (0x01D7E000UL) /*!< 115200 baud (actual rate: 115942) */
#define UART_BAUDRATE_BAUDRATE_Baud230400 (0x03AFB000UL) /*!< 230400 baud (actual rate: 231884) */
#define UART_BAUDRATE_BAUDRATE_Baud250000 (0x04000000UL) /*!< 250000 baud */
#define UART_BAUDRATE_BAUDRATE_Baud460800 (0x075F7000UL) /*!< 460800 baud (actual rate: 470588) */
#define UART_BAUDRATE_BAUDRATE_Baud921600 (0x0EBED000UL) /*!< 921600 baud (actual rate: 941176) */
#define UART_BAUDRATE_BAUDRATE_Baud1M (0x10000000UL) /*!< 1Mega baud */

/* Register: UART_CONFIG */
/* Description: Configuration of parity and hardware flow control */

/* Bits 3..1 : Parity */
#define UART_CONFIG_PARITY_Pos (1UL) /*!< Position of PARITY field. */
#define UART_CONFIG_PARITY_Msk (0x7UL << UART_CONFIG_PARITY_Pos) /*!< Bit mask of PARITY field. */
#define UART_CONFIG_PARITY_Excluded (0x0UL) /*!< Exclude parity bit */
#define UART_CONFIG_PARITY_Included (0x7UL) /*!< Include parity bit */

/* Bit 0 : Hardware flow control */
#define UART_CONFIG_HWFC_Pos (0UL) /*!< Position of HWFC field. */
#define UART_CONFIG_HWFC_Msk (0x1UL << UART_CONFIG_HWFC_Pos) /*!< Bit mask of HWFC field. */
#define UART_CONFIG_HWFC_Disabled (0UL) /*!< Disabled */
#define UART_CONFIG_HWFC_Enabled (1UL) /*!< Enabled */

/* Register: UART_POWER */
/* Description: Peripheral power control */

/* Bit 0 : Peripheral power control. The peripheral and its registers will be reset to its initial state by switching the peripheral off and then back on again. */
#define UART_POWER_POWER_Pos (0UL) /*!< Position of POWER field. */
#define UART_POWER_POWER_Msk (0x1UL << UART_POWER_POWER_Pos) /*!< Bit mask of POWER field. */
#define UART_POWER_POWER_Disabled (0UL) /*!< Peripheral is powered off */
#define UART_POWER_POWER_Enabled (1UL) /*!< Peripheral is powered on */


/* Peripheral: UARTE */
/* Description: UART with EasyDMA 0 */

/* Register: UARTE_TASKS_STARTRX */
/* Description: Start UART receiver */

/* Bit 0 : Start UART receiver */
#define UARTE_TASKS_STARTRX_TASKS_STARTRX_Pos (0UL) /*!< Position of TASKS_STARTRX field. */
#define UARTE_TASKS_STARTRX_TASKS_STARTRX_Msk (0x1UL << UARTE_TASKS_STARTRX_TASKS_STARTRX_Pos) /*!< Bit mask of TASKS_STARTRX field. */
#define UARTE_TASKS_STARTRX_TASKS_STARTRX_Trigger (1UL) /*!< Trigger task */

/* Register: UARTE_TASKS_STOPRX */
/* Description: Stop UART receiver */

/* Bit 0 : Stop UART receiver */
#define UARTE_TASKS_STOPRX_TASKS_STOPRX_Pos (0UL) /*!< Position of TASKS_STOPRX field. */
#define UARTE_TASKS_STOPRX_TASKS_STOPRX_Msk (0x1UL << UARTE_TASKS_STOPRX_TASKS_STOPRX_Pos) /*!< Bit mask of TASKS_STOPRX field. */
#define UARTE_TASKS_STOPRX_TASKS_STOPRX_Trigger (1UL) /*!< Trigger task */

/* Register: UARTE_TASKS_STARTTX */
/* Description: Start UART transmitter */

/* Bit 0 : Start UART transmitter */
#define UARTE_TASKS_STARTTX_TASKS_STARTTX_Pos (0UL) /*!< Position of TASKS_STARTTX field. */
#define UARTE_TASKS_STARTTX_TASKS_STARTTX_Msk (0x1UL << UARTE_TASKS_STARTTX_TASKS_STARTTX_Pos) /*!< Bit mask of TASKS_STARTTX field. */
#define UARTE_TASKS_STARTTX_TASKS_STARTTX_Trigger (1UL) /*!< Trigger task */

/* Register: UARTE_TASKS_STOPTX */
/* Description: Stop UART transmitter */

/* Bit 0 : Stop UART transmitter */
#define UARTE_TASKS_STOPTX_TASKS_STOPTX_Pos (0UL) /*!< Position of TASKS_STOPTX field. */
#define UARTE_TASKS_STOPTX_TASKS_STOPTX_Msk (0x1UL << UARTE_TASKS_STOPTX_TASKS_STOPTX_Pos) /*!< Bit mask of TASKS_STOPTX field. */
#define UARTE_TASKS_STOPTX_TASKS_STOPTX_Trigger (1UL) /*!< Trigger task */

/* Register: UARTE_TASKS_SUSPEND */
/* Description: Suspend UART transaction */

/* Bit 0 : Suspend UART transaction */
#define UARTE_TASKS_SUSPEND_TASKS_SUSPEND_Pos (0UL) /*!< Position of TASKS_SUSPEND field. */
#define UARTE_TASKS_SUSPEND_TASKS_SUSPEND_Msk (0x1UL << UARTE_TASKS_SUSPEND_TASKS_SUSPEND_Pos) /*!< Bit mask of TASKS_SUSPEND field. */
#define UARTE_TASKS_SUSPEND_TASKS_SUSPEND_Trigger (1UL) /*!< Trigger task */

/* Register: UARTE_TASKS_RESUME */
/* Description: Resume UART transaction */

/* Bit 0 : Resume UART transaction */
#define UARTE_TASKS_RESUME_TASKS_RESUME_Pos (0UL) /*!< Position of TASKS_RESUME field. */
#define UARTE_TASKS_RESUME_TASKS_RESUME_Msk (0x1UL << UARTE_TASKS_RESUME_TASKS_RESUME_Pos) /*!< Bit mask of TASKS_RESUME field. */
#define UARTE_TASKS_RESUME_TASKS_RESUME_Trigger (1UL) /*!< Trigger task */

/* Register: UARTE_TASKS_FLUSHRX */
/* Description: Flush RX FIFO into RX buffer */

/* Bit 0 : Flush RX FIFO into RX buffer */
#define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos (0UL) /*!< Position of TASKS_FLUSHRX field. */
#define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Msk (0x1UL << UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos) /*!< Bit mask of TASKS_FLUSHRX field. */
#define UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Trigger (1UL) /*!< Trigger task */

/* Register: UARTE_SUBSCRIBE_STARTRX */
/* Description: Subscribe configuration for task STARTRX */

/* Bit 31 :   */
#define UARTE_SUBSCRIBE_STARTRX_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_SUBSCRIBE_STARTRX_EN_Msk (0x1UL << UARTE_SUBSCRIBE_STARTRX_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_SUBSCRIBE_STARTRX_EN_Disabled (0UL) /*!< Disable subscription */
#define UARTE_SUBSCRIBE_STARTRX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTRX will subscribe to */
#define UARTE_SUBSCRIBE_STARTRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_SUBSCRIBE_STARTRX_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_STARTRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_SUBSCRIBE_STOPRX */
/* Description: Subscribe configuration for task STOPRX */

/* Bit 31 :   */
#define UARTE_SUBSCRIBE_STOPRX_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_SUBSCRIBE_STOPRX_EN_Msk (0x1UL << UARTE_SUBSCRIBE_STOPRX_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_SUBSCRIBE_STOPRX_EN_Disabled (0UL) /*!< Disable subscription */
#define UARTE_SUBSCRIBE_STOPRX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOPRX will subscribe to */
#define UARTE_SUBSCRIBE_STOPRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_SUBSCRIBE_STOPRX_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_STOPRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_SUBSCRIBE_STARTTX */
/* Description: Subscribe configuration for task STARTTX */

/* Bit 31 :   */
#define UARTE_SUBSCRIBE_STARTTX_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_SUBSCRIBE_STARTTX_EN_Msk (0x1UL << UARTE_SUBSCRIBE_STARTTX_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_SUBSCRIBE_STARTTX_EN_Disabled (0UL) /*!< Disable subscription */
#define UARTE_SUBSCRIBE_STARTTX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTTX will subscribe to */
#define UARTE_SUBSCRIBE_STARTTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_SUBSCRIBE_STARTTX_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_STARTTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_SUBSCRIBE_STOPTX */
/* Description: Subscribe configuration for task STOPTX */

/* Bit 31 :   */
#define UARTE_SUBSCRIBE_STOPTX_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_SUBSCRIBE_STOPTX_EN_Msk (0x1UL << UARTE_SUBSCRIBE_STOPTX_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_SUBSCRIBE_STOPTX_EN_Disabled (0UL) /*!< Disable subscription */
#define UARTE_SUBSCRIBE_STOPTX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOPTX will subscribe to */
#define UARTE_SUBSCRIBE_STOPTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_SUBSCRIBE_STOPTX_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_STOPTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_SUBSCRIBE_SUSPEND */
/* Description: Subscribe configuration for task SUSPEND */

/* Bit 31 :   */
#define UARTE_SUBSCRIBE_SUSPEND_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_SUBSCRIBE_SUSPEND_EN_Msk (0x1UL << UARTE_SUBSCRIBE_SUSPEND_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_SUBSCRIBE_SUSPEND_EN_Disabled (0UL) /*!< Disable subscription */
#define UARTE_SUBSCRIBE_SUSPEND_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task SUSPEND will subscribe to */
#define UARTE_SUBSCRIBE_SUSPEND_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_SUBSCRIBE_SUSPEND_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_SUSPEND_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_SUBSCRIBE_RESUME */
/* Description: Subscribe configuration for task RESUME */

/* Bit 31 :   */
#define UARTE_SUBSCRIBE_RESUME_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_SUBSCRIBE_RESUME_EN_Msk (0x1UL << UARTE_SUBSCRIBE_RESUME_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_SUBSCRIBE_RESUME_EN_Disabled (0UL) /*!< Disable subscription */
#define UARTE_SUBSCRIBE_RESUME_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task RESUME will subscribe to */
#define UARTE_SUBSCRIBE_RESUME_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_SUBSCRIBE_RESUME_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_RESUME_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_SUBSCRIBE_FLUSHRX */
/* Description: Subscribe configuration for task FLUSHRX */

/* Bit 31 :   */
#define UARTE_SUBSCRIBE_FLUSHRX_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_SUBSCRIBE_FLUSHRX_EN_Msk (0x1UL << UARTE_SUBSCRIBE_FLUSHRX_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_SUBSCRIBE_FLUSHRX_EN_Disabled (0UL) /*!< Disable subscription */
#define UARTE_SUBSCRIBE_FLUSHRX_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task FLUSHRX will subscribe to */
#define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Msk (0xFFUL << UARTE_SUBSCRIBE_FLUSHRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_EVENTS_CTS */
/* Description: CTS is activated (set low). Clear To Send. */

/* Bit 0 : CTS is activated (set low). Clear To Send. */
#define UARTE_EVENTS_CTS_EVENTS_CTS_Pos (0UL) /*!< Position of EVENTS_CTS field. */
#define UARTE_EVENTS_CTS_EVENTS_CTS_Msk (0x1UL << UARTE_EVENTS_CTS_EVENTS_CTS_Pos) /*!< Bit mask of EVENTS_CTS field. */
#define UARTE_EVENTS_CTS_EVENTS_CTS_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_CTS_EVENTS_CTS_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_NCTS */
/* Description: CTS is deactivated (set high). Not Clear To Send. */

/* Bit 0 : CTS is deactivated (set high). Not Clear To Send. */
#define UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos (0UL) /*!< Position of EVENTS_NCTS field. */
#define UARTE_EVENTS_NCTS_EVENTS_NCTS_Msk (0x1UL << UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos) /*!< Bit mask of EVENTS_NCTS field. */
#define UARTE_EVENTS_NCTS_EVENTS_NCTS_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_NCTS_EVENTS_NCTS_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_RXDRDY */
/* Description: Data received in RXD (but potentially not yet transferred to Data RAM) */

/* Bit 0 : Data received in RXD (but potentially not yet transferred to Data RAM) */
#define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos (0UL) /*!< Position of EVENTS_RXDRDY field. */
#define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk (0x1UL << UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos) /*!< Bit mask of EVENTS_RXDRDY field. */
#define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_ENDRX */
/* Description: Receive buffer is filled up */

/* Bit 0 : Receive buffer is filled up */
#define UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Pos (0UL) /*!< Position of EVENTS_ENDRX field. */
#define UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Msk (0x1UL << UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Pos) /*!< Bit mask of EVENTS_ENDRX field. */
#define UARTE_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_TXDRDY */
/* Description: Data sent from TXD */

/* Bit 0 : Data sent from TXD */
#define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos (0UL) /*!< Position of EVENTS_TXDRDY field. */
#define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk (0x1UL << UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos) /*!< Bit mask of EVENTS_TXDRDY field. */
#define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_ENDTX */
/* Description: Last TX byte transmitted */

/* Bit 0 : Last TX byte transmitted */
#define UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Pos (0UL) /*!< Position of EVENTS_ENDTX field. */
#define UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Msk (0x1UL << UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Pos) /*!< Bit mask of EVENTS_ENDTX field. */
#define UARTE_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_ERROR */
/* Description: Error detected */

/* Bit 0 : Error detected */
#define UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos (0UL) /*!< Position of EVENTS_ERROR field. */
#define UARTE_EVENTS_ERROR_EVENTS_ERROR_Msk (0x1UL << UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos) /*!< Bit mask of EVENTS_ERROR field. */
#define UARTE_EVENTS_ERROR_EVENTS_ERROR_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_ERROR_EVENTS_ERROR_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_RXTO */
/* Description: Receiver timeout */

/* Bit 0 : Receiver timeout */
#define UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos (0UL) /*!< Position of EVENTS_RXTO field. */
#define UARTE_EVENTS_RXTO_EVENTS_RXTO_Msk (0x1UL << UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos) /*!< Bit mask of EVENTS_RXTO field. */
#define UARTE_EVENTS_RXTO_EVENTS_RXTO_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_RXTO_EVENTS_RXTO_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_RXSTARTED */
/* Description: UART receiver has started */

/* Bit 0 : UART receiver has started */
#define UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos (0UL) /*!< Position of EVENTS_RXSTARTED field. */
#define UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk (0x1UL << UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos) /*!< Bit mask of EVENTS_RXSTARTED field. */
#define UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_TXSTARTED */
/* Description: UART transmitter has started */

/* Bit 0 : UART transmitter has started */
#define UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos (0UL) /*!< Position of EVENTS_TXSTARTED field. */
#define UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk (0x1UL << UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos) /*!< Bit mask of EVENTS_TXSTARTED field. */
#define UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_RTS */
/* Description: RX FIFO has only room for four more bytes before it overflows */

/* Bit 0 : RX FIFO has only room for four more bytes before it overflows */
#define UARTE_EVENTS_RTS_EVENTS_RTS_Pos (0UL) /*!< Position of EVENTS_RTS field. */
#define UARTE_EVENTS_RTS_EVENTS_RTS_Msk (0x1UL << UARTE_EVENTS_RTS_EVENTS_RTS_Pos) /*!< Bit mask of EVENTS_RTS field. */
#define UARTE_EVENTS_RTS_EVENTS_RTS_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_RTS_EVENTS_RTS_Generated (1UL) /*!< Event generated */

/* Register: UARTE_EVENTS_TXSTOPPED */
/* Description: Transmitter stopped */

/* Bit 0 : Transmitter stopped */
#define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos (0UL) /*!< Position of EVENTS_TXSTOPPED field. */
#define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Msk (0x1UL << UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos) /*!< Bit mask of EVENTS_TXSTOPPED field. */
#define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_NotGenerated (0UL) /*!< Event not generated */
#define UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Generated (1UL) /*!< Event generated */

/* Register: UARTE_PUBLISH_CTS */
/* Description: Publish configuration for event CTS */

/* Bit 31 :   */
#define UARTE_PUBLISH_CTS_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_CTS_EN_Msk (0x1UL << UARTE_PUBLISH_CTS_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_CTS_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_CTS_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event CTS will publish to. */
#define UARTE_PUBLISH_CTS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_CTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_CTS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_NCTS */
/* Description: Publish configuration for event NCTS */

/* Bit 31 :   */
#define UARTE_PUBLISH_NCTS_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_NCTS_EN_Msk (0x1UL << UARTE_PUBLISH_NCTS_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_NCTS_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_NCTS_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event NCTS will publish to. */
#define UARTE_PUBLISH_NCTS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_NCTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_NCTS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_RXDRDY */
/* Description: Publish configuration for event RXDRDY */

/* Bit 31 :   */
#define UARTE_PUBLISH_RXDRDY_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_RXDRDY_EN_Msk (0x1UL << UARTE_PUBLISH_RXDRDY_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_RXDRDY_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_RXDRDY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXDRDY will publish to. */
#define UARTE_PUBLISH_RXDRDY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_RXDRDY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXDRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_ENDRX */
/* Description: Publish configuration for event ENDRX */

/* Bit 31 :   */
#define UARTE_PUBLISH_ENDRX_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_ENDRX_EN_Msk (0x1UL << UARTE_PUBLISH_ENDRX_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_ENDRX_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_ENDRX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDRX will publish to. */
#define UARTE_PUBLISH_ENDRX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_ENDRX_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_ENDRX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_TXDRDY */
/* Description: Publish configuration for event TXDRDY */

/* Bit 31 :   */
#define UARTE_PUBLISH_TXDRDY_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_TXDRDY_EN_Msk (0x1UL << UARTE_PUBLISH_TXDRDY_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_TXDRDY_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_TXDRDY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXDRDY will publish to. */
#define UARTE_PUBLISH_TXDRDY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_TXDRDY_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXDRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_ENDTX */
/* Description: Publish configuration for event ENDTX */

/* Bit 31 :   */
#define UARTE_PUBLISH_ENDTX_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_ENDTX_EN_Msk (0x1UL << UARTE_PUBLISH_ENDTX_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_ENDTX_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_ENDTX_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDTX will publish to. */
#define UARTE_PUBLISH_ENDTX_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_ENDTX_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_ENDTX_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_ERROR */
/* Description: Publish configuration for event ERROR */

/* Bit 31 :   */
#define UARTE_PUBLISH_ERROR_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_ERROR_EN_Msk (0x1UL << UARTE_PUBLISH_ERROR_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_ERROR_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_ERROR_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ERROR will publish to. */
#define UARTE_PUBLISH_ERROR_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_ERROR_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_ERROR_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_RXTO */
/* Description: Publish configuration for event RXTO */

/* Bit 31 :   */
#define UARTE_PUBLISH_RXTO_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_RXTO_EN_Msk (0x1UL << UARTE_PUBLISH_RXTO_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_RXTO_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_RXTO_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXTO will publish to. */
#define UARTE_PUBLISH_RXTO_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_RXTO_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXTO_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_RXSTARTED */
/* Description: Publish configuration for event RXSTARTED */

/* Bit 31 :   */
#define UARTE_PUBLISH_RXSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_RXSTARTED_EN_Msk (0x1UL << UARTE_PUBLISH_RXSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_RXSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_RXSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RXSTARTED will publish to. */
#define UARTE_PUBLISH_RXSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_RXSTARTED_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RXSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_TXSTARTED */
/* Description: Publish configuration for event TXSTARTED */

/* Bit 31 :   */
#define UARTE_PUBLISH_TXSTARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_TXSTARTED_EN_Msk (0x1UL << UARTE_PUBLISH_TXSTARTED_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_TXSTARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_TXSTARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXSTARTED will publish to. */
#define UARTE_PUBLISH_TXSTARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_TXSTARTED_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXSTARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_RTS */
/* Description: Publish configuration for event RTS */

/* Bit 31 :   */
#define UARTE_PUBLISH_RTS_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_RTS_EN_Msk (0x1UL << UARTE_PUBLISH_RTS_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_RTS_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_RTS_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event RTS will publish to. */
#define UARTE_PUBLISH_RTS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_RTS_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_RTS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_PUBLISH_TXSTOPPED */
/* Description: Publish configuration for event TXSTOPPED */

/* Bit 31 :   */
#define UARTE_PUBLISH_TXSTOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define UARTE_PUBLISH_TXSTOPPED_EN_Msk (0x1UL << UARTE_PUBLISH_TXSTOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define UARTE_PUBLISH_TXSTOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define UARTE_PUBLISH_TXSTOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TXSTOPPED will publish to. */
#define UARTE_PUBLISH_TXSTOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define UARTE_PUBLISH_TXSTOPPED_CHIDX_Msk (0xFFUL << UARTE_PUBLISH_TXSTOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: UARTE_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 6 : Shortcut between event ENDRX and task STOPRX */
#define UARTE_SHORTS_ENDRX_STOPRX_Pos (6UL) /*!< Position of ENDRX_STOPRX field. */
#define UARTE_SHORTS_ENDRX_STOPRX_Msk (0x1UL << UARTE_SHORTS_ENDRX_STOPRX_Pos) /*!< Bit mask of ENDRX_STOPRX field. */
#define UARTE_SHORTS_ENDRX_STOPRX_Disabled (0UL) /*!< Disable shortcut */
#define UARTE_SHORTS_ENDRX_STOPRX_Enabled (1UL) /*!< Enable shortcut */

/* Bit 5 : Shortcut between event ENDRX and task STARTRX */
#define UARTE_SHORTS_ENDRX_STARTRX_Pos (5UL) /*!< Position of ENDRX_STARTRX field. */
#define UARTE_SHORTS_ENDRX_STARTRX_Msk (0x1UL << UARTE_SHORTS_ENDRX_STARTRX_Pos) /*!< Bit mask of ENDRX_STARTRX field. */
#define UARTE_SHORTS_ENDRX_STARTRX_Disabled (0UL) /*!< Disable shortcut */
#define UARTE_SHORTS_ENDRX_STARTRX_Enabled (1UL) /*!< Enable shortcut */

/* Bit 4 : Shortcut between event NCTS and task STOPRX */
#define UARTE_SHORTS_NCTS_STOPRX_Pos (4UL) /*!< Position of NCTS_STOPRX field. */
#define UARTE_SHORTS_NCTS_STOPRX_Msk (0x1UL << UARTE_SHORTS_NCTS_STOPRX_Pos) /*!< Bit mask of NCTS_STOPRX field. */
#define UARTE_SHORTS_NCTS_STOPRX_Disabled (0UL) /*!< Disable shortcut */
#define UARTE_SHORTS_NCTS_STOPRX_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event CTS and task STARTRX */
#define UARTE_SHORTS_CTS_STARTRX_Pos (3UL) /*!< Position of CTS_STARTRX field. */
#define UARTE_SHORTS_CTS_STARTRX_Msk (0x1UL << UARTE_SHORTS_CTS_STARTRX_Pos) /*!< Bit mask of CTS_STARTRX field. */
#define UARTE_SHORTS_CTS_STARTRX_Disabled (0UL) /*!< Disable shortcut */
#define UARTE_SHORTS_CTS_STARTRX_Enabled (1UL) /*!< Enable shortcut */

/* Register: UARTE_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 22 : Enable or disable interrupt for event TXSTOPPED */
#define UARTE_INTEN_TXSTOPPED_Pos (22UL) /*!< Position of TXSTOPPED field. */
#define UARTE_INTEN_TXSTOPPED_Msk (0x1UL << UARTE_INTEN_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field. */
#define UARTE_INTEN_TXSTOPPED_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_TXSTOPPED_Enabled (1UL) /*!< Enable */

/* Bit 21 : Enable or disable interrupt for event RTS */
#define UARTE_INTEN_RTS_Pos (21UL) /*!< Position of RTS field. */
#define UARTE_INTEN_RTS_Msk (0x1UL << UARTE_INTEN_RTS_Pos) /*!< Bit mask of RTS field. */
#define UARTE_INTEN_RTS_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_RTS_Enabled (1UL) /*!< Enable */

/* Bit 20 : Enable or disable interrupt for event TXSTARTED */
#define UARTE_INTEN_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define UARTE_INTEN_TXSTARTED_Msk (0x1UL << UARTE_INTEN_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define UARTE_INTEN_TXSTARTED_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_TXSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 19 : Enable or disable interrupt for event RXSTARTED */
#define UARTE_INTEN_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define UARTE_INTEN_RXSTARTED_Msk (0x1UL << UARTE_INTEN_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define UARTE_INTEN_RXSTARTED_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_RXSTARTED_Enabled (1UL) /*!< Enable */

/* Bit 17 : Enable or disable interrupt for event RXTO */
#define UARTE_INTEN_RXTO_Pos (17UL) /*!< Position of RXTO field. */
#define UARTE_INTEN_RXTO_Msk (0x1UL << UARTE_INTEN_RXTO_Pos) /*!< Bit mask of RXTO field. */
#define UARTE_INTEN_RXTO_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_RXTO_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event ERROR */
#define UARTE_INTEN_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define UARTE_INTEN_ERROR_Msk (0x1UL << UARTE_INTEN_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define UARTE_INTEN_ERROR_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_ERROR_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event ENDTX */
#define UARTE_INTEN_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define UARTE_INTEN_ENDTX_Msk (0x1UL << UARTE_INTEN_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define UARTE_INTEN_ENDTX_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_ENDTX_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event TXDRDY */
#define UARTE_INTEN_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
#define UARTE_INTEN_TXDRDY_Msk (0x1UL << UARTE_INTEN_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
#define UARTE_INTEN_TXDRDY_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_TXDRDY_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event ENDRX */
#define UARTE_INTEN_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define UARTE_INTEN_ENDRX_Msk (0x1UL << UARTE_INTEN_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define UARTE_INTEN_ENDRX_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_ENDRX_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event RXDRDY */
#define UARTE_INTEN_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
#define UARTE_INTEN_RXDRDY_Msk (0x1UL << UARTE_INTEN_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
#define UARTE_INTEN_RXDRDY_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_RXDRDY_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event NCTS */
#define UARTE_INTEN_NCTS_Pos (1UL) /*!< Position of NCTS field. */
#define UARTE_INTEN_NCTS_Msk (0x1UL << UARTE_INTEN_NCTS_Pos) /*!< Bit mask of NCTS field. */
#define UARTE_INTEN_NCTS_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_NCTS_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event CTS */
#define UARTE_INTEN_CTS_Pos (0UL) /*!< Position of CTS field. */
#define UARTE_INTEN_CTS_Msk (0x1UL << UARTE_INTEN_CTS_Pos) /*!< Bit mask of CTS field. */
#define UARTE_INTEN_CTS_Disabled (0UL) /*!< Disable */
#define UARTE_INTEN_CTS_Enabled (1UL) /*!< Enable */

/* Register: UARTE_INTENSET */
/* Description: Enable interrupt */

/* Bit 22 : Write '1' to enable interrupt for event TXSTOPPED */
#define UARTE_INTENSET_TXSTOPPED_Pos (22UL) /*!< Position of TXSTOPPED field. */
#define UARTE_INTENSET_TXSTOPPED_Msk (0x1UL << UARTE_INTENSET_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field. */
#define UARTE_INTENSET_TXSTOPPED_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_TXSTOPPED_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_TXSTOPPED_Set (1UL) /*!< Enable */

/* Bit 21 : Write '1' to enable interrupt for event RTS */
#define UARTE_INTENSET_RTS_Pos (21UL) /*!< Position of RTS field. */
#define UARTE_INTENSET_RTS_Msk (0x1UL << UARTE_INTENSET_RTS_Pos) /*!< Bit mask of RTS field. */
#define UARTE_INTENSET_RTS_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_RTS_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_RTS_Set (1UL) /*!< Enable */

/* Bit 20 : Write '1' to enable interrupt for event TXSTARTED */
#define UARTE_INTENSET_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define UARTE_INTENSET_TXSTARTED_Msk (0x1UL << UARTE_INTENSET_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define UARTE_INTENSET_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_TXSTARTED_Set (1UL) /*!< Enable */

/* Bit 19 : Write '1' to enable interrupt for event RXSTARTED */
#define UARTE_INTENSET_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define UARTE_INTENSET_RXSTARTED_Msk (0x1UL << UARTE_INTENSET_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define UARTE_INTENSET_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_RXSTARTED_Set (1UL) /*!< Enable */

/* Bit 17 : Write '1' to enable interrupt for event RXTO */
#define UARTE_INTENSET_RXTO_Pos (17UL) /*!< Position of RXTO field. */
#define UARTE_INTENSET_RXTO_Msk (0x1UL << UARTE_INTENSET_RXTO_Pos) /*!< Bit mask of RXTO field. */
#define UARTE_INTENSET_RXTO_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_RXTO_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_RXTO_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event ERROR */
#define UARTE_INTENSET_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define UARTE_INTENSET_ERROR_Msk (0x1UL << UARTE_INTENSET_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define UARTE_INTENSET_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_ERROR_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event ENDTX */
#define UARTE_INTENSET_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define UARTE_INTENSET_ENDTX_Msk (0x1UL << UARTE_INTENSET_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define UARTE_INTENSET_ENDTX_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_ENDTX_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_ENDTX_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event TXDRDY */
#define UARTE_INTENSET_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
#define UARTE_INTENSET_TXDRDY_Msk (0x1UL << UARTE_INTENSET_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
#define UARTE_INTENSET_TXDRDY_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_TXDRDY_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_TXDRDY_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event ENDRX */
#define UARTE_INTENSET_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define UARTE_INTENSET_ENDRX_Msk (0x1UL << UARTE_INTENSET_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define UARTE_INTENSET_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_ENDRX_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event RXDRDY */
#define UARTE_INTENSET_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
#define UARTE_INTENSET_RXDRDY_Msk (0x1UL << UARTE_INTENSET_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
#define UARTE_INTENSET_RXDRDY_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_RXDRDY_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_RXDRDY_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event NCTS */
#define UARTE_INTENSET_NCTS_Pos (1UL) /*!< Position of NCTS field. */
#define UARTE_INTENSET_NCTS_Msk (0x1UL << UARTE_INTENSET_NCTS_Pos) /*!< Bit mask of NCTS field. */
#define UARTE_INTENSET_NCTS_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_NCTS_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_NCTS_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event CTS */
#define UARTE_INTENSET_CTS_Pos (0UL) /*!< Position of CTS field. */
#define UARTE_INTENSET_CTS_Msk (0x1UL << UARTE_INTENSET_CTS_Pos) /*!< Bit mask of CTS field. */
#define UARTE_INTENSET_CTS_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENSET_CTS_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENSET_CTS_Set (1UL) /*!< Enable */

/* Register: UARTE_INTENCLR */
/* Description: Disable interrupt */

/* Bit 22 : Write '1' to disable interrupt for event TXSTOPPED */
#define UARTE_INTENCLR_TXSTOPPED_Pos (22UL) /*!< Position of TXSTOPPED field. */
#define UARTE_INTENCLR_TXSTOPPED_Msk (0x1UL << UARTE_INTENCLR_TXSTOPPED_Pos) /*!< Bit mask of TXSTOPPED field. */
#define UARTE_INTENCLR_TXSTOPPED_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_TXSTOPPED_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_TXSTOPPED_Clear (1UL) /*!< Disable */

/* Bit 21 : Write '1' to disable interrupt for event RTS */
#define UARTE_INTENCLR_RTS_Pos (21UL) /*!< Position of RTS field. */
#define UARTE_INTENCLR_RTS_Msk (0x1UL << UARTE_INTENCLR_RTS_Pos) /*!< Bit mask of RTS field. */
#define UARTE_INTENCLR_RTS_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_RTS_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_RTS_Clear (1UL) /*!< Disable */

/* Bit 20 : Write '1' to disable interrupt for event TXSTARTED */
#define UARTE_INTENCLR_TXSTARTED_Pos (20UL) /*!< Position of TXSTARTED field. */
#define UARTE_INTENCLR_TXSTARTED_Msk (0x1UL << UARTE_INTENCLR_TXSTARTED_Pos) /*!< Bit mask of TXSTARTED field. */
#define UARTE_INTENCLR_TXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_TXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_TXSTARTED_Clear (1UL) /*!< Disable */

/* Bit 19 : Write '1' to disable interrupt for event RXSTARTED */
#define UARTE_INTENCLR_RXSTARTED_Pos (19UL) /*!< Position of RXSTARTED field. */
#define UARTE_INTENCLR_RXSTARTED_Msk (0x1UL << UARTE_INTENCLR_RXSTARTED_Pos) /*!< Bit mask of RXSTARTED field. */
#define UARTE_INTENCLR_RXSTARTED_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_RXSTARTED_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_RXSTARTED_Clear (1UL) /*!< Disable */

/* Bit 17 : Write '1' to disable interrupt for event RXTO */
#define UARTE_INTENCLR_RXTO_Pos (17UL) /*!< Position of RXTO field. */
#define UARTE_INTENCLR_RXTO_Msk (0x1UL << UARTE_INTENCLR_RXTO_Pos) /*!< Bit mask of RXTO field. */
#define UARTE_INTENCLR_RXTO_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_RXTO_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_RXTO_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event ERROR */
#define UARTE_INTENCLR_ERROR_Pos (9UL) /*!< Position of ERROR field. */
#define UARTE_INTENCLR_ERROR_Msk (0x1UL << UARTE_INTENCLR_ERROR_Pos) /*!< Bit mask of ERROR field. */
#define UARTE_INTENCLR_ERROR_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_ERROR_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_ERROR_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event ENDTX */
#define UARTE_INTENCLR_ENDTX_Pos (8UL) /*!< Position of ENDTX field. */
#define UARTE_INTENCLR_ENDTX_Msk (0x1UL << UARTE_INTENCLR_ENDTX_Pos) /*!< Bit mask of ENDTX field. */
#define UARTE_INTENCLR_ENDTX_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_ENDTX_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_ENDTX_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event TXDRDY */
#define UARTE_INTENCLR_TXDRDY_Pos (7UL) /*!< Position of TXDRDY field. */
#define UARTE_INTENCLR_TXDRDY_Msk (0x1UL << UARTE_INTENCLR_TXDRDY_Pos) /*!< Bit mask of TXDRDY field. */
#define UARTE_INTENCLR_TXDRDY_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_TXDRDY_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_TXDRDY_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event ENDRX */
#define UARTE_INTENCLR_ENDRX_Pos (4UL) /*!< Position of ENDRX field. */
#define UARTE_INTENCLR_ENDRX_Msk (0x1UL << UARTE_INTENCLR_ENDRX_Pos) /*!< Bit mask of ENDRX field. */
#define UARTE_INTENCLR_ENDRX_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_ENDRX_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_ENDRX_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event RXDRDY */
#define UARTE_INTENCLR_RXDRDY_Pos (2UL) /*!< Position of RXDRDY field. */
#define UARTE_INTENCLR_RXDRDY_Msk (0x1UL << UARTE_INTENCLR_RXDRDY_Pos) /*!< Bit mask of RXDRDY field. */
#define UARTE_INTENCLR_RXDRDY_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_RXDRDY_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_RXDRDY_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event NCTS */
#define UARTE_INTENCLR_NCTS_Pos (1UL) /*!< Position of NCTS field. */
#define UARTE_INTENCLR_NCTS_Msk (0x1UL << UARTE_INTENCLR_NCTS_Pos) /*!< Bit mask of NCTS field. */
#define UARTE_INTENCLR_NCTS_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_NCTS_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_NCTS_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event CTS */
#define UARTE_INTENCLR_CTS_Pos (0UL) /*!< Position of CTS field. */
#define UARTE_INTENCLR_CTS_Msk (0x1UL << UARTE_INTENCLR_CTS_Pos) /*!< Bit mask of CTS field. */
#define UARTE_INTENCLR_CTS_Disabled (0UL) /*!< Read: Disabled */
#define UARTE_INTENCLR_CTS_Enabled (1UL) /*!< Read: Enabled */
#define UARTE_INTENCLR_CTS_Clear (1UL) /*!< Disable */

/* Register: UARTE_ERRORSRC */
/* Description: Error source Note : this register is read / write one to clear. */

/* Bit 3 : Break condition */
#define UARTE_ERRORSRC_BREAK_Pos (3UL) /*!< Position of BREAK field. */
#define UARTE_ERRORSRC_BREAK_Msk (0x1UL << UARTE_ERRORSRC_BREAK_Pos) /*!< Bit mask of BREAK field. */
#define UARTE_ERRORSRC_BREAK_NotPresent (0UL) /*!< Read: error not present */
#define UARTE_ERRORSRC_BREAK_Present (1UL) /*!< Read: error present */

/* Bit 2 : Framing error occurred */
#define UARTE_ERRORSRC_FRAMING_Pos (2UL) /*!< Position of FRAMING field. */
#define UARTE_ERRORSRC_FRAMING_Msk (0x1UL << UARTE_ERRORSRC_FRAMING_Pos) /*!< Bit mask of FRAMING field. */
#define UARTE_ERRORSRC_FRAMING_NotPresent (0UL) /*!< Read: error not present */
#define UARTE_ERRORSRC_FRAMING_Present (1UL) /*!< Read: error present */

/* Bit 1 : Parity error */
#define UARTE_ERRORSRC_PARITY_Pos (1UL) /*!< Position of PARITY field. */
#define UARTE_ERRORSRC_PARITY_Msk (0x1UL << UARTE_ERRORSRC_PARITY_Pos) /*!< Bit mask of PARITY field. */
#define UARTE_ERRORSRC_PARITY_NotPresent (0UL) /*!< Read: error not present */
#define UARTE_ERRORSRC_PARITY_Present (1UL) /*!< Read: error present */

/* Bit 0 : Overrun error */
#define UARTE_ERRORSRC_OVERRUN_Pos (0UL) /*!< Position of OVERRUN field. */
#define UARTE_ERRORSRC_OVERRUN_Msk (0x1UL << UARTE_ERRORSRC_OVERRUN_Pos) /*!< Bit mask of OVERRUN field. */
#define UARTE_ERRORSRC_OVERRUN_NotPresent (0UL) /*!< Read: error not present */
#define UARTE_ERRORSRC_OVERRUN_Present (1UL) /*!< Read: error present */

/* Register: UARTE_ENABLE */
/* Description: Enable UART */

/* Bits 3..0 : Enable or disable UARTE */
#define UARTE_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define UARTE_ENABLE_ENABLE_Msk (0xFUL << UARTE_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define UARTE_ENABLE_ENABLE_Disabled (0UL) /*!< Disable UARTE */
#define UARTE_ENABLE_ENABLE_Enabled (8UL) /*!< Enable UARTE */

/* Register: UARTE_PSEL_RTS */
/* Description: Pin select for RTS signal */

/* Bit 31 : Connection */
#define UARTE_PSEL_RTS_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define UARTE_PSEL_RTS_CONNECT_Msk (0x1UL << UARTE_PSEL_RTS_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define UARTE_PSEL_RTS_CONNECT_Connected (0UL) /*!< Connect */
#define UARTE_PSEL_RTS_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define UARTE_PSEL_RTS_PORT_Pos (5UL) /*!< Position of PORT field. */
#define UARTE_PSEL_RTS_PORT_Msk (0x1UL << UARTE_PSEL_RTS_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define UARTE_PSEL_RTS_PIN_Pos (0UL) /*!< Position of PIN field. */
#define UARTE_PSEL_RTS_PIN_Msk (0x1FUL << UARTE_PSEL_RTS_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: UARTE_PSEL_TXD */
/* Description: Pin select for TXD signal */

/* Bit 31 : Connection */
#define UARTE_PSEL_TXD_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define UARTE_PSEL_TXD_CONNECT_Msk (0x1UL << UARTE_PSEL_TXD_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define UARTE_PSEL_TXD_CONNECT_Connected (0UL) /*!< Connect */
#define UARTE_PSEL_TXD_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define UARTE_PSEL_TXD_PORT_Pos (5UL) /*!< Position of PORT field. */
#define UARTE_PSEL_TXD_PORT_Msk (0x1UL << UARTE_PSEL_TXD_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define UARTE_PSEL_TXD_PIN_Pos (0UL) /*!< Position of PIN field. */
#define UARTE_PSEL_TXD_PIN_Msk (0x1FUL << UARTE_PSEL_TXD_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: UARTE_PSEL_CTS */
/* Description: Pin select for CTS signal */

/* Bit 31 : Connection */
#define UARTE_PSEL_CTS_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define UARTE_PSEL_CTS_CONNECT_Msk (0x1UL << UARTE_PSEL_CTS_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define UARTE_PSEL_CTS_CONNECT_Connected (0UL) /*!< Connect */
#define UARTE_PSEL_CTS_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define UARTE_PSEL_CTS_PORT_Pos (5UL) /*!< Position of PORT field. */
#define UARTE_PSEL_CTS_PORT_Msk (0x1UL << UARTE_PSEL_CTS_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define UARTE_PSEL_CTS_PIN_Pos (0UL) /*!< Position of PIN field. */
#define UARTE_PSEL_CTS_PIN_Msk (0x1FUL << UARTE_PSEL_CTS_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: UARTE_PSEL_RXD */
/* Description: Pin select for RXD signal */

/* Bit 31 : Connection */
#define UARTE_PSEL_RXD_CONNECT_Pos (31UL) /*!< Position of CONNECT field. */
#define UARTE_PSEL_RXD_CONNECT_Msk (0x1UL << UARTE_PSEL_RXD_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define UARTE_PSEL_RXD_CONNECT_Connected (0UL) /*!< Connect */
#define UARTE_PSEL_RXD_CONNECT_Disconnected (1UL) /*!< Disconnect */

/* Bit 5 : Port number */
#define UARTE_PSEL_RXD_PORT_Pos (5UL) /*!< Position of PORT field. */
#define UARTE_PSEL_RXD_PORT_Msk (0x1UL << UARTE_PSEL_RXD_PORT_Pos) /*!< Bit mask of PORT field. */

/* Bits 4..0 : Pin number */
#define UARTE_PSEL_RXD_PIN_Pos (0UL) /*!< Position of PIN field. */
#define UARTE_PSEL_RXD_PIN_Msk (0x1FUL << UARTE_PSEL_RXD_PIN_Pos) /*!< Bit mask of PIN field. */

/* Register: UARTE_BAUDRATE */
/* Description: Baud rate. Accuracy depends on the HFCLK source selected. */

/* Bits 31..0 : Baud rate */
#define UARTE_BAUDRATE_BAUDRATE_Pos (0UL) /*!< Position of BAUDRATE field. */
#define UARTE_BAUDRATE_BAUDRATE_Msk (0xFFFFFFFFUL << UARTE_BAUDRATE_BAUDRATE_Pos) /*!< Bit mask of BAUDRATE field. */
#define UARTE_BAUDRATE_BAUDRATE_Baud1200 (0x0004F000UL) /*!< 1200 baud (actual rate: 1205) */
#define UARTE_BAUDRATE_BAUDRATE_Baud2400 (0x0009D000UL) /*!< 2400 baud (actual rate: 2396) */
#define UARTE_BAUDRATE_BAUDRATE_Baud4800 (0x0013B000UL) /*!< 4800 baud (actual rate: 4808) */
#define UARTE_BAUDRATE_BAUDRATE_Baud9600 (0x00275000UL) /*!< 9600 baud (actual rate: 9598) */
#define UARTE_BAUDRATE_BAUDRATE_Baud14400 (0x003AF000UL) /*!< 14400 baud (actual rate: 14401) */
#define UARTE_BAUDRATE_BAUDRATE_Baud19200 (0x004EA000UL) /*!< 19200 baud (actual rate: 19208) */
#define UARTE_BAUDRATE_BAUDRATE_Baud28800 (0x0075C000UL) /*!< 28800 baud (actual rate: 28777) */
#define UARTE_BAUDRATE_BAUDRATE_Baud31250 (0x00800000UL) /*!< 31250 baud */
#define UARTE_BAUDRATE_BAUDRATE_Baud38400 (0x009D0000UL) /*!< 38400 baud (actual rate: 38369) */
#define UARTE_BAUDRATE_BAUDRATE_Baud56000 (0x00E50000UL) /*!< 56000 baud (actual rate: 55944) */
#define UARTE_BAUDRATE_BAUDRATE_Baud57600 (0x00EB0000UL) /*!< 57600 baud (actual rate: 57554) */
#define UARTE_BAUDRATE_BAUDRATE_Baud76800 (0x013A9000UL) /*!< 76800 baud (actual rate: 76923) */
#define UARTE_BAUDRATE_BAUDRATE_Baud115200 (0x01D60000UL) /*!< 115200 baud (actual rate: 115108) */
#define UARTE_BAUDRATE_BAUDRATE_Baud230400 (0x03B00000UL) /*!< 230400 baud (actual rate: 231884) */
#define UARTE_BAUDRATE_BAUDRATE_Baud250000 (0x04000000UL) /*!< 250000 baud */
#define UARTE_BAUDRATE_BAUDRATE_Baud460800 (0x07400000UL) /*!< 460800 baud (actual rate: 457143) */
#define UARTE_BAUDRATE_BAUDRATE_Baud921600 (0x0F000000UL) /*!< 921600 baud (actual rate: 941176) */
#define UARTE_BAUDRATE_BAUDRATE_Baud1M (0x10000000UL) /*!< 1Mega baud */

/* Register: UARTE_RXD_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define UARTE_RXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define UARTE_RXD_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_RXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: UARTE_RXD_MAXCNT */
/* Description: Maximum number of bytes in receive buffer */

/* Bits 15..0 : Maximum number of bytes in receive buffer */
#define UARTE_RXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define UARTE_RXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << UARTE_RXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: UARTE_RXD_AMOUNT */
/* Description: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction */
#define UARTE_RXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define UARTE_RXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << UARTE_RXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: UARTE_TXD_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define UARTE_TXD_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define UARTE_TXD_PTR_PTR_Msk (0xFFFFFFFFUL << UARTE_TXD_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: UARTE_TXD_MAXCNT */
/* Description: Maximum number of bytes in transmit buffer */

/* Bits 15..0 : Maximum number of bytes in transmit buffer */
#define UARTE_TXD_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define UARTE_TXD_MAXCNT_MAXCNT_Msk (0xFFFFUL << UARTE_TXD_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: UARTE_TXD_AMOUNT */
/* Description: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction */
#define UARTE_TXD_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define UARTE_TXD_AMOUNT_AMOUNT_Msk (0xFFFFUL << UARTE_TXD_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: UARTE_CONFIG */
/* Description: Configuration of parity and hardware flow control */

/* Bit 8 : Even or odd parity type */
#define UARTE_CONFIG_PARITYTYPE_Pos (8UL) /*!< Position of PARITYTYPE field. */
#define UARTE_CONFIG_PARITYTYPE_Msk (0x1UL << UARTE_CONFIG_PARITYTYPE_Pos) /*!< Bit mask of PARITYTYPE field. */
#define UARTE_CONFIG_PARITYTYPE_Even (0UL) /*!< Even parity */
#define UARTE_CONFIG_PARITYTYPE_Odd (1UL) /*!< Odd parity */

/* Bit 4 : Stop bits */
#define UARTE_CONFIG_STOP_Pos (4UL) /*!< Position of STOP field. */
#define UARTE_CONFIG_STOP_Msk (0x1UL << UARTE_CONFIG_STOP_Pos) /*!< Bit mask of STOP field. */
#define UARTE_CONFIG_STOP_One (0UL) /*!< One stop bit */
#define UARTE_CONFIG_STOP_Two (1UL) /*!< Two stop bits */

/* Bits 3..1 : Parity */
#define UARTE_CONFIG_PARITY_Pos (1UL) /*!< Position of PARITY field. */
#define UARTE_CONFIG_PARITY_Msk (0x7UL << UARTE_CONFIG_PARITY_Pos) /*!< Bit mask of PARITY field. */
#define UARTE_CONFIG_PARITY_Excluded (0x0UL) /*!< Exclude parity bit */
#define UARTE_CONFIG_PARITY_Included (0x7UL) /*!< Include even parity bit */

/* Bit 0 : Hardware flow control */
#define UARTE_CONFIG_HWFC_Pos (0UL) /*!< Position of HWFC field. */
#define UARTE_CONFIG_HWFC_Msk (0x1UL << UARTE_CONFIG_HWFC_Pos) /*!< Bit mask of HWFC field. */
#define UARTE_CONFIG_HWFC_Disabled (0UL) /*!< Disabled */
#define UARTE_CONFIG_HWFC_Enabled (1UL) /*!< Enabled */


/* Peripheral: UICR */
/* Description: User Information Configuration Registers User information configuration registers */

/* Register: UICR_APPROTECT */
/* Description: Access port protection */

/* Bits 31..0 : Blocks debugger read/write access to all CPU registers and
          memory mapped addresses except for the control access port
          registers.
        Between reset and automatic readout, the system is protected Using any value except Unprotected will lead to the protection being enabled. */
#define UICR_APPROTECT_PALL_Pos (0UL) /*!< Position of PALL field. */
#define UICR_APPROTECT_PALL_Msk (0xFFFFFFFFUL << UICR_APPROTECT_PALL_Pos) /*!< Bit mask of PALL field. */
#define UICR_APPROTECT_PALL_Protected (0x00000000UL) /*!< Protected */
#define UICR_APPROTECT_PALL_Unprotected (0xFFFFFFFFUL) /*!< Unprotected */

/* Register: UICR_EXTSUPPLY */
/* Description: Enable external circuitry to be supplied from VDD pin. Applicable in 'High voltage mode' only. */

/* Bit 0 : Enable external circuitry to be supplied from VDD pin (output of VREGH stage). */
#define UICR_EXTSUPPLY_EXTSUPPLY_Pos (0UL) /*!< Position of EXTSUPPLY field. */
#define UICR_EXTSUPPLY_EXTSUPPLY_Msk (0x1UL << UICR_EXTSUPPLY_EXTSUPPLY_Pos) /*!< Bit mask of EXTSUPPLY field. */
#define UICR_EXTSUPPLY_EXTSUPPLY_Enabled (0UL) /*!< It is allowed to supply external circuitry from the VDD pin. */
#define UICR_EXTSUPPLY_EXTSUPPLY_Disabled (1UL) /*!< No current can be drawn from the VDD pin. */

/* Register: UICR_VREGHVOUT */
/* Description: GPIO reference voltage / external output supply voltage in 'High voltage mode'. */

/* Bits 2..0 : VREGH regulator output voltage. The maximum output voltage from this stage is given as VDDH - VEXDIF. */
#define UICR_VREGHVOUT_VREGHVOUT_Pos (0UL) /*!< Position of VREGHVOUT field. */
#define UICR_VREGHVOUT_VREGHVOUT_Msk (0x7UL << UICR_VREGHVOUT_VREGHVOUT_Pos) /*!< Bit mask of VREGHVOUT field. */
#define UICR_VREGHVOUT_VREGHVOUT_1V8 (0UL) /*!< 1.8 V */
#define UICR_VREGHVOUT_VREGHVOUT_2V1 (1UL) /*!< 2.1 V */
#define UICR_VREGHVOUT_VREGHVOUT_2V4 (2UL) /*!< 2.4 V */
#define UICR_VREGHVOUT_VREGHVOUT_2V7 (3UL) /*!< 2.7 V */
#define UICR_VREGHVOUT_VREGHVOUT_3V0 (4UL) /*!< 3.0 V */
#define UICR_VREGHVOUT_VREGHVOUT_3V3 (5UL) /*!< 3.3 V */
#define UICR_VREGHVOUT_VREGHVOUT_DEFAULT (7UL) /*!< Default voltage: 1.8 V */

/* Register: UICR_HFXOCNT */
/* Description: HFXO startup counter */

/* Bits 7..0 : HFXO startup counter. Total debounce time = HFXOCNT*64 us + 0.5 us */
#define UICR_HFXOCNT_HFXOCNT_Pos (0UL) /*!< Position of HFXOCNT field. */
#define UICR_HFXOCNT_HFXOCNT_Msk (0xFFUL << UICR_HFXOCNT_HFXOCNT_Pos) /*!< Bit mask of HFXOCNT field. */
#define UICR_HFXOCNT_HFXOCNT_MinDebounceTime (0UL) /*!< Min debounce time = (0*64 us + 0.5 us) */
#define UICR_HFXOCNT_HFXOCNT_MaxDebounceTime (254UL) /*!< Max debounce time = (254*64 us + 0.5 us) */
#define UICR_HFXOCNT_HFXOCNT_DefaultDebounceTime (255UL) /*!< Default debounce time for erased UICR = 4*64 us + 0.5 us */

/* Register: UICR_SECUREAPPROTECT */
/* Description: Secure access port protection */

/* Bits 31..0 : Blocks debugger read/write access to all secure CPU registers and secure memory
        mapped addresses. Using any value except Unprotected will lead to the protection being enabled. Between reset and automatic readout, the system is protected. */
#define UICR_SECUREAPPROTECT_PALL_Pos (0UL) /*!< Position of PALL field. */
#define UICR_SECUREAPPROTECT_PALL_Msk (0xFFFFFFFFUL << UICR_SECUREAPPROTECT_PALL_Pos) /*!< Bit mask of PALL field. */
#define UICR_SECUREAPPROTECT_PALL_Protected (0x00000000UL) /*!< Protected */
#define UICR_SECUREAPPROTECT_PALL_Unprotected (0xFFFFFFFFUL) /*!< Unprotected */

/* Register: UICR_ERASEPROTECT */
/* Description: Erase protection */

/* Bits 31..0 : Blocks NVMC ERASEALL and CTRLAP ERASEALL functionality. Using any value except Unprotected will lead to the protection being enabled. Between reset and automatic readout, the system is protected. */
#define UICR_ERASEPROTECT_PALL_Pos (0UL) /*!< Position of PALL field. */
#define UICR_ERASEPROTECT_PALL_Msk (0xFFFFFFFFUL << UICR_ERASEPROTECT_PALL_Pos) /*!< Bit mask of PALL field. */
#define UICR_ERASEPROTECT_PALL_Protected (0x00000000UL) /*!< Protected */
#define UICR_ERASEPROTECT_PALL_Unprotected (0xFFFFFFFFUL) /*!< Unprotected */

/* Register: UICR_TINSTANCE */
/* Description: SW-DP Target instance */

/* Bits 31..28 : TINSTANCE bits are negated and used in the SW-DP DLPIDR.TINSTANCE field. E.g. 0xF in this field is translated to 0x0 in DLPIDR.TINSTANCE field. */
#define UICR_TINSTANCE_TINSTANCE_Pos (28UL) /*!< Position of TINSTANCE field. */
#define UICR_TINSTANCE_TINSTANCE_Msk (0xFUL << UICR_TINSTANCE_TINSTANCE_Pos) /*!< Bit mask of TINSTANCE field. */

/* Register: UICR_NFCPINS */
/* Description: Setting of pins dedicated to NFC functionality: NFC antenna or GPIO */

/* Bit 0 : Setting of pins dedicated to NFC functionality */
#define UICR_NFCPINS_PROTECT_Pos (0UL) /*!< Position of PROTECT field. */
#define UICR_NFCPINS_PROTECT_Msk (0x1UL << UICR_NFCPINS_PROTECT_Pos) /*!< Bit mask of PROTECT field. */
#define UICR_NFCPINS_PROTECT_Disabled (0UL) /*!< Operation as GPIO pins. Same protection as normal GPIO pins */
#define UICR_NFCPINS_PROTECT_NFC (1UL) /*!< Operation as NFC antenna pins. Configures the protection for NFC operation */

/* Register: UICR_OTP */
/* Description: Description collection: One time programmable memory */

/* Bits 31..16 : Upper half word */
#define UICR_OTP_UPPER_Pos (16UL) /*!< Position of UPPER field. */
#define UICR_OTP_UPPER_Msk (0xFFFFUL << UICR_OTP_UPPER_Pos) /*!< Bit mask of UPPER field. */

/* Bits 15..0 : Lower half word */
#define UICR_OTP_LOWER_Pos (0UL) /*!< Position of LOWER field. */
#define UICR_OTP_LOWER_Msk (0xFFFFUL << UICR_OTP_LOWER_Pos) /*!< Bit mask of LOWER field. */

/* Register: UICR_KEYSLOT_CONFIG_DEST */
/* Description: Description cluster: Destination address where content of the key value registers (KEYSLOT.KEYn.VALUE[0-3])
          will be pushed by KMU. Note that this address must match that of a peripherals
          APB mapped write-only key registers, else the KMU can push this key value into
          an address range which the CPU can potentially read. */

/* Bits 31..0 : Secure APB destination address */
#define UICR_KEYSLOT_CONFIG_DEST_DEST_Pos (0UL) /*!< Position of DEST field. */
#define UICR_KEYSLOT_CONFIG_DEST_DEST_Msk (0xFFFFFFFFUL << UICR_KEYSLOT_CONFIG_DEST_DEST_Pos) /*!< Bit mask of DEST field. */

/* Register: UICR_KEYSLOT_CONFIG_PERM */
/* Description: Description cluster: Define permissions for the key slot. Bits 0-15 and 16-31 can only be written when equal to 0xFFFF. */

/* Bit 16 : Revocation state for the key slot */
#define UICR_KEYSLOT_CONFIG_PERM_STATE_Pos (16UL) /*!< Position of STATE field. */
#define UICR_KEYSLOT_CONFIG_PERM_STATE_Msk (0x1UL << UICR_KEYSLOT_CONFIG_PERM_STATE_Pos) /*!< Bit mask of STATE field. */
#define UICR_KEYSLOT_CONFIG_PERM_STATE_Revoked (0UL) /*!< Key value registers can no longer be read or pushed */
#define UICR_KEYSLOT_CONFIG_PERM_STATE_Active (1UL) /*!< Key value registers are readable (if enabled) and can be pushed (if enabled) */

/* Bit 2 : Push permission for key slot */
#define UICR_KEYSLOT_CONFIG_PERM_PUSH_Pos (2UL) /*!< Position of PUSH field. */
#define UICR_KEYSLOT_CONFIG_PERM_PUSH_Msk (0x1UL << UICR_KEYSLOT_CONFIG_PERM_PUSH_Pos) /*!< Bit mask of PUSH field. */
#define UICR_KEYSLOT_CONFIG_PERM_PUSH_Disabled (0UL) /*!< Disable pushing of key value registers over secure APB, but can be read if field READ is Enabled */
#define UICR_KEYSLOT_CONFIG_PERM_PUSH_Enabled (1UL) /*!< Enable pushing of key value registers over secure APB. Register KEYSLOT.CONFIGn.DEST must contain a valid destination address! */

/* Bit 1 : Read permission for key slot */
#define UICR_KEYSLOT_CONFIG_PERM_READ_Pos (1UL) /*!< Position of READ field. */
#define UICR_KEYSLOT_CONFIG_PERM_READ_Msk (0x1UL << UICR_KEYSLOT_CONFIG_PERM_READ_Pos) /*!< Bit mask of READ field. */
#define UICR_KEYSLOT_CONFIG_PERM_READ_Disabled (0UL) /*!< Disable read from key value registers */
#define UICR_KEYSLOT_CONFIG_PERM_READ_Enabled (1UL) /*!< Enable read from key value registers */

/* Bit 0 : Write permission for key slot */
#define UICR_KEYSLOT_CONFIG_PERM_WRITE_Pos (0UL) /*!< Position of WRITE field. */
#define UICR_KEYSLOT_CONFIG_PERM_WRITE_Msk (0x1UL << UICR_KEYSLOT_CONFIG_PERM_WRITE_Pos) /*!< Bit mask of WRITE field. */
#define UICR_KEYSLOT_CONFIG_PERM_WRITE_Disabled (0UL) /*!< Disable write to the key value registers */
#define UICR_KEYSLOT_CONFIG_PERM_WRITE_Enabled (1UL) /*!< Enable write to the key value registers */

/* Register: UICR_KEYSLOT_KEY_VALUE */
/* Description: Description collection: Define bits [31+o*32:0+o*32] of value assigned to KMU key slot. */

/* Bits 31..0 : Define bits [31+o*32:0+o*32] of value assigned to KMU key slot */
#define UICR_KEYSLOT_KEY_VALUE_VALUE_Pos (0UL) /*!< Position of VALUE field. */
#define UICR_KEYSLOT_KEY_VALUE_VALUE_Msk (0xFFFFFFFFUL << UICR_KEYSLOT_KEY_VALUE_VALUE_Pos) /*!< Bit mask of VALUE field. */


/* Peripheral: USBD */
/* Description: Universal serial bus device 0 */

/* Register: USBD_TASKS_STARTEPIN */
/* Description: Description collection: Captures the EPIN[n].PTR and EPIN[n].MAXCNT registers values, and enables endpoint IN n to respond to traffic from host EPIN[n].CONFIG is also captured */

/* Bit 0 : Captures the EPIN[n].PTR and EPIN[n].MAXCNT registers values, and enables endpoint IN n to respond to traffic from host EPIN[n].CONFIG is also captured */
#define USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Pos (0UL) /*!< Position of TASKS_STARTEPIN field. */
#define USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Msk (0x1UL << USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Pos) /*!< Bit mask of TASKS_STARTEPIN field. */
#define USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_TASKS_STARTISOIN */
/* Description: Captures the ISOIN.PTR and ISOIN.MAXCNT registers values, and enables sending data on ISO endpoint ISOIN.CONFIG is also captured */

/* Bit 0 : Captures the ISOIN.PTR and ISOIN.MAXCNT registers values, and enables sending data on ISO endpoint ISOIN.CONFIG is also captured */
#define USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Pos (0UL) /*!< Position of TASKS_STARTISOIN field. */
#define USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Msk (0x1UL << USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Pos) /*!< Bit mask of TASKS_STARTISOIN field. */
#define USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_TASKS_STARTEPOUT */
/* Description: Description collection: Captures the EPOUT[n].PTR and EPOUT[n].MAXCNT registers values, and enables endpoint n to respond to traffic from host EPOUT[n].CONFIG is also captured */

/* Bit 0 : Captures the EPOUT[n].PTR and EPOUT[n].MAXCNT registers values, and enables endpoint n to respond to traffic from host EPOUT[n].CONFIG is also captured */
#define USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Pos (0UL) /*!< Position of TASKS_STARTEPOUT field. */
#define USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Msk (0x1UL << USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Pos) /*!< Bit mask of TASKS_STARTEPOUT field. */
#define USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_TASKS_STARTISOOUT */
/* Description: Captures the ISOOUT.PTR and ISOOUT.MAXCNT registers values, and enables receiving of data on ISO endpoint ISOOUT.CONFIG is also captured */

/* Bit 0 : Captures the ISOOUT.PTR and ISOOUT.MAXCNT registers values, and enables receiving of data on ISO endpoint ISOOUT.CONFIG is also captured */
#define USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Pos (0UL) /*!< Position of TASKS_STARTISOOUT field. */
#define USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Msk (0x1UL << USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Pos) /*!< Bit mask of TASKS_STARTISOOUT field. */
#define USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_TASKS_EP0RCVOUT */
/* Description: Allows OUT data stage on control endpoint 0 */

/* Bit 0 : Allows OUT data stage on control endpoint 0 */
#define USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Pos (0UL) /*!< Position of TASKS_EP0RCVOUT field. */
#define USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Msk (0x1UL << USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Pos) /*!< Bit mask of TASKS_EP0RCVOUT field. */
#define USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_TASKS_EP0STATUS */
/* Description: Allows status stage on control endpoint 0 */

/* Bit 0 : Allows status stage on control endpoint 0 */
#define USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Pos (0UL) /*!< Position of TASKS_EP0STATUS field. */
#define USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Msk (0x1UL << USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Pos) /*!< Bit mask of TASKS_EP0STATUS field. */
#define USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_TASKS_EP0STALL */
/* Description: Stalls data and status stage on control endpoint 0 */

/* Bit 0 : Stalls data and status stage on control endpoint 0 */
#define USBD_TASKS_EP0STALL_TASKS_EP0STALL_Pos (0UL) /*!< Position of TASKS_EP0STALL field. */
#define USBD_TASKS_EP0STALL_TASKS_EP0STALL_Msk (0x1UL << USBD_TASKS_EP0STALL_TASKS_EP0STALL_Pos) /*!< Bit mask of TASKS_EP0STALL field. */
#define USBD_TASKS_EP0STALL_TASKS_EP0STALL_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_TASKS_DPDMDRIVE */
/* Description: Forces D+ and D- lines into the state defined in the DPDMVALUE register */

/* Bit 0 : Forces D+ and D- lines into the state defined in the DPDMVALUE register */
#define USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Pos (0UL) /*!< Position of TASKS_DPDMDRIVE field. */
#define USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Msk (0x1UL << USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Pos) /*!< Bit mask of TASKS_DPDMDRIVE field. */
#define USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_TASKS_DPDMNODRIVE */
/* Description: Stops forcing D+ and D- lines into any state (USB engine takes control) */

/* Bit 0 : Stops forcing D+ and D- lines into any state (USB engine takes control) */
#define USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Pos (0UL) /*!< Position of TASKS_DPDMNODRIVE field. */
#define USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Msk (0x1UL << USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Pos) /*!< Bit mask of TASKS_DPDMNODRIVE field. */
#define USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Trigger (1UL) /*!< Trigger task */

/* Register: USBD_SUBSCRIBE_STARTEPIN */
/* Description: Description collection: Subscribe configuration for task STARTEPIN[n] */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_STARTEPIN_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_STARTEPIN_EN_Msk (0x1UL << USBD_SUBSCRIBE_STARTEPIN_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_STARTEPIN_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_STARTEPIN_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTEPIN[n] will subscribe to */
#define USBD_SUBSCRIBE_STARTEPIN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_STARTEPIN_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_STARTEPIN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SUBSCRIBE_STARTISOIN */
/* Description: Subscribe configuration for task STARTISOIN */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_STARTISOIN_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_STARTISOIN_EN_Msk (0x1UL << USBD_SUBSCRIBE_STARTISOIN_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_STARTISOIN_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_STARTISOIN_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTISOIN will subscribe to */
#define USBD_SUBSCRIBE_STARTISOIN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_STARTISOIN_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_STARTISOIN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SUBSCRIBE_STARTEPOUT */
/* Description: Description collection: Subscribe configuration for task STARTEPOUT[n] */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_STARTEPOUT_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_STARTEPOUT_EN_Msk (0x1UL << USBD_SUBSCRIBE_STARTEPOUT_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_STARTEPOUT_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_STARTEPOUT_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTEPOUT[n] will subscribe to */
#define USBD_SUBSCRIBE_STARTEPOUT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_STARTEPOUT_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_STARTEPOUT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SUBSCRIBE_STARTISOOUT */
/* Description: Subscribe configuration for task STARTISOOUT */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_STARTISOOUT_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_STARTISOOUT_EN_Msk (0x1UL << USBD_SUBSCRIBE_STARTISOOUT_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_STARTISOOUT_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_STARTISOOUT_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STARTISOOUT will subscribe to */
#define USBD_SUBSCRIBE_STARTISOOUT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_STARTISOOUT_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_STARTISOOUT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SUBSCRIBE_EP0RCVOUT */
/* Description: Subscribe configuration for task EP0RCVOUT */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_EP0RCVOUT_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_EP0RCVOUT_EN_Msk (0x1UL << USBD_SUBSCRIBE_EP0RCVOUT_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_EP0RCVOUT_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_EP0RCVOUT_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task EP0RCVOUT will subscribe to */
#define USBD_SUBSCRIBE_EP0RCVOUT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_EP0RCVOUT_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_EP0RCVOUT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SUBSCRIBE_EP0STATUS */
/* Description: Subscribe configuration for task EP0STATUS */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_EP0STATUS_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_EP0STATUS_EN_Msk (0x1UL << USBD_SUBSCRIBE_EP0STATUS_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_EP0STATUS_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_EP0STATUS_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task EP0STATUS will subscribe to */
#define USBD_SUBSCRIBE_EP0STATUS_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_EP0STATUS_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_EP0STATUS_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SUBSCRIBE_EP0STALL */
/* Description: Subscribe configuration for task EP0STALL */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_EP0STALL_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_EP0STALL_EN_Msk (0x1UL << USBD_SUBSCRIBE_EP0STALL_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_EP0STALL_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_EP0STALL_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task EP0STALL will subscribe to */
#define USBD_SUBSCRIBE_EP0STALL_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_EP0STALL_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_EP0STALL_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SUBSCRIBE_DPDMDRIVE */
/* Description: Subscribe configuration for task DPDMDRIVE */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_DPDMDRIVE_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_DPDMDRIVE_EN_Msk (0x1UL << USBD_SUBSCRIBE_DPDMDRIVE_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_DPDMDRIVE_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_DPDMDRIVE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DPDMDRIVE will subscribe to */
#define USBD_SUBSCRIBE_DPDMDRIVE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_DPDMDRIVE_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_DPDMDRIVE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SUBSCRIBE_DPDMNODRIVE */
/* Description: Subscribe configuration for task DPDMNODRIVE */

/* Bit 31 :   */
#define USBD_SUBSCRIBE_DPDMNODRIVE_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_SUBSCRIBE_DPDMNODRIVE_EN_Msk (0x1UL << USBD_SUBSCRIBE_DPDMNODRIVE_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_SUBSCRIBE_DPDMNODRIVE_EN_Disabled (0UL) /*!< Disable subscription */
#define USBD_SUBSCRIBE_DPDMNODRIVE_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task DPDMNODRIVE will subscribe to */
#define USBD_SUBSCRIBE_DPDMNODRIVE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_SUBSCRIBE_DPDMNODRIVE_CHIDX_Msk (0xFFUL << USBD_SUBSCRIBE_DPDMNODRIVE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_EVENTS_USBRESET */
/* Description: Signals that a USB reset condition has been detected on USB lines */

/* Bit 0 : Signals that a USB reset condition has been detected on USB lines */
#define USBD_EVENTS_USBRESET_EVENTS_USBRESET_Pos (0UL) /*!< Position of EVENTS_USBRESET field. */
#define USBD_EVENTS_USBRESET_EVENTS_USBRESET_Msk (0x1UL << USBD_EVENTS_USBRESET_EVENTS_USBRESET_Pos) /*!< Bit mask of EVENTS_USBRESET field. */
#define USBD_EVENTS_USBRESET_EVENTS_USBRESET_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_USBRESET_EVENTS_USBRESET_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_STARTED */
/* Description: Confirms that the EPIN[n].PTR and EPIN[n].MAXCNT, or EPOUT[n].PTR and EPOUT[n].MAXCNT registers have been captured on all endpoints reported in the EPSTATUS register EPIN[n].CONFIG is also confirmed captured */

/* Bit 0 : Confirms that the EPIN[n].PTR and EPIN[n].MAXCNT, or EPOUT[n].PTR and EPOUT[n].MAXCNT registers have been captured on all endpoints reported in the EPSTATUS register EPIN[n].CONFIG is also confirmed captured */
#define USBD_EVENTS_STARTED_EVENTS_STARTED_Pos (0UL) /*!< Position of EVENTS_STARTED field. */
#define USBD_EVENTS_STARTED_EVENTS_STARTED_Msk (0x1UL << USBD_EVENTS_STARTED_EVENTS_STARTED_Pos) /*!< Bit mask of EVENTS_STARTED field. */
#define USBD_EVENTS_STARTED_EVENTS_STARTED_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_STARTED_EVENTS_STARTED_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_ENDEPIN */
/* Description: Description collection: The whole EPIN[n] buffer has been consumed. The buffer can be accessed safely by software. */

/* Bit 0 : The whole EPIN[n] buffer has been consumed. The buffer can be accessed safely by software. */
#define USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Pos (0UL) /*!< Position of EVENTS_ENDEPIN field. */
#define USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Msk (0x1UL << USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Pos) /*!< Bit mask of EVENTS_ENDEPIN field. */
#define USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_EP0DATADONE */
/* Description: An acknowledged data transfer has taken place on the control endpoint */

/* Bit 0 : An acknowledged data transfer has taken place on the control endpoint */
#define USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Pos (0UL) /*!< Position of EVENTS_EP0DATADONE field. */
#define USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Msk (0x1UL << USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Pos) /*!< Bit mask of EVENTS_EP0DATADONE field. */
#define USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_ENDISOIN */
/* Description: The whole ISOIN buffer has been consumed. The buffer can be accessed safely by software. */

/* Bit 0 : The whole ISOIN buffer has been consumed. The buffer can be accessed safely by software. */
#define USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Pos (0UL) /*!< Position of EVENTS_ENDISOIN field. */
#define USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Msk (0x1UL << USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Pos) /*!< Bit mask of EVENTS_ENDISOIN field. */
#define USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_ENDEPOUT */
/* Description: Description collection: The whole EPOUT[n] buffer has been consumed. The buffer can be accessed safely by software. */

/* Bit 0 : The whole EPOUT[n] buffer has been consumed. The buffer can be accessed safely by software. */
#define USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Pos (0UL) /*!< Position of EVENTS_ENDEPOUT field. */
#define USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Msk (0x1UL << USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Pos) /*!< Bit mask of EVENTS_ENDEPOUT field. */
#define USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_ENDISOOUT */
/* Description: The whole ISOOUT buffer has been consumed. The buffer can be accessed safely by software. */

/* Bit 0 : The whole ISOOUT buffer has been consumed. The buffer can be accessed safely by software. */
#define USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Pos (0UL) /*!< Position of EVENTS_ENDISOOUT field. */
#define USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Msk (0x1UL << USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Pos) /*!< Bit mask of EVENTS_ENDISOOUT field. */
#define USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_SOF */
/* Description: Signals that a SOF (start of frame) condition has been detected on USB lines */

/* Bit 0 : Signals that a SOF (start of frame) condition has been detected on USB lines */
#define USBD_EVENTS_SOF_EVENTS_SOF_Pos (0UL) /*!< Position of EVENTS_SOF field. */
#define USBD_EVENTS_SOF_EVENTS_SOF_Msk (0x1UL << USBD_EVENTS_SOF_EVENTS_SOF_Pos) /*!< Bit mask of EVENTS_SOF field. */
#define USBD_EVENTS_SOF_EVENTS_SOF_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_SOF_EVENTS_SOF_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_USBEVENT */
/* Description: An event or an error not covered by specific events has occurred. Check EVENTCAUSE register to find the cause. */

/* Bit 0 : An event or an error not covered by specific events has occurred. Check EVENTCAUSE register to find the cause. */
#define USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Pos (0UL) /*!< Position of EVENTS_USBEVENT field. */
#define USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Msk (0x1UL << USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Pos) /*!< Bit mask of EVENTS_USBEVENT field. */
#define USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_EP0SETUP */
/* Description: A valid SETUP token has been received (and acknowledged) on the control endpoint */

/* Bit 0 : A valid SETUP token has been received (and acknowledged) on the control endpoint */
#define USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Pos (0UL) /*!< Position of EVENTS_EP0SETUP field. */
#define USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Msk (0x1UL << USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Pos) /*!< Bit mask of EVENTS_EP0SETUP field. */
#define USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_EPDATA */
/* Description: A data transfer has occurred on a data endpoint, indicated by the EPDATASTATUS register */

/* Bit 0 : A data transfer has occurred on a data endpoint, indicated by the EPDATASTATUS register */
#define USBD_EVENTS_EPDATA_EVENTS_EPDATA_Pos (0UL) /*!< Position of EVENTS_EPDATA field. */
#define USBD_EVENTS_EPDATA_EVENTS_EPDATA_Msk (0x1UL << USBD_EVENTS_EPDATA_EVENTS_EPDATA_Pos) /*!< Bit mask of EVENTS_EPDATA field. */
#define USBD_EVENTS_EPDATA_EVENTS_EPDATA_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_EPDATA_EVENTS_EPDATA_Generated (1UL) /*!< Event generated */

/* Register: USBD_EVENTS_ACCESSFAULT */
/* Description: Access to an unavailable USB register has been attempted (software or EasyDMA). This event can be generated even when USBD is not enabled. */

/* Bit 0 : Access to an unavailable USB register has been attempted (software or EasyDMA). This event can be generated even when USBD is not enabled. */
#define USBD_EVENTS_ACCESSFAULT_EVENTS_ACCESSFAULT_Pos (0UL) /*!< Position of EVENTS_ACCESSFAULT field. */
#define USBD_EVENTS_ACCESSFAULT_EVENTS_ACCESSFAULT_Msk (0x1UL << USBD_EVENTS_ACCESSFAULT_EVENTS_ACCESSFAULT_Pos) /*!< Bit mask of EVENTS_ACCESSFAULT field. */
#define USBD_EVENTS_ACCESSFAULT_EVENTS_ACCESSFAULT_NotGenerated (0UL) /*!< Event not generated */
#define USBD_EVENTS_ACCESSFAULT_EVENTS_ACCESSFAULT_Generated (1UL) /*!< Event generated */

/* Register: USBD_PUBLISH_USBRESET */
/* Description: Publish configuration for event USBRESET */

/* Bit 31 :   */
#define USBD_PUBLISH_USBRESET_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_USBRESET_EN_Msk (0x1UL << USBD_PUBLISH_USBRESET_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_USBRESET_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_USBRESET_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event USBRESET will publish to. */
#define USBD_PUBLISH_USBRESET_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_USBRESET_CHIDX_Msk (0xFFUL << USBD_PUBLISH_USBRESET_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_STARTED */
/* Description: Publish configuration for event STARTED */

/* Bit 31 :   */
#define USBD_PUBLISH_STARTED_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_STARTED_EN_Msk (0x1UL << USBD_PUBLISH_STARTED_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_STARTED_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_STARTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STARTED will publish to. */
#define USBD_PUBLISH_STARTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_STARTED_CHIDX_Msk (0xFFUL << USBD_PUBLISH_STARTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_ENDEPIN */
/* Description: Description collection: Publish configuration for event ENDEPIN[n] */

/* Bit 31 :   */
#define USBD_PUBLISH_ENDEPIN_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_ENDEPIN_EN_Msk (0x1UL << USBD_PUBLISH_ENDEPIN_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_ENDEPIN_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_ENDEPIN_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDEPIN[n] will publish to. */
#define USBD_PUBLISH_ENDEPIN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_ENDEPIN_CHIDX_Msk (0xFFUL << USBD_PUBLISH_ENDEPIN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_EP0DATADONE */
/* Description: Publish configuration for event EP0DATADONE */

/* Bit 31 :   */
#define USBD_PUBLISH_EP0DATADONE_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_EP0DATADONE_EN_Msk (0x1UL << USBD_PUBLISH_EP0DATADONE_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_EP0DATADONE_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_EP0DATADONE_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event EP0DATADONE will publish to. */
#define USBD_PUBLISH_EP0DATADONE_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_EP0DATADONE_CHIDX_Msk (0xFFUL << USBD_PUBLISH_EP0DATADONE_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_ENDISOIN */
/* Description: Publish configuration for event ENDISOIN */

/* Bit 31 :   */
#define USBD_PUBLISH_ENDISOIN_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_ENDISOIN_EN_Msk (0x1UL << USBD_PUBLISH_ENDISOIN_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_ENDISOIN_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_ENDISOIN_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDISOIN will publish to. */
#define USBD_PUBLISH_ENDISOIN_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_ENDISOIN_CHIDX_Msk (0xFFUL << USBD_PUBLISH_ENDISOIN_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_ENDEPOUT */
/* Description: Description collection: Publish configuration for event ENDEPOUT[n] */

/* Bit 31 :   */
#define USBD_PUBLISH_ENDEPOUT_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_ENDEPOUT_EN_Msk (0x1UL << USBD_PUBLISH_ENDEPOUT_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_ENDEPOUT_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_ENDEPOUT_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDEPOUT[n] will publish to. */
#define USBD_PUBLISH_ENDEPOUT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_ENDEPOUT_CHIDX_Msk (0xFFUL << USBD_PUBLISH_ENDEPOUT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_ENDISOOUT */
/* Description: Publish configuration for event ENDISOOUT */

/* Bit 31 :   */
#define USBD_PUBLISH_ENDISOOUT_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_ENDISOOUT_EN_Msk (0x1UL << USBD_PUBLISH_ENDISOOUT_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_ENDISOOUT_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_ENDISOOUT_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ENDISOOUT will publish to. */
#define USBD_PUBLISH_ENDISOOUT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_ENDISOOUT_CHIDX_Msk (0xFFUL << USBD_PUBLISH_ENDISOOUT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_SOF */
/* Description: Publish configuration for event SOF */

/* Bit 31 :   */
#define USBD_PUBLISH_SOF_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_SOF_EN_Msk (0x1UL << USBD_PUBLISH_SOF_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_SOF_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_SOF_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event SOF will publish to. */
#define USBD_PUBLISH_SOF_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_SOF_CHIDX_Msk (0xFFUL << USBD_PUBLISH_SOF_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_USBEVENT */
/* Description: Publish configuration for event USBEVENT */

/* Bit 31 :   */
#define USBD_PUBLISH_USBEVENT_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_USBEVENT_EN_Msk (0x1UL << USBD_PUBLISH_USBEVENT_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_USBEVENT_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_USBEVENT_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event USBEVENT will publish to. */
#define USBD_PUBLISH_USBEVENT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_USBEVENT_CHIDX_Msk (0xFFUL << USBD_PUBLISH_USBEVENT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_EP0SETUP */
/* Description: Publish configuration for event EP0SETUP */

/* Bit 31 :   */
#define USBD_PUBLISH_EP0SETUP_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_EP0SETUP_EN_Msk (0x1UL << USBD_PUBLISH_EP0SETUP_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_EP0SETUP_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_EP0SETUP_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event EP0SETUP will publish to. */
#define USBD_PUBLISH_EP0SETUP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_EP0SETUP_CHIDX_Msk (0xFFUL << USBD_PUBLISH_EP0SETUP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_EPDATA */
/* Description: Publish configuration for event EPDATA */

/* Bit 31 :   */
#define USBD_PUBLISH_EPDATA_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_EPDATA_EN_Msk (0x1UL << USBD_PUBLISH_EPDATA_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_EPDATA_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_EPDATA_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event EPDATA will publish to. */
#define USBD_PUBLISH_EPDATA_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_EPDATA_CHIDX_Msk (0xFFUL << USBD_PUBLISH_EPDATA_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_PUBLISH_ACCESSFAULT */
/* Description: Publish configuration for event ACCESSFAULT */

/* Bit 31 :   */
#define USBD_PUBLISH_ACCESSFAULT_EN_Pos (31UL) /*!< Position of EN field. */
#define USBD_PUBLISH_ACCESSFAULT_EN_Msk (0x1UL << USBD_PUBLISH_ACCESSFAULT_EN_Pos) /*!< Bit mask of EN field. */
#define USBD_PUBLISH_ACCESSFAULT_EN_Disabled (0UL) /*!< Disable publishing */
#define USBD_PUBLISH_ACCESSFAULT_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event ACCESSFAULT will publish to. */
#define USBD_PUBLISH_ACCESSFAULT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBD_PUBLISH_ACCESSFAULT_CHIDX_Msk (0xFFUL << USBD_PUBLISH_ACCESSFAULT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBD_SHORTS */
/* Description: Shortcuts between local events and tasks */

/* Bit 8 : Shortcut between event ENDISOOUT and task STARTISOIN */
#define USBD_SHORTS_ENDISOOUT_STARTISOIN_Pos (8UL) /*!< Position of ENDISOOUT_STARTISOIN field. */
#define USBD_SHORTS_ENDISOOUT_STARTISOIN_Msk (0x1UL << USBD_SHORTS_ENDISOOUT_STARTISOIN_Pos) /*!< Bit mask of ENDISOOUT_STARTISOIN field. */
#define USBD_SHORTS_ENDISOOUT_STARTISOIN_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_ENDISOOUT_STARTISOIN_Enabled (1UL) /*!< Enable shortcut */

/* Bit 7 : Shortcut between event ENDISOIN and task STARTISOOUT */
#define USBD_SHORTS_ENDISOIN_STARTISOOUT_Pos (7UL) /*!< Position of ENDISOIN_STARTISOOUT field. */
#define USBD_SHORTS_ENDISOIN_STARTISOOUT_Msk (0x1UL << USBD_SHORTS_ENDISOIN_STARTISOOUT_Pos) /*!< Bit mask of ENDISOIN_STARTISOOUT field. */
#define USBD_SHORTS_ENDISOIN_STARTISOOUT_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_ENDISOIN_STARTISOOUT_Enabled (1UL) /*!< Enable shortcut */

/* Bit 6 : Shortcut between event SOF and task STARTISOOUT */
#define USBD_SHORTS_SOF_STARTISOOUT_Pos (6UL) /*!< Position of SOF_STARTISOOUT field. */
#define USBD_SHORTS_SOF_STARTISOOUT_Msk (0x1UL << USBD_SHORTS_SOF_STARTISOOUT_Pos) /*!< Bit mask of SOF_STARTISOOUT field. */
#define USBD_SHORTS_SOF_STARTISOOUT_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_SOF_STARTISOOUT_Enabled (1UL) /*!< Enable shortcut */

/* Bit 5 : Shortcut between event SOF and task STARTISOIN */
#define USBD_SHORTS_SOF_STARTISOIN_Pos (5UL) /*!< Position of SOF_STARTISOIN field. */
#define USBD_SHORTS_SOF_STARTISOIN_Msk (0x1UL << USBD_SHORTS_SOF_STARTISOIN_Pos) /*!< Bit mask of SOF_STARTISOIN field. */
#define USBD_SHORTS_SOF_STARTISOIN_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_SOF_STARTISOIN_Enabled (1UL) /*!< Enable shortcut */

/* Bit 4 : Shortcut between event ENDEPOUT[0] and task EP0RCVOUT */
#define USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Pos (4UL) /*!< Position of ENDEPOUT0_EP0RCVOUT field. */
#define USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Msk (0x1UL << USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Pos) /*!< Bit mask of ENDEPOUT0_EP0RCVOUT field. */
#define USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Enabled (1UL) /*!< Enable shortcut */

/* Bit 3 : Shortcut between event ENDEPOUT[0] and task EP0STATUS */
#define USBD_SHORTS_ENDEPOUT0_EP0STATUS_Pos (3UL) /*!< Position of ENDEPOUT0_EP0STATUS field. */
#define USBD_SHORTS_ENDEPOUT0_EP0STATUS_Msk (0x1UL << USBD_SHORTS_ENDEPOUT0_EP0STATUS_Pos) /*!< Bit mask of ENDEPOUT0_EP0STATUS field. */
#define USBD_SHORTS_ENDEPOUT0_EP0STATUS_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_ENDEPOUT0_EP0STATUS_Enabled (1UL) /*!< Enable shortcut */

/* Bit 2 : Shortcut between event EP0DATADONE and task EP0STATUS */
#define USBD_SHORTS_EP0DATADONE_EP0STATUS_Pos (2UL) /*!< Position of EP0DATADONE_EP0STATUS field. */
#define USBD_SHORTS_EP0DATADONE_EP0STATUS_Msk (0x1UL << USBD_SHORTS_EP0DATADONE_EP0STATUS_Pos) /*!< Bit mask of EP0DATADONE_EP0STATUS field. */
#define USBD_SHORTS_EP0DATADONE_EP0STATUS_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_EP0DATADONE_EP0STATUS_Enabled (1UL) /*!< Enable shortcut */

/* Bit 1 : Shortcut between event EP0DATADONE and task STARTEPOUT[0] */
#define USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Pos (1UL) /*!< Position of EP0DATADONE_STARTEPOUT0 field. */
#define USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Msk (0x1UL << USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Pos) /*!< Bit mask of EP0DATADONE_STARTEPOUT0 field. */
#define USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Enabled (1UL) /*!< Enable shortcut */

/* Bit 0 : Shortcut between event EP0DATADONE and task STARTEPIN[0] */
#define USBD_SHORTS_EP0DATADONE_STARTEPIN0_Pos (0UL) /*!< Position of EP0DATADONE_STARTEPIN0 field. */
#define USBD_SHORTS_EP0DATADONE_STARTEPIN0_Msk (0x1UL << USBD_SHORTS_EP0DATADONE_STARTEPIN0_Pos) /*!< Bit mask of EP0DATADONE_STARTEPIN0 field. */
#define USBD_SHORTS_EP0DATADONE_STARTEPIN0_Disabled (0UL) /*!< Disable shortcut */
#define USBD_SHORTS_EP0DATADONE_STARTEPIN0_Enabled (1UL) /*!< Enable shortcut */

/* Register: USBD_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 25 : Enable or disable interrupt for event ACCESSFAULT */
#define USBD_INTEN_ACCESSFAULT_Pos (25UL) /*!< Position of ACCESSFAULT field. */
#define USBD_INTEN_ACCESSFAULT_Msk (0x1UL << USBD_INTEN_ACCESSFAULT_Pos) /*!< Bit mask of ACCESSFAULT field. */
#define USBD_INTEN_ACCESSFAULT_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ACCESSFAULT_Enabled (1UL) /*!< Enable */

/* Bit 24 : Enable or disable interrupt for event EPDATA */
#define USBD_INTEN_EPDATA_Pos (24UL) /*!< Position of EPDATA field. */
#define USBD_INTEN_EPDATA_Msk (0x1UL << USBD_INTEN_EPDATA_Pos) /*!< Bit mask of EPDATA field. */
#define USBD_INTEN_EPDATA_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_EPDATA_Enabled (1UL) /*!< Enable */

/* Bit 23 : Enable or disable interrupt for event EP0SETUP */
#define USBD_INTEN_EP0SETUP_Pos (23UL) /*!< Position of EP0SETUP field. */
#define USBD_INTEN_EP0SETUP_Msk (0x1UL << USBD_INTEN_EP0SETUP_Pos) /*!< Bit mask of EP0SETUP field. */
#define USBD_INTEN_EP0SETUP_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_EP0SETUP_Enabled (1UL) /*!< Enable */

/* Bit 22 : Enable or disable interrupt for event USBEVENT */
#define USBD_INTEN_USBEVENT_Pos (22UL) /*!< Position of USBEVENT field. */
#define USBD_INTEN_USBEVENT_Msk (0x1UL << USBD_INTEN_USBEVENT_Pos) /*!< Bit mask of USBEVENT field. */
#define USBD_INTEN_USBEVENT_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_USBEVENT_Enabled (1UL) /*!< Enable */

/* Bit 21 : Enable or disable interrupt for event SOF */
#define USBD_INTEN_SOF_Pos (21UL) /*!< Position of SOF field. */
#define USBD_INTEN_SOF_Msk (0x1UL << USBD_INTEN_SOF_Pos) /*!< Bit mask of SOF field. */
#define USBD_INTEN_SOF_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_SOF_Enabled (1UL) /*!< Enable */

/* Bit 20 : Enable or disable interrupt for event ENDISOOUT */
#define USBD_INTEN_ENDISOOUT_Pos (20UL) /*!< Position of ENDISOOUT field. */
#define USBD_INTEN_ENDISOOUT_Msk (0x1UL << USBD_INTEN_ENDISOOUT_Pos) /*!< Bit mask of ENDISOOUT field. */
#define USBD_INTEN_ENDISOOUT_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDISOOUT_Enabled (1UL) /*!< Enable */

/* Bit 19 : Enable or disable interrupt for event ENDEPOUT[7] */
#define USBD_INTEN_ENDEPOUT7_Pos (19UL) /*!< Position of ENDEPOUT7 field. */
#define USBD_INTEN_ENDEPOUT7_Msk (0x1UL << USBD_INTEN_ENDEPOUT7_Pos) /*!< Bit mask of ENDEPOUT7 field. */
#define USBD_INTEN_ENDEPOUT7_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPOUT7_Enabled (1UL) /*!< Enable */

/* Bit 18 : Enable or disable interrupt for event ENDEPOUT[6] */
#define USBD_INTEN_ENDEPOUT6_Pos (18UL) /*!< Position of ENDEPOUT6 field. */
#define USBD_INTEN_ENDEPOUT6_Msk (0x1UL << USBD_INTEN_ENDEPOUT6_Pos) /*!< Bit mask of ENDEPOUT6 field. */
#define USBD_INTEN_ENDEPOUT6_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPOUT6_Enabled (1UL) /*!< Enable */

/* Bit 17 : Enable or disable interrupt for event ENDEPOUT[5] */
#define USBD_INTEN_ENDEPOUT5_Pos (17UL) /*!< Position of ENDEPOUT5 field. */
#define USBD_INTEN_ENDEPOUT5_Msk (0x1UL << USBD_INTEN_ENDEPOUT5_Pos) /*!< Bit mask of ENDEPOUT5 field. */
#define USBD_INTEN_ENDEPOUT5_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPOUT5_Enabled (1UL) /*!< Enable */

/* Bit 16 : Enable or disable interrupt for event ENDEPOUT[4] */
#define USBD_INTEN_ENDEPOUT4_Pos (16UL) /*!< Position of ENDEPOUT4 field. */
#define USBD_INTEN_ENDEPOUT4_Msk (0x1UL << USBD_INTEN_ENDEPOUT4_Pos) /*!< Bit mask of ENDEPOUT4 field. */
#define USBD_INTEN_ENDEPOUT4_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPOUT4_Enabled (1UL) /*!< Enable */

/* Bit 15 : Enable or disable interrupt for event ENDEPOUT[3] */
#define USBD_INTEN_ENDEPOUT3_Pos (15UL) /*!< Position of ENDEPOUT3 field. */
#define USBD_INTEN_ENDEPOUT3_Msk (0x1UL << USBD_INTEN_ENDEPOUT3_Pos) /*!< Bit mask of ENDEPOUT3 field. */
#define USBD_INTEN_ENDEPOUT3_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPOUT3_Enabled (1UL) /*!< Enable */

/* Bit 14 : Enable or disable interrupt for event ENDEPOUT[2] */
#define USBD_INTEN_ENDEPOUT2_Pos (14UL) /*!< Position of ENDEPOUT2 field. */
#define USBD_INTEN_ENDEPOUT2_Msk (0x1UL << USBD_INTEN_ENDEPOUT2_Pos) /*!< Bit mask of ENDEPOUT2 field. */
#define USBD_INTEN_ENDEPOUT2_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPOUT2_Enabled (1UL) /*!< Enable */

/* Bit 13 : Enable or disable interrupt for event ENDEPOUT[1] */
#define USBD_INTEN_ENDEPOUT1_Pos (13UL) /*!< Position of ENDEPOUT1 field. */
#define USBD_INTEN_ENDEPOUT1_Msk (0x1UL << USBD_INTEN_ENDEPOUT1_Pos) /*!< Bit mask of ENDEPOUT1 field. */
#define USBD_INTEN_ENDEPOUT1_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPOUT1_Enabled (1UL) /*!< Enable */

/* Bit 12 : Enable or disable interrupt for event ENDEPOUT[0] */
#define USBD_INTEN_ENDEPOUT0_Pos (12UL) /*!< Position of ENDEPOUT0 field. */
#define USBD_INTEN_ENDEPOUT0_Msk (0x1UL << USBD_INTEN_ENDEPOUT0_Pos) /*!< Bit mask of ENDEPOUT0 field. */
#define USBD_INTEN_ENDEPOUT0_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPOUT0_Enabled (1UL) /*!< Enable */

/* Bit 11 : Enable or disable interrupt for event ENDISOIN */
#define USBD_INTEN_ENDISOIN_Pos (11UL) /*!< Position of ENDISOIN field. */
#define USBD_INTEN_ENDISOIN_Msk (0x1UL << USBD_INTEN_ENDISOIN_Pos) /*!< Bit mask of ENDISOIN field. */
#define USBD_INTEN_ENDISOIN_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDISOIN_Enabled (1UL) /*!< Enable */

/* Bit 10 : Enable or disable interrupt for event EP0DATADONE */
#define USBD_INTEN_EP0DATADONE_Pos (10UL) /*!< Position of EP0DATADONE field. */
#define USBD_INTEN_EP0DATADONE_Msk (0x1UL << USBD_INTEN_EP0DATADONE_Pos) /*!< Bit mask of EP0DATADONE field. */
#define USBD_INTEN_EP0DATADONE_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_EP0DATADONE_Enabled (1UL) /*!< Enable */

/* Bit 9 : Enable or disable interrupt for event ENDEPIN[7] */
#define USBD_INTEN_ENDEPIN7_Pos (9UL) /*!< Position of ENDEPIN7 field. */
#define USBD_INTEN_ENDEPIN7_Msk (0x1UL << USBD_INTEN_ENDEPIN7_Pos) /*!< Bit mask of ENDEPIN7 field. */
#define USBD_INTEN_ENDEPIN7_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPIN7_Enabled (1UL) /*!< Enable */

/* Bit 8 : Enable or disable interrupt for event ENDEPIN[6] */
#define USBD_INTEN_ENDEPIN6_Pos (8UL) /*!< Position of ENDEPIN6 field. */
#define USBD_INTEN_ENDEPIN6_Msk (0x1UL << USBD_INTEN_ENDEPIN6_Pos) /*!< Bit mask of ENDEPIN6 field. */
#define USBD_INTEN_ENDEPIN6_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPIN6_Enabled (1UL) /*!< Enable */

/* Bit 7 : Enable or disable interrupt for event ENDEPIN[5] */
#define USBD_INTEN_ENDEPIN5_Pos (7UL) /*!< Position of ENDEPIN5 field. */
#define USBD_INTEN_ENDEPIN5_Msk (0x1UL << USBD_INTEN_ENDEPIN5_Pos) /*!< Bit mask of ENDEPIN5 field. */
#define USBD_INTEN_ENDEPIN5_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPIN5_Enabled (1UL) /*!< Enable */

/* Bit 6 : Enable or disable interrupt for event ENDEPIN[4] */
#define USBD_INTEN_ENDEPIN4_Pos (6UL) /*!< Position of ENDEPIN4 field. */
#define USBD_INTEN_ENDEPIN4_Msk (0x1UL << USBD_INTEN_ENDEPIN4_Pos) /*!< Bit mask of ENDEPIN4 field. */
#define USBD_INTEN_ENDEPIN4_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPIN4_Enabled (1UL) /*!< Enable */

/* Bit 5 : Enable or disable interrupt for event ENDEPIN[3] */
#define USBD_INTEN_ENDEPIN3_Pos (5UL) /*!< Position of ENDEPIN3 field. */
#define USBD_INTEN_ENDEPIN3_Msk (0x1UL << USBD_INTEN_ENDEPIN3_Pos) /*!< Bit mask of ENDEPIN3 field. */
#define USBD_INTEN_ENDEPIN3_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPIN3_Enabled (1UL) /*!< Enable */

/* Bit 4 : Enable or disable interrupt for event ENDEPIN[2] */
#define USBD_INTEN_ENDEPIN2_Pos (4UL) /*!< Position of ENDEPIN2 field. */
#define USBD_INTEN_ENDEPIN2_Msk (0x1UL << USBD_INTEN_ENDEPIN2_Pos) /*!< Bit mask of ENDEPIN2 field. */
#define USBD_INTEN_ENDEPIN2_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPIN2_Enabled (1UL) /*!< Enable */

/* Bit 3 : Enable or disable interrupt for event ENDEPIN[1] */
#define USBD_INTEN_ENDEPIN1_Pos (3UL) /*!< Position of ENDEPIN1 field. */
#define USBD_INTEN_ENDEPIN1_Msk (0x1UL << USBD_INTEN_ENDEPIN1_Pos) /*!< Bit mask of ENDEPIN1 field. */
#define USBD_INTEN_ENDEPIN1_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPIN1_Enabled (1UL) /*!< Enable */

/* Bit 2 : Enable or disable interrupt for event ENDEPIN[0] */
#define USBD_INTEN_ENDEPIN0_Pos (2UL) /*!< Position of ENDEPIN0 field. */
#define USBD_INTEN_ENDEPIN0_Msk (0x1UL << USBD_INTEN_ENDEPIN0_Pos) /*!< Bit mask of ENDEPIN0 field. */
#define USBD_INTEN_ENDEPIN0_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_ENDEPIN0_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event STARTED */
#define USBD_INTEN_STARTED_Pos (1UL) /*!< Position of STARTED field. */
#define USBD_INTEN_STARTED_Msk (0x1UL << USBD_INTEN_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define USBD_INTEN_STARTED_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_STARTED_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event USBRESET */
#define USBD_INTEN_USBRESET_Pos (0UL) /*!< Position of USBRESET field. */
#define USBD_INTEN_USBRESET_Msk (0x1UL << USBD_INTEN_USBRESET_Pos) /*!< Bit mask of USBRESET field. */
#define USBD_INTEN_USBRESET_Disabled (0UL) /*!< Disable */
#define USBD_INTEN_USBRESET_Enabled (1UL) /*!< Enable */

/* Register: USBD_INTENSET */
/* Description: Enable interrupt */

/* Bit 25 : Write '1' to enable interrupt for event ACCESSFAULT */
#define USBD_INTENSET_ACCESSFAULT_Pos (25UL) /*!< Position of ACCESSFAULT field. */
#define USBD_INTENSET_ACCESSFAULT_Msk (0x1UL << USBD_INTENSET_ACCESSFAULT_Pos) /*!< Bit mask of ACCESSFAULT field. */
#define USBD_INTENSET_ACCESSFAULT_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ACCESSFAULT_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ACCESSFAULT_Set (1UL) /*!< Enable */

/* Bit 24 : Write '1' to enable interrupt for event EPDATA */
#define USBD_INTENSET_EPDATA_Pos (24UL) /*!< Position of EPDATA field. */
#define USBD_INTENSET_EPDATA_Msk (0x1UL << USBD_INTENSET_EPDATA_Pos) /*!< Bit mask of EPDATA field. */
#define USBD_INTENSET_EPDATA_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_EPDATA_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_EPDATA_Set (1UL) /*!< Enable */

/* Bit 23 : Write '1' to enable interrupt for event EP0SETUP */
#define USBD_INTENSET_EP0SETUP_Pos (23UL) /*!< Position of EP0SETUP field. */
#define USBD_INTENSET_EP0SETUP_Msk (0x1UL << USBD_INTENSET_EP0SETUP_Pos) /*!< Bit mask of EP0SETUP field. */
#define USBD_INTENSET_EP0SETUP_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_EP0SETUP_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_EP0SETUP_Set (1UL) /*!< Enable */

/* Bit 22 : Write '1' to enable interrupt for event USBEVENT */
#define USBD_INTENSET_USBEVENT_Pos (22UL) /*!< Position of USBEVENT field. */
#define USBD_INTENSET_USBEVENT_Msk (0x1UL << USBD_INTENSET_USBEVENT_Pos) /*!< Bit mask of USBEVENT field. */
#define USBD_INTENSET_USBEVENT_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_USBEVENT_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_USBEVENT_Set (1UL) /*!< Enable */

/* Bit 21 : Write '1' to enable interrupt for event SOF */
#define USBD_INTENSET_SOF_Pos (21UL) /*!< Position of SOF field. */
#define USBD_INTENSET_SOF_Msk (0x1UL << USBD_INTENSET_SOF_Pos) /*!< Bit mask of SOF field. */
#define USBD_INTENSET_SOF_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_SOF_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_SOF_Set (1UL) /*!< Enable */

/* Bit 20 : Write '1' to enable interrupt for event ENDISOOUT */
#define USBD_INTENSET_ENDISOOUT_Pos (20UL) /*!< Position of ENDISOOUT field. */
#define USBD_INTENSET_ENDISOOUT_Msk (0x1UL << USBD_INTENSET_ENDISOOUT_Pos) /*!< Bit mask of ENDISOOUT field. */
#define USBD_INTENSET_ENDISOOUT_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDISOOUT_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDISOOUT_Set (1UL) /*!< Enable */

/* Bit 19 : Write '1' to enable interrupt for event ENDEPOUT[7] */
#define USBD_INTENSET_ENDEPOUT7_Pos (19UL) /*!< Position of ENDEPOUT7 field. */
#define USBD_INTENSET_ENDEPOUT7_Msk (0x1UL << USBD_INTENSET_ENDEPOUT7_Pos) /*!< Bit mask of ENDEPOUT7 field. */
#define USBD_INTENSET_ENDEPOUT7_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPOUT7_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPOUT7_Set (1UL) /*!< Enable */

/* Bit 18 : Write '1' to enable interrupt for event ENDEPOUT[6] */
#define USBD_INTENSET_ENDEPOUT6_Pos (18UL) /*!< Position of ENDEPOUT6 field. */
#define USBD_INTENSET_ENDEPOUT6_Msk (0x1UL << USBD_INTENSET_ENDEPOUT6_Pos) /*!< Bit mask of ENDEPOUT6 field. */
#define USBD_INTENSET_ENDEPOUT6_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPOUT6_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPOUT6_Set (1UL) /*!< Enable */

/* Bit 17 : Write '1' to enable interrupt for event ENDEPOUT[5] */
#define USBD_INTENSET_ENDEPOUT5_Pos (17UL) /*!< Position of ENDEPOUT5 field. */
#define USBD_INTENSET_ENDEPOUT5_Msk (0x1UL << USBD_INTENSET_ENDEPOUT5_Pos) /*!< Bit mask of ENDEPOUT5 field. */
#define USBD_INTENSET_ENDEPOUT5_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPOUT5_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPOUT5_Set (1UL) /*!< Enable */

/* Bit 16 : Write '1' to enable interrupt for event ENDEPOUT[4] */
#define USBD_INTENSET_ENDEPOUT4_Pos (16UL) /*!< Position of ENDEPOUT4 field. */
#define USBD_INTENSET_ENDEPOUT4_Msk (0x1UL << USBD_INTENSET_ENDEPOUT4_Pos) /*!< Bit mask of ENDEPOUT4 field. */
#define USBD_INTENSET_ENDEPOUT4_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPOUT4_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPOUT4_Set (1UL) /*!< Enable */

/* Bit 15 : Write '1' to enable interrupt for event ENDEPOUT[3] */
#define USBD_INTENSET_ENDEPOUT3_Pos (15UL) /*!< Position of ENDEPOUT3 field. */
#define USBD_INTENSET_ENDEPOUT3_Msk (0x1UL << USBD_INTENSET_ENDEPOUT3_Pos) /*!< Bit mask of ENDEPOUT3 field. */
#define USBD_INTENSET_ENDEPOUT3_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPOUT3_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPOUT3_Set (1UL) /*!< Enable */

/* Bit 14 : Write '1' to enable interrupt for event ENDEPOUT[2] */
#define USBD_INTENSET_ENDEPOUT2_Pos (14UL) /*!< Position of ENDEPOUT2 field. */
#define USBD_INTENSET_ENDEPOUT2_Msk (0x1UL << USBD_INTENSET_ENDEPOUT2_Pos) /*!< Bit mask of ENDEPOUT2 field. */
#define USBD_INTENSET_ENDEPOUT2_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPOUT2_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPOUT2_Set (1UL) /*!< Enable */

/* Bit 13 : Write '1' to enable interrupt for event ENDEPOUT[1] */
#define USBD_INTENSET_ENDEPOUT1_Pos (13UL) /*!< Position of ENDEPOUT1 field. */
#define USBD_INTENSET_ENDEPOUT1_Msk (0x1UL << USBD_INTENSET_ENDEPOUT1_Pos) /*!< Bit mask of ENDEPOUT1 field. */
#define USBD_INTENSET_ENDEPOUT1_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPOUT1_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPOUT1_Set (1UL) /*!< Enable */

/* Bit 12 : Write '1' to enable interrupt for event ENDEPOUT[0] */
#define USBD_INTENSET_ENDEPOUT0_Pos (12UL) /*!< Position of ENDEPOUT0 field. */
#define USBD_INTENSET_ENDEPOUT0_Msk (0x1UL << USBD_INTENSET_ENDEPOUT0_Pos) /*!< Bit mask of ENDEPOUT0 field. */
#define USBD_INTENSET_ENDEPOUT0_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPOUT0_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPOUT0_Set (1UL) /*!< Enable */

/* Bit 11 : Write '1' to enable interrupt for event ENDISOIN */
#define USBD_INTENSET_ENDISOIN_Pos (11UL) /*!< Position of ENDISOIN field. */
#define USBD_INTENSET_ENDISOIN_Msk (0x1UL << USBD_INTENSET_ENDISOIN_Pos) /*!< Bit mask of ENDISOIN field. */
#define USBD_INTENSET_ENDISOIN_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDISOIN_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDISOIN_Set (1UL) /*!< Enable */

/* Bit 10 : Write '1' to enable interrupt for event EP0DATADONE */
#define USBD_INTENSET_EP0DATADONE_Pos (10UL) /*!< Position of EP0DATADONE field. */
#define USBD_INTENSET_EP0DATADONE_Msk (0x1UL << USBD_INTENSET_EP0DATADONE_Pos) /*!< Bit mask of EP0DATADONE field. */
#define USBD_INTENSET_EP0DATADONE_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_EP0DATADONE_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_EP0DATADONE_Set (1UL) /*!< Enable */

/* Bit 9 : Write '1' to enable interrupt for event ENDEPIN[7] */
#define USBD_INTENSET_ENDEPIN7_Pos (9UL) /*!< Position of ENDEPIN7 field. */
#define USBD_INTENSET_ENDEPIN7_Msk (0x1UL << USBD_INTENSET_ENDEPIN7_Pos) /*!< Bit mask of ENDEPIN7 field. */
#define USBD_INTENSET_ENDEPIN7_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPIN7_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPIN7_Set (1UL) /*!< Enable */

/* Bit 8 : Write '1' to enable interrupt for event ENDEPIN[6] */
#define USBD_INTENSET_ENDEPIN6_Pos (8UL) /*!< Position of ENDEPIN6 field. */
#define USBD_INTENSET_ENDEPIN6_Msk (0x1UL << USBD_INTENSET_ENDEPIN6_Pos) /*!< Bit mask of ENDEPIN6 field. */
#define USBD_INTENSET_ENDEPIN6_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPIN6_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPIN6_Set (1UL) /*!< Enable */

/* Bit 7 : Write '1' to enable interrupt for event ENDEPIN[5] */
#define USBD_INTENSET_ENDEPIN5_Pos (7UL) /*!< Position of ENDEPIN5 field. */
#define USBD_INTENSET_ENDEPIN5_Msk (0x1UL << USBD_INTENSET_ENDEPIN5_Pos) /*!< Bit mask of ENDEPIN5 field. */
#define USBD_INTENSET_ENDEPIN5_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPIN5_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPIN5_Set (1UL) /*!< Enable */

/* Bit 6 : Write '1' to enable interrupt for event ENDEPIN[4] */
#define USBD_INTENSET_ENDEPIN4_Pos (6UL) /*!< Position of ENDEPIN4 field. */
#define USBD_INTENSET_ENDEPIN4_Msk (0x1UL << USBD_INTENSET_ENDEPIN4_Pos) /*!< Bit mask of ENDEPIN4 field. */
#define USBD_INTENSET_ENDEPIN4_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPIN4_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPIN4_Set (1UL) /*!< Enable */

/* Bit 5 : Write '1' to enable interrupt for event ENDEPIN[3] */
#define USBD_INTENSET_ENDEPIN3_Pos (5UL) /*!< Position of ENDEPIN3 field. */
#define USBD_INTENSET_ENDEPIN3_Msk (0x1UL << USBD_INTENSET_ENDEPIN3_Pos) /*!< Bit mask of ENDEPIN3 field. */
#define USBD_INTENSET_ENDEPIN3_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPIN3_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPIN3_Set (1UL) /*!< Enable */

/* Bit 4 : Write '1' to enable interrupt for event ENDEPIN[2] */
#define USBD_INTENSET_ENDEPIN2_Pos (4UL) /*!< Position of ENDEPIN2 field. */
#define USBD_INTENSET_ENDEPIN2_Msk (0x1UL << USBD_INTENSET_ENDEPIN2_Pos) /*!< Bit mask of ENDEPIN2 field. */
#define USBD_INTENSET_ENDEPIN2_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPIN2_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPIN2_Set (1UL) /*!< Enable */

/* Bit 3 : Write '1' to enable interrupt for event ENDEPIN[1] */
#define USBD_INTENSET_ENDEPIN1_Pos (3UL) /*!< Position of ENDEPIN1 field. */
#define USBD_INTENSET_ENDEPIN1_Msk (0x1UL << USBD_INTENSET_ENDEPIN1_Pos) /*!< Bit mask of ENDEPIN1 field. */
#define USBD_INTENSET_ENDEPIN1_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPIN1_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPIN1_Set (1UL) /*!< Enable */

/* Bit 2 : Write '1' to enable interrupt for event ENDEPIN[0] */
#define USBD_INTENSET_ENDEPIN0_Pos (2UL) /*!< Position of ENDEPIN0 field. */
#define USBD_INTENSET_ENDEPIN0_Msk (0x1UL << USBD_INTENSET_ENDEPIN0_Pos) /*!< Bit mask of ENDEPIN0 field. */
#define USBD_INTENSET_ENDEPIN0_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_ENDEPIN0_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_ENDEPIN0_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event STARTED */
#define USBD_INTENSET_STARTED_Pos (1UL) /*!< Position of STARTED field. */
#define USBD_INTENSET_STARTED_Msk (0x1UL << USBD_INTENSET_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define USBD_INTENSET_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_STARTED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event USBRESET */
#define USBD_INTENSET_USBRESET_Pos (0UL) /*!< Position of USBRESET field. */
#define USBD_INTENSET_USBRESET_Msk (0x1UL << USBD_INTENSET_USBRESET_Pos) /*!< Bit mask of USBRESET field. */
#define USBD_INTENSET_USBRESET_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENSET_USBRESET_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENSET_USBRESET_Set (1UL) /*!< Enable */

/* Register: USBD_INTENCLR */
/* Description: Disable interrupt */

/* Bit 25 : Write '1' to disable interrupt for event ACCESSFAULT */
#define USBD_INTENCLR_ACCESSFAULT_Pos (25UL) /*!< Position of ACCESSFAULT field. */
#define USBD_INTENCLR_ACCESSFAULT_Msk (0x1UL << USBD_INTENCLR_ACCESSFAULT_Pos) /*!< Bit mask of ACCESSFAULT field. */
#define USBD_INTENCLR_ACCESSFAULT_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ACCESSFAULT_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ACCESSFAULT_Clear (1UL) /*!< Disable */

/* Bit 24 : Write '1' to disable interrupt for event EPDATA */
#define USBD_INTENCLR_EPDATA_Pos (24UL) /*!< Position of EPDATA field. */
#define USBD_INTENCLR_EPDATA_Msk (0x1UL << USBD_INTENCLR_EPDATA_Pos) /*!< Bit mask of EPDATA field. */
#define USBD_INTENCLR_EPDATA_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_EPDATA_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_EPDATA_Clear (1UL) /*!< Disable */

/* Bit 23 : Write '1' to disable interrupt for event EP0SETUP */
#define USBD_INTENCLR_EP0SETUP_Pos (23UL) /*!< Position of EP0SETUP field. */
#define USBD_INTENCLR_EP0SETUP_Msk (0x1UL << USBD_INTENCLR_EP0SETUP_Pos) /*!< Bit mask of EP0SETUP field. */
#define USBD_INTENCLR_EP0SETUP_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_EP0SETUP_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_EP0SETUP_Clear (1UL) /*!< Disable */

/* Bit 22 : Write '1' to disable interrupt for event USBEVENT */
#define USBD_INTENCLR_USBEVENT_Pos (22UL) /*!< Position of USBEVENT field. */
#define USBD_INTENCLR_USBEVENT_Msk (0x1UL << USBD_INTENCLR_USBEVENT_Pos) /*!< Bit mask of USBEVENT field. */
#define USBD_INTENCLR_USBEVENT_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_USBEVENT_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_USBEVENT_Clear (1UL) /*!< Disable */

/* Bit 21 : Write '1' to disable interrupt for event SOF */
#define USBD_INTENCLR_SOF_Pos (21UL) /*!< Position of SOF field. */
#define USBD_INTENCLR_SOF_Msk (0x1UL << USBD_INTENCLR_SOF_Pos) /*!< Bit mask of SOF field. */
#define USBD_INTENCLR_SOF_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_SOF_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_SOF_Clear (1UL) /*!< Disable */

/* Bit 20 : Write '1' to disable interrupt for event ENDISOOUT */
#define USBD_INTENCLR_ENDISOOUT_Pos (20UL) /*!< Position of ENDISOOUT field. */
#define USBD_INTENCLR_ENDISOOUT_Msk (0x1UL << USBD_INTENCLR_ENDISOOUT_Pos) /*!< Bit mask of ENDISOOUT field. */
#define USBD_INTENCLR_ENDISOOUT_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDISOOUT_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDISOOUT_Clear (1UL) /*!< Disable */

/* Bit 19 : Write '1' to disable interrupt for event ENDEPOUT[7] */
#define USBD_INTENCLR_ENDEPOUT7_Pos (19UL) /*!< Position of ENDEPOUT7 field. */
#define USBD_INTENCLR_ENDEPOUT7_Msk (0x1UL << USBD_INTENCLR_ENDEPOUT7_Pos) /*!< Bit mask of ENDEPOUT7 field. */
#define USBD_INTENCLR_ENDEPOUT7_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPOUT7_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPOUT7_Clear (1UL) /*!< Disable */

/* Bit 18 : Write '1' to disable interrupt for event ENDEPOUT[6] */
#define USBD_INTENCLR_ENDEPOUT6_Pos (18UL) /*!< Position of ENDEPOUT6 field. */
#define USBD_INTENCLR_ENDEPOUT6_Msk (0x1UL << USBD_INTENCLR_ENDEPOUT6_Pos) /*!< Bit mask of ENDEPOUT6 field. */
#define USBD_INTENCLR_ENDEPOUT6_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPOUT6_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPOUT6_Clear (1UL) /*!< Disable */

/* Bit 17 : Write '1' to disable interrupt for event ENDEPOUT[5] */
#define USBD_INTENCLR_ENDEPOUT5_Pos (17UL) /*!< Position of ENDEPOUT5 field. */
#define USBD_INTENCLR_ENDEPOUT5_Msk (0x1UL << USBD_INTENCLR_ENDEPOUT5_Pos) /*!< Bit mask of ENDEPOUT5 field. */
#define USBD_INTENCLR_ENDEPOUT5_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPOUT5_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPOUT5_Clear (1UL) /*!< Disable */

/* Bit 16 : Write '1' to disable interrupt for event ENDEPOUT[4] */
#define USBD_INTENCLR_ENDEPOUT4_Pos (16UL) /*!< Position of ENDEPOUT4 field. */
#define USBD_INTENCLR_ENDEPOUT4_Msk (0x1UL << USBD_INTENCLR_ENDEPOUT4_Pos) /*!< Bit mask of ENDEPOUT4 field. */
#define USBD_INTENCLR_ENDEPOUT4_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPOUT4_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPOUT4_Clear (1UL) /*!< Disable */

/* Bit 15 : Write '1' to disable interrupt for event ENDEPOUT[3] */
#define USBD_INTENCLR_ENDEPOUT3_Pos (15UL) /*!< Position of ENDEPOUT3 field. */
#define USBD_INTENCLR_ENDEPOUT3_Msk (0x1UL << USBD_INTENCLR_ENDEPOUT3_Pos) /*!< Bit mask of ENDEPOUT3 field. */
#define USBD_INTENCLR_ENDEPOUT3_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPOUT3_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPOUT3_Clear (1UL) /*!< Disable */

/* Bit 14 : Write '1' to disable interrupt for event ENDEPOUT[2] */
#define USBD_INTENCLR_ENDEPOUT2_Pos (14UL) /*!< Position of ENDEPOUT2 field. */
#define USBD_INTENCLR_ENDEPOUT2_Msk (0x1UL << USBD_INTENCLR_ENDEPOUT2_Pos) /*!< Bit mask of ENDEPOUT2 field. */
#define USBD_INTENCLR_ENDEPOUT2_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPOUT2_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPOUT2_Clear (1UL) /*!< Disable */

/* Bit 13 : Write '1' to disable interrupt for event ENDEPOUT[1] */
#define USBD_INTENCLR_ENDEPOUT1_Pos (13UL) /*!< Position of ENDEPOUT1 field. */
#define USBD_INTENCLR_ENDEPOUT1_Msk (0x1UL << USBD_INTENCLR_ENDEPOUT1_Pos) /*!< Bit mask of ENDEPOUT1 field. */
#define USBD_INTENCLR_ENDEPOUT1_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPOUT1_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPOUT1_Clear (1UL) /*!< Disable */

/* Bit 12 : Write '1' to disable interrupt for event ENDEPOUT[0] */
#define USBD_INTENCLR_ENDEPOUT0_Pos (12UL) /*!< Position of ENDEPOUT0 field. */
#define USBD_INTENCLR_ENDEPOUT0_Msk (0x1UL << USBD_INTENCLR_ENDEPOUT0_Pos) /*!< Bit mask of ENDEPOUT0 field. */
#define USBD_INTENCLR_ENDEPOUT0_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPOUT0_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPOUT0_Clear (1UL) /*!< Disable */

/* Bit 11 : Write '1' to disable interrupt for event ENDISOIN */
#define USBD_INTENCLR_ENDISOIN_Pos (11UL) /*!< Position of ENDISOIN field. */
#define USBD_INTENCLR_ENDISOIN_Msk (0x1UL << USBD_INTENCLR_ENDISOIN_Pos) /*!< Bit mask of ENDISOIN field. */
#define USBD_INTENCLR_ENDISOIN_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDISOIN_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDISOIN_Clear (1UL) /*!< Disable */

/* Bit 10 : Write '1' to disable interrupt for event EP0DATADONE */
#define USBD_INTENCLR_EP0DATADONE_Pos (10UL) /*!< Position of EP0DATADONE field. */
#define USBD_INTENCLR_EP0DATADONE_Msk (0x1UL << USBD_INTENCLR_EP0DATADONE_Pos) /*!< Bit mask of EP0DATADONE field. */
#define USBD_INTENCLR_EP0DATADONE_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_EP0DATADONE_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_EP0DATADONE_Clear (1UL) /*!< Disable */

/* Bit 9 : Write '1' to disable interrupt for event ENDEPIN[7] */
#define USBD_INTENCLR_ENDEPIN7_Pos (9UL) /*!< Position of ENDEPIN7 field. */
#define USBD_INTENCLR_ENDEPIN7_Msk (0x1UL << USBD_INTENCLR_ENDEPIN7_Pos) /*!< Bit mask of ENDEPIN7 field. */
#define USBD_INTENCLR_ENDEPIN7_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPIN7_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPIN7_Clear (1UL) /*!< Disable */

/* Bit 8 : Write '1' to disable interrupt for event ENDEPIN[6] */
#define USBD_INTENCLR_ENDEPIN6_Pos (8UL) /*!< Position of ENDEPIN6 field. */
#define USBD_INTENCLR_ENDEPIN6_Msk (0x1UL << USBD_INTENCLR_ENDEPIN6_Pos) /*!< Bit mask of ENDEPIN6 field. */
#define USBD_INTENCLR_ENDEPIN6_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPIN6_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPIN6_Clear (1UL) /*!< Disable */

/* Bit 7 : Write '1' to disable interrupt for event ENDEPIN[5] */
#define USBD_INTENCLR_ENDEPIN5_Pos (7UL) /*!< Position of ENDEPIN5 field. */
#define USBD_INTENCLR_ENDEPIN5_Msk (0x1UL << USBD_INTENCLR_ENDEPIN5_Pos) /*!< Bit mask of ENDEPIN5 field. */
#define USBD_INTENCLR_ENDEPIN5_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPIN5_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPIN5_Clear (1UL) /*!< Disable */

/* Bit 6 : Write '1' to disable interrupt for event ENDEPIN[4] */
#define USBD_INTENCLR_ENDEPIN4_Pos (6UL) /*!< Position of ENDEPIN4 field. */
#define USBD_INTENCLR_ENDEPIN4_Msk (0x1UL << USBD_INTENCLR_ENDEPIN4_Pos) /*!< Bit mask of ENDEPIN4 field. */
#define USBD_INTENCLR_ENDEPIN4_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPIN4_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPIN4_Clear (1UL) /*!< Disable */

/* Bit 5 : Write '1' to disable interrupt for event ENDEPIN[3] */
#define USBD_INTENCLR_ENDEPIN3_Pos (5UL) /*!< Position of ENDEPIN3 field. */
#define USBD_INTENCLR_ENDEPIN3_Msk (0x1UL << USBD_INTENCLR_ENDEPIN3_Pos) /*!< Bit mask of ENDEPIN3 field. */
#define USBD_INTENCLR_ENDEPIN3_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPIN3_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPIN3_Clear (1UL) /*!< Disable */

/* Bit 4 : Write '1' to disable interrupt for event ENDEPIN[2] */
#define USBD_INTENCLR_ENDEPIN2_Pos (4UL) /*!< Position of ENDEPIN2 field. */
#define USBD_INTENCLR_ENDEPIN2_Msk (0x1UL << USBD_INTENCLR_ENDEPIN2_Pos) /*!< Bit mask of ENDEPIN2 field. */
#define USBD_INTENCLR_ENDEPIN2_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPIN2_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPIN2_Clear (1UL) /*!< Disable */

/* Bit 3 : Write '1' to disable interrupt for event ENDEPIN[1] */
#define USBD_INTENCLR_ENDEPIN1_Pos (3UL) /*!< Position of ENDEPIN1 field. */
#define USBD_INTENCLR_ENDEPIN1_Msk (0x1UL << USBD_INTENCLR_ENDEPIN1_Pos) /*!< Bit mask of ENDEPIN1 field. */
#define USBD_INTENCLR_ENDEPIN1_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPIN1_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPIN1_Clear (1UL) /*!< Disable */

/* Bit 2 : Write '1' to disable interrupt for event ENDEPIN[0] */
#define USBD_INTENCLR_ENDEPIN0_Pos (2UL) /*!< Position of ENDEPIN0 field. */
#define USBD_INTENCLR_ENDEPIN0_Msk (0x1UL << USBD_INTENCLR_ENDEPIN0_Pos) /*!< Bit mask of ENDEPIN0 field. */
#define USBD_INTENCLR_ENDEPIN0_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_ENDEPIN0_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_ENDEPIN0_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event STARTED */
#define USBD_INTENCLR_STARTED_Pos (1UL) /*!< Position of STARTED field. */
#define USBD_INTENCLR_STARTED_Msk (0x1UL << USBD_INTENCLR_STARTED_Pos) /*!< Bit mask of STARTED field. */
#define USBD_INTENCLR_STARTED_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_STARTED_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_STARTED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event USBRESET */
#define USBD_INTENCLR_USBRESET_Pos (0UL) /*!< Position of USBRESET field. */
#define USBD_INTENCLR_USBRESET_Msk (0x1UL << USBD_INTENCLR_USBRESET_Pos) /*!< Bit mask of USBRESET field. */
#define USBD_INTENCLR_USBRESET_Disabled (0UL) /*!< Read: Disabled */
#define USBD_INTENCLR_USBRESET_Enabled (1UL) /*!< Read: Enabled */
#define USBD_INTENCLR_USBRESET_Clear (1UL) /*!< Disable */

/* Register: USBD_EVENTCAUSE */
/* Description: Details on what caused the USBEVENT event */

/* Bit 11 : USB device is ready for normal operation. Write '1' to clear. */
#define USBD_EVENTCAUSE_READY_Pos (11UL) /*!< Position of READY field. */
#define USBD_EVENTCAUSE_READY_Msk (0x1UL << USBD_EVENTCAUSE_READY_Pos) /*!< Bit mask of READY field. */
#define USBD_EVENTCAUSE_READY_NotDetected (0UL) /*!< USBEVENT was not issued due to USBD peripheral ready */
#define USBD_EVENTCAUSE_READY_Ready (1UL) /*!< USBD peripheral is ready */

/* Bit 10 : USB MAC has been woken up and operational. Write '1' to clear. */
#define USBD_EVENTCAUSE_USBWUALLOWED_Pos (10UL) /*!< Position of USBWUALLOWED field. */
#define USBD_EVENTCAUSE_USBWUALLOWED_Msk (0x1UL << USBD_EVENTCAUSE_USBWUALLOWED_Pos) /*!< Bit mask of USBWUALLOWED field. */
#define USBD_EVENTCAUSE_USBWUALLOWED_NotAllowed (0UL) /*!< Wake up not allowed */
#define USBD_EVENTCAUSE_USBWUALLOWED_Allowed (1UL) /*!< Wake up allowed */

/* Bit 9 : Signals that a RESUME condition (K state or activity restart) has been detected on USB lines. Write '1' to clear. */
#define USBD_EVENTCAUSE_RESUME_Pos (9UL) /*!< Position of RESUME field. */
#define USBD_EVENTCAUSE_RESUME_Msk (0x1UL << USBD_EVENTCAUSE_RESUME_Pos) /*!< Bit mask of RESUME field. */
#define USBD_EVENTCAUSE_RESUME_NotDetected (0UL) /*!< Resume not detected */
#define USBD_EVENTCAUSE_RESUME_Detected (1UL) /*!< Resume detected */

/* Bit 8 : Signals that USB lines have been idle long enough for the device to enter suspend. Write '1' to clear. */
#define USBD_EVENTCAUSE_SUSPEND_Pos (8UL) /*!< Position of SUSPEND field. */
#define USBD_EVENTCAUSE_SUSPEND_Msk (0x1UL << USBD_EVENTCAUSE_SUSPEND_Pos) /*!< Bit mask of SUSPEND field. */
#define USBD_EVENTCAUSE_SUSPEND_NotDetected (0UL) /*!< Suspend not detected */
#define USBD_EVENTCAUSE_SUSPEND_Detected (1UL) /*!< Suspend detected */

/* Bit 0 : CRC error was detected on isochronous OUT endpoint 8. Write '1' to clear. */
#define USBD_EVENTCAUSE_ISOOUTCRC_Pos (0UL) /*!< Position of ISOOUTCRC field. */
#define USBD_EVENTCAUSE_ISOOUTCRC_Msk (0x1UL << USBD_EVENTCAUSE_ISOOUTCRC_Pos) /*!< Bit mask of ISOOUTCRC field. */
#define USBD_EVENTCAUSE_ISOOUTCRC_NotDetected (0UL) /*!< No error detected */
#define USBD_EVENTCAUSE_ISOOUTCRC_Detected (1UL) /*!< Error detected */

/* Register: USBD_BUSSTATE */
/* Description: Provides the logic state of D+ and D- lines */

/* Bit 1 : State of the D+ line */
#define USBD_BUSSTATE_DP_Pos (1UL) /*!< Position of DP field. */
#define USBD_BUSSTATE_DP_Msk (0x1UL << USBD_BUSSTATE_DP_Pos) /*!< Bit mask of DP field. */
#define USBD_BUSSTATE_DP_Low (0UL) /*!< Low */
#define USBD_BUSSTATE_DP_High (1UL) /*!< High */

/* Bit 0 : State of the D- line */
#define USBD_BUSSTATE_DM_Pos (0UL) /*!< Position of DM field. */
#define USBD_BUSSTATE_DM_Msk (0x1UL << USBD_BUSSTATE_DM_Pos) /*!< Bit mask of DM field. */
#define USBD_BUSSTATE_DM_Low (0UL) /*!< Low */
#define USBD_BUSSTATE_DM_High (1UL) /*!< High */

/* Register: USBD_HALTED_EPIN */
/* Description: Description collection: IN endpoint halted status. Can be used as is as response to a GetStatus() request to endpoint. */

/* Bits 15..0 : IN endpoint halted status. Can be used as is as response to a GetStatus() request to endpoint. */
#define USBD_HALTED_EPIN_GETSTATUS_Pos (0UL) /*!< Position of GETSTATUS field. */
#define USBD_HALTED_EPIN_GETSTATUS_Msk (0xFFFFUL << USBD_HALTED_EPIN_GETSTATUS_Pos) /*!< Bit mask of GETSTATUS field. */
#define USBD_HALTED_EPIN_GETSTATUS_NotHalted (0UL) /*!< Endpoint is not halted */
#define USBD_HALTED_EPIN_GETSTATUS_Halted (1UL) /*!< Endpoint is halted */

/* Register: USBD_HALTED_EPOUT */
/* Description: Description collection: OUT endpoint halted status. Can be used as is as response to a GetStatus() request to endpoint. */

/* Bits 15..0 : OUT endpoint halted status. Can be used as is as response to a GetStatus() request to endpoint. */
#define USBD_HALTED_EPOUT_GETSTATUS_Pos (0UL) /*!< Position of GETSTATUS field. */
#define USBD_HALTED_EPOUT_GETSTATUS_Msk (0xFFFFUL << USBD_HALTED_EPOUT_GETSTATUS_Pos) /*!< Bit mask of GETSTATUS field. */
#define USBD_HALTED_EPOUT_GETSTATUS_NotHalted (0UL) /*!< Endpoint is not halted */
#define USBD_HALTED_EPOUT_GETSTATUS_Halted (1UL) /*!< Endpoint is halted */

/* Register: USBD_EPSTATUS */
/* Description: Provides information on which endpoint's EasyDMA registers have been captured */

/* Bit 24 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT8_Pos (24UL) /*!< Position of EPOUT8 field. */
#define USBD_EPSTATUS_EPOUT8_Msk (0x1UL << USBD_EPSTATUS_EPOUT8_Pos) /*!< Bit mask of EPOUT8 field. */
#define USBD_EPSTATUS_EPOUT8_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT8_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 23 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT7_Pos (23UL) /*!< Position of EPOUT7 field. */
#define USBD_EPSTATUS_EPOUT7_Msk (0x1UL << USBD_EPSTATUS_EPOUT7_Pos) /*!< Bit mask of EPOUT7 field. */
#define USBD_EPSTATUS_EPOUT7_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT7_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 22 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT6_Pos (22UL) /*!< Position of EPOUT6 field. */
#define USBD_EPSTATUS_EPOUT6_Msk (0x1UL << USBD_EPSTATUS_EPOUT6_Pos) /*!< Bit mask of EPOUT6 field. */
#define USBD_EPSTATUS_EPOUT6_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT6_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 21 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT5_Pos (21UL) /*!< Position of EPOUT5 field. */
#define USBD_EPSTATUS_EPOUT5_Msk (0x1UL << USBD_EPSTATUS_EPOUT5_Pos) /*!< Bit mask of EPOUT5 field. */
#define USBD_EPSTATUS_EPOUT5_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT5_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 20 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT4_Pos (20UL) /*!< Position of EPOUT4 field. */
#define USBD_EPSTATUS_EPOUT4_Msk (0x1UL << USBD_EPSTATUS_EPOUT4_Pos) /*!< Bit mask of EPOUT4 field. */
#define USBD_EPSTATUS_EPOUT4_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT4_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 19 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT3_Pos (19UL) /*!< Position of EPOUT3 field. */
#define USBD_EPSTATUS_EPOUT3_Msk (0x1UL << USBD_EPSTATUS_EPOUT3_Pos) /*!< Bit mask of EPOUT3 field. */
#define USBD_EPSTATUS_EPOUT3_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT3_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 18 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT2_Pos (18UL) /*!< Position of EPOUT2 field. */
#define USBD_EPSTATUS_EPOUT2_Msk (0x1UL << USBD_EPSTATUS_EPOUT2_Pos) /*!< Bit mask of EPOUT2 field. */
#define USBD_EPSTATUS_EPOUT2_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT2_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 17 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT1_Pos (17UL) /*!< Position of EPOUT1 field. */
#define USBD_EPSTATUS_EPOUT1_Msk (0x1UL << USBD_EPSTATUS_EPOUT1_Pos) /*!< Bit mask of EPOUT1 field. */
#define USBD_EPSTATUS_EPOUT1_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT1_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 16 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPOUT0_Pos (16UL) /*!< Position of EPOUT0 field. */
#define USBD_EPSTATUS_EPOUT0_Msk (0x1UL << USBD_EPSTATUS_EPOUT0_Pos) /*!< Bit mask of EPOUT0 field. */
#define USBD_EPSTATUS_EPOUT0_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPOUT0_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 8 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN8_Pos (8UL) /*!< Position of EPIN8 field. */
#define USBD_EPSTATUS_EPIN8_Msk (0x1UL << USBD_EPSTATUS_EPIN8_Pos) /*!< Bit mask of EPIN8 field. */
#define USBD_EPSTATUS_EPIN8_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN8_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 7 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN7_Pos (7UL) /*!< Position of EPIN7 field. */
#define USBD_EPSTATUS_EPIN7_Msk (0x1UL << USBD_EPSTATUS_EPIN7_Pos) /*!< Bit mask of EPIN7 field. */
#define USBD_EPSTATUS_EPIN7_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN7_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 6 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN6_Pos (6UL) /*!< Position of EPIN6 field. */
#define USBD_EPSTATUS_EPIN6_Msk (0x1UL << USBD_EPSTATUS_EPIN6_Pos) /*!< Bit mask of EPIN6 field. */
#define USBD_EPSTATUS_EPIN6_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN6_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 5 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN5_Pos (5UL) /*!< Position of EPIN5 field. */
#define USBD_EPSTATUS_EPIN5_Msk (0x1UL << USBD_EPSTATUS_EPIN5_Pos) /*!< Bit mask of EPIN5 field. */
#define USBD_EPSTATUS_EPIN5_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN5_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 4 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN4_Pos (4UL) /*!< Position of EPIN4 field. */
#define USBD_EPSTATUS_EPIN4_Msk (0x1UL << USBD_EPSTATUS_EPIN4_Pos) /*!< Bit mask of EPIN4 field. */
#define USBD_EPSTATUS_EPIN4_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN4_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 3 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN3_Pos (3UL) /*!< Position of EPIN3 field. */
#define USBD_EPSTATUS_EPIN3_Msk (0x1UL << USBD_EPSTATUS_EPIN3_Pos) /*!< Bit mask of EPIN3 field. */
#define USBD_EPSTATUS_EPIN3_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN3_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 2 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN2_Pos (2UL) /*!< Position of EPIN2 field. */
#define USBD_EPSTATUS_EPIN2_Msk (0x1UL << USBD_EPSTATUS_EPIN2_Pos) /*!< Bit mask of EPIN2 field. */
#define USBD_EPSTATUS_EPIN2_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN2_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 1 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN1_Pos (1UL) /*!< Position of EPIN1 field. */
#define USBD_EPSTATUS_EPIN1_Msk (0x1UL << USBD_EPSTATUS_EPIN1_Pos) /*!< Bit mask of EPIN1 field. */
#define USBD_EPSTATUS_EPIN1_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN1_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Bit 0 : Captured state of endpoint's EasyDMA registers. Write '1' to clear. */
#define USBD_EPSTATUS_EPIN0_Pos (0UL) /*!< Position of EPIN0 field. */
#define USBD_EPSTATUS_EPIN0_Msk (0x1UL << USBD_EPSTATUS_EPIN0_Pos) /*!< Bit mask of EPIN0 field. */
#define USBD_EPSTATUS_EPIN0_NoData (0UL) /*!< EasyDMA registers have not been captured for this endpoint */
#define USBD_EPSTATUS_EPIN0_DataDone (1UL) /*!< EasyDMA registers have been captured for this endpoint */

/* Register: USBD_EPDATASTATUS */
/* Description: Provides information on which endpoint(s) an acknowledged data transfer has occurred (EPDATA event) */

/* Bit 23 : Acknowledged data transfer on this OUT endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPOUT7_Pos (23UL) /*!< Position of EPOUT7 field. */
#define USBD_EPDATASTATUS_EPOUT7_Msk (0x1UL << USBD_EPDATASTATUS_EPOUT7_Pos) /*!< Bit mask of EPOUT7 field. */
#define USBD_EPDATASTATUS_EPOUT7_NotStarted (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPOUT7_Started (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 22 : Acknowledged data transfer on this OUT endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPOUT6_Pos (22UL) /*!< Position of EPOUT6 field. */
#define USBD_EPDATASTATUS_EPOUT6_Msk (0x1UL << USBD_EPDATASTATUS_EPOUT6_Pos) /*!< Bit mask of EPOUT6 field. */
#define USBD_EPDATASTATUS_EPOUT6_NotStarted (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPOUT6_Started (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 21 : Acknowledged data transfer on this OUT endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPOUT5_Pos (21UL) /*!< Position of EPOUT5 field. */
#define USBD_EPDATASTATUS_EPOUT5_Msk (0x1UL << USBD_EPDATASTATUS_EPOUT5_Pos) /*!< Bit mask of EPOUT5 field. */
#define USBD_EPDATASTATUS_EPOUT5_NotStarted (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPOUT5_Started (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 20 : Acknowledged data transfer on this OUT endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPOUT4_Pos (20UL) /*!< Position of EPOUT4 field. */
#define USBD_EPDATASTATUS_EPOUT4_Msk (0x1UL << USBD_EPDATASTATUS_EPOUT4_Pos) /*!< Bit mask of EPOUT4 field. */
#define USBD_EPDATASTATUS_EPOUT4_NotStarted (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPOUT4_Started (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 19 : Acknowledged data transfer on this OUT endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPOUT3_Pos (19UL) /*!< Position of EPOUT3 field. */
#define USBD_EPDATASTATUS_EPOUT3_Msk (0x1UL << USBD_EPDATASTATUS_EPOUT3_Pos) /*!< Bit mask of EPOUT3 field. */
#define USBD_EPDATASTATUS_EPOUT3_NotStarted (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPOUT3_Started (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 18 : Acknowledged data transfer on this OUT endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPOUT2_Pos (18UL) /*!< Position of EPOUT2 field. */
#define USBD_EPDATASTATUS_EPOUT2_Msk (0x1UL << USBD_EPDATASTATUS_EPOUT2_Pos) /*!< Bit mask of EPOUT2 field. */
#define USBD_EPDATASTATUS_EPOUT2_NotStarted (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPOUT2_Started (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 17 : Acknowledged data transfer on this OUT endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPOUT1_Pos (17UL) /*!< Position of EPOUT1 field. */
#define USBD_EPDATASTATUS_EPOUT1_Msk (0x1UL << USBD_EPDATASTATUS_EPOUT1_Pos) /*!< Bit mask of EPOUT1 field. */
#define USBD_EPDATASTATUS_EPOUT1_NotStarted (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPOUT1_Started (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 7 : Acknowledged data transfer on this IN endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPIN7_Pos (7UL) /*!< Position of EPIN7 field. */
#define USBD_EPDATASTATUS_EPIN7_Msk (0x1UL << USBD_EPDATASTATUS_EPIN7_Pos) /*!< Bit mask of EPIN7 field. */
#define USBD_EPDATASTATUS_EPIN7_NotDone (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPIN7_DataDone (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 6 : Acknowledged data transfer on this IN endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPIN6_Pos (6UL) /*!< Position of EPIN6 field. */
#define USBD_EPDATASTATUS_EPIN6_Msk (0x1UL << USBD_EPDATASTATUS_EPIN6_Pos) /*!< Bit mask of EPIN6 field. */
#define USBD_EPDATASTATUS_EPIN6_NotDone (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPIN6_DataDone (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 5 : Acknowledged data transfer on this IN endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPIN5_Pos (5UL) /*!< Position of EPIN5 field. */
#define USBD_EPDATASTATUS_EPIN5_Msk (0x1UL << USBD_EPDATASTATUS_EPIN5_Pos) /*!< Bit mask of EPIN5 field. */
#define USBD_EPDATASTATUS_EPIN5_NotDone (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPIN5_DataDone (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 4 : Acknowledged data transfer on this IN endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPIN4_Pos (4UL) /*!< Position of EPIN4 field. */
#define USBD_EPDATASTATUS_EPIN4_Msk (0x1UL << USBD_EPDATASTATUS_EPIN4_Pos) /*!< Bit mask of EPIN4 field. */
#define USBD_EPDATASTATUS_EPIN4_NotDone (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPIN4_DataDone (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 3 : Acknowledged data transfer on this IN endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPIN3_Pos (3UL) /*!< Position of EPIN3 field. */
#define USBD_EPDATASTATUS_EPIN3_Msk (0x1UL << USBD_EPDATASTATUS_EPIN3_Pos) /*!< Bit mask of EPIN3 field. */
#define USBD_EPDATASTATUS_EPIN3_NotDone (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPIN3_DataDone (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 2 : Acknowledged data transfer on this IN endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPIN2_Pos (2UL) /*!< Position of EPIN2 field. */
#define USBD_EPDATASTATUS_EPIN2_Msk (0x1UL << USBD_EPDATASTATUS_EPIN2_Pos) /*!< Bit mask of EPIN2 field. */
#define USBD_EPDATASTATUS_EPIN2_NotDone (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPIN2_DataDone (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Bit 1 : Acknowledged data transfer on this IN endpoint. Write '1' to clear. */
#define USBD_EPDATASTATUS_EPIN1_Pos (1UL) /*!< Position of EPIN1 field. */
#define USBD_EPDATASTATUS_EPIN1_Msk (0x1UL << USBD_EPDATASTATUS_EPIN1_Pos) /*!< Bit mask of EPIN1 field. */
#define USBD_EPDATASTATUS_EPIN1_NotDone (0UL) /*!< No acknowledged data transfer on this endpoint */
#define USBD_EPDATASTATUS_EPIN1_DataDone (1UL) /*!< Acknowledged data transfer on this endpoint has occurred */

/* Register: USBD_USBADDR */
/* Description: Device USB address */

/* Bits 6..0 : Device USB address */
#define USBD_USBADDR_ADDR_Pos (0UL) /*!< Position of ADDR field. */
#define USBD_USBADDR_ADDR_Msk (0x7FUL << USBD_USBADDR_ADDR_Pos) /*!< Bit mask of ADDR field. */

/* Register: USBD_DMASTATE */
/* Description: Indicates activity state of the DMA */

/* Bit 6 : DMA burst */
#define USBD_DMASTATE_BURST_Pos (6UL) /*!< Position of BURST field. */
#define USBD_DMASTATE_BURST_Msk (0x1UL << USBD_DMASTATE_BURST_Pos) /*!< Bit mask of BURST field. */
#define USBD_DMASTATE_BURST_Single (0UL) /*!< Single transfer */
#define USBD_DMASTATE_BURST_Burst (1UL) /*!< Burst transfer */

/* Bit 5 : DMA active or not */
#define USBD_DMASTATE_DMAINACTIVE_Pos (5UL) /*!< Position of DMAINACTIVE field. */
#define USBD_DMASTATE_DMAINACTIVE_Msk (0x1UL << USBD_DMASTATE_DMAINACTIVE_Pos) /*!< Bit mask of DMAINACTIVE field. */
#define USBD_DMASTATE_DMAINACTIVE_Active (0UL) /*!< DMA transfer on-going */
#define USBD_DMASTATE_DMAINACTIVE_Inactive (1UL) /*!< No on-going DMA transfers */

/* Bit 4 : DMA no increment buffer address */
#define USBD_DMASTATE_NINCBUF_Pos (4UL) /*!< Position of NINCBUF field. */
#define USBD_DMASTATE_NINCBUF_Msk (0x1UL << USBD_DMASTATE_NINCBUF_Pos) /*!< Bit mask of NINCBUF field. */
#define USBD_DMASTATE_NINCBUF_NoIncrement (0UL) /*!< Buffer address is not incremented after every access */
#define USBD_DMASTATE_NINCBUF_Increment (1UL) /*!< Buffer address is incremented after every access */

/* Bit 3 : DMA no increment external memory address */
#define USBD_DMASTATE_NINCEXT_Pos (3UL) /*!< Position of NINCEXT field. */
#define USBD_DMASTATE_NINCEXT_Msk (0x1UL << USBD_DMASTATE_NINCEXT_Pos) /*!< Bit mask of NINCEXT field. */
#define USBD_DMASTATE_NINCEXT_NoIncrement (0UL) /*!< Address is not incremented after every access */
#define USBD_DMASTATE_NINCEXT_Increment (1UL) /*!< Address is incremented after every access */

/* Bit 2 : DMA direction */
#define USBD_DMASTATE_DIR_Pos (2UL) /*!< Position of DIR field. */
#define USBD_DMASTATE_DIR_Msk (0x1UL << USBD_DMASTATE_DIR_Pos) /*!< Bit mask of DIR field. */
#define USBD_DMASTATE_DIR_ToMEM (0UL) /*!< DMA transfers from USB buffer to memory */
#define USBD_DMASTATE_DIR_ToUSB (1UL) /*!< DMA transfers from memory to USB buffer */

/* Bits 1..0 : DMA transfer size */
#define USBD_DMASTATE_DSIZE_Pos (0UL) /*!< Position of DSIZE field. */
#define USBD_DMASTATE_DSIZE_Msk (0x3UL << USBD_DMASTATE_DSIZE_Pos) /*!< Bit mask of DSIZE field. */
#define USBD_DMASTATE_DSIZE_8Bit (0UL) /*!< 8-bit transfers */
#define USBD_DMASTATE_DSIZE_16Bit (1UL) /*!< 16-bit transfers */
#define USBD_DMASTATE_DSIZE_32Bit (2UL) /*!< 32-bit transfers */

/* Register: USBD_BMREQUESTTYPE */
/* Description: SETUP data, byte 0, bmRequestType */

/* Bit 7 : Data transfer direction */
#define USBD_BMREQUESTTYPE_DIRECTION_Pos (7UL) /*!< Position of DIRECTION field. */
#define USBD_BMREQUESTTYPE_DIRECTION_Msk (0x1UL << USBD_BMREQUESTTYPE_DIRECTION_Pos) /*!< Bit mask of DIRECTION field. */
#define USBD_BMREQUESTTYPE_DIRECTION_HostToDevice (0UL) /*!< Host-to-device */
#define USBD_BMREQUESTTYPE_DIRECTION_DeviceToHost (1UL) /*!< Device-to-host */

/* Bits 6..5 : Data transfer type */
#define USBD_BMREQUESTTYPE_TYPE_Pos (5UL) /*!< Position of TYPE field. */
#define USBD_BMREQUESTTYPE_TYPE_Msk (0x3UL << USBD_BMREQUESTTYPE_TYPE_Pos) /*!< Bit mask of TYPE field. */
#define USBD_BMREQUESTTYPE_TYPE_Standard (0UL) /*!< Standard */
#define USBD_BMREQUESTTYPE_TYPE_Class (1UL) /*!< Class */
#define USBD_BMREQUESTTYPE_TYPE_Vendor (2UL) /*!< Vendor */

/* Bits 4..0 : Data transfer type */
#define USBD_BMREQUESTTYPE_RECIPIENT_Pos (0UL) /*!< Position of RECIPIENT field. */
#define USBD_BMREQUESTTYPE_RECIPIENT_Msk (0x1FUL << USBD_BMREQUESTTYPE_RECIPIENT_Pos) /*!< Bit mask of RECIPIENT field. */
#define USBD_BMREQUESTTYPE_RECIPIENT_Device (0UL) /*!< Device */
#define USBD_BMREQUESTTYPE_RECIPIENT_Interface (1UL) /*!< Interface */
#define USBD_BMREQUESTTYPE_RECIPIENT_Endpoint (2UL) /*!< Endpoint */
#define USBD_BMREQUESTTYPE_RECIPIENT_Other (3UL) /*!< Other */

/* Register: USBD_BREQUEST */
/* Description: SETUP data, byte 1, bRequest */

/* Bits 7..0 : SETUP data, byte 1, bRequest. Values provided for standard requests only, user must implement class and vendor values. */
#define USBD_BREQUEST_BREQUEST_Pos (0UL) /*!< Position of BREQUEST field. */
#define USBD_BREQUEST_BREQUEST_Msk (0xFFUL << USBD_BREQUEST_BREQUEST_Pos) /*!< Bit mask of BREQUEST field. */
#define USBD_BREQUEST_BREQUEST_STD_GET_STATUS (0UL) /*!< Standard request GET_STATUS */
#define USBD_BREQUEST_BREQUEST_STD_CLEAR_FEATURE (1UL) /*!< Standard request CLEAR_FEATURE */
#define USBD_BREQUEST_BREQUEST_STD_SET_FEATURE (3UL) /*!< Standard request SET_FEATURE */
#define USBD_BREQUEST_BREQUEST_STD_SET_ADDRESS (5UL) /*!< Standard request SET_ADDRESS */
#define USBD_BREQUEST_BREQUEST_STD_GET_DESCRIPTOR (6UL) /*!< Standard request GET_DESCRIPTOR */
#define USBD_BREQUEST_BREQUEST_STD_SET_DESCRIPTOR (7UL) /*!< Standard request SET_DESCRIPTOR */
#define USBD_BREQUEST_BREQUEST_STD_GET_CONFIGURATION (8UL) /*!< Standard request GET_CONFIGURATION */
#define USBD_BREQUEST_BREQUEST_STD_SET_CONFIGURATION (9UL) /*!< Standard request SET_CONFIGURATION */
#define USBD_BREQUEST_BREQUEST_STD_GET_INTERFACE (10UL) /*!< Standard request GET_INTERFACE */
#define USBD_BREQUEST_BREQUEST_STD_SET_INTERFACE (11UL) /*!< Standard request SET_INTERFACE */
#define USBD_BREQUEST_BREQUEST_STD_SYNCH_FRAME (12UL) /*!< Standard request SYNCH_FRAME */

/* Register: USBD_WVALUEL */
/* Description: SETUP data, byte 2, LSB of wValue */

/* Bits 7..0 : SETUP data, byte 2, LSB of wValue */
#define USBD_WVALUEL_WVALUEL_Pos (0UL) /*!< Position of WVALUEL field. */
#define USBD_WVALUEL_WVALUEL_Msk (0xFFUL << USBD_WVALUEL_WVALUEL_Pos) /*!< Bit mask of WVALUEL field. */

/* Register: USBD_WVALUEH */
/* Description: SETUP data, byte 3, MSB of wValue */

/* Bits 7..0 : SETUP data, byte 3, MSB of wValue */
#define USBD_WVALUEH_WVALUEH_Pos (0UL) /*!< Position of WVALUEH field. */
#define USBD_WVALUEH_WVALUEH_Msk (0xFFUL << USBD_WVALUEH_WVALUEH_Pos) /*!< Bit mask of WVALUEH field. */

/* Register: USBD_WINDEXL */
/* Description: SETUP data, byte 4, LSB of wIndex */

/* Bits 7..0 : SETUP data, byte 4, LSB of wIndex */
#define USBD_WINDEXL_WINDEXL_Pos (0UL) /*!< Position of WINDEXL field. */
#define USBD_WINDEXL_WINDEXL_Msk (0xFFUL << USBD_WINDEXL_WINDEXL_Pos) /*!< Bit mask of WINDEXL field. */

/* Register: USBD_WINDEXH */
/* Description: SETUP data, byte 5, MSB of wIndex */

/* Bits 7..0 : SETUP data, byte 5, MSB of wIndex */
#define USBD_WINDEXH_WINDEXH_Pos (0UL) /*!< Position of WINDEXH field. */
#define USBD_WINDEXH_WINDEXH_Msk (0xFFUL << USBD_WINDEXH_WINDEXH_Pos) /*!< Bit mask of WINDEXH field. */

/* Register: USBD_WLENGTHL */
/* Description: SETUP data, byte 6, LSB of wLength */

/* Bits 7..0 : SETUP data, byte 6, LSB of wLength */
#define USBD_WLENGTHL_WLENGTHL_Pos (0UL) /*!< Position of WLENGTHL field. */
#define USBD_WLENGTHL_WLENGTHL_Msk (0xFFUL << USBD_WLENGTHL_WLENGTHL_Pos) /*!< Bit mask of WLENGTHL field. */

/* Register: USBD_WLENGTHH */
/* Description: SETUP data, byte 7, MSB of wLength */

/* Bits 7..0 : SETUP data, byte 7, MSB of wLength */
#define USBD_WLENGTHH_WLENGTHH_Pos (0UL) /*!< Position of WLENGTHH field. */
#define USBD_WLENGTHH_WLENGTHH_Msk (0xFFUL << USBD_WLENGTHH_WLENGTHH_Pos) /*!< Bit mask of WLENGTHH field. */

/* Register: USBD_SIZE_EPOUT */
/* Description: Description collection: Number of bytes received last in the data stage of this OUT endpoint */

/* Bits 6..0 : Number of bytes received last in the data stage of this OUT endpoint */
#define USBD_SIZE_EPOUT_SIZE_Pos (0UL) /*!< Position of SIZE field. */
#define USBD_SIZE_EPOUT_SIZE_Msk (0x7FUL << USBD_SIZE_EPOUT_SIZE_Pos) /*!< Bit mask of SIZE field. */

/* Register: USBD_SIZE_ISOOUT */
/* Description: Number of bytes received last on this ISO OUT data endpoint */

/* Bit 16 : Zero-length data packet received */
#define USBD_SIZE_ISOOUT_ZERO_Pos (16UL) /*!< Position of ZERO field. */
#define USBD_SIZE_ISOOUT_ZERO_Msk (0x1UL << USBD_SIZE_ISOOUT_ZERO_Pos) /*!< Bit mask of ZERO field. */
#define USBD_SIZE_ISOOUT_ZERO_Normal (0UL) /*!< No zero-length data received, use value in SIZE */
#define USBD_SIZE_ISOOUT_ZERO_ZeroData (1UL) /*!< Zero-length data received, ignore value in SIZE */

/* Bits 9..0 : Number of bytes received last on this ISO OUT data endpoint */
#define USBD_SIZE_ISOOUT_SIZE_Pos (0UL) /*!< Position of SIZE field. */
#define USBD_SIZE_ISOOUT_SIZE_Msk (0x3FFUL << USBD_SIZE_ISOOUT_SIZE_Pos) /*!< Bit mask of SIZE field. */

/* Register: USBD_ENABLE */
/* Description: Enable USB */

/* Bits 1..0 : Enable USB */
#define USBD_ENABLE_ENABLE_Pos (0UL) /*!< Position of ENABLE field. */
#define USBD_ENABLE_ENABLE_Msk (0x3UL << USBD_ENABLE_ENABLE_Pos) /*!< Bit mask of ENABLE field. */
#define USBD_ENABLE_ENABLE_Disabled (0UL) /*!< USB peripheral is disabled */
#define USBD_ENABLE_ENABLE_Enabled (1UL) /*!< USB peripheral is enabled */

/* Register: USBD_USBPULLUP */
/* Description: Control of the USB pull-up */

/* Bit 0 : Control of the USB pull-up on the D+ line */
#define USBD_USBPULLUP_CONNECT_Pos (0UL) /*!< Position of CONNECT field. */
#define USBD_USBPULLUP_CONNECT_Msk (0x1UL << USBD_USBPULLUP_CONNECT_Pos) /*!< Bit mask of CONNECT field. */
#define USBD_USBPULLUP_CONNECT_Disabled (0UL) /*!< Pull-up is disconnected */
#define USBD_USBPULLUP_CONNECT_Enabled (1UL) /*!< Pull-up is connected to D+ */

/* Register: USBD_DPDMVALUE */
/* Description: State D+ and D- lines will be forced into by the DPDMDRIVE task. The DPDMNODRIVE task reverts the control of the lines to MAC IP (no forcing). */

/* Bits 4..0 : State D+ and D- lines will be forced into by the DPDMDRIVE task */
#define USBD_DPDMVALUE_STATE_Pos (0UL) /*!< Position of STATE field. */
#define USBD_DPDMVALUE_STATE_Msk (0x1FUL << USBD_DPDMVALUE_STATE_Pos) /*!< Bit mask of STATE field. */
#define USBD_DPDMVALUE_STATE_Resume (1UL) /*!< D+ forced low, D- forced high (K state) for a timing preset in hardware (50 us or 5 ms, depending on bus state) */
#define USBD_DPDMVALUE_STATE_J (2UL) /*!< D+ forced high, D- forced low (J state) */
#define USBD_DPDMVALUE_STATE_K (4UL) /*!< D+ forced low, D- forced high (K state) */

/* Register: USBD_DTOGGLE */
/* Description: Data toggle control and status */

/* Bits 9..8 : Data toggle value */
#define USBD_DTOGGLE_VALUE_Pos (8UL) /*!< Position of VALUE field. */
#define USBD_DTOGGLE_VALUE_Msk (0x3UL << USBD_DTOGGLE_VALUE_Pos) /*!< Bit mask of VALUE field. */
#define USBD_DTOGGLE_VALUE_Nop (0UL) /*!< No action on data toggle when writing the register with this value */
#define USBD_DTOGGLE_VALUE_Data0 (1UL) /*!< Data toggle is DATA0 on endpoint set by EP and IO */
#define USBD_DTOGGLE_VALUE_Data1 (2UL) /*!< Data toggle is DATA1 on endpoint set by EP and IO */

/* Bit 7 : Selects IN or OUT endpoint */
#define USBD_DTOGGLE_IO_Pos (7UL) /*!< Position of IO field. */
#define USBD_DTOGGLE_IO_Msk (0x1UL << USBD_DTOGGLE_IO_Pos) /*!< Bit mask of IO field. */
#define USBD_DTOGGLE_IO_Out (0UL) /*!< Selects OUT endpoint */
#define USBD_DTOGGLE_IO_In (1UL) /*!< Selects IN endpoint */

/* Bits 2..0 : Select bulk endpoint number */
#define USBD_DTOGGLE_EP_Pos (0UL) /*!< Position of EP field. */
#define USBD_DTOGGLE_EP_Msk (0x7UL << USBD_DTOGGLE_EP_Pos) /*!< Bit mask of EP field. */

/* Register: USBD_EPINEN */
/* Description: Endpoint IN enable */

/* Bit 8 : Enable ISO IN endpoint */
#define USBD_EPINEN_ISOIN_Pos (8UL) /*!< Position of ISOIN field. */
#define USBD_EPINEN_ISOIN_Msk (0x1UL << USBD_EPINEN_ISOIN_Pos) /*!< Bit mask of ISOIN field. */
#define USBD_EPINEN_ISOIN_Disable (0UL) /*!< Disable ISO IN endpoint 8 */
#define USBD_EPINEN_ISOIN_Enable (1UL) /*!< Enable ISO IN endpoint 8 */

/* Bit 7 : Enable IN endpoint 7 */
#define USBD_EPINEN_IN7_Pos (7UL) /*!< Position of IN7 field. */
#define USBD_EPINEN_IN7_Msk (0x1UL << USBD_EPINEN_IN7_Pos) /*!< Bit mask of IN7 field. */
#define USBD_EPINEN_IN7_Disable (0UL) /*!< Disable endpoint IN 7 (no response to IN tokens) */
#define USBD_EPINEN_IN7_Enable (1UL) /*!< Enable endpoint IN 7 (response to IN tokens) */

/* Bit 6 : Enable IN endpoint 6 */
#define USBD_EPINEN_IN6_Pos (6UL) /*!< Position of IN6 field. */
#define USBD_EPINEN_IN6_Msk (0x1UL << USBD_EPINEN_IN6_Pos) /*!< Bit mask of IN6 field. */
#define USBD_EPINEN_IN6_Disable (0UL) /*!< Disable endpoint IN 6 (no response to IN tokens) */
#define USBD_EPINEN_IN6_Enable (1UL) /*!< Enable endpoint IN 6 (response to IN tokens) */

/* Bit 5 : Enable IN endpoint 5 */
#define USBD_EPINEN_IN5_Pos (5UL) /*!< Position of IN5 field. */
#define USBD_EPINEN_IN5_Msk (0x1UL << USBD_EPINEN_IN5_Pos) /*!< Bit mask of IN5 field. */
#define USBD_EPINEN_IN5_Disable (0UL) /*!< Disable endpoint IN 5 (no response to IN tokens) */
#define USBD_EPINEN_IN5_Enable (1UL) /*!< Enable endpoint IN 5 (response to IN tokens) */

/* Bit 4 : Enable IN endpoint 4 */
#define USBD_EPINEN_IN4_Pos (4UL) /*!< Position of IN4 field. */
#define USBD_EPINEN_IN4_Msk (0x1UL << USBD_EPINEN_IN4_Pos) /*!< Bit mask of IN4 field. */
#define USBD_EPINEN_IN4_Disable (0UL) /*!< Disable endpoint IN 4 (no response to IN tokens) */
#define USBD_EPINEN_IN4_Enable (1UL) /*!< Enable endpoint IN 4 (response to IN tokens) */

/* Bit 3 : Enable IN endpoint 3 */
#define USBD_EPINEN_IN3_Pos (3UL) /*!< Position of IN3 field. */
#define USBD_EPINEN_IN3_Msk (0x1UL << USBD_EPINEN_IN3_Pos) /*!< Bit mask of IN3 field. */
#define USBD_EPINEN_IN3_Disable (0UL) /*!< Disable endpoint IN 3 (no response to IN tokens) */
#define USBD_EPINEN_IN3_Enable (1UL) /*!< Enable endpoint IN 3 (response to IN tokens) */

/* Bit 2 : Enable IN endpoint 2 */
#define USBD_EPINEN_IN2_Pos (2UL) /*!< Position of IN2 field. */
#define USBD_EPINEN_IN2_Msk (0x1UL << USBD_EPINEN_IN2_Pos) /*!< Bit mask of IN2 field. */
#define USBD_EPINEN_IN2_Disable (0UL) /*!< Disable endpoint IN 2 (no response to IN tokens) */
#define USBD_EPINEN_IN2_Enable (1UL) /*!< Enable endpoint IN 2 (response to IN tokens) */

/* Bit 1 : Enable IN endpoint 1 */
#define USBD_EPINEN_IN1_Pos (1UL) /*!< Position of IN1 field. */
#define USBD_EPINEN_IN1_Msk (0x1UL << USBD_EPINEN_IN1_Pos) /*!< Bit mask of IN1 field. */
#define USBD_EPINEN_IN1_Disable (0UL) /*!< Disable endpoint IN 1 (no response to IN tokens) */
#define USBD_EPINEN_IN1_Enable (1UL) /*!< Enable endpoint IN 1 (response to IN tokens) */

/* Bit 0 : Enable IN endpoint 0 */
#define USBD_EPINEN_IN0_Pos (0UL) /*!< Position of IN0 field. */
#define USBD_EPINEN_IN0_Msk (0x1UL << USBD_EPINEN_IN0_Pos) /*!< Bit mask of IN0 field. */
#define USBD_EPINEN_IN0_Disable (0UL) /*!< Disable endpoint IN 0 (no response to IN tokens) */
#define USBD_EPINEN_IN0_Enable (1UL) /*!< Enable endpoint IN 0 (response to IN tokens) */

/* Register: USBD_EPOUTEN */
/* Description: Endpoint OUT enable */

/* Bit 8 : Enable ISO OUT endpoint 8 */
#define USBD_EPOUTEN_ISOOUT_Pos (8UL) /*!< Position of ISOOUT field. */
#define USBD_EPOUTEN_ISOOUT_Msk (0x1UL << USBD_EPOUTEN_ISOOUT_Pos) /*!< Bit mask of ISOOUT field. */
#define USBD_EPOUTEN_ISOOUT_Disable (0UL) /*!< Disable ISO OUT endpoint 8 */
#define USBD_EPOUTEN_ISOOUT_Enable (1UL) /*!< Enable ISO OUT endpoint 8 */

/* Bit 7 : Enable OUT endpoint 7 */
#define USBD_EPOUTEN_OUT7_Pos (7UL) /*!< Position of OUT7 field. */
#define USBD_EPOUTEN_OUT7_Msk (0x1UL << USBD_EPOUTEN_OUT7_Pos) /*!< Bit mask of OUT7 field. */
#define USBD_EPOUTEN_OUT7_Disable (0UL) /*!< Disable endpoint OUT 7 (no response to OUT tokens) */
#define USBD_EPOUTEN_OUT7_Enable (1UL) /*!< Enable endpoint OUT 7 (response to OUT tokens) */

/* Bit 6 : Enable OUT endpoint 6 */
#define USBD_EPOUTEN_OUT6_Pos (6UL) /*!< Position of OUT6 field. */
#define USBD_EPOUTEN_OUT6_Msk (0x1UL << USBD_EPOUTEN_OUT6_Pos) /*!< Bit mask of OUT6 field. */
#define USBD_EPOUTEN_OUT6_Disable (0UL) /*!< Disable endpoint OUT 6 (no response to OUT tokens) */
#define USBD_EPOUTEN_OUT6_Enable (1UL) /*!< Enable endpoint OUT 6 (response to OUT tokens) */

/* Bit 5 : Enable OUT endpoint 5 */
#define USBD_EPOUTEN_OUT5_Pos (5UL) /*!< Position of OUT5 field. */
#define USBD_EPOUTEN_OUT5_Msk (0x1UL << USBD_EPOUTEN_OUT5_Pos) /*!< Bit mask of OUT5 field. */
#define USBD_EPOUTEN_OUT5_Disable (0UL) /*!< Disable endpoint OUT 5 (no response to OUT tokens) */
#define USBD_EPOUTEN_OUT5_Enable (1UL) /*!< Enable endpoint OUT 5 (response to OUT tokens) */

/* Bit 4 : Enable OUT endpoint 4 */
#define USBD_EPOUTEN_OUT4_Pos (4UL) /*!< Position of OUT4 field. */
#define USBD_EPOUTEN_OUT4_Msk (0x1UL << USBD_EPOUTEN_OUT4_Pos) /*!< Bit mask of OUT4 field. */
#define USBD_EPOUTEN_OUT4_Disable (0UL) /*!< Disable endpoint OUT 4 (no response to OUT tokens) */
#define USBD_EPOUTEN_OUT4_Enable (1UL) /*!< Enable endpoint OUT 4 (response to OUT tokens) */

/* Bit 3 : Enable OUT endpoint 3 */
#define USBD_EPOUTEN_OUT3_Pos (3UL) /*!< Position of OUT3 field. */
#define USBD_EPOUTEN_OUT3_Msk (0x1UL << USBD_EPOUTEN_OUT3_Pos) /*!< Bit mask of OUT3 field. */
#define USBD_EPOUTEN_OUT3_Disable (0UL) /*!< Disable endpoint OUT 3 (no response to OUT tokens) */
#define USBD_EPOUTEN_OUT3_Enable (1UL) /*!< Enable endpoint OUT 3 (response to OUT tokens) */

/* Bit 2 : Enable OUT endpoint 2 */
#define USBD_EPOUTEN_OUT2_Pos (2UL) /*!< Position of OUT2 field. */
#define USBD_EPOUTEN_OUT2_Msk (0x1UL << USBD_EPOUTEN_OUT2_Pos) /*!< Bit mask of OUT2 field. */
#define USBD_EPOUTEN_OUT2_Disable (0UL) /*!< Disable endpoint OUT 2 (no response to OUT tokens) */
#define USBD_EPOUTEN_OUT2_Enable (1UL) /*!< Enable endpoint OUT 2 (response to OUT tokens) */

/* Bit 1 : Enable OUT endpoint 1 */
#define USBD_EPOUTEN_OUT1_Pos (1UL) /*!< Position of OUT1 field. */
#define USBD_EPOUTEN_OUT1_Msk (0x1UL << USBD_EPOUTEN_OUT1_Pos) /*!< Bit mask of OUT1 field. */
#define USBD_EPOUTEN_OUT1_Disable (0UL) /*!< Disable endpoint OUT 1 (no response to OUT tokens) */
#define USBD_EPOUTEN_OUT1_Enable (1UL) /*!< Enable endpoint OUT 1 (response to OUT tokens) */

/* Bit 0 : Enable OUT endpoint 0 */
#define USBD_EPOUTEN_OUT0_Pos (0UL) /*!< Position of OUT0 field. */
#define USBD_EPOUTEN_OUT0_Msk (0x1UL << USBD_EPOUTEN_OUT0_Pos) /*!< Bit mask of OUT0 field. */
#define USBD_EPOUTEN_OUT0_Disable (0UL) /*!< Disable endpoint OUT 0 (no response to OUT tokens) */
#define USBD_EPOUTEN_OUT0_Enable (1UL) /*!< Enable endpoint OUT 0 (response to OUT tokens) */

/* Register: USBD_EPSTALL */
/* Description: STALL endpoints */

/* Bit 8 : Stall selected endpoint */
#define USBD_EPSTALL_STALL_Pos (8UL) /*!< Position of STALL field. */
#define USBD_EPSTALL_STALL_Msk (0x1UL << USBD_EPSTALL_STALL_Pos) /*!< Bit mask of STALL field. */
#define USBD_EPSTALL_STALL_UnStall (0UL) /*!< Don't stall selected endpoint */
#define USBD_EPSTALL_STALL_Stall (1UL) /*!< Stall selected endpoint */

/* Bit 7 : Selects IN or OUT endpoint */
#define USBD_EPSTALL_IO_Pos (7UL) /*!< Position of IO field. */
#define USBD_EPSTALL_IO_Msk (0x1UL << USBD_EPSTALL_IO_Pos) /*!< Bit mask of IO field. */
#define USBD_EPSTALL_IO_Out (0UL) /*!< Selects OUT endpoint */
#define USBD_EPSTALL_IO_In (1UL) /*!< Selects IN endpoint */

/* Bits 2..0 : Select endpoint number */
#define USBD_EPSTALL_EP_Pos (0UL) /*!< Position of EP field. */
#define USBD_EPSTALL_EP_Msk (0x7UL << USBD_EPSTALL_EP_Pos) /*!< Bit mask of EP field. */

/* Register: USBD_ISOSPLIT */
/* Description: Controls the split of ISO buffers */

/* Bits 15..0 : Controls the split of ISO buffers */
#define USBD_ISOSPLIT_SPLIT_Pos (0UL) /*!< Position of SPLIT field. */
#define USBD_ISOSPLIT_SPLIT_Msk (0xFFFFUL << USBD_ISOSPLIT_SPLIT_Pos) /*!< Bit mask of SPLIT field. */
#define USBD_ISOSPLIT_SPLIT_OneDir (0x0000UL) /*!< Full buffer dedicated to either iso IN or OUT */
#define USBD_ISOSPLIT_SPLIT_QuartIN (0x0040UL) /*!< Lower 25 percent for IN, upper 75 percent for OUT */
#define USBD_ISOSPLIT_SPLIT_HalfIN (0x0080UL) /*!< Lower half for IN, upper half for OUT */
#define USBD_ISOSPLIT_SPLIT_QuartOUT (0x4000UL) /*!< Lower 25 percent for OUT, upper 75 percent for IN */
#define USBD_ISOSPLIT_SPLIT_HalfOUT (0x8000UL) /*!< Lower half for OUT, upper half for IN */

/* Register: USBD_FRAMECNTR */
/* Description: Returns the current value of the start of frame counter */

/* Bits 10..0 : Returns the current value of the start of frame counter */
#define USBD_FRAMECNTR_FRAMECNTR_Pos (0UL) /*!< Position of FRAMECNTR field. */
#define USBD_FRAMECNTR_FRAMECNTR_Msk (0x7FFUL << USBD_FRAMECNTR_FRAMECNTR_Pos) /*!< Bit mask of FRAMECNTR field. */

/* Register: USBD_TESTUSBPULLUP */
/* Description: Control of the USB pull-up value, for test purposes */

/* Bits 1..0 : Control of the value of USB pull-up on the D+ line (for test mode) */
#define USBD_TESTUSBPULLUP_VALUE_Pos (0UL) /*!< Position of VALUE field. */
#define USBD_TESTUSBPULLUP_VALUE_Msk (0x3UL << USBD_TESTUSBPULLUP_VALUE_Pos) /*!< Bit mask of VALUE field. */
#define USBD_TESTUSBPULLUP_VALUE_Auto (0UL) /*!< MAC controls the value of the pull-up (no override) */
#define USBD_TESTUSBPULLUP_VALUE_BusActive (2UL) /*!< Pull-up value is 1425 to 3090 Ohm */
#define USBD_TESTUSBPULLUP_VALUE_BusIdle (3UL) /*!< Pull-up is Resume in 900 to 1575 Ohm */

/* Register: USBD_RAMCONFIG */
/* Description: Trim value for internal PDM RAM */

/* Bit 6 : Read/Write Margin Adjustment */
#define USBD_RAMCONFIG_RWM_Pos (6UL) /*!< Position of RWM field. */
#define USBD_RAMCONFIG_RWM_Msk (0x1UL << USBD_RAMCONFIG_RWM_Pos) /*!< Bit mask of RWM field. */

/* Bit 5 : Read Margin Adjustment */
#define USBD_RAMCONFIG_RM_Pos (5UL) /*!< Position of RM field. */
#define USBD_RAMCONFIG_RM_Msk (0x1UL << USBD_RAMCONFIG_RM_Pos) /*!< Bit mask of RM field. */

/* Bit 4 : Write Margin Adjustment */
#define USBD_RAMCONFIG_WM_Pos (4UL) /*!< Position of WM field. */
#define USBD_RAMCONFIG_WM_Msk (0x1UL << USBD_RAMCONFIG_WM_Pos) /*!< Bit mask of WM field. */

/* Bits 3..0 : Source Bias Trim Adjustment */
#define USBD_RAMCONFIG_BTRIM_Pos (0UL) /*!< Position of BTRIM field. */
#define USBD_RAMCONFIG_BTRIM_Msk (0xFUL << USBD_RAMCONFIG_BTRIM_Pos) /*!< Bit mask of BTRIM field. */

/* Register: USBD_LOWPOWER */
/* Description: Controls USBD peripheral low power mode during USB suspend */

/* Bit 0 : Controls USBD peripheral low-power mode during USB suspend */
#define USBD_LOWPOWER_LOWPOWER_Pos (0UL) /*!< Position of LOWPOWER field. */
#define USBD_LOWPOWER_LOWPOWER_Msk (0x1UL << USBD_LOWPOWER_LOWPOWER_Pos) /*!< Bit mask of LOWPOWER field. */
#define USBD_LOWPOWER_LOWPOWER_ForceNormal (0UL) /*!< Software must write this value to exit low power mode and before performing a remote wake-up */
#define USBD_LOWPOWER_LOWPOWER_LowPower (1UL) /*!< Software must write this value to enter low power mode after DMA and software have finished interacting with the USB peripheral */

/* Register: USBD_ISOINCONFIG */
/* Description: Controls the response of the ISO IN endpoint to an IN token when no data is ready to be sent */

/* Bit 0 : Controls the response of the ISO IN endpoint to an IN token when no data is ready to be sent */
#define USBD_ISOINCONFIG_RESPONSE_Pos (0UL) /*!< Position of RESPONSE field. */
#define USBD_ISOINCONFIG_RESPONSE_Msk (0x1UL << USBD_ISOINCONFIG_RESPONSE_Pos) /*!< Bit mask of RESPONSE field. */
#define USBD_ISOINCONFIG_RESPONSE_NoResp (0UL) /*!< Endpoint does not respond in that case */
#define USBD_ISOINCONFIG_RESPONSE_ZeroData (1UL) /*!< Endpoint responds with a zero-length data packet in that case */

/* Register: USBD_EPIN_PTR */
/* Description: Description cluster: Data pointer */

/* Bits 31..0 : Data pointer */
#define USBD_EPIN_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define USBD_EPIN_PTR_PTR_Msk (0xFFFFFFFFUL << USBD_EPIN_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: USBD_EPIN_MAXCNT */
/* Description: Description cluster: Maximum number of bytes to transfer */

/* Bits 15..0 : Maximum number of bytes to transfer */
#define USBD_EPIN_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define USBD_EPIN_MAXCNT_MAXCNT_Msk (0xFFFFUL << USBD_EPIN_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: USBD_EPIN_AMOUNT */
/* Description: Description cluster: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction */
#define USBD_EPIN_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define USBD_EPIN_AMOUNT_AMOUNT_Msk (0xFFFFUL << USBD_EPIN_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: USBD_EPIN_CONFIG */
/* Description: Description cluster: Endpoint EasyDMA configuration */

/* Bits 1..0 : DMA transfer size */
#define USBD_EPIN_CONFIG_DMASIZE_Pos (0UL) /*!< Position of DMASIZE field. */
#define USBD_EPIN_CONFIG_DMASIZE_Msk (0x3UL << USBD_EPIN_CONFIG_DMASIZE_Pos) /*!< Bit mask of DMASIZE field. */
#define USBD_EPIN_CONFIG_DMASIZE_Byte (0UL) /*!< DMA transfer size is 8 bits */
#define USBD_EPIN_CONFIG_DMASIZE_Short (1UL) /*!< DMA transfer size is 16 bits (buffer must be aligned accordingly) */
#define USBD_EPIN_CONFIG_DMASIZE_Long (2UL) /*!< DMA transfer size is 32 bits (buffer must be aligned accordingly) */

/* Register: USBD_EPIN_LIST */
/* Description: Description cluster: EasyDMA list type */

/* Bits 2..0 : List type */
#define USBD_EPIN_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define USBD_EPIN_LIST_LIST_Msk (0x7UL << USBD_EPIN_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define USBD_EPIN_LIST_LIST_Disabled (0UL) /*!< Normal EasyDMA operation */
#define USBD_EPIN_LIST_LIST_ArrayList (1UL) /*!< Use array list (auto-increment of .PTR) */

/* Register: USBD_ISOIN_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define USBD_ISOIN_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define USBD_ISOIN_PTR_PTR_Msk (0xFFFFFFFFUL << USBD_ISOIN_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: USBD_ISOIN_MAXCNT */
/* Description: Maximum number of bytes to transfer */

/* Bits 15..0 : Maximum number of bytes to transfer */
#define USBD_ISOIN_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define USBD_ISOIN_MAXCNT_MAXCNT_Msk (0xFFFFUL << USBD_ISOIN_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: USBD_ISOIN_AMOUNT */
/* Description: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction */
#define USBD_ISOIN_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define USBD_ISOIN_AMOUNT_AMOUNT_Msk (0xFFFFUL << USBD_ISOIN_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: USBD_ISOIN_CONFIG */
/* Description: Isochronous endpoint EasyDMA configuration */

/* Bits 1..0 : DMA transfer size */
#define USBD_ISOIN_CONFIG_DMASIZE_Pos (0UL) /*!< Position of DMASIZE field. */
#define USBD_ISOIN_CONFIG_DMASIZE_Msk (0x3UL << USBD_ISOIN_CONFIG_DMASIZE_Pos) /*!< Bit mask of DMASIZE field. */
#define USBD_ISOIN_CONFIG_DMASIZE_Byte (0UL) /*!< DMA transfer size is 8 bits */
#define USBD_ISOIN_CONFIG_DMASIZE_Short (1UL) /*!< DMA transfer size is 16 bits (buffer must be aligned accordingly) */
#define USBD_ISOIN_CONFIG_DMASIZE_Long (2UL) /*!< DMA transfer size is 32 bits (buffer must be aligned accordingly) */

/* Register: USBD_EPOUT_PTR */
/* Description: Description cluster: Data pointer */

/* Bits 31..0 : Data pointer */
#define USBD_EPOUT_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define USBD_EPOUT_PTR_PTR_Msk (0xFFFFFFFFUL << USBD_EPOUT_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: USBD_EPOUT_MAXCNT */
/* Description: Description cluster: Maximum number of bytes to transfer */

/* Bits 15..0 : Maximum number of bytes to transfer */
#define USBD_EPOUT_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define USBD_EPOUT_MAXCNT_MAXCNT_Msk (0xFFFFUL << USBD_EPOUT_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: USBD_EPOUT_AMOUNT */
/* Description: Description cluster: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction */
#define USBD_EPOUT_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define USBD_EPOUT_AMOUNT_AMOUNT_Msk (0xFFFFUL << USBD_EPOUT_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: USBD_EPOUT_CONFIG */
/* Description: Description cluster: Endpoint EasyDMA configuration */

/* Bits 1..0 : DMA transfer size */
#define USBD_EPOUT_CONFIG_DMASIZE_Pos (0UL) /*!< Position of DMASIZE field. */
#define USBD_EPOUT_CONFIG_DMASIZE_Msk (0x3UL << USBD_EPOUT_CONFIG_DMASIZE_Pos) /*!< Bit mask of DMASIZE field. */
#define USBD_EPOUT_CONFIG_DMASIZE_Byte (0UL) /*!< DMA transfer size is 8 bit */
#define USBD_EPOUT_CONFIG_DMASIZE_Short (1UL) /*!< DMA transfer size is 16 bit (buffer must be aligned accordingly) */
#define USBD_EPOUT_CONFIG_DMASIZE_Long (2UL) /*!< DMA transfer size is 32 bit (buffer must be aligned accordingly) */

/* Register: USBD_EPOUT_LIST */
/* Description: Description cluster: EasyDMA list type */

/* Bits 2..0 : List type */
#define USBD_EPOUT_LIST_LIST_Pos (0UL) /*!< Position of LIST field. */
#define USBD_EPOUT_LIST_LIST_Msk (0x7UL << USBD_EPOUT_LIST_LIST_Pos) /*!< Bit mask of LIST field. */
#define USBD_EPOUT_LIST_LIST_Disabled (0UL) /*!< Normal EasyDMA operation */
#define USBD_EPOUT_LIST_LIST_ArrayList (1UL) /*!< Use array list (auto-increment of .PTR) */

/* Register: USBD_ISOOUT_PTR */
/* Description: Data pointer */

/* Bits 31..0 : Data pointer */
#define USBD_ISOOUT_PTR_PTR_Pos (0UL) /*!< Position of PTR field. */
#define USBD_ISOOUT_PTR_PTR_Msk (0xFFFFFFFFUL << USBD_ISOOUT_PTR_PTR_Pos) /*!< Bit mask of PTR field. */

/* Register: USBD_ISOOUT_MAXCNT */
/* Description: Maximum number of bytes to transfer */

/* Bits 15..0 : Maximum number of bytes to transfer */
#define USBD_ISOOUT_MAXCNT_MAXCNT_Pos (0UL) /*!< Position of MAXCNT field. */
#define USBD_ISOOUT_MAXCNT_MAXCNT_Msk (0xFFFFUL << USBD_ISOOUT_MAXCNT_MAXCNT_Pos) /*!< Bit mask of MAXCNT field. */

/* Register: USBD_ISOOUT_AMOUNT */
/* Description: Number of bytes transferred in the last transaction */

/* Bits 15..0 : Number of bytes transferred in the last transaction */
#define USBD_ISOOUT_AMOUNT_AMOUNT_Pos (0UL) /*!< Position of AMOUNT field. */
#define USBD_ISOOUT_AMOUNT_AMOUNT_Msk (0xFFFFUL << USBD_ISOOUT_AMOUNT_AMOUNT_Pos) /*!< Bit mask of AMOUNT field. */

/* Register: USBD_ISOOUT_CONFIG */
/* Description: Isochronous endpoint EasyDMA configuration */

/* Bits 1..0 : DMA transfer size */
#define USBD_ISOOUT_CONFIG_DMASIZE_Pos (0UL) /*!< Position of DMASIZE field. */
#define USBD_ISOOUT_CONFIG_DMASIZE_Msk (0x3UL << USBD_ISOOUT_CONFIG_DMASIZE_Pos) /*!< Bit mask of DMASIZE field. */
#define USBD_ISOOUT_CONFIG_DMASIZE_Byte (0UL) /*!< DMA transfer size is 8 bits */
#define USBD_ISOOUT_CONFIG_DMASIZE_Short (1UL) /*!< DMA transfer size is 16 bits (buffer must be aligned accordingly) */
#define USBD_ISOOUT_CONFIG_DMASIZE_Long (2UL) /*!< DMA transfer size is 32 bits (buffer must be aligned accordingly) */

/* Register: USBD_RAWADDR */
/* Description: Address to be used for accessing the MAC IP4000 */

/* Bits 10..0 : IP4000 address space */
#define USBD_RAWADDR_ADDR_Pos (0UL) /*!< Position of ADDR field. */
#define USBD_RAWADDR_ADDR_Msk (0x7FFUL << USBD_RAWADDR_ADDR_Pos) /*!< Bit mask of ADDR field. */

/* Register: USBD_RAWDATA */
/* Description: Actual read or write access to the raw IP, using RAWADDR address */

/* Bits 7..0 : data */
#define USBD_RAWDATA_DATA_Pos (0UL) /*!< Position of DATA field. */
#define USBD_RAWDATA_DATA_Msk (0xFFUL << USBD_RAWDATA_DATA_Pos) /*!< Bit mask of DATA field. */

/* Register: USBD_PENALTY_DIG */
/* Description: Description collection: PcgcSlaveDig */

/* Bits 31..2 : Unused bits, always reads as ones */
#define USBD_PENALTY_DIG_UNUSED_Pos (2UL) /*!< Position of UNUSED field. */
#define USBD_PENALTY_DIG_UNUSED_Msk (0x3FFFFFFFUL << USBD_PENALTY_DIG_UNUSED_Pos) /*!< Bit mask of UNUSED field. */

/* Bits 1..0 :   */
#define USBD_PENALTY_DIG_PENALTY_DIG_Pos (0UL) /*!< Position of PENALTY_DIG field. */
#define USBD_PENALTY_DIG_PENALTY_DIG_Msk (0x3UL << USBD_PENALTY_DIG_PENALTY_DIG_Pos) /*!< Bit mask of PENALTY_DIG field. */
#define USBD_PENALTY_DIG_PENALTY_DIG_AUTO0 (0UL) /*!< Full penalty: Power core, Power switch, Clock core, Clock buffer and Clock switch can turn off */
#define USBD_PENALTY_DIG_PENALTY_DIG_AUTO1 (1UL) /*!< Clock core, Clock buffer and Clock switch can turn off, Power core and Power switch are kept on */
#define USBD_PENALTY_DIG_PENALTY_DIG_AUTO2 (2UL) /*!< Clock buffer and Clock switch can turn off, Power core, Power switch and Clock core are kept on */
#define USBD_PENALTY_DIG_PENALTY_DIG_AUTO3 (3UL) /*!< Zero penalty: Clock switch can turn off, Power core, Power switch, Clock core and Clock buffer are kept on */

/* Register: USBD_PENALTY_MAIN0 */
/* Description: Description collection: PcgcSlaveMain */

/* Bits 31..2 : Unused bits, always reads as ones */
#define USBD_PENALTY_MAIN0_UNUSED_Pos (2UL) /*!< Position of UNUSED field. */
#define USBD_PENALTY_MAIN0_UNUSED_Msk (0x3FFFFFFFUL << USBD_PENALTY_MAIN0_UNUSED_Pos) /*!< Bit mask of UNUSED field. */

/* Bits 1..0 :   */
#define USBD_PENALTY_MAIN0_PENALTY_DIG1_Pos (0UL) /*!< Position of PENALTY_DIG1 field. */
#define USBD_PENALTY_MAIN0_PENALTY_DIG1_Msk (0x3UL << USBD_PENALTY_MAIN0_PENALTY_DIG1_Pos) /*!< Bit mask of PENALTY_DIG1 field. */
#define USBD_PENALTY_MAIN0_PENALTY_DIG1_AUTO0 (0UL) /*!< Full penalty: Power core, Power switch, Clock core, Clock buffer and Clock switch can turn off */
#define USBD_PENALTY_MAIN0_PENALTY_DIG1_AUTO1 (1UL) /*!< Clock core, Clock buffer and Clock switch can turn off, Power core and Power switch are kept on */
#define USBD_PENALTY_MAIN0_PENALTY_DIG1_AUTO2 (2UL) /*!< Clock buffer and Clock switch can turn off, Power core, Power switch and Clock core are kept on */
#define USBD_PENALTY_MAIN0_PENALTY_DIG1_AUTO3 (3UL) /*!< Zero penalty: Clock switch can turn off, Power core, Power switch, Clock core and Clock buffer are kept on */

/* Register: USBD_FORCE_OVERRIDE_DIG */
/* Description: Description collection: Clock and power request override register for PCPn in PcgcSlaveDig */

/* Bit 15 :   */
#define USBD_FORCE_OVERRIDE_DIG_DOFORCEPOWER_Pos (15UL) /*!< Position of DOFORCEPOWER field. */
#define USBD_FORCE_OVERRIDE_DIG_DOFORCEPOWER_Msk (0x1UL << USBD_FORCE_OVERRIDE_DIG_DOFORCEPOWER_Pos) /*!< Bit mask of DOFORCEPOWER field. */
#define USBD_FORCE_OVERRIDE_DIG_DOFORCEPOWER_Disable (0UL) /*!< Disable forcing of the power request signals */
#define USBD_FORCE_OVERRIDE_DIG_DOFORCEPOWER_Enable (1UL) /*!< Enable forcing of the power request signals */

/* Bit 9 : Force powerRequest[n].core if doForcePower is set. If doForcePower is not set, powerRequest[n].core is not overridden. */
#define USBD_FORCE_OVERRIDE_DIG_POWERFORCINGCORE_Pos (9UL) /*!< Position of POWERFORCINGCORE field. */
#define USBD_FORCE_OVERRIDE_DIG_POWERFORCINGCORE_Msk (0x1UL << USBD_FORCE_OVERRIDE_DIG_POWERFORCINGCORE_Pos) /*!< Bit mask of POWERFORCINGCORE field. */
#define USBD_FORCE_OVERRIDE_DIG_POWERFORCINGCORE_ForceLow (0UL) /*!< Forces powerRequest[n].core is overridden to 0. */
#define USBD_FORCE_OVERRIDE_DIG_POWERFORCINGCORE_ForceHigh (1UL) /*!< Forces powerRequest[n].core is overridden to 1. */

/* Bit 8 : Force powerRequest[n].switch If doForcePower is set. If doForcePower is not set, powerRequest[n].switch is not overridden. */
#define USBD_FORCE_OVERRIDE_DIG_POWERFORCINGSWITCH_Pos (8UL) /*!< Position of POWERFORCINGSWITCH field. */
#define USBD_FORCE_OVERRIDE_DIG_POWERFORCINGSWITCH_Msk (0x1UL << USBD_FORCE_OVERRIDE_DIG_POWERFORCINGSWITCH_Pos) /*!< Bit mask of POWERFORCINGSWITCH field. */
#define USBD_FORCE_OVERRIDE_DIG_POWERFORCINGSWITCH_ForceLow (0UL) /*!< Forces powerRequest[n].switch is overridden to 0. */
#define USBD_FORCE_OVERRIDE_DIG_POWERFORCINGSWITCH_ForceHigh (1UL) /*!< Forces powerRequest[n].switch is overridden to 1. */

/* Bit 7 : Enable or disable the forcing of clock request signals */
#define USBD_FORCE_OVERRIDE_DIG_DOFORCECLOCK_Pos (7UL) /*!< Position of DOFORCECLOCK field. */
#define USBD_FORCE_OVERRIDE_DIG_DOFORCECLOCK_Msk (0x1UL << USBD_FORCE_OVERRIDE_DIG_DOFORCECLOCK_Pos) /*!< Bit mask of DOFORCECLOCK field. */
#define USBD_FORCE_OVERRIDE_DIG_DOFORCECLOCK_Disable (0UL) /*!< Disable forcing of the clock request signals */
#define USBD_FORCE_OVERRIDE_DIG_DOFORCECLOCK_Enable (1UL) /*!< Enable forcing of the clock request signals */

/* Bit 3 : Force clockRequest[n].core if doForceClock is set. If doForceClock is not set, clockRequest[n].core is not overridden. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGCORE_Pos (3UL) /*!< Position of CLOCKFORCINGCORE field. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGCORE_Msk (0x1UL << USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGCORE_Pos) /*!< Bit mask of CLOCKFORCINGCORE field. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGCORE_ForceLow (0UL) /*!< Forces clockRequest[n].core is overridden to 0. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGCORE_ForceHigh (1UL) /*!< Forces clockRequest[n].core is overridden to 1. */

/* Bit 2 : Force clockRequest[n].buff if doForceClock is set. If doForceClock is not set, clockRequest[n].buff is not overridden. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGBUFF_Pos (2UL) /*!< Position of CLOCKFORCINGBUFF field. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGBUFF_Msk (0x1UL << USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGBUFF_Pos) /*!< Bit mask of CLOCKFORCINGBUFF field. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGBUFF_ForceLow (0UL) /*!< Forces clockRequest[n].buff is overridden to 0. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGBUFF_ForceHigh (1UL) /*!< Forces clockRequest[n].buff is overridden to 1. */

/* Bit 1 : Force clockRequest[n].switch if doForceClock is set. If doForceClock is not set, clockRequest[n].switch is not overridden. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_Pos (1UL) /*!< Position of CLOCKFORCINGSWITCH field. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_Msk (0x1UL << USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_Pos) /*!< Bit mask of CLOCKFORCINGSWITCH field. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_ForceLow (0UL) /*!< Forces clockRequest[n].switch is overridden to 0. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_ForceHigh (1UL) /*!< Forces clockRequest[n].switch is overridden to 1. */

/* Bit 0 : Force clockRequest[n].switch_a if doForceClock is set. If doForceClock is not set, clockRequest[n].switch_a is not overridden. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_A_Pos (0UL) /*!< Position of CLOCKFORCINGSWITCH_A field. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_A_Msk (0x1UL << USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_A_Pos) /*!< Bit mask of CLOCKFORCINGSWITCH_A field. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_A_ForceLow (0UL) /*!< Forces clockRequest[n].switch_a is overridden to 0. */
#define USBD_FORCE_OVERRIDE_DIG_CLOCKFORCINGSWITCH_A_ForceHigh (1UL) /*!< Forces clockRequest[n].switch_a is overridden to 1. */

/* Register: USBD_TURN_OFF_AUTO_CLOCKSOURCE_REQ */
/* Description: Unused */

/* Bits 31..0 : Always reads as zero */
#define USBD_TURN_OFF_AUTO_CLOCKSOURCE_REQ_UNUSED_Pos (0UL) /*!< Position of UNUSED field. */
#define USBD_TURN_OFF_AUTO_CLOCKSOURCE_REQ_UNUSED_Msk (0xFFFFFFFFUL << USBD_TURN_OFF_AUTO_CLOCKSOURCE_REQ_UNUSED_Pos) /*!< Bit mask of UNUSED field. */


/* Peripheral: USBREG */
/* Description: USB Regulator 0 */

/* Register: USBREG_EVENTS_USBDETECTED */
/* Description: Voltage supply detected on VBUS */

/* Bit 0 : Voltage supply detected on VBUS */
#define USBREG_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Pos (0UL) /*!< Position of EVENTS_USBDETECTED field. */
#define USBREG_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Msk (0x1UL << USBREG_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Pos) /*!< Bit mask of EVENTS_USBDETECTED field. */
#define USBREG_EVENTS_USBDETECTED_EVENTS_USBDETECTED_NotGenerated (0UL) /*!< Event not generated */
#define USBREG_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Generated (1UL) /*!< Event generated */

/* Register: USBREG_EVENTS_USBREMOVED */
/* Description: Voltage supply removed from VBUS */

/* Bit 0 : Voltage supply removed from VBUS */
#define USBREG_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Pos (0UL) /*!< Position of EVENTS_USBREMOVED field. */
#define USBREG_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Msk (0x1UL << USBREG_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Pos) /*!< Bit mask of EVENTS_USBREMOVED field. */
#define USBREG_EVENTS_USBREMOVED_EVENTS_USBREMOVED_NotGenerated (0UL) /*!< Event not generated */
#define USBREG_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Generated (1UL) /*!< Event generated */

/* Register: USBREG_EVENTS_USBPWRRDY */
/* Description: USB 3.3 V supply ready */

/* Bit 0 : USB 3.3 V supply ready */
#define USBREG_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Pos (0UL) /*!< Position of EVENTS_USBPWRRDY field. */
#define USBREG_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Msk (0x1UL << USBREG_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Pos) /*!< Bit mask of EVENTS_USBPWRRDY field. */
#define USBREG_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_NotGenerated (0UL) /*!< Event not generated */
#define USBREG_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Generated (1UL) /*!< Event generated */

/* Register: USBREG_PUBLISH_USBDETECTED */
/* Description: Publish configuration for event USBDETECTED */

/* Bit 31 :   */
#define USBREG_PUBLISH_USBDETECTED_EN_Pos (31UL) /*!< Position of EN field. */
#define USBREG_PUBLISH_USBDETECTED_EN_Msk (0x1UL << USBREG_PUBLISH_USBDETECTED_EN_Pos) /*!< Bit mask of EN field. */
#define USBREG_PUBLISH_USBDETECTED_EN_Disabled (0UL) /*!< Disable publishing */
#define USBREG_PUBLISH_USBDETECTED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event USBDETECTED will publish to. */
#define USBREG_PUBLISH_USBDETECTED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBREG_PUBLISH_USBDETECTED_CHIDX_Msk (0xFFUL << USBREG_PUBLISH_USBDETECTED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBREG_PUBLISH_USBREMOVED */
/* Description: Publish configuration for event USBREMOVED */

/* Bit 31 :   */
#define USBREG_PUBLISH_USBREMOVED_EN_Pos (31UL) /*!< Position of EN field. */
#define USBREG_PUBLISH_USBREMOVED_EN_Msk (0x1UL << USBREG_PUBLISH_USBREMOVED_EN_Pos) /*!< Bit mask of EN field. */
#define USBREG_PUBLISH_USBREMOVED_EN_Disabled (0UL) /*!< Disable publishing */
#define USBREG_PUBLISH_USBREMOVED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event USBREMOVED will publish to. */
#define USBREG_PUBLISH_USBREMOVED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBREG_PUBLISH_USBREMOVED_CHIDX_Msk (0xFFUL << USBREG_PUBLISH_USBREMOVED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBREG_PUBLISH_USBPWRRDY */
/* Description: Publish configuration for event USBPWRRDY */

/* Bit 31 :   */
#define USBREG_PUBLISH_USBPWRRDY_EN_Pos (31UL) /*!< Position of EN field. */
#define USBREG_PUBLISH_USBPWRRDY_EN_Msk (0x1UL << USBREG_PUBLISH_USBPWRRDY_EN_Pos) /*!< Bit mask of EN field. */
#define USBREG_PUBLISH_USBPWRRDY_EN_Disabled (0UL) /*!< Disable publishing */
#define USBREG_PUBLISH_USBPWRRDY_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event USBPWRRDY will publish to. */
#define USBREG_PUBLISH_USBPWRRDY_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define USBREG_PUBLISH_USBPWRRDY_CHIDX_Msk (0xFFUL << USBREG_PUBLISH_USBPWRRDY_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: USBREG_INTEN */
/* Description: Enable or disable interrupt */

/* Bit 2 : Enable or disable interrupt for event USBPWRRDY */
#define USBREG_INTEN_USBPWRRDY_Pos (2UL) /*!< Position of USBPWRRDY field. */
#define USBREG_INTEN_USBPWRRDY_Msk (0x1UL << USBREG_INTEN_USBPWRRDY_Pos) /*!< Bit mask of USBPWRRDY field. */
#define USBREG_INTEN_USBPWRRDY_Disabled (0UL) /*!< Disable */
#define USBREG_INTEN_USBPWRRDY_Enabled (1UL) /*!< Enable */

/* Bit 1 : Enable or disable interrupt for event USBREMOVED */
#define USBREG_INTEN_USBREMOVED_Pos (1UL) /*!< Position of USBREMOVED field. */
#define USBREG_INTEN_USBREMOVED_Msk (0x1UL << USBREG_INTEN_USBREMOVED_Pos) /*!< Bit mask of USBREMOVED field. */
#define USBREG_INTEN_USBREMOVED_Disabled (0UL) /*!< Disable */
#define USBREG_INTEN_USBREMOVED_Enabled (1UL) /*!< Enable */

/* Bit 0 : Enable or disable interrupt for event USBDETECTED */
#define USBREG_INTEN_USBDETECTED_Pos (0UL) /*!< Position of USBDETECTED field. */
#define USBREG_INTEN_USBDETECTED_Msk (0x1UL << USBREG_INTEN_USBDETECTED_Pos) /*!< Bit mask of USBDETECTED field. */
#define USBREG_INTEN_USBDETECTED_Disabled (0UL) /*!< Disable */
#define USBREG_INTEN_USBDETECTED_Enabled (1UL) /*!< Enable */

/* Register: USBREG_INTENSET */
/* Description: Enable interrupt */

/* Bit 2 : Write '1' to enable interrupt for event USBPWRRDY */
#define USBREG_INTENSET_USBPWRRDY_Pos (2UL) /*!< Position of USBPWRRDY field. */
#define USBREG_INTENSET_USBPWRRDY_Msk (0x1UL << USBREG_INTENSET_USBPWRRDY_Pos) /*!< Bit mask of USBPWRRDY field. */
#define USBREG_INTENSET_USBPWRRDY_Disabled (0UL) /*!< Read: Disabled */
#define USBREG_INTENSET_USBPWRRDY_Enabled (1UL) /*!< Read: Enabled */
#define USBREG_INTENSET_USBPWRRDY_Set (1UL) /*!< Enable */

/* Bit 1 : Write '1' to enable interrupt for event USBREMOVED */
#define USBREG_INTENSET_USBREMOVED_Pos (1UL) /*!< Position of USBREMOVED field. */
#define USBREG_INTENSET_USBREMOVED_Msk (0x1UL << USBREG_INTENSET_USBREMOVED_Pos) /*!< Bit mask of USBREMOVED field. */
#define USBREG_INTENSET_USBREMOVED_Disabled (0UL) /*!< Read: Disabled */
#define USBREG_INTENSET_USBREMOVED_Enabled (1UL) /*!< Read: Enabled */
#define USBREG_INTENSET_USBREMOVED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event USBDETECTED */
#define USBREG_INTENSET_USBDETECTED_Pos (0UL) /*!< Position of USBDETECTED field. */
#define USBREG_INTENSET_USBDETECTED_Msk (0x1UL << USBREG_INTENSET_USBDETECTED_Pos) /*!< Bit mask of USBDETECTED field. */
#define USBREG_INTENSET_USBDETECTED_Disabled (0UL) /*!< Read: Disabled */
#define USBREG_INTENSET_USBDETECTED_Enabled (1UL) /*!< Read: Enabled */
#define USBREG_INTENSET_USBDETECTED_Set (1UL) /*!< Enable */

/* Register: USBREG_INTENCLR */
/* Description: Disable interrupt */

/* Bit 2 : Write '1' to disable interrupt for event USBPWRRDY */
#define USBREG_INTENCLR_USBPWRRDY_Pos (2UL) /*!< Position of USBPWRRDY field. */
#define USBREG_INTENCLR_USBPWRRDY_Msk (0x1UL << USBREG_INTENCLR_USBPWRRDY_Pos) /*!< Bit mask of USBPWRRDY field. */
#define USBREG_INTENCLR_USBPWRRDY_Disabled (0UL) /*!< Read: Disabled */
#define USBREG_INTENCLR_USBPWRRDY_Enabled (1UL) /*!< Read: Enabled */
#define USBREG_INTENCLR_USBPWRRDY_Clear (1UL) /*!< Disable */

/* Bit 1 : Write '1' to disable interrupt for event USBREMOVED */
#define USBREG_INTENCLR_USBREMOVED_Pos (1UL) /*!< Position of USBREMOVED field. */
#define USBREG_INTENCLR_USBREMOVED_Msk (0x1UL << USBREG_INTENCLR_USBREMOVED_Pos) /*!< Bit mask of USBREMOVED field. */
#define USBREG_INTENCLR_USBREMOVED_Disabled (0UL) /*!< Read: Disabled */
#define USBREG_INTENCLR_USBREMOVED_Enabled (1UL) /*!< Read: Enabled */
#define USBREG_INTENCLR_USBREMOVED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event USBDETECTED */
#define USBREG_INTENCLR_USBDETECTED_Pos (0UL) /*!< Position of USBDETECTED field. */
#define USBREG_INTENCLR_USBDETECTED_Msk (0x1UL << USBREG_INTENCLR_USBDETECTED_Pos) /*!< Bit mask of USBDETECTED field. */
#define USBREG_INTENCLR_USBDETECTED_Disabled (0UL) /*!< Read: Disabled */
#define USBREG_INTENCLR_USBDETECTED_Enabled (1UL) /*!< Read: Enabled */
#define USBREG_INTENCLR_USBDETECTED_Clear (1UL) /*!< Disable */

/* Register: USBREG_USBREGSTATUS */
/* Description: USB supply status */

/* Bit 1 : USB supply output settling time elapsed */
#define USBREG_USBREGSTATUS_OUTPUTRDY_Pos (1UL) /*!< Position of OUTPUTRDY field. */
#define USBREG_USBREGSTATUS_OUTPUTRDY_Msk (0x1UL << USBREG_USBREGSTATUS_OUTPUTRDY_Pos) /*!< Bit mask of OUTPUTRDY field. */
#define USBREG_USBREGSTATUS_OUTPUTRDY_NotReady (0UL) /*!< USBREG output settling time not elapsed */
#define USBREG_USBREGSTATUS_OUTPUTRDY_Ready (1UL) /*!< USBREG output settling time elapsed (same information as USBPWRRDY event) */

/* Bit 0 : VBUS input detection status (USBDETECTED and USBREMOVED events are derived from this information) */
#define USBREG_USBREGSTATUS_VBUSDETECT_Pos (0UL) /*!< Position of VBUSDETECT field. */
#define USBREG_USBREGSTATUS_VBUSDETECT_Msk (0x1UL << USBREG_USBREGSTATUS_VBUSDETECT_Pos) /*!< Bit mask of VBUSDETECT field. */
#define USBREG_USBREGSTATUS_VBUSDETECT_NoVbus (0UL) /*!< VBUS voltage below valid threshold */
#define USBREG_USBREGSTATUS_VBUSDETECT_VbusPresent (1UL) /*!< VBUS voltage above valid threshold */


/* Peripheral: VFSCTRL */
/* Description: Voltage and frequency scaling control */

/* Register: VFSCTRL_HIGHVOLTAGEREADY */
/* Description: High voltage ready */

/* Bit 0 : High voltage ready */
#define VFSCTRL_HIGHVOLTAGEREADY_READY_Pos (0UL) /*!< Position of READY field. */
#define VFSCTRL_HIGHVOLTAGEREADY_READY_Msk (0x1UL << VFSCTRL_HIGHVOLTAGEREADY_READY_Pos) /*!< Bit mask of READY field. */
#define VFSCTRL_HIGHVOLTAGEREADY_READY_NotReady (0UL) /*!< High voltage is not ready */
#define VFSCTRL_HIGHVOLTAGEREADY_READY_Ready (1UL) /*!< High voltage is ready */

/* Register: VFSCTRL_VOLTAGEFSMSTATE */
/* Description: Current state of the voltage state machine */

/* Bit 4 : Internal state value */
#define VFSCTRL_VOLTAGEFSMSTATE_MODE_Pos (4UL) /*!< Position of MODE field. */
#define VFSCTRL_VOLTAGEFSMSTATE_MODE_Msk (0x1UL << VFSCTRL_VOLTAGEFSMSTATE_MODE_Pos) /*!< Bit mask of MODE field. */

/* Bit 3 : High voltage ready */
#define VFSCTRL_VOLTAGEFSMSTATE_READYHV_Pos (3UL) /*!< Position of READYHV field. */
#define VFSCTRL_VOLTAGEFSMSTATE_READYHV_Msk (0x1UL << VFSCTRL_VOLTAGEFSMSTATE_READYHV_Pos) /*!< Bit mask of READYHV field. */
#define VFSCTRL_VOLTAGEFSMSTATE_READYHV_NotReady (0UL) /*!< High voltage is not ready */
#define VFSCTRL_VOLTAGEFSMSTATE_READYHV_Ready (1UL) /*!< High voltage is ready */

/* Bit 2 : Select RAM trim */
#define VFSCTRL_VOLTAGEFSMSTATE_RAMTRIMSELECT_Pos (2UL) /*!< Position of RAMTRIMSELECT field. */
#define VFSCTRL_VOLTAGEFSMSTATE_RAMTRIMSELECT_Msk (0x1UL << VFSCTRL_VOLTAGEFSMSTATE_RAMTRIMSELECT_Pos) /*!< Bit mask of RAMTRIMSELECT field. */
#define VFSCTRL_VOLTAGEFSMSTATE_RAMTRIMSELECT_LowVoltage (0UL) /*!< Select low voltage trim */
#define VFSCTRL_VOLTAGEFSMSTATE_RAMTRIMSELECT_HighVoltage (1UL) /*!< Select high voltage trim */

/* Bit 1 : NVMC read mode request */
#define VFSCTRL_VOLTAGEFSMSTATE_NVMCREADMODE_Pos (1UL) /*!< Position of NVMCREADMODE field. */
#define VFSCTRL_VOLTAGEFSMSTATE_NVMCREADMODE_Msk (0x1UL << VFSCTRL_VOLTAGEFSMSTATE_NVMCREADMODE_Pos) /*!< Bit mask of NVMCREADMODE field. */
#define VFSCTRL_VOLTAGEFSMSTATE_NVMCREADMODE_LowVoltageMode (0UL) /*!< Low voltage mode */
#define VFSCTRL_VOLTAGEFSMSTATE_NVMCREADMODE_HighVoltageMode (1UL) /*!< High voltage mode */

/* Bit 0 : High voltage request to PowerAndClockSubSystem */
#define VFSCTRL_VOLTAGEFSMSTATE_HIGHVOLTAGEPAC_Pos (0UL) /*!< Position of HIGHVOLTAGEPAC field. */
#define VFSCTRL_VOLTAGEFSMSTATE_HIGHVOLTAGEPAC_Msk (0x1UL << VFSCTRL_VOLTAGEFSMSTATE_HIGHVOLTAGEPAC_Pos) /*!< Bit mask of HIGHVOLTAGEPAC field. */
#define VFSCTRL_VOLTAGEFSMSTATE_HIGHVOLTAGEPAC_NotRequested (0UL) /*!< High voltage is not requested */
#define VFSCTRL_VOLTAGEFSMSTATE_HIGHVOLTAGEPAC_Requested (1UL) /*!< High voltage is requested */

/* Register: VFSCTRL_VOLTAGEFSMINPUTS */
/* Description: High voltage ready */

/* Bit 3 : High voltage request from subscriber or frequency controller */
#define VFSCTRL_VOLTAGEFSMINPUTS_HIGHVOLTAGE_Pos (3UL) /*!< Position of HIGHVOLTAGE field. */
#define VFSCTRL_VOLTAGEFSMINPUTS_HIGHVOLTAGE_Msk (0x1UL << VFSCTRL_VOLTAGEFSMINPUTS_HIGHVOLTAGE_Pos) /*!< Bit mask of HIGHVOLTAGE field. */
#define VFSCTRL_VOLTAGEFSMINPUTS_HIGHVOLTAGE_NotRequested (0UL) /*!< High voltage is not requested */
#define VFSCTRL_VOLTAGEFSMINPUTS_HIGHVOLTAGE_Requested (1UL) /*!< High voltage is requested */

/* Bit 2 : NVMC busy for infopage readout, frequency and voltage change not allowed */
#define VFSCTRL_VOLTAGEFSMINPUTS_NVMCCHIPCONFBUSY_Pos (2UL) /*!< Position of NVMCCHIPCONFBUSY field. */
#define VFSCTRL_VOLTAGEFSMINPUTS_NVMCCHIPCONFBUSY_Msk (0x1UL << VFSCTRL_VOLTAGEFSMINPUTS_NVMCCHIPCONFBUSY_Pos) /*!< Bit mask of NVMCCHIPCONFBUSY field. */
#define VFSCTRL_VOLTAGEFSMINPUTS_NVMCCHIPCONFBUSY_NotBusy (0UL) /*!< NVMC is not busy */
#define VFSCTRL_VOLTAGEFSMINPUTS_NVMCCHIPCONFBUSY_Busy (1UL) /*!< NVMC is busy */

/* Bit 1 : NVMC read mode acknowledge */
#define VFSCTRL_VOLTAGEFSMINPUTS_ACKNVMCREADMODE_Pos (1UL) /*!< Position of ACKNVMCREADMODE field. */
#define VFSCTRL_VOLTAGEFSMINPUTS_ACKNVMCREADMODE_Msk (0x1UL << VFSCTRL_VOLTAGEFSMINPUTS_ACKNVMCREADMODE_Pos) /*!< Bit mask of ACKNVMCREADMODE field. */
#define VFSCTRL_VOLTAGEFSMINPUTS_ACKNVMCREADMODE_LowVoltageMode (0UL) /*!< Low voltage mode */
#define VFSCTRL_VOLTAGEFSMINPUTS_ACKNVMCREADMODE_HighVoltageMode (1UL) /*!< High voltage mode */

/* Bit 0 : High voltage acknowledge from power and clock subsystem */
#define VFSCTRL_VOLTAGEFSMINPUTS_ACKHIGHVOLTAGEPAC_Pos (0UL) /*!< Position of ACKHIGHVOLTAGEPAC field. */
#define VFSCTRL_VOLTAGEFSMINPUTS_ACKHIGHVOLTAGEPAC_Msk (0x1UL << VFSCTRL_VOLTAGEFSMINPUTS_ACKHIGHVOLTAGEPAC_Pos) /*!< Bit mask of ACKHIGHVOLTAGEPAC field. */
#define VFSCTRL_VOLTAGEFSMINPUTS_ACKHIGHVOLTAGEPAC_NotAck (0UL) /*!< High voltage is not acknowleged */
#define VFSCTRL_VOLTAGEFSMINPUTS_ACKHIGHVOLTAGEPAC_Ack (1UL) /*!< High voltage is acknowleged */

/* Register: VFSCTRL_HIGHVOLTAGEREQUEST */
/* Description: Backdoor for high voltage requests */

/* Bit 0 : High voltage request */
#define VFSCTRL_HIGHVOLTAGEREQUEST_HIGHVOLTAGEREQUEST_Pos (0UL) /*!< Position of HIGHVOLTAGEREQUEST field. */
#define VFSCTRL_HIGHVOLTAGEREQUEST_HIGHVOLTAGEREQUEST_Msk (0x1UL << VFSCTRL_HIGHVOLTAGEREQUEST_HIGHVOLTAGEREQUEST_Pos) /*!< Bit mask of HIGHVOLTAGEREQUEST field. */
#define VFSCTRL_HIGHVOLTAGEREQUEST_HIGHVOLTAGEREQUEST_NoRequest (0UL) /*!< Do not request high voltage */
#define VFSCTRL_HIGHVOLTAGEREQUEST_HIGHVOLTAGEREQUEST_Request (1UL) /*!< Request high voltage */

/* Register: VFSCTRL_VOLTAGEFSMOVERRIDE */
/* Description: Voltage state machine output override */

/* Bit 31 : Enable override of outputs */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_OVERRIDEENABLE_Pos (31UL) /*!< Position of OVERRIDEENABLE field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_OVERRIDEENABLE_Msk (0x1UL << VFSCTRL_VOLTAGEFSMOVERRIDE_OVERRIDEENABLE_Pos) /*!< Bit mask of OVERRIDEENABLE field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_OVERRIDEENABLE_OverrideDisable (0UL) /*!< Override is disabled */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_OVERRIDEENABLE_OverrideEnable (1UL) /*!< Override is enabled */

/* Bit 3 : Override value for READYHV */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_READYHV_Pos (3UL) /*!< Position of READYHV field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_READYHV_Msk (0x1UL << VFSCTRL_VOLTAGEFSMOVERRIDE_READYHV_Pos) /*!< Bit mask of READYHV field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_READYHV_NotHVReady (0UL) /*!< High voltage not ready */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_READYHV_HVReady (1UL) /*!< High voltage ready */

/* Bit 2 : Override value for RAMTRIMSELECT */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_RAMTRIMSELECT_Pos (2UL) /*!< Position of RAMTRIMSELECT field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_RAMTRIMSELECT_Msk (0x1UL << VFSCTRL_VOLTAGEFSMOVERRIDE_RAMTRIMSELECT_Pos) /*!< Bit mask of RAMTRIMSELECT field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_RAMTRIMSELECT_LowVoltage (0UL) /*!< Request low voltage RAM trim */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_RAMTRIMSELECT_HighVoltage (1UL) /*!< Request high voltage RAM trim */

/* Bit 1 : Override value for NVMC read mode request */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_NVMCREADMODE_Pos (1UL) /*!< Position of NVMCREADMODE field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_NVMCREADMODE_Msk (0x1UL << VFSCTRL_VOLTAGEFSMOVERRIDE_NVMCREADMODE_Pos) /*!< Bit mask of NVMCREADMODE field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_NVMCREADMODE_LowVoltageMode (0UL) /*!< Request low voltage mode */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_NVMCREADMODE_HighVoltageMode (1UL) /*!< Request high voltage mode */

/* Bit 0 : Override value for voltage request to power and clock subsystem */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_HIGHVOLTAGEPAC_Pos (0UL) /*!< Position of HIGHVOLTAGEPAC field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_HIGHVOLTAGEPAC_Msk (0x1UL << VFSCTRL_VOLTAGEFSMOVERRIDE_HIGHVOLTAGEPAC_Pos) /*!< Bit mask of HIGHVOLTAGEPAC field. */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_HIGHVOLTAGEPAC_NoRequestHighVoltagePac (0UL) /*!< Do not request high voltage */
#define VFSCTRL_VOLTAGEFSMOVERRIDE_HIGHVOLTAGEPAC_RequestHighVoltagePac (1UL) /*!< Request high voltage */

/* Register: VFSCTRL_HFCLKFLEXOVERRIDE */
/* Description: Override clock division factor (flex setting) */

/* Bit 31 : Enable override of clock division factor (flex setting) */
#define VFSCTRL_HFCLKFLEXOVERRIDE_OVERRIDEENABLE_Pos (31UL) /*!< Position of OVERRIDEENABLE field. */
#define VFSCTRL_HFCLKFLEXOVERRIDE_OVERRIDEENABLE_Msk (0x1UL << VFSCTRL_HFCLKFLEXOVERRIDE_OVERRIDEENABLE_Pos) /*!< Bit mask of OVERRIDEENABLE field. */
#define VFSCTRL_HFCLKFLEXOVERRIDE_OVERRIDEENABLE_OverrideDisable (0UL) /*!< Disable override */
#define VFSCTRL_HFCLKFLEXOVERRIDE_OVERRIDEENABLE_OverrideEnable (1UL) /*!< Enable override */

/* Bits 30..0 : Override value of clock division factor (flex setting) */
#define VFSCTRL_HFCLKFLEXOVERRIDE_OVERRIDEVALUE_Pos (0UL) /*!< Position of OVERRIDEVALUE field. */
#define VFSCTRL_HFCLKFLEXOVERRIDE_OVERRIDEVALUE_Msk (0x7FFFFFFFUL << VFSCTRL_HFCLKFLEXOVERRIDE_OVERRIDEVALUE_Pos) /*!< Bit mask of OVERRIDEVALUE field. */

/* Register: VFSCTRL_HFCLK192MBASEFREQOVERRIDE */
/* Description: Override clock source frequency setting */

/* Bit 31 : Enable override of clock source frequency setting */
#define VFSCTRL_HFCLK192MBASEFREQOVERRIDE_OVERRIDEENABLE_Pos (31UL) /*!< Position of OVERRIDEENABLE field. */
#define VFSCTRL_HFCLK192MBASEFREQOVERRIDE_OVERRIDEENABLE_Msk (0x1UL << VFSCTRL_HFCLK192MBASEFREQOVERRIDE_OVERRIDEENABLE_Pos) /*!< Bit mask of OVERRIDEENABLE field. */
#define VFSCTRL_HFCLK192MBASEFREQOVERRIDE_OVERRIDEENABLE_OverrideDisable (0UL) /*!< Disable override */
#define VFSCTRL_HFCLK192MBASEFREQOVERRIDE_OVERRIDEENABLE_OverrideEnable (1UL) /*!< Enable override */

/* Bits 30..0 : Override value of clock source frequency setting */
#define VFSCTRL_HFCLK192MBASEFREQOVERRIDE_OVERRIDEVALUE_Pos (0UL) /*!< Position of OVERRIDEVALUE field. */
#define VFSCTRL_HFCLK192MBASEFREQOVERRIDE_OVERRIDEVALUE_Msk (0x7FFFFFFFUL << VFSCTRL_HFCLK192MBASEFREQOVERRIDE_OVERRIDEVALUE_Pos) /*!< Bit mask of OVERRIDEVALUE field. */

/* Register: VFSCTRL_HFCLK192MFLEXOVERRIDE */
/* Description: Override clock division factor (flex setting) */

/* Bit 31 : Enable override of clock division factor (flex setting) */
#define VFSCTRL_HFCLK192MFLEXOVERRIDE_OVERRIDEENABLE_Pos (31UL) /*!< Position of OVERRIDEENABLE field. */
#define VFSCTRL_HFCLK192MFLEXOVERRIDE_OVERRIDEENABLE_Msk (0x1UL << VFSCTRL_HFCLK192MFLEXOVERRIDE_OVERRIDEENABLE_Pos) /*!< Bit mask of OVERRIDEENABLE field. */
#define VFSCTRL_HFCLK192MFLEXOVERRIDE_OVERRIDEENABLE_OverrideDisable (0UL) /*!< Disable override */
#define VFSCTRL_HFCLK192MFLEXOVERRIDE_OVERRIDEENABLE_OverrideEnable (1UL) /*!< Enable override */

/* Bits 30..0 : Override value of clock division factor (flex setting) */
#define VFSCTRL_HFCLK192MFLEXOVERRIDE_OVERRIDEVALUE_Pos (0UL) /*!< Position of OVERRIDEVALUE field. */
#define VFSCTRL_HFCLK192MFLEXOVERRIDE_OVERRIDEVALUE_Msk (0x7FFFFFFFUL << VFSCTRL_HFCLK192MFLEXOVERRIDE_OVERRIDEVALUE_Pos) /*!< Bit mask of OVERRIDEVALUE field. */


/* Peripheral: VMC */
/* Description: Volatile Memory controller 0 */

/* Register: VMC_RAM_POWER */
/* Description: Description cluster: RAM[n] power control register */

/* Bit 31 : Keep retention on RAM section S15 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S15RETENTION_Pos (31UL) /*!< Position of S15RETENTION field. */
#define VMC_RAM_POWER_S15RETENTION_Msk (0x1UL << VMC_RAM_POWER_S15RETENTION_Pos) /*!< Bit mask of S15RETENTION field. */
#define VMC_RAM_POWER_S15RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S15RETENTION_On (1UL) /*!< On */

/* Bit 30 : Keep retention on RAM section S14 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S14RETENTION_Pos (30UL) /*!< Position of S14RETENTION field. */
#define VMC_RAM_POWER_S14RETENTION_Msk (0x1UL << VMC_RAM_POWER_S14RETENTION_Pos) /*!< Bit mask of S14RETENTION field. */
#define VMC_RAM_POWER_S14RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S14RETENTION_On (1UL) /*!< On */

/* Bit 29 : Keep retention on RAM section S13 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S13RETENTION_Pos (29UL) /*!< Position of S13RETENTION field. */
#define VMC_RAM_POWER_S13RETENTION_Msk (0x1UL << VMC_RAM_POWER_S13RETENTION_Pos) /*!< Bit mask of S13RETENTION field. */
#define VMC_RAM_POWER_S13RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S13RETENTION_On (1UL) /*!< On */

/* Bit 28 : Keep retention on RAM section S12 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S12RETENTION_Pos (28UL) /*!< Position of S12RETENTION field. */
#define VMC_RAM_POWER_S12RETENTION_Msk (0x1UL << VMC_RAM_POWER_S12RETENTION_Pos) /*!< Bit mask of S12RETENTION field. */
#define VMC_RAM_POWER_S12RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S12RETENTION_On (1UL) /*!< On */

/* Bit 27 : Keep retention on RAM section S11 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S11RETENTION_Pos (27UL) /*!< Position of S11RETENTION field. */
#define VMC_RAM_POWER_S11RETENTION_Msk (0x1UL << VMC_RAM_POWER_S11RETENTION_Pos) /*!< Bit mask of S11RETENTION field. */
#define VMC_RAM_POWER_S11RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S11RETENTION_On (1UL) /*!< On */

/* Bit 26 : Keep retention on RAM section S10 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S10RETENTION_Pos (26UL) /*!< Position of S10RETENTION field. */
#define VMC_RAM_POWER_S10RETENTION_Msk (0x1UL << VMC_RAM_POWER_S10RETENTION_Pos) /*!< Bit mask of S10RETENTION field. */
#define VMC_RAM_POWER_S10RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S10RETENTION_On (1UL) /*!< On */

/* Bit 25 : Keep retention on RAM section S9 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S9RETENTION_Pos (25UL) /*!< Position of S9RETENTION field. */
#define VMC_RAM_POWER_S9RETENTION_Msk (0x1UL << VMC_RAM_POWER_S9RETENTION_Pos) /*!< Bit mask of S9RETENTION field. */
#define VMC_RAM_POWER_S9RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S9RETENTION_On (1UL) /*!< On */

/* Bit 24 : Keep retention on RAM section S8 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S8RETENTION_Pos (24UL) /*!< Position of S8RETENTION field. */
#define VMC_RAM_POWER_S8RETENTION_Msk (0x1UL << VMC_RAM_POWER_S8RETENTION_Pos) /*!< Bit mask of S8RETENTION field. */
#define VMC_RAM_POWER_S8RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S8RETENTION_On (1UL) /*!< On */

/* Bit 23 : Keep retention on RAM section S7 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S7RETENTION_Pos (23UL) /*!< Position of S7RETENTION field. */
#define VMC_RAM_POWER_S7RETENTION_Msk (0x1UL << VMC_RAM_POWER_S7RETENTION_Pos) /*!< Bit mask of S7RETENTION field. */
#define VMC_RAM_POWER_S7RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S7RETENTION_On (1UL) /*!< On */

/* Bit 22 : Keep retention on RAM section S6 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S6RETENTION_Pos (22UL) /*!< Position of S6RETENTION field. */
#define VMC_RAM_POWER_S6RETENTION_Msk (0x1UL << VMC_RAM_POWER_S6RETENTION_Pos) /*!< Bit mask of S6RETENTION field. */
#define VMC_RAM_POWER_S6RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S6RETENTION_On (1UL) /*!< On */

/* Bit 21 : Keep retention on RAM section S5 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S5RETENTION_Pos (21UL) /*!< Position of S5RETENTION field. */
#define VMC_RAM_POWER_S5RETENTION_Msk (0x1UL << VMC_RAM_POWER_S5RETENTION_Pos) /*!< Bit mask of S5RETENTION field. */
#define VMC_RAM_POWER_S5RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S5RETENTION_On (1UL) /*!< On */

/* Bit 20 : Keep retention on RAM section S4 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S4RETENTION_Pos (20UL) /*!< Position of S4RETENTION field. */
#define VMC_RAM_POWER_S4RETENTION_Msk (0x1UL << VMC_RAM_POWER_S4RETENTION_Pos) /*!< Bit mask of S4RETENTION field. */
#define VMC_RAM_POWER_S4RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S4RETENTION_On (1UL) /*!< On */

/* Bit 19 : Keep retention on RAM section S3 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S3RETENTION_Pos (19UL) /*!< Position of S3RETENTION field. */
#define VMC_RAM_POWER_S3RETENTION_Msk (0x1UL << VMC_RAM_POWER_S3RETENTION_Pos) /*!< Bit mask of S3RETENTION field. */
#define VMC_RAM_POWER_S3RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S3RETENTION_On (1UL) /*!< On */

/* Bit 18 : Keep retention on RAM section S2 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S2RETENTION_Pos (18UL) /*!< Position of S2RETENTION field. */
#define VMC_RAM_POWER_S2RETENTION_Msk (0x1UL << VMC_RAM_POWER_S2RETENTION_Pos) /*!< Bit mask of S2RETENTION field. */
#define VMC_RAM_POWER_S2RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S2RETENTION_On (1UL) /*!< On */

/* Bit 17 : Keep retention on RAM section S1 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S1RETENTION_Pos (17UL) /*!< Position of S1RETENTION field. */
#define VMC_RAM_POWER_S1RETENTION_Msk (0x1UL << VMC_RAM_POWER_S1RETENTION_Pos) /*!< Bit mask of S1RETENTION field. */
#define VMC_RAM_POWER_S1RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S1RETENTION_On (1UL) /*!< On */

/* Bit 16 : Keep retention on RAM section S0 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWER_S0RETENTION_Pos (16UL) /*!< Position of S0RETENTION field. */
#define VMC_RAM_POWER_S0RETENTION_Msk (0x1UL << VMC_RAM_POWER_S0RETENTION_Pos) /*!< Bit mask of S0RETENTION field. */
#define VMC_RAM_POWER_S0RETENTION_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S0RETENTION_On (1UL) /*!< On */

/* Bit 15 : Keep RAM section S15 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S15POWER_Pos (15UL) /*!< Position of S15POWER field. */
#define VMC_RAM_POWER_S15POWER_Msk (0x1UL << VMC_RAM_POWER_S15POWER_Pos) /*!< Bit mask of S15POWER field. */
#define VMC_RAM_POWER_S15POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S15POWER_On (1UL) /*!< On */

/* Bit 14 : Keep RAM section S14 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S14POWER_Pos (14UL) /*!< Position of S14POWER field. */
#define VMC_RAM_POWER_S14POWER_Msk (0x1UL << VMC_RAM_POWER_S14POWER_Pos) /*!< Bit mask of S14POWER field. */
#define VMC_RAM_POWER_S14POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S14POWER_On (1UL) /*!< On */

/* Bit 13 : Keep RAM section S13 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S13POWER_Pos (13UL) /*!< Position of S13POWER field. */
#define VMC_RAM_POWER_S13POWER_Msk (0x1UL << VMC_RAM_POWER_S13POWER_Pos) /*!< Bit mask of S13POWER field. */
#define VMC_RAM_POWER_S13POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S13POWER_On (1UL) /*!< On */

/* Bit 12 : Keep RAM section S12 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S12POWER_Pos (12UL) /*!< Position of S12POWER field. */
#define VMC_RAM_POWER_S12POWER_Msk (0x1UL << VMC_RAM_POWER_S12POWER_Pos) /*!< Bit mask of S12POWER field. */
#define VMC_RAM_POWER_S12POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S12POWER_On (1UL) /*!< On */

/* Bit 11 : Keep RAM section S11 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S11POWER_Pos (11UL) /*!< Position of S11POWER field. */
#define VMC_RAM_POWER_S11POWER_Msk (0x1UL << VMC_RAM_POWER_S11POWER_Pos) /*!< Bit mask of S11POWER field. */
#define VMC_RAM_POWER_S11POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S11POWER_On (1UL) /*!< On */

/* Bit 10 : Keep RAM section S10 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S10POWER_Pos (10UL) /*!< Position of S10POWER field. */
#define VMC_RAM_POWER_S10POWER_Msk (0x1UL << VMC_RAM_POWER_S10POWER_Pos) /*!< Bit mask of S10POWER field. */
#define VMC_RAM_POWER_S10POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S10POWER_On (1UL) /*!< On */

/* Bit 9 : Keep RAM section S9 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S9POWER_Pos (9UL) /*!< Position of S9POWER field. */
#define VMC_RAM_POWER_S9POWER_Msk (0x1UL << VMC_RAM_POWER_S9POWER_Pos) /*!< Bit mask of S9POWER field. */
#define VMC_RAM_POWER_S9POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S9POWER_On (1UL) /*!< On */

/* Bit 8 : Keep RAM section S8 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S8POWER_Pos (8UL) /*!< Position of S8POWER field. */
#define VMC_RAM_POWER_S8POWER_Msk (0x1UL << VMC_RAM_POWER_S8POWER_Pos) /*!< Bit mask of S8POWER field. */
#define VMC_RAM_POWER_S8POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S8POWER_On (1UL) /*!< On */

/* Bit 7 : Keep RAM section S7 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S7POWER_Pos (7UL) /*!< Position of S7POWER field. */
#define VMC_RAM_POWER_S7POWER_Msk (0x1UL << VMC_RAM_POWER_S7POWER_Pos) /*!< Bit mask of S7POWER field. */
#define VMC_RAM_POWER_S7POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S7POWER_On (1UL) /*!< On */

/* Bit 6 : Keep RAM section S6 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S6POWER_Pos (6UL) /*!< Position of S6POWER field. */
#define VMC_RAM_POWER_S6POWER_Msk (0x1UL << VMC_RAM_POWER_S6POWER_Pos) /*!< Bit mask of S6POWER field. */
#define VMC_RAM_POWER_S6POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S6POWER_On (1UL) /*!< On */

/* Bit 5 : Keep RAM section S5 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S5POWER_Pos (5UL) /*!< Position of S5POWER field. */
#define VMC_RAM_POWER_S5POWER_Msk (0x1UL << VMC_RAM_POWER_S5POWER_Pos) /*!< Bit mask of S5POWER field. */
#define VMC_RAM_POWER_S5POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S5POWER_On (1UL) /*!< On */

/* Bit 4 : Keep RAM section S4 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S4POWER_Pos (4UL) /*!< Position of S4POWER field. */
#define VMC_RAM_POWER_S4POWER_Msk (0x1UL << VMC_RAM_POWER_S4POWER_Pos) /*!< Bit mask of S4POWER field. */
#define VMC_RAM_POWER_S4POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S4POWER_On (1UL) /*!< On */

/* Bit 3 : Keep RAM section S3 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S3POWER_Pos (3UL) /*!< Position of S3POWER field. */
#define VMC_RAM_POWER_S3POWER_Msk (0x1UL << VMC_RAM_POWER_S3POWER_Pos) /*!< Bit mask of S3POWER field. */
#define VMC_RAM_POWER_S3POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S3POWER_On (1UL) /*!< On */

/* Bit 2 : Keep RAM section S2 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S2POWER_Pos (2UL) /*!< Position of S2POWER field. */
#define VMC_RAM_POWER_S2POWER_Msk (0x1UL << VMC_RAM_POWER_S2POWER_Pos) /*!< Bit mask of S2POWER field. */
#define VMC_RAM_POWER_S2POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S2POWER_On (1UL) /*!< On */

/* Bit 1 : Keep RAM section S1 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S1POWER_Pos (1UL) /*!< Position of S1POWER field. */
#define VMC_RAM_POWER_S1POWER_Msk (0x1UL << VMC_RAM_POWER_S1POWER_Pos) /*!< Bit mask of S1POWER field. */
#define VMC_RAM_POWER_S1POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S1POWER_On (1UL) /*!< On */

/* Bit 0 : Keep RAM section S0 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWER_S0POWER_Pos (0UL) /*!< Position of S0POWER field. */
#define VMC_RAM_POWER_S0POWER_Msk (0x1UL << VMC_RAM_POWER_S0POWER_Pos) /*!< Bit mask of S0POWER field. */
#define VMC_RAM_POWER_S0POWER_Off (0UL) /*!< Off */
#define VMC_RAM_POWER_S0POWER_On (1UL) /*!< On */

/* Register: VMC_RAM_POWERSET */
/* Description: Description cluster: RAM[n] power control set register */

/* Bit 31 : Keep retention on RAM section S15 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S15RETENTION_Pos (31UL) /*!< Position of S15RETENTION field. */
#define VMC_RAM_POWERSET_S15RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S15RETENTION_Pos) /*!< Bit mask of S15RETENTION field. */
#define VMC_RAM_POWERSET_S15RETENTION_On (1UL) /*!< On */

/* Bit 30 : Keep retention on RAM section S14 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S14RETENTION_Pos (30UL) /*!< Position of S14RETENTION field. */
#define VMC_RAM_POWERSET_S14RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S14RETENTION_Pos) /*!< Bit mask of S14RETENTION field. */
#define VMC_RAM_POWERSET_S14RETENTION_On (1UL) /*!< On */

/* Bit 29 : Keep retention on RAM section S13 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S13RETENTION_Pos (29UL) /*!< Position of S13RETENTION field. */
#define VMC_RAM_POWERSET_S13RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S13RETENTION_Pos) /*!< Bit mask of S13RETENTION field. */
#define VMC_RAM_POWERSET_S13RETENTION_On (1UL) /*!< On */

/* Bit 28 : Keep retention on RAM section S12 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S12RETENTION_Pos (28UL) /*!< Position of S12RETENTION field. */
#define VMC_RAM_POWERSET_S12RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S12RETENTION_Pos) /*!< Bit mask of S12RETENTION field. */
#define VMC_RAM_POWERSET_S12RETENTION_On (1UL) /*!< On */

/* Bit 27 : Keep retention on RAM section S11 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S11RETENTION_Pos (27UL) /*!< Position of S11RETENTION field. */
#define VMC_RAM_POWERSET_S11RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S11RETENTION_Pos) /*!< Bit mask of S11RETENTION field. */
#define VMC_RAM_POWERSET_S11RETENTION_On (1UL) /*!< On */

/* Bit 26 : Keep retention on RAM section S10 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S10RETENTION_Pos (26UL) /*!< Position of S10RETENTION field. */
#define VMC_RAM_POWERSET_S10RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S10RETENTION_Pos) /*!< Bit mask of S10RETENTION field. */
#define VMC_RAM_POWERSET_S10RETENTION_On (1UL) /*!< On */

/* Bit 25 : Keep retention on RAM section S9 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S9RETENTION_Pos (25UL) /*!< Position of S9RETENTION field. */
#define VMC_RAM_POWERSET_S9RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S9RETENTION_Pos) /*!< Bit mask of S9RETENTION field. */
#define VMC_RAM_POWERSET_S9RETENTION_On (1UL) /*!< On */

/* Bit 24 : Keep retention on RAM section S8 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S8RETENTION_Pos (24UL) /*!< Position of S8RETENTION field. */
#define VMC_RAM_POWERSET_S8RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S8RETENTION_Pos) /*!< Bit mask of S8RETENTION field. */
#define VMC_RAM_POWERSET_S8RETENTION_On (1UL) /*!< On */

/* Bit 23 : Keep retention on RAM section S7 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S7RETENTION_Pos (23UL) /*!< Position of S7RETENTION field. */
#define VMC_RAM_POWERSET_S7RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S7RETENTION_Pos) /*!< Bit mask of S7RETENTION field. */
#define VMC_RAM_POWERSET_S7RETENTION_On (1UL) /*!< On */

/* Bit 22 : Keep retention on RAM section S6 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S6RETENTION_Pos (22UL) /*!< Position of S6RETENTION field. */
#define VMC_RAM_POWERSET_S6RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S6RETENTION_Pos) /*!< Bit mask of S6RETENTION field. */
#define VMC_RAM_POWERSET_S6RETENTION_On (1UL) /*!< On */

/* Bit 21 : Keep retention on RAM section S5 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S5RETENTION_Pos (21UL) /*!< Position of S5RETENTION field. */
#define VMC_RAM_POWERSET_S5RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S5RETENTION_Pos) /*!< Bit mask of S5RETENTION field. */
#define VMC_RAM_POWERSET_S5RETENTION_On (1UL) /*!< On */

/* Bit 20 : Keep retention on RAM section S4 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S4RETENTION_Pos (20UL) /*!< Position of S4RETENTION field. */
#define VMC_RAM_POWERSET_S4RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S4RETENTION_Pos) /*!< Bit mask of S4RETENTION field. */
#define VMC_RAM_POWERSET_S4RETENTION_On (1UL) /*!< On */

/* Bit 19 : Keep retention on RAM section S3 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S3RETENTION_Pos (19UL) /*!< Position of S3RETENTION field. */
#define VMC_RAM_POWERSET_S3RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S3RETENTION_Pos) /*!< Bit mask of S3RETENTION field. */
#define VMC_RAM_POWERSET_S3RETENTION_On (1UL) /*!< On */

/* Bit 18 : Keep retention on RAM section S2 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S2RETENTION_Pos (18UL) /*!< Position of S2RETENTION field. */
#define VMC_RAM_POWERSET_S2RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S2RETENTION_Pos) /*!< Bit mask of S2RETENTION field. */
#define VMC_RAM_POWERSET_S2RETENTION_On (1UL) /*!< On */

/* Bit 17 : Keep retention on RAM section S1 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S1RETENTION_Pos (17UL) /*!< Position of S1RETENTION field. */
#define VMC_RAM_POWERSET_S1RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S1RETENTION_Pos) /*!< Bit mask of S1RETENTION field. */
#define VMC_RAM_POWERSET_S1RETENTION_On (1UL) /*!< On */

/* Bit 16 : Keep retention on RAM section S0 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERSET_S0RETENTION_Pos (16UL) /*!< Position of S0RETENTION field. */
#define VMC_RAM_POWERSET_S0RETENTION_Msk (0x1UL << VMC_RAM_POWERSET_S0RETENTION_Pos) /*!< Bit mask of S0RETENTION field. */
#define VMC_RAM_POWERSET_S0RETENTION_On (1UL) /*!< On */

/* Bit 15 : Keep RAM section S15 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S15POWER_Pos (15UL) /*!< Position of S15POWER field. */
#define VMC_RAM_POWERSET_S15POWER_Msk (0x1UL << VMC_RAM_POWERSET_S15POWER_Pos) /*!< Bit mask of S15POWER field. */
#define VMC_RAM_POWERSET_S15POWER_On (1UL) /*!< On */

/* Bit 14 : Keep RAM section S14 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S14POWER_Pos (14UL) /*!< Position of S14POWER field. */
#define VMC_RAM_POWERSET_S14POWER_Msk (0x1UL << VMC_RAM_POWERSET_S14POWER_Pos) /*!< Bit mask of S14POWER field. */
#define VMC_RAM_POWERSET_S14POWER_On (1UL) /*!< On */

/* Bit 13 : Keep RAM section S13 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S13POWER_Pos (13UL) /*!< Position of S13POWER field. */
#define VMC_RAM_POWERSET_S13POWER_Msk (0x1UL << VMC_RAM_POWERSET_S13POWER_Pos) /*!< Bit mask of S13POWER field. */
#define VMC_RAM_POWERSET_S13POWER_On (1UL) /*!< On */

/* Bit 12 : Keep RAM section S12 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S12POWER_Pos (12UL) /*!< Position of S12POWER field. */
#define VMC_RAM_POWERSET_S12POWER_Msk (0x1UL << VMC_RAM_POWERSET_S12POWER_Pos) /*!< Bit mask of S12POWER field. */
#define VMC_RAM_POWERSET_S12POWER_On (1UL) /*!< On */

/* Bit 11 : Keep RAM section S11 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S11POWER_Pos (11UL) /*!< Position of S11POWER field. */
#define VMC_RAM_POWERSET_S11POWER_Msk (0x1UL << VMC_RAM_POWERSET_S11POWER_Pos) /*!< Bit mask of S11POWER field. */
#define VMC_RAM_POWERSET_S11POWER_On (1UL) /*!< On */

/* Bit 10 : Keep RAM section S10 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S10POWER_Pos (10UL) /*!< Position of S10POWER field. */
#define VMC_RAM_POWERSET_S10POWER_Msk (0x1UL << VMC_RAM_POWERSET_S10POWER_Pos) /*!< Bit mask of S10POWER field. */
#define VMC_RAM_POWERSET_S10POWER_On (1UL) /*!< On */

/* Bit 9 : Keep RAM section S9 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S9POWER_Pos (9UL) /*!< Position of S9POWER field. */
#define VMC_RAM_POWERSET_S9POWER_Msk (0x1UL << VMC_RAM_POWERSET_S9POWER_Pos) /*!< Bit mask of S9POWER field. */
#define VMC_RAM_POWERSET_S9POWER_On (1UL) /*!< On */

/* Bit 8 : Keep RAM section S8 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S8POWER_Pos (8UL) /*!< Position of S8POWER field. */
#define VMC_RAM_POWERSET_S8POWER_Msk (0x1UL << VMC_RAM_POWERSET_S8POWER_Pos) /*!< Bit mask of S8POWER field. */
#define VMC_RAM_POWERSET_S8POWER_On (1UL) /*!< On */

/* Bit 7 : Keep RAM section S7 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S7POWER_Pos (7UL) /*!< Position of S7POWER field. */
#define VMC_RAM_POWERSET_S7POWER_Msk (0x1UL << VMC_RAM_POWERSET_S7POWER_Pos) /*!< Bit mask of S7POWER field. */
#define VMC_RAM_POWERSET_S7POWER_On (1UL) /*!< On */

/* Bit 6 : Keep RAM section S6 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S6POWER_Pos (6UL) /*!< Position of S6POWER field. */
#define VMC_RAM_POWERSET_S6POWER_Msk (0x1UL << VMC_RAM_POWERSET_S6POWER_Pos) /*!< Bit mask of S6POWER field. */
#define VMC_RAM_POWERSET_S6POWER_On (1UL) /*!< On */

/* Bit 5 : Keep RAM section S5 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S5POWER_Pos (5UL) /*!< Position of S5POWER field. */
#define VMC_RAM_POWERSET_S5POWER_Msk (0x1UL << VMC_RAM_POWERSET_S5POWER_Pos) /*!< Bit mask of S5POWER field. */
#define VMC_RAM_POWERSET_S5POWER_On (1UL) /*!< On */

/* Bit 4 : Keep RAM section S4 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S4POWER_Pos (4UL) /*!< Position of S4POWER field. */
#define VMC_RAM_POWERSET_S4POWER_Msk (0x1UL << VMC_RAM_POWERSET_S4POWER_Pos) /*!< Bit mask of S4POWER field. */
#define VMC_RAM_POWERSET_S4POWER_On (1UL) /*!< On */

/* Bit 3 : Keep RAM section S3 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S3POWER_Pos (3UL) /*!< Position of S3POWER field. */
#define VMC_RAM_POWERSET_S3POWER_Msk (0x1UL << VMC_RAM_POWERSET_S3POWER_Pos) /*!< Bit mask of S3POWER field. */
#define VMC_RAM_POWERSET_S3POWER_On (1UL) /*!< On */

/* Bit 2 : Keep RAM section S2 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S2POWER_Pos (2UL) /*!< Position of S2POWER field. */
#define VMC_RAM_POWERSET_S2POWER_Msk (0x1UL << VMC_RAM_POWERSET_S2POWER_Pos) /*!< Bit mask of S2POWER field. */
#define VMC_RAM_POWERSET_S2POWER_On (1UL) /*!< On */

/* Bit 1 : Keep RAM section S1 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S1POWER_Pos (1UL) /*!< Position of S1POWER field. */
#define VMC_RAM_POWERSET_S1POWER_Msk (0x1UL << VMC_RAM_POWERSET_S1POWER_Pos) /*!< Bit mask of S1POWER field. */
#define VMC_RAM_POWERSET_S1POWER_On (1UL) /*!< On */

/* Bit 0 : Keep RAM section S0 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERSET_S0POWER_Pos (0UL) /*!< Position of S0POWER field. */
#define VMC_RAM_POWERSET_S0POWER_Msk (0x1UL << VMC_RAM_POWERSET_S0POWER_Pos) /*!< Bit mask of S0POWER field. */
#define VMC_RAM_POWERSET_S0POWER_On (1UL) /*!< On */

/* Register: VMC_RAM_POWERCLR */
/* Description: Description cluster: RAM[n] power control clear register */

/* Bit 31 : Keep retention on RAM section S15 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S15RETENTION_Pos (31UL) /*!< Position of S15RETENTION field. */
#define VMC_RAM_POWERCLR_S15RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S15RETENTION_Pos) /*!< Bit mask of S15RETENTION field. */
#define VMC_RAM_POWERCLR_S15RETENTION_Off (1UL) /*!< Off */

/* Bit 30 : Keep retention on RAM section S14 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S14RETENTION_Pos (30UL) /*!< Position of S14RETENTION field. */
#define VMC_RAM_POWERCLR_S14RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S14RETENTION_Pos) /*!< Bit mask of S14RETENTION field. */
#define VMC_RAM_POWERCLR_S14RETENTION_Off (1UL) /*!< Off */

/* Bit 29 : Keep retention on RAM section S13 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S13RETENTION_Pos (29UL) /*!< Position of S13RETENTION field. */
#define VMC_RAM_POWERCLR_S13RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S13RETENTION_Pos) /*!< Bit mask of S13RETENTION field. */
#define VMC_RAM_POWERCLR_S13RETENTION_Off (1UL) /*!< Off */

/* Bit 28 : Keep retention on RAM section S12 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S12RETENTION_Pos (28UL) /*!< Position of S12RETENTION field. */
#define VMC_RAM_POWERCLR_S12RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S12RETENTION_Pos) /*!< Bit mask of S12RETENTION field. */
#define VMC_RAM_POWERCLR_S12RETENTION_Off (1UL) /*!< Off */

/* Bit 27 : Keep retention on RAM section S11 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S11RETENTION_Pos (27UL) /*!< Position of S11RETENTION field. */
#define VMC_RAM_POWERCLR_S11RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S11RETENTION_Pos) /*!< Bit mask of S11RETENTION field. */
#define VMC_RAM_POWERCLR_S11RETENTION_Off (1UL) /*!< Off */

/* Bit 26 : Keep retention on RAM section S10 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S10RETENTION_Pos (26UL) /*!< Position of S10RETENTION field. */
#define VMC_RAM_POWERCLR_S10RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S10RETENTION_Pos) /*!< Bit mask of S10RETENTION field. */
#define VMC_RAM_POWERCLR_S10RETENTION_Off (1UL) /*!< Off */

/* Bit 25 : Keep retention on RAM section S9 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S9RETENTION_Pos (25UL) /*!< Position of S9RETENTION field. */
#define VMC_RAM_POWERCLR_S9RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S9RETENTION_Pos) /*!< Bit mask of S9RETENTION field. */
#define VMC_RAM_POWERCLR_S9RETENTION_Off (1UL) /*!< Off */

/* Bit 24 : Keep retention on RAM section S8 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S8RETENTION_Pos (24UL) /*!< Position of S8RETENTION field. */
#define VMC_RAM_POWERCLR_S8RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S8RETENTION_Pos) /*!< Bit mask of S8RETENTION field. */
#define VMC_RAM_POWERCLR_S8RETENTION_Off (1UL) /*!< Off */

/* Bit 23 : Keep retention on RAM section S7 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S7RETENTION_Pos (23UL) /*!< Position of S7RETENTION field. */
#define VMC_RAM_POWERCLR_S7RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S7RETENTION_Pos) /*!< Bit mask of S7RETENTION field. */
#define VMC_RAM_POWERCLR_S7RETENTION_Off (1UL) /*!< Off */

/* Bit 22 : Keep retention on RAM section S6 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S6RETENTION_Pos (22UL) /*!< Position of S6RETENTION field. */
#define VMC_RAM_POWERCLR_S6RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S6RETENTION_Pos) /*!< Bit mask of S6RETENTION field. */
#define VMC_RAM_POWERCLR_S6RETENTION_Off (1UL) /*!< Off */

/* Bit 21 : Keep retention on RAM section S5 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S5RETENTION_Pos (21UL) /*!< Position of S5RETENTION field. */
#define VMC_RAM_POWERCLR_S5RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S5RETENTION_Pos) /*!< Bit mask of S5RETENTION field. */
#define VMC_RAM_POWERCLR_S5RETENTION_Off (1UL) /*!< Off */

/* Bit 20 : Keep retention on RAM section S4 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S4RETENTION_Pos (20UL) /*!< Position of S4RETENTION field. */
#define VMC_RAM_POWERCLR_S4RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S4RETENTION_Pos) /*!< Bit mask of S4RETENTION field. */
#define VMC_RAM_POWERCLR_S4RETENTION_Off (1UL) /*!< Off */

/* Bit 19 : Keep retention on RAM section S3 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S3RETENTION_Pos (19UL) /*!< Position of S3RETENTION field. */
#define VMC_RAM_POWERCLR_S3RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S3RETENTION_Pos) /*!< Bit mask of S3RETENTION field. */
#define VMC_RAM_POWERCLR_S3RETENTION_Off (1UL) /*!< Off */

/* Bit 18 : Keep retention on RAM section S2 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S2RETENTION_Pos (18UL) /*!< Position of S2RETENTION field. */
#define VMC_RAM_POWERCLR_S2RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S2RETENTION_Pos) /*!< Bit mask of S2RETENTION field. */
#define VMC_RAM_POWERCLR_S2RETENTION_Off (1UL) /*!< Off */

/* Bit 17 : Keep retention on RAM section S1 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S1RETENTION_Pos (17UL) /*!< Position of S1RETENTION field. */
#define VMC_RAM_POWERCLR_S1RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S1RETENTION_Pos) /*!< Bit mask of S1RETENTION field. */
#define VMC_RAM_POWERCLR_S1RETENTION_Off (1UL) /*!< Off */

/* Bit 16 : Keep retention on RAM section S0 of RAM[n] when RAM section is switched off */
#define VMC_RAM_POWERCLR_S0RETENTION_Pos (16UL) /*!< Position of S0RETENTION field. */
#define VMC_RAM_POWERCLR_S0RETENTION_Msk (0x1UL << VMC_RAM_POWERCLR_S0RETENTION_Pos) /*!< Bit mask of S0RETENTION field. */
#define VMC_RAM_POWERCLR_S0RETENTION_Off (1UL) /*!< Off */

/* Bit 15 : Keep RAM section S15 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S15POWER_Pos (15UL) /*!< Position of S15POWER field. */
#define VMC_RAM_POWERCLR_S15POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S15POWER_Pos) /*!< Bit mask of S15POWER field. */
#define VMC_RAM_POWERCLR_S15POWER_Off (1UL) /*!< Off */

/* Bit 14 : Keep RAM section S14 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S14POWER_Pos (14UL) /*!< Position of S14POWER field. */
#define VMC_RAM_POWERCLR_S14POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S14POWER_Pos) /*!< Bit mask of S14POWER field. */
#define VMC_RAM_POWERCLR_S14POWER_Off (1UL) /*!< Off */

/* Bit 13 : Keep RAM section S13 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S13POWER_Pos (13UL) /*!< Position of S13POWER field. */
#define VMC_RAM_POWERCLR_S13POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S13POWER_Pos) /*!< Bit mask of S13POWER field. */
#define VMC_RAM_POWERCLR_S13POWER_Off (1UL) /*!< Off */

/* Bit 12 : Keep RAM section S12 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S12POWER_Pos (12UL) /*!< Position of S12POWER field. */
#define VMC_RAM_POWERCLR_S12POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S12POWER_Pos) /*!< Bit mask of S12POWER field. */
#define VMC_RAM_POWERCLR_S12POWER_Off (1UL) /*!< Off */

/* Bit 11 : Keep RAM section S11 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S11POWER_Pos (11UL) /*!< Position of S11POWER field. */
#define VMC_RAM_POWERCLR_S11POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S11POWER_Pos) /*!< Bit mask of S11POWER field. */
#define VMC_RAM_POWERCLR_S11POWER_Off (1UL) /*!< Off */

/* Bit 10 : Keep RAM section S10 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S10POWER_Pos (10UL) /*!< Position of S10POWER field. */
#define VMC_RAM_POWERCLR_S10POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S10POWER_Pos) /*!< Bit mask of S10POWER field. */
#define VMC_RAM_POWERCLR_S10POWER_Off (1UL) /*!< Off */

/* Bit 9 : Keep RAM section S9 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S9POWER_Pos (9UL) /*!< Position of S9POWER field. */
#define VMC_RAM_POWERCLR_S9POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S9POWER_Pos) /*!< Bit mask of S9POWER field. */
#define VMC_RAM_POWERCLR_S9POWER_Off (1UL) /*!< Off */

/* Bit 8 : Keep RAM section S8 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S8POWER_Pos (8UL) /*!< Position of S8POWER field. */
#define VMC_RAM_POWERCLR_S8POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S8POWER_Pos) /*!< Bit mask of S8POWER field. */
#define VMC_RAM_POWERCLR_S8POWER_Off (1UL) /*!< Off */

/* Bit 7 : Keep RAM section S7 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S7POWER_Pos (7UL) /*!< Position of S7POWER field. */
#define VMC_RAM_POWERCLR_S7POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S7POWER_Pos) /*!< Bit mask of S7POWER field. */
#define VMC_RAM_POWERCLR_S7POWER_Off (1UL) /*!< Off */

/* Bit 6 : Keep RAM section S6 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S6POWER_Pos (6UL) /*!< Position of S6POWER field. */
#define VMC_RAM_POWERCLR_S6POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S6POWER_Pos) /*!< Bit mask of S6POWER field. */
#define VMC_RAM_POWERCLR_S6POWER_Off (1UL) /*!< Off */

/* Bit 5 : Keep RAM section S5 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S5POWER_Pos (5UL) /*!< Position of S5POWER field. */
#define VMC_RAM_POWERCLR_S5POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S5POWER_Pos) /*!< Bit mask of S5POWER field. */
#define VMC_RAM_POWERCLR_S5POWER_Off (1UL) /*!< Off */

/* Bit 4 : Keep RAM section S4 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S4POWER_Pos (4UL) /*!< Position of S4POWER field. */
#define VMC_RAM_POWERCLR_S4POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S4POWER_Pos) /*!< Bit mask of S4POWER field. */
#define VMC_RAM_POWERCLR_S4POWER_Off (1UL) /*!< Off */

/* Bit 3 : Keep RAM section S3 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S3POWER_Pos (3UL) /*!< Position of S3POWER field. */
#define VMC_RAM_POWERCLR_S3POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S3POWER_Pos) /*!< Bit mask of S3POWER field. */
#define VMC_RAM_POWERCLR_S3POWER_Off (1UL) /*!< Off */

/* Bit 2 : Keep RAM section S2 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S2POWER_Pos (2UL) /*!< Position of S2POWER field. */
#define VMC_RAM_POWERCLR_S2POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S2POWER_Pos) /*!< Bit mask of S2POWER field. */
#define VMC_RAM_POWERCLR_S2POWER_Off (1UL) /*!< Off */

/* Bit 1 : Keep RAM section S1 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S1POWER_Pos (1UL) /*!< Position of S1POWER field. */
#define VMC_RAM_POWERCLR_S1POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S1POWER_Pos) /*!< Bit mask of S1POWER field. */
#define VMC_RAM_POWERCLR_S1POWER_Off (1UL) /*!< Off */

/* Bit 0 : Keep RAM section S0 of RAM[n] on or off in System ON mode */
#define VMC_RAM_POWERCLR_S0POWER_Pos (0UL) /*!< Position of S0POWER field. */
#define VMC_RAM_POWERCLR_S0POWER_Msk (0x1UL << VMC_RAM_POWERCLR_S0POWER_Pos) /*!< Bit mask of S0POWER field. */
#define VMC_RAM_POWERCLR_S0POWER_Off (1UL) /*!< Off */


/* Peripheral: WDT */
/* Description: Watchdog Timer 0 */

/* Register: WDT_TASKS_START */
/* Description: Start the watchdog */

/* Bit 0 : Start the watchdog */
#define WDT_TASKS_START_TASKS_START_Pos (0UL) /*!< Position of TASKS_START field. */
#define WDT_TASKS_START_TASKS_START_Msk (0x1UL << WDT_TASKS_START_TASKS_START_Pos) /*!< Bit mask of TASKS_START field. */
#define WDT_TASKS_START_TASKS_START_Trigger (1UL) /*!< Trigger task */

/* Register: WDT_TASKS_STOP */
/* Description: Stop the watchdog timer. */

/* Bit 0 : Stop the watchdog timer. */
#define WDT_TASKS_STOP_TASKS_STOP_Pos (0UL) /*!< Position of TASKS_STOP field. */
#define WDT_TASKS_STOP_TASKS_STOP_Msk (0x1UL << WDT_TASKS_STOP_TASKS_STOP_Pos) /*!< Bit mask of TASKS_STOP field. */
#define WDT_TASKS_STOP_TASKS_STOP_Trigger (1UL) /*!< Trigger task */

/* Register: WDT_SUBSCRIBE_START */
/* Description: Subscribe configuration for task START */

/* Bit 31 :   */
#define WDT_SUBSCRIBE_START_EN_Pos (31UL) /*!< Position of EN field. */
#define WDT_SUBSCRIBE_START_EN_Msk (0x1UL << WDT_SUBSCRIBE_START_EN_Pos) /*!< Bit mask of EN field. */
#define WDT_SUBSCRIBE_START_EN_Disabled (0UL) /*!< Disable subscription */
#define WDT_SUBSCRIBE_START_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task START will subscribe to */
#define WDT_SUBSCRIBE_START_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define WDT_SUBSCRIBE_START_CHIDX_Msk (0xFFUL << WDT_SUBSCRIBE_START_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: WDT_SUBSCRIBE_STOP */
/* Description: Subscribe configuration for task STOP */

/* Bit 31 :   */
#define WDT_SUBSCRIBE_STOP_EN_Pos (31UL) /*!< Position of EN field. */
#define WDT_SUBSCRIBE_STOP_EN_Msk (0x1UL << WDT_SUBSCRIBE_STOP_EN_Pos) /*!< Bit mask of EN field. */
#define WDT_SUBSCRIBE_STOP_EN_Disabled (0UL) /*!< Disable subscription */
#define WDT_SUBSCRIBE_STOP_EN_Enabled (1UL) /*!< Enable subscription */

/* Bits 7..0 : DPPI channel that task STOP will subscribe to */
#define WDT_SUBSCRIBE_STOP_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define WDT_SUBSCRIBE_STOP_CHIDX_Msk (0xFFUL << WDT_SUBSCRIBE_STOP_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: WDT_EVENTS_TIMEOUT */
/* Description: Watchdog timeout */

/* Bit 0 : Watchdog timeout */
#define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos (0UL) /*!< Position of EVENTS_TIMEOUT field. */
#define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Msk (0x1UL << WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos) /*!< Bit mask of EVENTS_TIMEOUT field. */
#define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_NotGenerated (0UL) /*!< Event not generated */
#define WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Generated (1UL) /*!< Event generated */

/* Register: WDT_EVENTS_STOPPED */
/* Description: Watchdog stopped */

/* Bit 0 : Watchdog stopped */
#define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Pos (0UL) /*!< Position of EVENTS_STOPPED field. */
#define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Msk (0x1UL << WDT_EVENTS_STOPPED_EVENTS_STOPPED_Pos) /*!< Bit mask of EVENTS_STOPPED field. */
#define WDT_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated (0UL) /*!< Event not generated */
#define WDT_EVENTS_STOPPED_EVENTS_STOPPED_Generated (1UL) /*!< Event generated */

/* Register: WDT_PUBLISH_TIMEOUT */
/* Description: Publish configuration for event TIMEOUT */

/* Bit 31 :   */
#define WDT_PUBLISH_TIMEOUT_EN_Pos (31UL) /*!< Position of EN field. */
#define WDT_PUBLISH_TIMEOUT_EN_Msk (0x1UL << WDT_PUBLISH_TIMEOUT_EN_Pos) /*!< Bit mask of EN field. */
#define WDT_PUBLISH_TIMEOUT_EN_Disabled (0UL) /*!< Disable publishing */
#define WDT_PUBLISH_TIMEOUT_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event TIMEOUT will publish to. */
#define WDT_PUBLISH_TIMEOUT_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define WDT_PUBLISH_TIMEOUT_CHIDX_Msk (0xFFUL << WDT_PUBLISH_TIMEOUT_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: WDT_PUBLISH_STOPPED */
/* Description: Publish configuration for event STOPPED */

/* Bit 31 :   */
#define WDT_PUBLISH_STOPPED_EN_Pos (31UL) /*!< Position of EN field. */
#define WDT_PUBLISH_STOPPED_EN_Msk (0x1UL << WDT_PUBLISH_STOPPED_EN_Pos) /*!< Bit mask of EN field. */
#define WDT_PUBLISH_STOPPED_EN_Disabled (0UL) /*!< Disable publishing */
#define WDT_PUBLISH_STOPPED_EN_Enabled (1UL) /*!< Enable publishing */

/* Bits 7..0 : DPPI channel that event STOPPED will publish to. */
#define WDT_PUBLISH_STOPPED_CHIDX_Pos (0UL) /*!< Position of CHIDX field. */
#define WDT_PUBLISH_STOPPED_CHIDX_Msk (0xFFUL << WDT_PUBLISH_STOPPED_CHIDX_Pos) /*!< Bit mask of CHIDX field. */

/* Register: WDT_INTENSET */
/* Description: Enable interrupt */

/* Bit 1 : Write '1' to enable interrupt for event STOPPED */
#define WDT_INTENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define WDT_INTENSET_STOPPED_Msk (0x1UL << WDT_INTENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define WDT_INTENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define WDT_INTENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define WDT_INTENSET_STOPPED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event TIMEOUT */
#define WDT_INTENSET_TIMEOUT_Pos (0UL) /*!< Position of TIMEOUT field. */
#define WDT_INTENSET_TIMEOUT_Msk (0x1UL << WDT_INTENSET_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field. */
#define WDT_INTENSET_TIMEOUT_Disabled (0UL) /*!< Read: Disabled */
#define WDT_INTENSET_TIMEOUT_Enabled (1UL) /*!< Read: Enabled */
#define WDT_INTENSET_TIMEOUT_Set (1UL) /*!< Enable */

/* Register: WDT_INTENCLR */
/* Description: Disable interrupt */

/* Bit 1 : Write '1' to disable interrupt for event STOPPED */
#define WDT_INTENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define WDT_INTENCLR_STOPPED_Msk (0x1UL << WDT_INTENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define WDT_INTENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define WDT_INTENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define WDT_INTENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event TIMEOUT */
#define WDT_INTENCLR_TIMEOUT_Pos (0UL) /*!< Position of TIMEOUT field. */
#define WDT_INTENCLR_TIMEOUT_Msk (0x1UL << WDT_INTENCLR_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field. */
#define WDT_INTENCLR_TIMEOUT_Disabled (0UL) /*!< Read: Disabled */
#define WDT_INTENCLR_TIMEOUT_Enabled (1UL) /*!< Read: Enabled */
#define WDT_INTENCLR_TIMEOUT_Clear (1UL) /*!< Disable */

/* Register: WDT_NMIENSET */
/* Description: Enable interrupt */

/* Bit 1 : Write '1' to enable interrupt for event STOPPED */
#define WDT_NMIENSET_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define WDT_NMIENSET_STOPPED_Msk (0x1UL << WDT_NMIENSET_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define WDT_NMIENSET_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define WDT_NMIENSET_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define WDT_NMIENSET_STOPPED_Set (1UL) /*!< Enable */

/* Bit 0 : Write '1' to enable interrupt for event TIMEOUT */
#define WDT_NMIENSET_TIMEOUT_Pos (0UL) /*!< Position of TIMEOUT field. */
#define WDT_NMIENSET_TIMEOUT_Msk (0x1UL << WDT_NMIENSET_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field. */
#define WDT_NMIENSET_TIMEOUT_Disabled (0UL) /*!< Read: Disabled */
#define WDT_NMIENSET_TIMEOUT_Enabled (1UL) /*!< Read: Enabled */
#define WDT_NMIENSET_TIMEOUT_Set (1UL) /*!< Enable */

/* Register: WDT_NMIENCLR */
/* Description: Disable interrupt */

/* Bit 1 : Write '1' to disable interrupt for event STOPPED */
#define WDT_NMIENCLR_STOPPED_Pos (1UL) /*!< Position of STOPPED field. */
#define WDT_NMIENCLR_STOPPED_Msk (0x1UL << WDT_NMIENCLR_STOPPED_Pos) /*!< Bit mask of STOPPED field. */
#define WDT_NMIENCLR_STOPPED_Disabled (0UL) /*!< Read: Disabled */
#define WDT_NMIENCLR_STOPPED_Enabled (1UL) /*!< Read: Enabled */
#define WDT_NMIENCLR_STOPPED_Clear (1UL) /*!< Disable */

/* Bit 0 : Write '1' to disable interrupt for event TIMEOUT */
#define WDT_NMIENCLR_TIMEOUT_Pos (0UL) /*!< Position of TIMEOUT field. */
#define WDT_NMIENCLR_TIMEOUT_Msk (0x1UL << WDT_NMIENCLR_TIMEOUT_Pos) /*!< Bit mask of TIMEOUT field. */
#define WDT_NMIENCLR_TIMEOUT_Disabled (0UL) /*!< Read: Disabled */
#define WDT_NMIENCLR_TIMEOUT_Enabled (1UL) /*!< Read: Enabled */
#define WDT_NMIENCLR_TIMEOUT_Clear (1UL) /*!< Disable */

/* Register: WDT_RUNSTATUS */
/* Description: Run status */

/* Bit 1 : Indicates whether or not the timer is running */
#define WDT_RUNSTATUS_RUNSTATUSTIMER_Pos (1UL) /*!< Position of RUNSTATUSTIMER field. */
#define WDT_RUNSTATUS_RUNSTATUSTIMER_Msk (0x1UL << WDT_RUNSTATUS_RUNSTATUSTIMER_Pos) /*!< Bit mask of RUNSTATUSTIMER field. */
#define WDT_RUNSTATUS_RUNSTATUSTIMER_NotRunning (0UL) /*!< Timer not running */
#define WDT_RUNSTATUS_RUNSTATUSTIMER_Running (1UL) /*!< Timer is running */

/* Bit 0 : Indicates whether or not the watchdog is running */
#define WDT_RUNSTATUS_RUNSTATUSWDT_Pos (0UL) /*!< Position of RUNSTATUSWDT field. */
#define WDT_RUNSTATUS_RUNSTATUSWDT_Msk (0x1UL << WDT_RUNSTATUS_RUNSTATUSWDT_Pos) /*!< Bit mask of RUNSTATUSWDT field. */
#define WDT_RUNSTATUS_RUNSTATUSWDT_NotRunning (0UL) /*!< Watchdog not running */
#define WDT_RUNSTATUS_RUNSTATUSWDT_Running (1UL) /*!< Watchdog is running */

/* Register: WDT_REQSTATUS */
/* Description: Request status */

/* Bit 7 : Request status for RR[7] register */
#define WDT_REQSTATUS_RR7_Pos (7UL) /*!< Position of RR7 field. */
#define WDT_REQSTATUS_RR7_Msk (0x1UL << WDT_REQSTATUS_RR7_Pos) /*!< Bit mask of RR7 field. */
#define WDT_REQSTATUS_RR7_DisabledOrRequested (0UL) /*!< RR[7] register is not enabled, or are already requesting reload */
#define WDT_REQSTATUS_RR7_EnabledAndUnrequested (1UL) /*!< RR[7] register is enabled, and are not yet requesting reload */

/* Bit 6 : Request status for RR[6] register */
#define WDT_REQSTATUS_RR6_Pos (6UL) /*!< Position of RR6 field. */
#define WDT_REQSTATUS_RR6_Msk (0x1UL << WDT_REQSTATUS_RR6_Pos) /*!< Bit mask of RR6 field. */
#define WDT_REQSTATUS_RR6_DisabledOrRequested (0UL) /*!< RR[6] register is not enabled, or are already requesting reload */
#define WDT_REQSTATUS_RR6_EnabledAndUnrequested (1UL) /*!< RR[6] register is enabled, and are not yet requesting reload */

/* Bit 5 : Request status for RR[5] register */
#define WDT_REQSTATUS_RR5_Pos (5UL) /*!< Position of RR5 field. */
#define WDT_REQSTATUS_RR5_Msk (0x1UL << WDT_REQSTATUS_RR5_Pos) /*!< Bit mask of RR5 field. */
#define WDT_REQSTATUS_RR5_DisabledOrRequested (0UL) /*!< RR[5] register is not enabled, or are already requesting reload */
#define WDT_REQSTATUS_RR5_EnabledAndUnrequested (1UL) /*!< RR[5] register is enabled, and are not yet requesting reload */

/* Bit 4 : Request status for RR[4] register */
#define WDT_REQSTATUS_RR4_Pos (4UL) /*!< Position of RR4 field. */
#define WDT_REQSTATUS_RR4_Msk (0x1UL << WDT_REQSTATUS_RR4_Pos) /*!< Bit mask of RR4 field. */
#define WDT_REQSTATUS_RR4_DisabledOrRequested (0UL) /*!< RR[4] register is not enabled, or are already requesting reload */
#define WDT_REQSTATUS_RR4_EnabledAndUnrequested (1UL) /*!< RR[4] register is enabled, and are not yet requesting reload */

/* Bit 3 : Request status for RR[3] register */
#define WDT_REQSTATUS_RR3_Pos (3UL) /*!< Position of RR3 field. */
#define WDT_REQSTATUS_RR3_Msk (0x1UL << WDT_REQSTATUS_RR3_Pos) /*!< Bit mask of RR3 field. */
#define WDT_REQSTATUS_RR3_DisabledOrRequested (0UL) /*!< RR[3] register is not enabled, or are already requesting reload */
#define WDT_REQSTATUS_RR3_EnabledAndUnrequested (1UL) /*!< RR[3] register is enabled, and are not yet requesting reload */

/* Bit 2 : Request status for RR[2] register */
#define WDT_REQSTATUS_RR2_Pos (2UL) /*!< Position of RR2 field. */
#define WDT_REQSTATUS_RR2_Msk (0x1UL << WDT_REQSTATUS_RR2_Pos) /*!< Bit mask of RR2 field. */
#define WDT_REQSTATUS_RR2_DisabledOrRequested (0UL) /*!< RR[2] register is not enabled, or are already requesting reload */
#define WDT_REQSTATUS_RR2_EnabledAndUnrequested (1UL) /*!< RR[2] register is enabled, and are not yet requesting reload */

/* Bit 1 : Request status for RR[1] register */
#define WDT_REQSTATUS_RR1_Pos (1UL) /*!< Position of RR1 field. */
#define WDT_REQSTATUS_RR1_Msk (0x1UL << WDT_REQSTATUS_RR1_Pos) /*!< Bit mask of RR1 field. */
#define WDT_REQSTATUS_RR1_DisabledOrRequested (0UL) /*!< RR[1] register is not enabled, or are already requesting reload */
#define WDT_REQSTATUS_RR1_EnabledAndUnrequested (1UL) /*!< RR[1] register is enabled, and are not yet requesting reload */

/* Bit 0 : Request status for RR[0] register */
#define WDT_REQSTATUS_RR0_Pos (0UL) /*!< Position of RR0 field. */
#define WDT_REQSTATUS_RR0_Msk (0x1UL << WDT_REQSTATUS_RR0_Pos) /*!< Bit mask of RR0 field. */
#define WDT_REQSTATUS_RR0_DisabledOrRequested (0UL) /*!< RR[0] register is not enabled, or are already requesting reload */
#define WDT_REQSTATUS_RR0_EnabledAndUnrequested (1UL) /*!< RR[0] register is enabled, and are not yet requesting reload */

/* Register: WDT_RCNT */
/* Description: Reload count */

/* Bits 1..0 : Reload count, number of times the watchdog has been reloaded (kicked) */
#define WDT_RCNT_RCNT_Pos (0UL) /*!< Position of RCNT field. */
#define WDT_RCNT_RCNT_Msk (0x3UL << WDT_RCNT_RCNT_Pos) /*!< Bit mask of RCNT field. */

/* Register: WDT_CRV */
/* Description: Counter reload value */

/* Bits 31..0 : Counter reload value in number of cycles of the 32.768 kHz clock */
#define WDT_CRV_CRV_Pos (0UL) /*!< Position of CRV field. */
#define WDT_CRV_CRV_Msk (0xFFFFFFFFUL << WDT_CRV_CRV_Pos) /*!< Bit mask of CRV field. */

/* Register: WDT_RREN */
/* Description: Enable register for reload request registers */

/* Bit 7 : Enable or disable RR[7] register */
#define WDT_RREN_RR7_Pos (7UL) /*!< Position of RR7 field. */
#define WDT_RREN_RR7_Msk (0x1UL << WDT_RREN_RR7_Pos) /*!< Bit mask of RR7 field. */
#define WDT_RREN_RR7_Disabled (0UL) /*!< Disable RR[7] register */
#define WDT_RREN_RR7_Enabled (1UL) /*!< Enable RR[7] register */

/* Bit 6 : Enable or disable RR[6] register */
#define WDT_RREN_RR6_Pos (6UL) /*!< Position of RR6 field. */
#define WDT_RREN_RR6_Msk (0x1UL << WDT_RREN_RR6_Pos) /*!< Bit mask of RR6 field. */
#define WDT_RREN_RR6_Disabled (0UL) /*!< Disable RR[6] register */
#define WDT_RREN_RR6_Enabled (1UL) /*!< Enable RR[6] register */

/* Bit 5 : Enable or disable RR[5] register */
#define WDT_RREN_RR5_Pos (5UL) /*!< Position of RR5 field. */
#define WDT_RREN_RR5_Msk (0x1UL << WDT_RREN_RR5_Pos) /*!< Bit mask of RR5 field. */
#define WDT_RREN_RR5_Disabled (0UL) /*!< Disable RR[5] register */
#define WDT_RREN_RR5_Enabled (1UL) /*!< Enable RR[5] register */

/* Bit 4 : Enable or disable RR[4] register */
#define WDT_RREN_RR4_Pos (4UL) /*!< Position of RR4 field. */
#define WDT_RREN_RR4_Msk (0x1UL << WDT_RREN_RR4_Pos) /*!< Bit mask of RR4 field. */
#define WDT_RREN_RR4_Disabled (0UL) /*!< Disable RR[4] register */
#define WDT_RREN_RR4_Enabled (1UL) /*!< Enable RR[4] register */

/* Bit 3 : Enable or disable RR[3] register */
#define WDT_RREN_RR3_Pos (3UL) /*!< Position of RR3 field. */
#define WDT_RREN_RR3_Msk (0x1UL << WDT_RREN_RR3_Pos) /*!< Bit mask of RR3 field. */
#define WDT_RREN_RR3_Disabled (0UL) /*!< Disable RR[3] register */
#define WDT_RREN_RR3_Enabled (1UL) /*!< Enable RR[3] register */

/* Bit 2 : Enable or disable RR[2] register */
#define WDT_RREN_RR2_Pos (2UL) /*!< Position of RR2 field. */
#define WDT_RREN_RR2_Msk (0x1UL << WDT_RREN_RR2_Pos) /*!< Bit mask of RR2 field. */
#define WDT_RREN_RR2_Disabled (0UL) /*!< Disable RR[2] register */
#define WDT_RREN_RR2_Enabled (1UL) /*!< Enable RR[2] register */

/* Bit 1 : Enable or disable RR[1] register */
#define WDT_RREN_RR1_Pos (1UL) /*!< Position of RR1 field. */
#define WDT_RREN_RR1_Msk (0x1UL << WDT_RREN_RR1_Pos) /*!< Bit mask of RR1 field. */
#define WDT_RREN_RR1_Disabled (0UL) /*!< Disable RR[1] register */
#define WDT_RREN_RR1_Enabled (1UL) /*!< Enable RR[1] register */

/* Bit 0 : Enable or disable RR[0] register */
#define WDT_RREN_RR0_Pos (0UL) /*!< Position of RR0 field. */
#define WDT_RREN_RR0_Msk (0x1UL << WDT_RREN_RR0_Pos) /*!< Bit mask of RR0 field. */
#define WDT_RREN_RR0_Disabled (0UL) /*!< Disable RR[0] register */
#define WDT_RREN_RR0_Enabled (1UL) /*!< Enable RR[0] register */

/* Register: WDT_CONFIG */
/* Description: Configuration register */

/* Bit 6 : Allow stopping the watchdog */
#define WDT_CONFIG_STOPEN_Pos (6UL) /*!< Position of STOPEN field. */
#define WDT_CONFIG_STOPEN_Msk (0x1UL << WDT_CONFIG_STOPEN_Pos) /*!< Bit mask of STOPEN field. */
#define WDT_CONFIG_STOPEN_Disable (0UL) /*!< Do not allow stopping the watchdog */
#define WDT_CONFIG_STOPEN_Enable (1UL) /*!< Allow stopping the watchdog */

/* Bit 5 : Enable or disable possibility to reload the watchdog counter between TIMEOUT and watchdog reset */
#define WDT_CONFIG_RELOAD_Pos (5UL) /*!< Position of RELOAD field. */
#define WDT_CONFIG_RELOAD_Msk (0x1UL << WDT_CONFIG_RELOAD_Pos) /*!< Bit mask of RELOAD field. */
#define WDT_CONFIG_RELOAD_Disabled (0UL) /*!< Disable */
#define WDT_CONFIG_RELOAD_Enabled (1UL) /*!< Enable */

/* Bit 4 : Watchdog operation mode */
#define WDT_CONFIG_MODE_Pos (4UL) /*!< Position of MODE field. */
#define WDT_CONFIG_MODE_Msk (0x1UL << WDT_CONFIG_MODE_Pos) /*!< Bit mask of MODE field. */
#define WDT_CONFIG_MODE_Watchdog (0UL) /*!< Use the watchdog timer as a watchdog */
#define WDT_CONFIG_MODE_Timer (1UL) /*!< Use the watchdog timer as a timer */

/* Bit 3 : Configure the watchdog to either be paused, or kept running, while the CPU is halted by the debugger */
#define WDT_CONFIG_HALT_Pos (3UL) /*!< Position of HALT field. */
#define WDT_CONFIG_HALT_Msk (0x1UL << WDT_CONFIG_HALT_Pos) /*!< Bit mask of HALT field. */
#define WDT_CONFIG_HALT_Pause (0UL) /*!< Pause watchdog while the CPU is halted by the debugger */
#define WDT_CONFIG_HALT_Run (1UL) /*!< Keep the watchdog running while the CPU is halted by the debugger */

/* Bit 1 : Enable or disable override of system OFF mode */
#define WDT_CONFIG_OFF_Pos (1UL) /*!< Position of OFF field. */
#define WDT_CONFIG_OFF_Msk (0x1UL << WDT_CONFIG_OFF_Pos) /*!< Bit mask of OFF field. */
#define WDT_CONFIG_OFF_Disabled (0UL) /*!< No impact on system OFF mode */
#define WDT_CONFIG_OFF_Enabled (1UL) /*!< Prevent system OFF mode when watchdog is running */

/* Bit 0 : Configure the watchdog to either be paused, or kept running, while the CPU is sleeping */
#define WDT_CONFIG_SLEEP_Pos (0UL) /*!< Position of SLEEP field. */
#define WDT_CONFIG_SLEEP_Msk (0x1UL << WDT_CONFIG_SLEEP_Pos) /*!< Bit mask of SLEEP field. */
#define WDT_CONFIG_SLEEP_Pause (0UL) /*!< Pause watchdog while the CPU is sleeping */
#define WDT_CONFIG_SLEEP_Run (1UL) /*!< Keep the watchdog running while the CPU is sleeping */

/* Register: WDT_RRKEY */
/* Description: Reload request key */

/* Bits 31..0 : Reload request key */
#define WDT_RRKEY_RRKEY_Pos (0UL) /*!< Position of RRKEY field. */
#define WDT_RRKEY_RRKEY_Msk (0xFFFFFFFFUL << WDT_RRKEY_RRKEY_Pos) /*!< Bit mask of RRKEY field. */

/* Register: WDT_TSKEY */
/* Description: Task stop key */

/* Bits 31..0 : Task stop key */
#define WDT_TSKEY_TSKEY_Pos (0UL) /*!< Position of TSKEY field. */
#define WDT_TSKEY_TSKEY_Msk (0xFFFFFFFFUL << WDT_TSKEY_TSKEY_Pos) /*!< Bit mask of TSKEY field. */

/* Register: WDT_TSEN */
/* Description: Task Stop Enable */

/* Bits 31..0 : Task stop enable register */
#define WDT_TSEN_TSEN_Pos (0UL) /*!< Position of TSEN field. */
#define WDT_TSEN_TSEN_Msk (0xFFFFFFFFUL << WDT_TSEN_TSEN_Pos) /*!< Bit mask of TSEN field. */
#define WDT_TSEN_TSEN_Enable (0x6E524635UL) /*!< Value to allow stopping the watchdog */

/* Register: WDT_RR */
/* Description: Description collection: Reload request n */

/* Bits 31..0 : Reload request register */
#define WDT_RR_RR_Pos (0UL) /*!< Position of RR field. */
#define WDT_RR_RR_Msk (0xFFFFFFFFUL << WDT_RR_RR_Pos) /*!< Bit mask of RR field. */
#define WDT_RR_RR_Reload (0x6E524635UL) /*!< Value to request a reload of the watchdog timer */


/*lint --flb "Leave library region" */
#endif
