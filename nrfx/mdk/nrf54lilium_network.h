/*
 * Copyright (c) 2010 - 2020, Nordic Semiconductor ASAAll rights reserved.Redistribution and use in sou
 * rce and binary forms, with or without modification,are permitted provided that the following conditi
 * ons are met:1. Redistributions of source code must retain the above copyright notice, this list of c
 * onditions and the following disclaimer.2. Redistributions in binary form, except as embedded into a 
 * Nordic Semiconductor ASA integrated circuit in a product or a software update for such product, must
 * reproduce the above copyright notice, this list of conditions and the following disclaimer in the d
 * ocumentation and/or other materials provided with the distribution.3. Neither the name of Nordic Sem
 * iconductor ASA nor the names of its contributors may be used to endorse or promote products derived 
 * from this software without specific prior written permission.4. This software, with or without modif
 * ication, must only be used with a Nordic Semiconductor ASA integrated circuit.5. Any software provid
 * ed in binary form under this license must not be reverse engineered, decompiled, modified and/or dis
 * assembled.THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESSOR IMPLIED WA
 * RRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIESOF MERCHANTABILITY, NONINFRINGEMENT, 
 * AND FITNESS FOR A PARTICULAR PURPOSE AREDISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CO
 * NTRIBUTORS BELIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, ORCONSEQUENTIAL DAMAGE
 * S (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTEGOODS OR SERVICES; LOSS OF USE, DATA, OR 
 * PROFITS; OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT
 * , STRICTLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUTOF THE USE OF T
 * HIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @file     nrf54lilium_network.h
 * @brief    CMSIS HeaderFile
 * @version  1
 * @date     25. May 2020
 * @note     Generated by SVDConv V3.3.35 on Monday, 25.05.2020 13:33:16
 *           from File 'nrf54lilium_network.svd',
 *           last modified on Monday, 25.05.2020 11:33:02
 */



/** @addtogroup Nordic Semiconductor
  * @{
  */


/** @addtogroup nrf54lilium_network
  * @{
  */


#ifndef NRF54LILIUM_NETWORK_H
#define NRF54LILIUM_NETWORK_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M33 Specific Interrupt Numbers  ======================================= */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SecureFault_IRQn          =  -9,              /*!< -9 Secure Fault Handler                                                   */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ====================================  nrf54lilium_network Specific Interrupt Numbers  ===================================== */
  ECB_IRQn                  =  13,              /*!< 13 ECB                                                                    */
  AAR_CCM_IRQn              =  14,              /*!< 14 AAR_CCM                                                                */
  TEMP_IRQn                 =  16,              /*!< 16 TEMP                                                                   */
  COMP_IRQn                 =  26,              /*!< 26 COMP                                                                   */
  SAADC_IRQn                =  28               /*!< 28 SAADC                                                                  */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-M33 Processor and Core Peripherals  =========================== */
#define __CM33_REV                 0x0004U      /*!< CM33 Core Revision                                                        */
#define __DSP_PRESENT                  0        /*!< DSP present or not                                                        */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  0        /*!< FPU present                                                               */
#define __FPU_DP                       0        /*!< unused, Device has no FPU                                                 */
#define __SAUREGION_PRESENT            0        /*!< SAU region present                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm33.h"                          /*!< ARM Cortex-M33 processor and core peripherals                             */
#include "system_nrf54lilium_network.h"         /*!< nrf54lilium_network System                                                */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief RADIO_DEBUGPSEL [DEBUGPSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  CLOCK;                        /*!< (@ 0x00000000) Pin select for RADIO clock (direct mode, base
                                                                    band debug. txCk and ckDataIn signals)                     */
  __IOM uint32_t  DATA;                         /*!< (@ 0x00000004) Pin select for RADIO data (direct mode, base
                                                                    band debug. txRadioData and dataIn signals)                */
} RADIO_DEBUGPSEL_Type;                         /*!< Size = 8 (0x8)                                                            */


/**
  * @brief RADIO_EXTPSEL [EXTPSEL] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  LNACTRL;                      /*!< (@ 0x00000000) Pin select for external LNA control                        */
  __IOM uint32_t  PACTRL;                       /*!< (@ 0x00000004) Pin select for external PA control                         */
} RADIO_EXTPSEL_Type;                           /*!< Size = 8 (0x8)                                                            */


/**
  * @brief ECB_KEY [KEY] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  VALUE[4];                     /*!< (@ 0x00000000) Description collection: 128-bit AES key                    */
} ECB_KEY_Type;                                 /*!< Size = 16 (0x10)                                                          */


/**
  * @brief CCM_KEY [KEY] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  VALUE[4];                     /*!< (@ 0x00000000) Description collection: 128-bit AES key                    */
} CCM_KEY_Type;                                 /*!< Size = 16 (0x10)                                                          */


/**
  * @brief CCM_NONCE [NONCE] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  VALUE[4];                     /*!< (@ 0x00000000) Description collection: 13-byte NONCE vector
                                                                    Only the lower 13 bytes are used                           */
} CCM_NONCE_Type;                               /*!< Size = 16 (0x10)                                                          */


/**
  * @brief SAADC_EVENTS_CH [EVENTS_CH] (Peripheral events.)
  */
typedef struct {
  __IOM uint32_t  LIMITH;                       /*!< (@ 0x00000000) Description cluster: Last results is equal or
                                                                    above CH[n].LIMIT.HIGH                                     */
  __IOM uint32_t  LIMITL;                       /*!< (@ 0x00000004) Description cluster: Last results is equal or
                                                                    below CH[n].LIMIT.LOW                                      */
} SAADC_EVENTS_CH_Type;                         /*!< Size = 8 (0x8)                                                            */


/**
  * @brief SAADC_PUBLISH_CH [PUBLISH_CH] (Publish configuration for events)
  */
typedef struct {
  __IOM uint32_t  LIMITH;                       /*!< (@ 0x00000000) Description cluster: Publish configuration for
                                                                    event CH[n].LIMITH                                         */
  __IOM uint32_t  LIMITL;                       /*!< (@ 0x00000004) Description cluster: Publish configuration for
                                                                    event CH[n].LIMITL                                         */
} SAADC_PUBLISH_CH_Type;                        /*!< Size = 8 (0x8)                                                            */


/**
  * @brief SAADC_CH [CH] (Unspecified)
  */
typedef struct {
  __IOM uint32_t  PSELP;                        /*!< (@ 0x00000000) Description cluster: Input positive pin selection
                                                                    for CH[n]                                                  */
  __IOM uint32_t  PSELN;                        /*!< (@ 0x00000004) Description cluster: Input negative pin selection
                                                                    for CH[n]                                                  */
  __IOM uint32_t  CONFIG;                       /*!< (@ 0x00000008) Description cluster: Input configuration for
                                                                    CH[n]                                                      */
  __IOM uint32_t  LIMIT;                        /*!< (@ 0x0000000C) Description cluster: High/low limits for event
                                                                    monitoring a channel                                       */
} SAADC_CH_Type;                                /*!< Size = 16 (0x10)                                                          */


/**
  * @brief SAADC_RESULT [RESULT] (RESULT EasyDMA channel)
  */
typedef struct {
  __IOM uint32_t  PTR;                          /*!< (@ 0x00000000) Data pointer                                               */
  __IOM uint32_t  MAXCNT;                       /*!< (@ 0x00000004) Maximum number of buffer bytes to transfer                 */
  __IM  uint32_t  AMOUNT;                       /*!< (@ 0x00000008) Number of buffer bytes transferred since last
                                                                    START                                                      */
} SAADC_RESULT_Type;                            /*!< Size = 12 (0xc)                                                           */


/**
  * @brief GPIO_PIN [PIN] (Pin n direct access)
  */
typedef struct {
  __IOM uint32_t  OUT;                          /*!< (@ 0x00000000) Description cluster: Pin n direct access output
                                                                    register                                                   */
  __IOM uint32_t  IN;                           /*!< (@ 0x00000004) Description cluster: Pin n direct access input
                                                                    register                                                   */
} GPIO_PIN_Type;                                /*!< Size = 8 (0x8)                                                            */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           RADIO                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief 2.4 GHz radio 2.4 GHz radio (RADIO)
  */

typedef struct {                                /*!< (@ 0x41008000) RADIO Structure                                            */
  __OM  uint32_t  TASKS_TXEN;                   /*!< (@ 0x00000000) Enable RADIO in TX mode                                    */
  __OM  uint32_t  TASKS_RXEN;                   /*!< (@ 0x00000004) Enable RADIO in RX mode                                    */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000008) Start RADIO                                                */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x0000000C) Stop RADIO                                                 */
  __OM  uint32_t  TASKS_DISABLE;                /*!< (@ 0x00000010) Disable RADIO                                              */
  __OM  uint32_t  TASKS_RSSISTART;              /*!< (@ 0x00000014) Start the RSSI and take one single sample of
                                                                    the receive signal strength                                */
  __OM  uint32_t  TASKS_BCSTART;                /*!< (@ 0x00000018) Start the bit counter                                      */
  __OM  uint32_t  TASKS_BCSTOP;                 /*!< (@ 0x0000001C) Stop the bit counter                                       */
  __OM  uint32_t  TASKS_EDSTART;                /*!< (@ 0x00000020) Start the energy detect measurement used in IEEE
                                                                    802.15.4 mode                                              */
  __OM  uint32_t  TASKS_EDSTOP;                 /*!< (@ 0x00000024) Stop the energy detect measurement                         */
  __OM  uint32_t  TASKS_CCASTART;               /*!< (@ 0x00000028) Start the clear channel assessment used in IEEE
                                                                    802.15.4 mode                                              */
  __OM  uint32_t  TASKS_CCASTOP;                /*!< (@ 0x0000002C) Stop the clear channel assessment                          */
  __OM  uint32_t  TASKS_DFESTART;               /*!< (@ 0x00000030) Start DFE operation                                        */
  __OM  uint32_t  TASKS_DFESTOP;                /*!< (@ 0x00000034) Stop DFE operation                                         */
  __OM  uint32_t  TASKS_ACQINJ0DMASTART;        /*!< (@ 0x00000038) Start DMA transaction                                      */
  __OM  uint32_t  TASKS_ACQINJ0DMASTOP;         /*!< (@ 0x0000003C) Stop ongoing DMA transaction                               */
  __OM  uint32_t  TASKS_ACQINJ1DMASTART;        /*!< (@ 0x00000040) Start DMA transaction                                      */
  __OM  uint32_t  TASKS_ACQINJ1DMASTOP;         /*!< (@ 0x00000044) Stop ongoing DMA transaction                               */
  __OM  uint32_t  TASKS_CNTPSTART;              /*!< (@ 0x00000048) Start packet counter                                       */
  __OM  uint32_t  TASKS_CNTPSTOP;               /*!< (@ 0x0000004C) Stop packet counter                                        */
  __OM  uint32_t  TASKS_CNTPCLEAR;              /*!< (@ 0x00000050) Clear packet counter                                       */
  __OM  uint32_t  TASKS_LOOPBACKEN;             /*!< (@ 0x00000054) Enable RADIO in LOOPBACK mode                              */
  __OM  uint32_t  TASKS_CALSTART;               /*!< (@ 0x00000058) Start calibration                                          */
  __OM  uint32_t  TASKS_CALSTOP;                /*!< (@ 0x0000005C) Stop calibration                                           */
  __OM  uint32_t  TASKS_PATESTSTART;            /*!< (@ 0x00000060) Start PA test                                              */
  __OM  uint32_t  TASKS_PATESTSTOP;             /*!< (@ 0x00000064) Stop PA test                                               */
  __OM  uint32_t  TASKS_CHNOINCR;               /*!< (@ 0x00000068) Update RADIO channel based on the current channel
                                                                    and increment it according to chNoIncrStep                 */
  __OM  uint32_t  TASKS_DMASTART;               /*!< (@ 0x0000006C) Start RADIO DMA transaction                                */
  __OM  uint32_t  TASKS_DMASTOP;                /*!< (@ 0x00000070) Stop ongoing RADIO DMA transaction                         */
  __OM  uint32_t  TASKS_DFEDMASTART;            /*!< (@ 0x00000074) Start DFE DMA transaction                                  */
  __OM  uint32_t  TASKS_DFEDMASTOP;             /*!< (@ 0x00000078) Stop ongoing DFE DMA transaction                           */
  __OM  uint32_t  TASKS_RESERVED_31;            /*!< (@ 0x0000007C) UNUSED_31                                                  */
  __OM  uint32_t  TASKS_GETNEXTDETECT;          /*!< (@ 0x00000080) Pull the last item out of the detect FIFO                  */
  __OM  uint32_t  TASKS_CLEARDETECTFIFO;        /*!< (@ 0x00000084) Clear the detect FIFO                                      */
  __OM  uint32_t  TASKS_RESETDEMODCTRL;         /*!< (@ 0x00000088) Sets all things back to original state in RxDemodCtrl      */
  __OM  uint32_t  TASKS_DEMODCTRLSTARTTIMER;    /*!< (@ 0x0000008C) Start the built-in custom timer. When starting
                                                                    the timer, it always starts from 0                         */
  __OM  uint32_t  TASKS_DEMODCTRLSTOPTIMER;     /*!< (@ 0x00000090) Stop the built-in custom timer. When stopping
                                                                    the timer, it is always cleared afterwards                 */
  __OM  uint32_t  TASKS_DEMODCTRLCONDEN0;       /*!< (@ 0x00000094) Enable condition 0. After this task has been
                                                                    triggered, the condition will trigger exactly
                                                                    once                                                       */
  __OM  uint32_t  TASKS_DEMODCTRLCONDEN1;       /*!< (@ 0x00000098) Enable condition 1. After this task has been
                                                                    triggered, the condition will trigger exactly
                                                                    once                                                       */
  __OM  uint32_t  TASKS_DEMODCTRLCONDEN2;       /*!< (@ 0x0000009C) Enable condition 2. After this task has been
                                                                    triggered, the condition will trigger exactly
                                                                    once                                                       */
  __IM  uint32_t  RESERVED[24];
  __IOM uint32_t  EVENTS_READY;                 /*!< (@ 0x00000100) RADIO has ramped up and is ready to be started             */
  __IOM uint32_t  EVENTS_TXREADY;               /*!< (@ 0x00000104) RADIO has ramped up and is ready to be started
                                                                    TX path                                                    */
  __IOM uint32_t  EVENTS_RXREADY;               /*!< (@ 0x00000108) RADIO has ramped up and is ready to be started
                                                                    RX path                                                    */
  __IOM uint32_t  EVENTS_ADDRESS;               /*!< (@ 0x0000010C) Address sent or received                                   */
  __IOM uint32_t  EVENTS_FRAMESTART;            /*!< (@ 0x00000110) IEEE 802.15.4 length field received                        */
  __IOM uint32_t  EVENTS_PAYLOAD;               /*!< (@ 0x00000114) Packet payload sent or received                            */
  __IOM uint32_t  EVENTS_END;                   /*!< (@ 0x00000118) Packet sent or received                                    */
  __IOM uint32_t  EVENTS_PHYEND;                /*!< (@ 0x0000011C) The last bit is sent on air or last bit is received        */
  __IOM uint32_t  EVENTS_DISABLED;              /*!< (@ 0x00000120) RADIO has been disabled                                    */
  __IOM uint32_t  EVENTS_DEVMATCH;              /*!< (@ 0x00000124) A device address match occurred on the last received
                                                                    packet                                                     */
  __IOM uint32_t  EVENTS_DEVMISS;               /*!< (@ 0x00000128) No device address match occurred on the last
                                                                    received packet                                            */
  __IOM uint32_t  EVENTS_CRCOK;                 /*!< (@ 0x0000012C) Packet received with CRC ok                                */
  __IOM uint32_t  EVENTS_CRCERROR;              /*!< (@ 0x00000130) Packet received with CRC error                             */
  __IOM uint32_t  EVENTS_RESERVED_13;           /*!< (@ 0x00000134) UNUSED_13                                                  */
  __IOM uint32_t  EVENTS_BCMATCH;               /*!< (@ 0x00000138) Bit counter reached bit count value                        */
  __IOM uint32_t  EVENTS_EDEND;                 /*!< (@ 0x0000013C) Sampling of energy detection complete. A new
                                                                    ED sample is ready for readout from the
                                                                    RADIO.EDSAMPLE register.                                   */
  __IOM uint32_t  EVENTS_EDSTOPPED;             /*!< (@ 0x00000140) The sampling of energy detection has stopped               */
  __IOM uint32_t  EVENTS_CCAIDLE;               /*!< (@ 0x00000144) Wireless medium in idle - clear to send                    */
  __IOM uint32_t  EVENTS_CCABUSY;               /*!< (@ 0x00000148) Wireless medium busy - do not send                         */
  __IOM uint32_t  EVENTS_CCASTOPPED;            /*!< (@ 0x0000014C) The CCA has stopped                                        */
  __IOM uint32_t  EVENTS_RATEBOOST;             /*!< (@ 0x00000150) Ble_LR CI field received, receive mode is changed
                                                                    from Ble_LR125Kbit to Ble_LR500Kbit                        */
  __IOM uint32_t  EVENTS_MHRMATCH;              /*!< (@ 0x00000154) MAC header match found                                     */
  __IOM uint32_t  EVENTS_SYNC;                  /*!< (@ 0x00000158) Initial sync detected                                      */
  __IOM uint32_t  EVENTS_CTEPRESENT;            /*!< (@ 0x0000015C) CTEInfo byte is received                                   */
  __IOM uint32_t  EVENTS_CTEWARNING;            /*!< (@ 0x00000160) CTEInfo byte received, but contain illegal CTETime
                                                                    or CTEType.                                                */
  __IOM uint32_t  EVENTS_DFEEND;                /*!< (@ 0x00000164) DFE operation has ended                                    */
  __IOM uint32_t  EVENTS_MODEWRITTEN;           /*!< (@ 0x00000168) Generated on write access to MODE register                 */
  __IOM uint32_t  EVENTS_MODEREADY;             /*!< (@ 0x0000016C) Generated immediately on write access to MODE
                                                                    register when MODEPROGENABLE==0, otherwise
                                                                    only manually triggered (SELECT_EVENTS_TRIGGERS=1)         */
  __IOM uint32_t  EVENTS_CTEEND;                /*!< (@ 0x00000170) CTE end                                                    */
  __IOM uint32_t  EVENTS_LBREADY;               /*!< (@ 0x00000174) RADIO is ready in loopback mode and is able to
                                                                    transmit and receive data                                  */
  __IOM uint32_t  EVENTS_CALDONE;               /*!< (@ 0x00000178) RADIO calibration is done                                  */
  __IOM uint32_t  EVENTS_CHNOUPDATED;           /*!< (@ 0x0000017C) RADIO channel no. is updated                               */
  __IOM uint32_t  EVENTS_DBCTIMEOUT;            /*!< (@ 0x00000180) DBC timeout to be able to resync                           */
  __IOM uint32_t  EVENTS_TXTIMERMATCH;          /*!< (@ 0x00000184) Tx timer match                                             */
  __IOM uint32_t  EVENTS_RXTIMERMATCH;          /*!< (@ 0x00000188) Rx timer match                                             */
  __IOM uint32_t  EVENTS_RESERVED_35;           /*!< (@ 0x0000018C) UNUSED_35                                                  */
  __IOM uint32_t  EVENTS_RXDIGEN;               /*!< (@ 0x00000190) RXDIGEN was set high from the HW timing engine             */
  __IOM uint32_t  EVENTS_RAWDETECT;             /*!< (@ 0x00000194) The double correlator detected one peak                    */
  __IOM uint32_t  EVENTS_DETECTFIFOFULL;        /*!< (@ 0x00000198) The detect FIFO is full. This should not happen
                                                                    if the FIFO is sized well enough                           */
  __IOM uint32_t  EVENTS_TIMERWRAPS;            /*!< (@ 0x0000019C) Event triggering when the timer wraps around.
                                                                    This is useful if one wants to count longer
                                                                    than the HW timer allows                                   */
  __IOM uint32_t  EVENTS_STROBETIMETRACKUPDATED;/*!< (@ 0x000001A0) New information from the symbol time tracker.
                                                                    See STROBETIMESTATUS                                       */
  __IOM uint32_t  EVENTS_DEMODCTRLCONDTRIGGERED0;/*!< (@ 0x000001A4) Condition 0 triggered and actions done                    */
  __IOM uint32_t  EVENTS_DEMODCTRLCONDTRIGGERED1;/*!< (@ 0x000001A8) Condition 1 triggered and actions done                    */
  __IOM uint32_t  EVENTS_DEMODCTRLCONDTRIGGERED2;/*!< (@ 0x000001AC) Condition 2 triggered and actions done                    */
  __IOM uint32_t  EVENTS_RESERVED_44;           /*!< (@ 0x000001B0) UNUSED_44                                                  */
  __IOM uint32_t  EVENTS_RESERVED_45;           /*!< (@ 0x000001B4) UNUSED_45                                                  */
  __IOM uint32_t  EVENTS_RESERVED_46;           /*!< (@ 0x000001B8) UNUSED_46                                                  */
  __IOM uint32_t  EVENTS_RESERVED_47;           /*!< (@ 0x000001BC) UNUSED_47                                                  */
  __IOM uint32_t  EVENTS_ACQINJ0DMAEND;         /*!< (@ 0x000001C0) ACQ DMA end                                                */
  __IOM uint32_t  EVENTS_ACQINJ1DMAEND;         /*!< (@ 0x000001C4) INJ DMA end                                                */
  __IM  uint32_t  RESERVED1[14];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED2[63];
  __IOM uint32_t  INTEN00;                      /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTEN01;                      /*!< (@ 0x00000304) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET00;                   /*!< (@ 0x00000308) Enable interrupt                                           */
  __IOM uint32_t  INTENSET01;                   /*!< (@ 0x0000030C) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR00;                   /*!< (@ 0x00000310) Disable interrupt                                          */
  __IOM uint32_t  INTENCLR01;                   /*!< (@ 0x00000314) Disable interrupt                                          */
  __IM  uint32_t  INTPEND00;                    /*!< (@ 0x00000318) Pending interrupts                                         */
  __IM  uint32_t  INTPEND01;                    /*!< (@ 0x0000031C) Pending interrupts                                         */
  __IOM uint32_t  INTEN10;                      /*!< (@ 0x00000320) Enable or disable interrupt                                */
  __IOM uint32_t  INTEN11;                      /*!< (@ 0x00000324) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET10;                   /*!< (@ 0x00000328) Enable interrupt                                           */
  __IOM uint32_t  INTENSET11;                   /*!< (@ 0x0000032C) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR10;                   /*!< (@ 0x00000330) Disable interrupt                                          */
  __IOM uint32_t  INTENCLR11;                   /*!< (@ 0x00000334) Disable interrupt                                          */
  __IM  uint32_t  INTPEND10;                    /*!< (@ 0x00000338) Pending interrupts                                         */
  __IM  uint32_t  INTPEND11;                    /*!< (@ 0x0000033C) Pending interrupts                                         */
  __IM  uint32_t  RESERVED3[48];
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000400) Data rate and modulation                                   */
  __IOM uint32_t  MODEINTERNAL;                 /*!< (@ 0x00000404) Internal mode setting, active only when MODEPROGENABLE==1  */
  __IOM uint32_t  MODEPROGENABLE;               /*!< (@ 0x00000408) Switch that enables programmable modes                     */
  __IOM uint32_t  MODE_DEPENDENT_XPB_TEST_REGISTER;/*!< (@ 0x0000040C) Mode dependent XPB test register                        */
  __IOM uint32_t  MODECNF;                      /*!< (@ 0x00000410) Radio mode configuration register                          */
  __IOM uint32_t  MISC;                         /*!< (@ 0x00000414) Misc configuration collection (to be renamed
                                                                    when more bits are defined)                                */
  __IM  uint32_t  RESERVED4[2];
  __IM  uint32_t  STATE;                        /*!< (@ 0x00000420) Current radio state                                        */
  __IM  uint32_t  RESERVED5[3];
  __IOM uint32_t  EDCTRL;                       /*!< (@ 0x00000430) IEEE 802.15.4 energy detect control                        */
  __IM  uint32_t  EDSAMPLE;                     /*!< (@ 0x00000434) IEEE 802.15.4 energy detect level                          */
  __IOM uint32_t  CCACTRL;                      /*!< (@ 0x00000438) IEEE 802.15.4 clear channel assessment control             */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  DATAWHITEIV;                  /*!< (@ 0x00000440) Data whitening initial value                               */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  ACQINJCNF0;                   /*!< (@ 0x00000448) Data acquisition capture mode                              */
  __IOM uint32_t  ACQINJCNF1;                   /*!< (@ 0x0000044C) Data acquisition capture mode                              */
  __IOM uint32_t  ACQINJDMA0_ENABLE;            /*!< (@ 0x00000450) Enable or disable data acquisition                         */
  __IOM uint32_t  ACQINJDMA0_PTR;               /*!< (@ 0x00000454) ACQ DMA pointer                                            */
  __IOM uint32_t  ACQINJDMA0_MAXCNT;            /*!< (@ 0x00000458) Maximum number of 32-bit words to transfer                 */
  __IM  uint32_t  ACQINJDMA0_AMOUNT;            /*!< (@ 0x0000045C) Number of 32-bit words transferred in the last
                                                                    transaction                                                */
  __IOM uint32_t  ACQINJDMA1_ENABLE;            /*!< (@ 0x00000460) Enable or disable data store                               */
  __IOM uint32_t  ACQINJDMA1_PTR;               /*!< (@ 0x00000464) ACQ DMA pointer                                            */
  __IOM uint32_t  ACQINJDMA1_MAXCNT;            /*!< (@ 0x00000468) Maximum number of 32-bit words to transfer                 */
  __IM  uint32_t  ACQINJDMA1_AMOUNT;            /*!< (@ 0x0000046C) Number of 32-bit words transferred in the last
                                                                    transaction                                                */
  __IM  uint32_t  RESERVED8[6];
  __IOM RADIO_DEBUGPSEL_Type DEBUGPSEL;         /*!< (@ 0x00000488) Unspecified                                                */
  __IOM RADIO_EXTPSEL_Type EXTPSEL;             /*!< (@ 0x00000490) Unspecified                                                */
  __IM  uint32_t  RESERVED9[2];
  __IM  uint32_t  GAIN_OUT;                     /*!< (@ 0x000004A0) Gain readout (LNA_OUT_SPI for nrf52/53)                    */
  __IM  uint32_t  RESERVED10[23];
  __IOM uint32_t  SHORTCUT_INTERNAL;            /*!< (@ 0x00000500) TODO                                                       */
  __IOM uint32_t  MODE_STAND_ALONE;             /*!< (@ 0x00000504) TODO                                                       */
  __IM  uint32_t  FREQUENCY;                    /*!< (@ 0x00000508) Frequency                                                  */
  __IOM uint32_t  FREQUENCY_CONFIG;             /*!< (@ 0x0000050C) TODO                                                       */
  __IOM uint32_t  TXPOWER;                      /*!< (@ 0x00000510) Output power                                               */
  __IOM uint32_t  TIFS;                         /*!< (@ 0x00000514) Interframe spacing in us                                   */
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  SPHYNXSUPPORTEVENTS;          /*!< (@ 0x0000051C) TODO                                                       */
  __IOM uint32_t  CALIBRATION_TARGET;           /*!< (@ 0x00000520) TODO                                                       */
  __IOM uint32_t  CALIBRATION_CONFIG;           /*!< (@ 0x00000524) TODO                                                       */
  __IM  uint32_t  CALIBRATION_RESULT;           /*!< (@ 0x00000528) TODO                                                       */
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  SPHYNXANA_TEST;               /*!< (@ 0x00000530) TODO                                                       */
  __IOM uint32_t  SPHYNXANA_FS_CTRL_0;          /*!< (@ 0x00000534) TODO                                                       */
  __IOM uint32_t  SPHYNXANA_FS_CTRL_1;          /*!< (@ 0x00000538) TODO                                                       */
  __IOM uint32_t  SPHYNXANA_FS_CTRL_2;          /*!< (@ 0x0000053C) TODO                                                       */
  __IOM uint32_t  SPHYNXANA_RX_CTRL;            /*!< (@ 0x00000540) TODO                                                       */
  __IOM uint32_t  SPHYNXANA_TX_CTRL;            /*!< (@ 0x00000544) TODO                                                       */
  __IOM uint32_t  SPHYNXANA_MODE_DEPENDENT;     /*!< (@ 0x00000548) TODO                                                       */
  __IOM uint32_t  SPHYNXANA_RX_TRIM_CODE;       /*!< (@ 0x0000054C) TODO                                                       */
  __IM  uint32_t  SPHYNXANA_STATUS;             /*!< (@ 0x00000550) TODO                                                       */
  __IM  uint32_t  RESERVED13[7];
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_0;     /*!< (@ 0x00000570) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_1;     /*!< (@ 0x00000574) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_2;     /*!< (@ 0x00000578) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_3;     /*!< (@ 0x0000057C) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_4;     /*!< (@ 0x00000580) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_5;     /*!< (@ 0x00000584) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_6;     /*!< (@ 0x00000588) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_7;     /*!< (@ 0x0000058C) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_ALL_8;     /*!< (@ 0x00000590) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_MODE_DEPENDENT;  /*!< (@ 0x00000594) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_RX_0;      /*!< (@ 0x00000598) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_RX_1;      /*!< (@ 0x0000059C) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_RX_2;      /*!< (@ 0x000005A0) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_RX_3;      /*!< (@ 0x000005A4) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_RX_4;      /*!< (@ 0x000005A8) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_TX_0;      /*!< (@ 0x000005AC) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_TX_1;      /*!< (@ 0x000005B0) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_GROUP_TX_2;      /*!< (@ 0x000005B4) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_CONFIG;          /*!< (@ 0x000005B8) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_OVR_EN_GROUP_ALL;/*!< (@ 0x000005BC) TODO                                                       */
  __IOM uint32_t  TIMINGENGINE_OVR_EN_GROUP_RXTX;/*!< (@ 0x000005C0) TODO                                                      */
  __IOM uint32_t  TIMINGENGINE_OVR_VAL_GROUP_ALL;/*!< (@ 0x000005C4) TODO                                                      */
  __IOM uint32_t  TIMINGENGINE_OVR_VAL_GROUP_RXTX;/*!< (@ 0x000005C8) TODO                                                     */
  __IOM uint32_t  TIMINGENGINE_MODE_DEPENDENT_2;/*!< (@ 0x000005CC) TODO                                                       */
  __IOM uint32_t  RXAGC_GAIN;                   /*!< (@ 0x000005D0) TODO                                                       */
  __IOM uint32_t  RXAGC_CONFIG;                 /*!< (@ 0x000005D4) TODO                                                       */
  __IOM uint32_t  RXAGC_RSSI;                   /*!< (@ 0x000005D8) TODO                                                       */
  __IM  uint32_t  RXAGC_STATUS;                 /*!< (@ 0x000005DC) TODO                                                       */
  __IOM uint32_t  RXSATURATIONDETECT;           /*!< (@ 0x000005E0) TODO                                                       */
  __IOM uint32_t  RXPEAKDETECTOR_IF;            /*!< (@ 0x000005E4) TODO                                                       */
  __IOM uint32_t  BITCONVERTER;                 /*!< (@ 0x000005E8) TODO                                                       */
  __IM  uint32_t  RESERVED14;
  __IOM uint32_t  DATAACQVIADMA;                /*!< (@ 0x000005F0) TODO                                                       */
  __IM  uint32_t  RESERVED15[2];
  __IOM uint32_t  DEBUGRADIOPHY;                /*!< (@ 0x000005FC) TODO                                                       */
  __IOM uint32_t  MODECONF;                     /*!< (@ 0x00000600) IQCal status                                               */
  __IM  uint32_t  FESTATUS;                     /*!< (@ 0x00000604) Frontend readout register                                  */
  __IOM uint32_t  FECONFIG;                     /*!< (@ 0x00000608) Config for Mixer and Scaler                                */
  __IOM uint32_t  IQCALCONF;                    /*!< (@ 0x0000060C) Gain and phase mismatch calibration control for
                                                                    I and Q                                                    */
  __IOM uint32_t  LOGMAG;                       /*!< (@ 0x00000610) IQCal status                                               */
  __IOM uint32_t  BBPKDETCONF;                  /*!< (@ 0x00000614) Configuration for baseband peak detector                   */
  __IOM uint32_t  OUTMAIN_CKSEL_DECFIR;         /*!< (@ 0x00000618) Clock select register for the output outMain               */
  __IOM uint32_t  DECFIR0_CKSEL;                /*!< (@ 0x0000061C) Clock select register for the PUnit decFIR0 of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR0_CONTROL;              /*!< (@ 0x00000620) Control register for the PUnit decFIR0 of type
                                                                    IP_FIR                                                     */
  __IOM uint32_t  DECFIR0_COEFFS_0;             /*!< (@ 0x00000624) Coefficient register 0 for the PUnit decFIR0
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR0_COEFFS_1;             /*!< (@ 0x00000628) Coefficient register 1 for the PUnit decFIR0
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR0_COEFFS_2;             /*!< (@ 0x0000062C) Coefficient register 2 for the PUnit decFIR0
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR0_COEFFS_3;             /*!< (@ 0x00000630) Coefficient register 3 for the PUnit decFIR0
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR1_CKSEL;                /*!< (@ 0x00000634) Clock select register for the PUnit decFIR1 of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR1_CONTROL;              /*!< (@ 0x00000638) Control register for the PUnit decFIR1 of type
                                                                    IP_FIR                                                     */
  __IOM uint32_t  DECFIR1_COEFFS_0;             /*!< (@ 0x0000063C) Coefficient register 0 for the PUnit decFIR1
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR1_COEFFS_1;             /*!< (@ 0x00000640) Coefficient register 1 for the PUnit decFIR1
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR1_COEFFS_2;             /*!< (@ 0x00000644) Coefficient register 2 for the PUnit decFIR1
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR1_COEFFS_3;             /*!< (@ 0x00000648) Coefficient register 3 for the PUnit decFIR1
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR1_COEFFS_4;             /*!< (@ 0x0000064C) Coefficient register 4 for the PUnit decFIR1
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR1_COEFFS_5;             /*!< (@ 0x00000650) Coefficient register 5 for the PUnit decFIR1
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR2_CKSEL;                /*!< (@ 0x00000654) Clock select register for the PUnit decFIR2 of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR2_CONTROL;              /*!< (@ 0x00000658) Control register for the PUnit decFIR2 of type
                                                                    IP_FIR                                                     */
  __IOM uint32_t  DECFIR2_COEFFS_0;             /*!< (@ 0x0000065C) Coefficient register 0 for the PUnit decFIR2
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR2_COEFFS_1;             /*!< (@ 0x00000660) Coefficient register 1 for the PUnit decFIR2
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR2_COEFFS_2;             /*!< (@ 0x00000664) Coefficient register 2 for the PUnit decFIR2
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR2_COEFFS_3;             /*!< (@ 0x00000668) Coefficient register 3 for the PUnit decFIR2
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR2_COEFFS_4;             /*!< (@ 0x0000066C) Coefficient register 4 for the PUnit decFIR2
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  DECFIR2_COEFFS_5;             /*!< (@ 0x00000670) Coefficient register 5 for the PUnit decFIR2
                                                                    of type IP_FIR                                             */
  __IOM uint32_t  OUTMAIN_CKSEL_IIR;            /*!< (@ 0x00000674) Clock select register for the output outMain               */
  __IOM uint32_t  OUTMAIN_SOURCE;               /*!< (@ 0x00000678) Source select register for the output outMain              */
  __IOM uint32_t  OUTPEAKDET_CKSEL;             /*!< (@ 0x0000067C) Clock select register for the output outPeakDet            */
  __IOM uint32_t  OUTPEAKDET_SOURCE;            /*!< (@ 0x00000680) Source select register for the output outPeakDet           */
  __IOM uint32_t  IIR0_CKSEL;                   /*!< (@ 0x00000684) Clock select register for the PUnit IIR0 of type
                                                                    IP_IIR2                                                    */
  __IOM uint32_t  IIR0_STATUS;                  /*!< (@ 0x00000688) Status register for the PUnit IIR0 of type IP_IIR2         */
  __IOM uint32_t  IIR0_COEFFS_B0;               /*!< (@ 0x0000068C) Coefficient register B0 for the PUnit IIR0 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR0_COEFFS_B1;               /*!< (@ 0x00000690) Coefficient register B1 for the PUnit IIR0 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR0_COEFFS_B2;               /*!< (@ 0x00000694) Coefficient register B2 for the PUnit IIR0 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR0_COEFFS_A1;               /*!< (@ 0x00000698) Coefficient register A1 for the PUnit IIR0 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR0_COEFFS_A2;               /*!< (@ 0x0000069C) Coefficient register A2 for the PUnit IIR0 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR1_CKSEL;                   /*!< (@ 0x000006A0) Clock select register for the PUnit IIR1 of type
                                                                    IP_IIR2                                                    */
  __IOM uint32_t  IIR1_STATUS;                  /*!< (@ 0x000006A4) Status register for the PUnit IIR1 of type IP_IIR2         */
  __IOM uint32_t  IIR1_COEFFS_B0;               /*!< (@ 0x000006A8) Coefficient register B0 for the PUnit IIR1 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR1_COEFFS_B1;               /*!< (@ 0x000006AC) Coefficient register B1 for the PUnit IIR1 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR1_COEFFS_B2;               /*!< (@ 0x000006B0) Coefficient register B2 for the PUnit IIR1 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR1_COEFFS_A1;               /*!< (@ 0x000006B4) Coefficient register A1 for the PUnit IIR1 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  IIR1_COEFFS_A2;               /*!< (@ 0x000006B8) Coefficient register A2 for the PUnit IIR1 of
                                                                    type IP_IIR2                                               */
  __IOM uint32_t  NOTCHIIR0_CKSEL;              /*!< (@ 0x000006BC) Clock select register for the PUnit notchIIR0
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR0_SOURCE;             /*!< (@ 0x000006C0) Source select register for the PUnit notchIIR0
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR0_STATUS;             /*!< (@ 0x000006C4) Status register for the PUnit notchIIR0 of type
                                                                    IP_IIR2                                                    */
  __IOM uint32_t  NOTCHIIR0_COEFFS_B0;          /*!< (@ 0x000006C8) Coefficient register B0 for the PUnit notchIIR0
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR0_COEFFS_B1;          /*!< (@ 0x000006CC) Coefficient register B1 for the PUnit notchIIR0
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR0_COEFFS_B2;          /*!< (@ 0x000006D0) Coefficient register B2 for the PUnit notchIIR0
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR0_COEFFS_A1;          /*!< (@ 0x000006D4) Coefficient register A1 for the PUnit notchIIR0
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR0_COEFFS_A2;          /*!< (@ 0x000006D8) Coefficient register A2 for the PUnit notchIIR0
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR1_CKSEL;              /*!< (@ 0x000006DC) Clock select register for the PUnit notchIIR1
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR1_STATUS;             /*!< (@ 0x000006E0) Status register for the PUnit notchIIR1 of type
                                                                    IP_IIR2                                                    */
  __IOM uint32_t  NOTCHIIR1_COEFFS_B0;          /*!< (@ 0x000006E4) Coefficient register B0 for the PUnit notchIIR1
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR1_COEFFS_B1;          /*!< (@ 0x000006E8) Coefficient register B1 for the PUnit notchIIR1
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR1_COEFFS_B2;          /*!< (@ 0x000006EC) Coefficient register B2 for the PUnit notchIIR1
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR1_COEFFS_A1;          /*!< (@ 0x000006F0) Coefficient register A1 for the PUnit notchIIR1
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  NOTCHIIR1_COEFFS_A2;          /*!< (@ 0x000006F4) Coefficient register A2 for the PUnit notchIIR1
                                                                    of type IP_IIR2                                            */
  __IOM uint32_t  DECFIR_CKSEL;                 /*!< (@ 0x000006F8) Clock select register for the PUnit decFIR of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR_SOURCE;                /*!< (@ 0x000006FC) Source select register for the PUnit decFIR of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR_CONTROL;               /*!< (@ 0x00000700) Control register for the PUnit decFIR of type
                                                                    IP_FIR                                                     */
  __IOM uint32_t  DECFIR_COEFFS_0;              /*!< (@ 0x00000704) Coefficient register 0 for the PUnit decFIR of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR_COEFFS_1;              /*!< (@ 0x00000708) Coefficient register 1 for the PUnit decFIR of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR_COEFFS_2;              /*!< (@ 0x0000070C) Coefficient register 2 for the PUnit decFIR of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR_COEFFS_3;              /*!< (@ 0x00000710) Coefficient register 3 for the PUnit decFIR of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR_COEFFS_4;              /*!< (@ 0x00000714) Coefficient register 4 for the PUnit decFIR of
                                                                    type IP_FIR                                                */
  __IOM uint32_t  DECFIR_COEFFS_5;              /*!< (@ 0x00000718) Coefficient register 5 for the PUnit decFIR of
                                                                    type IP_FIR                                                */
  __IM  uint32_t  RESERVED16[57];
  __IM  uint32_t  CFO_STAT;                     /*!< (@ 0x00000800) Carrier freq. offset estimate                              */
  __IOM uint32_t  PB_TEST;                      /*!< (@ 0x00000804) Test: PB calibration                                       */
  __IOM uint32_t  DBC_COEFFS;                   /*!< (@ 0x00000808) Test and Debug: DBC coefficients override                  */
  __IOM uint32_t  QOVERRIDE4;                   /*!< (@ 0x0000080C) Trim value override register 4 for nRF52                   */
  __IOM uint32_t  QOVERRIDE5;                   /*!< (@ 0x00000810) Trim value override register 5 for nRF52                   */
  __IOM uint32_t  QOVERRIDE6;                   /*!< (@ 0x00000814) Trim value override register 6 for nRF52                   */
  __IOM uint32_t  QOVERRIDE9;                   /*!< (@ 0x00000818) Trim value override register 9 for nRF52                   */
  __IM  uint32_t  RESERVED17[2];
  __IOM uint32_t  QOVERRIDE12;                  /*!< (@ 0x00000824) Trim value override register 12 for nRF52                  */
  __IOM uint32_t  QOVERRIDE23;                  /*!< (@ 0x00000828) Trim value override register 23 for nRF52                  */
  __IOM uint32_t  STTCNFG_LR;                   /*!< (@ 0x0000082C) Strobe time tracking configuration in long range
                                                                    mode                                                       */
  __IOM uint32_t  LELRMISC;                     /*!< (@ 0x00000830) Miscellaneous Controls for Long Range                      */
  __IOM uint32_t  DRIFT_LR;                     /*!< (@ 0x00000834) Drift Controls in Long Range                               */
  __IOM uint32_t  QOVERRIDE25;                  /*!< (@ 0x00000838) TODO                                                       */
  __IOM uint32_t  DBCPEAKDETTHR;                /*!< (@ 0x0000083C) Thresholds for each peak detector instance                 */
  __IM  uint32_t  BITSLICER_STAT;               /*!< (@ 0x00000840) Payload status                                             */
  __IOM uint32_t  BBCTRL;                       /*!< (@ 0x00000844) Miscellaneous mode bits                                    */
  __IOM uint32_t  DBCCORR;                      /*!< (@ 0x00000848) Thresholds for the double correlator                       */
  __IOM uint32_t  DSSS;                         /*!< (@ 0x0000084C) DSSS synchronizer trim values                              */
  __IOM uint32_t  BSCONFIG;                     /*!< (@ 0x00000850) Bitslicer configuration                                    */
  __IOM uint32_t  MFB;                          /*!< (@ 0x00000854) Matched Filter Bank (MFB) configuration                    */
  __IOM uint32_t  DRIFT1;                       /*!< (@ 0x00000858) Drift Estimator configuration                              */
  __IOM uint32_t  DRIFT2;                       /*!< (@ 0x0000085C) Drift Estimator configuration                              */
  __IOM uint32_t  CN;                           /*!< (@ 0x00000860) Configuration for the CNRIPPLEWARN functionality
                                                                    used for BLE LR. Configuration is only enabled
                                                                    when OVRENCNRIPPLEWARNCFG in OVERRIDE23
                                                                    is set                                                     */
  __IOM uint32_t  PEAK;                         /*!< (@ 0x00000864) Peak detector configuration                                */
  __IOM uint32_t  STTCNFG;                      /*!< (@ 0x00000868) Strobe time tracking Configuration (Symbol Timing)         */
  __IOM uint32_t  BBCKSEL;                      /*!< (@ 0x0000086C) Clock rates                                                */
  __IM  uint32_t  RESERVED18[36];
  __IM  uint32_t  DFESTATUS;                    /*!< (@ 0x00000900) DFE status information                                     */
  __IOM uint32_t  DFEMODE;                      /*!< (@ 0x00000904) Whether to use Angle-of-Arrival (AOA) or Angle-of-Departure
                                                                    (AOD)                                                      */
  __IOM uint32_t  DFECTRL1;                     /*!< (@ 0x00000908) Various configuration for Direction finding                */
  __IOM uint32_t  DFECTRL2;                     /*!< (@ 0x0000090C) Start offset for Direction finding                         */
  __IOM uint32_t  DFECTRL3;                     /*!< (@ 0x00000910) Various hacker/tuning configuration for Direction
                                                                    finding                                                    */
  __IOM uint32_t  DFECTRL4;                     /*!< (@ 0x00000914) Various hacker/tuning configuration for Direction
                                                                    finding                                                    */
  __IOM uint32_t  DFECTRL5;                     /*!< (@ 0x00000918) Various hacker/tuning configuration for Direction
                                                                    finding                                                    */
  __IM  uint32_t  SWITCHPATTERN;                /*!< (@ 0x0000091C) GPIO patterns to be used for each antenna                  */
  __OM  uint32_t  CLEARPATTERN;                 /*!< (@ 0x00000920) Clear the GPIO pattern array for antenna control           */
  __IOM uint32_t  DFEGPIO[8];                   /*!< (@ 0x00000924) Description collection: Pin select for DFE pin
                                                                    n                                                          */
  __OM  uint32_t  TASK_TRIG_START_DFE;          /*!< (@ 0x00000944) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_STOP_DFE;           /*!< (@ 0x00000948) Unspecified                                                */
  __IOM uint32_t  ENABLE_DFE;                   /*!< (@ 0x0000094C) Unspecified                                                */
  __IOM uint32_t  PTRDFE;                       /*!< (@ 0x00000950) Data pointer                                               */
  __IM  uint32_t  AMOUNTDFE;                    /*!< (@ 0x00000954) Number of samples transferred in the last transaction      */
  __IOM uint32_t  MAXCNTDFE;                    /*!< (@ 0x00000958) Maximum number of buffer words to transfer                 */
  __IM  uint32_t  RESERVED19[41];
  __OM  uint32_t  TASK_CNTSTART;                /*!< (@ 0x00000A00) Unspecified                                                */
  __OM  uint32_t  TASK_CNTSTOP;                 /*!< (@ 0x00000A04) Unspecified                                                */
  __OM  uint32_t  TASK_CNTCLEAR;                /*!< (@ 0x00000A08) Unspecified                                                */
  __IM  uint32_t  CRCSTATUS;                    /*!< (@ 0x00000A0C) CRC status                                                 */
  __IM  uint32_t  RXMATCH;                      /*!< (@ 0x00000A10) Received address                                           */
  __IM  uint32_t  RXCRC;                        /*!< (@ 0x00000A14) CRC field of previously received packet                    */
  __IM  uint32_t  DAI;                          /*!< (@ 0x00000A18) Device address match index                                 */
  __IM  uint32_t  PDUSTAT;                      /*!< (@ 0x00000A1C) Payload status                                             */
  __IOM uint32_t  PCNF0;                        /*!< (@ 0x00000A20) Packet configuration register 0                            */
  __IOM uint32_t  PCNF0SEC;                     /*!< (@ 0x00000A24) Unspecified                                                */
  __IOM uint32_t  PCNF1;                        /*!< (@ 0x00000A28) Packet configuration register 1                            */
  __IOM uint32_t  BASE0;                        /*!< (@ 0x00000A2C) Base address 0                                             */
  __IOM uint32_t  BASE1;                        /*!< (@ 0x00000A30) Base address 1                                             */
  __IOM uint32_t  PREFIX0;                      /*!< (@ 0x00000A34) Prefixes bytes for logical addresses 0-3                   */
  __IOM uint32_t  PREFIX1;                      /*!< (@ 0x00000A38) Prefixes bytes for logical addresses 4-7                   */
  __IOM uint32_t  TXADDRESS;                    /*!< (@ 0x00000A3C) Transmit address select                                    */
  __IOM uint32_t  RXADDRESSES;                  /*!< (@ 0x00000A40) Receive address select                                     */
  __IOM uint32_t  CRCCNF;                       /*!< (@ 0x00000A44) CRC configuration                                          */
  __IOM uint32_t  CRCPOLY;                      /*!< (@ 0x00000A48) CRC polynomial                                             */
  __IOM uint32_t  CRCINIT;                      /*!< (@ 0x00000A4C) CRC initial value                                          */
  __IOM uint32_t  DAB[8];                       /*!< (@ 0x00000A50) Description collection: Device address base segment
                                                                    n                                                          */
  __IOM uint32_t  DAP[8];                       /*!< (@ 0x00000A70) Description collection: Device address prefix
                                                                    n                                                          */
  __IOM uint32_t  DACNF;                        /*!< (@ 0x00000A90) Device address match configuration                         */
  __IOM uint32_t  BCC;                          /*!< (@ 0x00000A94) Bit counter compare                                        */
  __IOM uint32_t  AACHKOVERRIDE_TODO_FIX_NAMING;/*!< (@ 0x00000A98) Unspecified                                                */
  __IM  uint32_t  PACKETCNTR1;                  /*!< (@ 0x00000A9C) Unspecified                                                */
  __IM  uint32_t  PACKETCNTR2;                  /*!< (@ 0x00000AA0) Unspecified                                                */
  __IM  uint32_t  CTESTATUS;                    /*!< (@ 0x00000AA4) CTEInfo parsed from received packet                        */
  __IM  uint32_t  HYPSTDCHECKSTAT_TODO_FIX_NAMING;/*!< (@ 0x00000AA8) Unspecified                                              */
  __IM  uint32_t  HYPSTDAADIFFVEC_TODO_FIX_NAMING;/*!< (@ 0x00000AAC) Unspecified                                              */
  __IOM uint32_t  ADDRSAFECONF;                 /*!< (@ 0x00000AB0) Unspecified                                                */
  __IOM uint32_t  MHRMATCHCONF;                 /*!< (@ 0x00000AB4) Search pattern configuration                               */
  __IOM uint32_t  MHRMATCHMASK;                 /*!< (@ 0x00000AB8) Pattern mask                                               */
  __IOM uint32_t  SFD;                          /*!< (@ 0x00000ABC) IEEE 802.15.4 start of frame delimiter                     */
  __IOM uint32_t  CTEINLINECONF;                /*!< (@ 0x00000AC0) Configuration for CTE inline mode                          */
  __OM  uint32_t  TASK_TRIG_START_CHAIN;        /*!< (@ 0x00000AC4) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_STOP_CHAIN;         /*!< (@ 0x00000AC8) Unspecified                                                */
  __IOM uint32_t  ENABLE_CHAIN;                 /*!< (@ 0x00000ACC) Unspecified                                                */
  __IOM uint32_t  PACKETPTR;                    /*!< (@ 0x00000AD0) Packet pointer                                             */
  __IM  uint32_t  AMOUNT_CHAIN;                 /*!< (@ 0x00000AD4) Unspecified                                                */
  __IOM uint32_t  MAXCNT_CHAIN;                 /*!< (@ 0x00000AD8) Unspecified                                                */
  __IM  uint32_t  RESERVED20[9];
  __IOM uint32_t  TXCONFIG;                     /*!< (@ 0x00000B00) Tx configuration-                                          */
  __IM  uint32_t  RESERVED21[63];
  __IOM uint32_t  ADPLLCOMMAND;                 /*!< (@ 0x00000C00) Send or receive command directly to the AdPll
                                                                    digital island. Only write to this register
                                                                    when FSASYNCBUSBUSY returns 0                              */
  __IOM uint32_t  FSFREQFINETUNE;               /*!< (@ 0x00000C04) For finetuning the frequency                               */
  __IOM uint32_t  DEVIATION;                    /*!< (@ 0x00000C08) Frequency deviation for modulation                         */
  __IOM uint32_t  MODRATE;                      /*!< (@ 0x00000C0C) Select modulation rate                                     */
  __IOM uint32_t  MODFILTERING;                 /*!< (@ 0x00000C10) Select gaussian filtering mode                             */
  __IOM uint32_t  CUSTOMMODULATION;             /*!< (@ 0x00000C14) Enable reading from memory and passing data over
                                                                    to AdPll                                                   */
  __IOM uint32_t  FSCLOCKSELECT;                /*!< (@ 0x00000C18) Set the clock source for the AdPll digital island          */
  __IM  uint32_t  FSUNITRIGCALVAL;              /*!< (@ 0x00000C1C) Read the calibrated value for the universal trigger        */
  __IOM uint32_t  FSUNITRIGMANUAL;              /*!< (@ 0x00000C20) Manual control of the uni trigger signals. Note
                                                                    that fsUniTriggerCalWord is controlled by
                                                                    writing to the separate register FSUNITRIGCALVAL           */
  __IM  uint32_t  FSUNITRIGCALOUT;              /*!< (@ 0x00000C24) Read the signal directly from fsUniTriggerCalOut           */
  __IOM uint32_t  FSASYNCBUSCONF;               /*!< (@ 0x00000C28) Some special settings for the asynchronous bus
                                                                    configuration                                              */
  __IM  uint32_t  FSASYNCBUSBUSY;               /*!< (@ 0x00000C2C) Status bit indicating whether the bus is currently
                                                                    busy or not                                                */
  __IOM uint32_t  VARIOUS_BACKDOORS;            /*!< (@ 0x00000C30) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IM  uint32_t  RESERVED22[3];
  __IOM uint32_t  EXPECTEDPVTTOTRATIO;          /*!< (@ 0x00000C40) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  ESTKDTCVAL;                   /*!< (@ 0x00000C44) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  TXINTERFACEHFGAIN;            /*!< (@ 0x00000C48) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  TRACING;                      /*!< (@ 0x00000C4C) Enable tracing from AdPll                                  */
  __IOM uint32_t  IFFREQ;                       /*!< (@ 0x00000C50) Select between two different IF frequencies                */
  __IM  uint32_t  ADPLLCOMPANIONSTATE;          /*!< (@ 0x00000C54) State in the AdPllCompanion state machines                 */
  __IM  uint32_t  RESERVED23[6];
  __IOM uint32_t  RELOADFREQ;                   /*!< (@ 0x00000C70) Non-official task: AdPll will reread the frequency
                                                                    input signal                                               */
  __IOM uint32_t  UNITRIGCALSTART;              /*!< (@ 0x00000C74) Non-official task: Start automatic universal
                                                                    trigger calibration                                        */
  __IOM uint32_t  FSSENDSETTINGS;               /*!< (@ 0x00000C78) Non-official task: Send the auto-settings to
                                                                    AdPll again. This also happens at every
                                                                    startup                                                    */
  __IM  uint32_t  RESERVED24;
  __IOM uint32_t  UNITRIGCALDONE;               /*!< (@ 0x00000C80) Non-official event: Start automatic universal
                                                                    trigger calibration                                        */
  __IOM uint32_t  REJECTEDTRANS;                /*!< (@ 0x00000C84) Non-official event: The command written to AdPll
                                                                    was rejected because of an ongoing transaction             */
  __IOM uint32_t  COMPLETETRANS;                /*!< (@ 0x00000C88) Non-official event: Completed a transaction to
                                                                    AdPll successfully ((only when CHECKSTATUS
                                                                    is set)                                                    */
  __IOM uint32_t  FAILEDTRANS;                  /*!< (@ 0x00000C8C) Non-official event: Did not successfully complete
                                                                    a transaction to AdPll. (only when CHECKSTATUS
                                                                    is set)                                                    */
  __IM  uint32_t  RESERVED25[4];
  __IOM uint32_t  ADPLL_STARTUP_COMMAND0;       /*!< (@ 0x00000CA0) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  ADPLL_STARTUP_COMMAND1;       /*!< (@ 0x00000CA4) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  ADPLL_STARTUP_COMMAND2;       /*!< (@ 0x00000CA8) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  ADPLL_STARTUP_COMMAND3;       /*!< (@ 0x00000CAC) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  ADPLL_STARTUP_COMMAND4;       /*!< (@ 0x00000CB0) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  ADPLL_STARTUP_COMMAND5;       /*!< (@ 0x00000CB4) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  ADPLL_STARTUP_COMMAND6;       /*!< (@ 0x00000CB8) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IOM uint32_t  ADPLL_STARTUP_COMMAND7;       /*!< (@ 0x00000CBC) This value is written to the AdPll when powering
                                                                    up the digital island                                      */
  __IM  uint32_t  RESERVED26[4];
  __IOM uint32_t  ADPLLCOMPANION_INTEN;         /*!< (@ 0x00000CD0) Unspecified                                                */
  __IOM uint32_t  ADPLLCOMPANION_INTENSET;      /*!< (@ 0x00000CD4) Unspecified                                                */
  __IOM uint32_t  ADPLLCOMPANION_INTENCLR;      /*!< (@ 0x00000CD8) Unspecified                                                */
  __IM  uint32_t  ADPLLCOMPANION_INTPEND;       /*!< (@ 0x00000CDC) Unspecified                                                */
  __IM  uint32_t  RESERVED27[8];
  __IOM uint32_t  SUBSCRIBE_TXEN;               /*!< (@ 0x00000D00) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_RXEN;               /*!< (@ 0x00000D04) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_START;              /*!< (@ 0x00000D08) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_STOP;               /*!< (@ 0x00000D0C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DISABLE;            /*!< (@ 0x00000D10) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_RSSISTART;          /*!< (@ 0x00000D14) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_BCSTART;            /*!< (@ 0x00000D18) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_BCSTOP;             /*!< (@ 0x00000D1C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_EDSTART;            /*!< (@ 0x00000D20) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_EDSTOP;             /*!< (@ 0x00000D24) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CCASTART;           /*!< (@ 0x00000D28) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CCASTOP;            /*!< (@ 0x00000D2C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DFESTART;           /*!< (@ 0x00000D30) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DFESTOP;            /*!< (@ 0x00000D34) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_ACQINJ0DMASTART;    /*!< (@ 0x00000D38) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_ACQINJ0DMASTOP;     /*!< (@ 0x00000D3C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_ACQINJ1DMASTART;    /*!< (@ 0x00000D40) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_ACQINJ1DMASTOP;     /*!< (@ 0x00000D44) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CNTPSTART;          /*!< (@ 0x00000D48) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CNTPSTOP;           /*!< (@ 0x00000D4C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CNTPCLEAR;          /*!< (@ 0x00000D50) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_LOOPBACKEN;         /*!< (@ 0x00000D54) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CALSTART;           /*!< (@ 0x00000D58) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CALSTOP;            /*!< (@ 0x00000D5C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_PATESTSTART;        /*!< (@ 0x00000D60) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_PATESTSTOP;         /*!< (@ 0x00000D64) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CHNOINCR;           /*!< (@ 0x00000D68) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DMASTART;           /*!< (@ 0x00000D6C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DMASTOP;            /*!< (@ 0x00000D70) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DFEDMASTART;        /*!< (@ 0x00000D74) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DFEDMASTOP;         /*!< (@ 0x00000D78) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_RESERVED31;         /*!< (@ 0x00000D7C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_GETNEXTDETECT;      /*!< (@ 0x00000D80) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_CLEARDETECTFIFO;    /*!< (@ 0x00000D84) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_RESETDEMODCTRL;     /*!< (@ 0x00000D88) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DEMODCTRLSTARTTIMER;/*!< (@ 0x00000D8C) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DEMODCTRLSTOPTIMER; /*!< (@ 0x00000D90) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DEMODCTRLCONDEN0;   /*!< (@ 0x00000D94) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DEMODCTRLCONDEN1;   /*!< (@ 0x00000D98) Unspecified                                                */
  __IOM uint32_t  SUBSCRIBE_DEMODCTRLCONDEN2;   /*!< (@ 0x00000D9C) Unspecified                                                */
  __IM  uint32_t  RESERVED28[24];
  __IOM uint32_t  PUBLISH_READY;                /*!< (@ 0x00000E00) Unspecified                                                */
  __IOM uint32_t  PUBLISH_TXREADY;              /*!< (@ 0x00000E04) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RXREADY;              /*!< (@ 0x00000E08) Unspecified                                                */
  __IOM uint32_t  PUBLISH_ADDRESS;              /*!< (@ 0x00000E0C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_FRAMESTART;           /*!< (@ 0x00000E10) Unspecified                                                */
  __IOM uint32_t  PUBLISH_PAYLOAD;              /*!< (@ 0x00000E14) Unspecified                                                */
  __IOM uint32_t  PUBLISH_END;                  /*!< (@ 0x00000E18) Unspecified                                                */
  __IOM uint32_t  PUBLISH_PHYEND;               /*!< (@ 0x00000E1C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_DISABLED;             /*!< (@ 0x00000E20) Unspecified                                                */
  __IOM uint32_t  PUBLISH_DEVMATCH;             /*!< (@ 0x00000E24) Unspecified                                                */
  __IOM uint32_t  PUBLISH_DEVMISS;              /*!< (@ 0x00000E28) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CRCOK;                /*!< (@ 0x00000E2C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CRCERROR;             /*!< (@ 0x00000E30) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RESERVED13;           /*!< (@ 0x00000E34) Unspecified                                                */
  __IOM uint32_t  PUBLISH_BCMATCH;              /*!< (@ 0x00000E38) Unspecified                                                */
  __IOM uint32_t  PUBLISH_EDEND;                /*!< (@ 0x00000E3C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_EDSTOPPED;            /*!< (@ 0x00000E40) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CCAIDLE;              /*!< (@ 0x00000E44) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CCABUSY;              /*!< (@ 0x00000E48) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CCASTOPPED;           /*!< (@ 0x00000E4C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RATEBOOST;            /*!< (@ 0x00000E50) Unspecified                                                */
  __IOM uint32_t  PUBLISH_MHRMATCH;             /*!< (@ 0x00000E54) Unspecified                                                */
  __IOM uint32_t  PUBLISH_SYNC;                 /*!< (@ 0x00000E58) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CTEPRESENT;           /*!< (@ 0x00000E5C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CTEWARNING;           /*!< (@ 0x00000E60) Unspecified                                                */
  __IOM uint32_t  PUBLISH_DFEEND;               /*!< (@ 0x00000E64) Unspecified                                                */
  __IOM uint32_t  PUBLISH_MODEWRITTEN;          /*!< (@ 0x00000E68) Unspecified                                                */
  __IOM uint32_t  PUBLISH_MODEREADY;            /*!< (@ 0x00000E6C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CTEEND;               /*!< (@ 0x00000E70) Unspecified                                                */
  __IOM uint32_t  PUBLISH_LBREADY;              /*!< (@ 0x00000E74) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CALDONE;              /*!< (@ 0x00000E78) Unspecified                                                */
  __IOM uint32_t  PUBLISH_CHNOUPDATED;          /*!< (@ 0x00000E7C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_DBCTIMEOUT;           /*!< (@ 0x00000E80) Unspecified                                                */
  __IOM uint32_t  PUBLISH_TXTIMERMATCH;         /*!< (@ 0x00000E84) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RXTIMERMATCH;         /*!< (@ 0x00000E88) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RESERVED35;           /*!< (@ 0x00000E8C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RXDIGEN;              /*!< (@ 0x00000E90) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RAWDETECT;            /*!< (@ 0x00000E94) Unspecified                                                */
  __IOM uint32_t  PUBLISH_DETECTFIFOFULL;       /*!< (@ 0x00000E98) Unspecified                                                */
  __IOM uint32_t  PUBLISH_TIMERWRAPS;           /*!< (@ 0x00000E9C) Unspecified                                                */
  __IOM uint32_t  PUBLISH_STROBETIMETRACKUPDATED;/*!< (@ 0x00000EA0) Unspecified                                               */
  __IOM uint32_t  PUBLISH_DEMODCTRLCONDTRIGGERED0;/*!< (@ 0x00000EA4) Unspecified                                              */
  __IOM uint32_t  PUBLISH_DEMODCTRLCONDTRIGGERED1;/*!< (@ 0x00000EA8) Unspecified                                              */
  __IOM uint32_t  PUBLISH_DEMODCTRLCONDTRIGGERED2;/*!< (@ 0x00000EAC) Unspecified                                              */
  __IOM uint32_t  PUBLISH_RESERVED44;           /*!< (@ 0x00000EB0) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RESERVED45;           /*!< (@ 0x00000EB4) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RESERVED46;           /*!< (@ 0x00000EB8) Unspecified                                                */
  __IOM uint32_t  PUBLISH_RESERVED47;           /*!< (@ 0x00000EBC) Unspecified                                                */
  __IOM uint32_t  PUBLISH_ACQINJ0DMAEND;        /*!< (@ 0x00000EC0) Unspecified                                                */
  __IOM uint32_t  PUBLISH_ACQINJ1DMAEND;        /*!< (@ 0x00000EC4) Unspecified                                                */
  __IM  uint32_t  RESERVED29[14];
  __OM  uint32_t  TASK_TRIG_ZERO_PENALTY_PCP_4; /*!< (@ 0x00000F00) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_FULL_PENALTY_PCP_4; /*!< (@ 0x00000F04) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_ZERO_PENALTY_PCP_3; /*!< (@ 0x00000F08) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_FULL_PENALTY_PCP_3; /*!< (@ 0x00000F0C) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_ZERO_PENALTY_PCP_2; /*!< (@ 0x00000F10) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_FULL_PENALTY_PCP_2; /*!< (@ 0x00000F14) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_ZERO_PENALTY_PCP_1; /*!< (@ 0x00000F18) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_FULL_PENALTY_PCP_1; /*!< (@ 0x00000F1C) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_ZERO_PENALTY_PCP_0; /*!< (@ 0x00000F20) Unspecified                                                */
  __OM  uint32_t  TASK_TRIG_FULL_PENALTY_PCP_0; /*!< (@ 0x00000F24) Unspecified                                                */
  __IOM uint32_t  PENALTY_RG_PCP_0;             /*!< (@ 0x00000F28) Unspecified                                                */
  __IOM uint32_t  PENALTY_RG_PCP_1;             /*!< (@ 0x00000F2C) Unspecified                                                */
  __IOM uint32_t  PENALTY_RG_PCP_2;             /*!< (@ 0x00000F30) Unspecified                                                */
  __IOM uint32_t  PENALTY_RG_PCP_3;             /*!< (@ 0x00000F34) Unspecified                                                */
  __IOM uint32_t  PENALTY_RG_PCP_4;             /*!< (@ 0x00000F38) Unspecified                                                */
  __IM  uint32_t  TURN_OFF_AUTO_CLOCKSOURCE_REQ;/*!< (@ 0x00000F3C) Unspecified                                                */
  __IOM uint32_t  FORCE_OVERRIDE_PCP_0;         /*!< (@ 0x00000F40) Unspecified                                                */
  __IOM uint32_t  FORCE_OVERRIDE_PCP_1;         /*!< (@ 0x00000F44) Unspecified                                                */
  __IOM uint32_t  FORCE_OVERRIDE_PCP_2;         /*!< (@ 0x00000F48) Unspecified                                                */
  __IOM uint32_t  FORCE_OVERRIDE_PCP_3;         /*!< (@ 0x00000F4C) Unspecified                                                */
  __IOM uint32_t  FORCE_OVERRIDE_PCP_4;         /*!< (@ 0x00000F50) Unspecified                                                */
} NRF_RADIO_Type;                               /*!< Size = 3924 (0xf54)                                                       */



/* =========================================================================================================================== */
/* ================                                            ECB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AES ECB Mode Encryption (ECB)
  */

typedef struct {                                /*!< (@ 0x4100D000) ECB Structure                                              */
  __OM  uint32_t  TASKS_CONFIG;                 /*!< (@ 0x00000000) Fetches AES Key from CONFIGPTR job list into
                                                                    the KEY registers                                          */
  __OM  uint32_t  TASKS_STARTECB;               /*!< (@ 0x00000004) Start ECB block encrypt                                    */
  __OM  uint32_t  TASKS_STOPECB;                /*!< (@ 0x00000008) Abort a possible executing ECB operation                   */
  __IM  uint32_t  RESERVED[29];
  __IOM uint32_t  SUBSCRIBE_CONFIG;             /*!< (@ 0x00000080) Subscribe configuration for task CONFIG                    */
  __IOM uint32_t  SUBSCRIBE_STARTECB;           /*!< (@ 0x00000084) Subscribe configuration for task STARTECB                  */
  __IOM uint32_t  SUBSCRIBE_STOPECB;            /*!< (@ 0x00000088) Subscribe configuration for task STOPECB                   */
  __IM  uint32_t  RESERVED1[29];
  __IOM uint32_t  EVENTS_ENDCONFIG;             /*!< (@ 0x00000100) ECB block configuration complete                           */
  __IOM uint32_t  EVENTS_ENDECB;                /*!< (@ 0x00000104) ECB block encrypt complete                                 */
  __IOM uint32_t  EVENTS_ERRORECB;              /*!< (@ 0x00000108) ECB block encrypt aborted because of a STOPECB
                                                                    task or due to an error                                    */
  __IM  uint32_t  RESERVED2[29];
  __IOM uint32_t  PUBLISH_ENDCONFIG;            /*!< (@ 0x00000180) Publish configuration for event ENDCONFIG                  */
  __IOM uint32_t  PUBLISH_ENDECB;               /*!< (@ 0x00000184) Publish configuration for event ENDECB                     */
  __IOM uint32_t  PUBLISH_ERRORECB;             /*!< (@ 0x00000188) Publish configuration for event ERRORECB                   */
  __IM  uint32_t  RESERVED3[94];
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED4[129];
  __IOM ECB_KEY_Type KEY;                       /*!< (@ 0x00000510) Unspecified                                                */
  __IM  uint32_t  RESERVED5[4];
  __IOM uint32_t  INPTR;                        /*!< (@ 0x00000530) ECB input pointer                                          */
  __IM  uint32_t  INPTRAMOUNT;                  /*!< (@ 0x00000534) Number of bytes read from the input data, not
                                                                    including the job list structure                           */
  __IOM uint32_t  OUTPTR;                       /*!< (@ 0x00000538) Output pointer Points to a job list containing
                                                                    encrypted ECB data structure                               */
  __IM  uint32_t  OUTPTRAMOUNT;                 /*!< (@ 0x0000053C) Number of bytes available in the output data,
                                                                    not including the job list structure                       */
} NRF_ECB_Type;                                 /*!< Size = 1344 (0x540)                                                       */



/* =========================================================================================================================== */
/* ================                                            AAR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Accelerated Address Resolver (AAR)
  */

typedef struct {                                /*!< (@ 0x4100E000) AAR Structure                                              */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start resolving addresses based on IRKs specified
                                                                    in the IRK data structure                                  */
  __IM  uint32_t  RESERVED;
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000008) Stop resolving addresses                                   */
  __IM  uint32_t  RESERVED1[29];
  __IOM uint32_t  SUBSCRIBE_START;              /*!< (@ 0x00000080) Subscribe configuration for task START                     */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  SUBSCRIBE_STOP;               /*!< (@ 0x00000088) Subscribe configuration for task STOP                      */
  __IM  uint32_t  RESERVED3[29];
  __IOM uint32_t  EVENTS_END;                   /*!< (@ 0x00000100) Address resolution procedure complete                      */
  __IOM uint32_t  EVENTS_RESOLVED;              /*!< (@ 0x00000104) Address resolved                                           */
  __IOM uint32_t  EVENTS_NOTRESOLVED;           /*!< (@ 0x00000108) Address not resolved                                       */
  __IM  uint32_t  RESERVED4[29];
  __IOM uint32_t  PUBLISH_END;                  /*!< (@ 0x00000180) Publish configuration for event END                        */
  __IOM uint32_t  PUBLISH_RESOLVED;             /*!< (@ 0x00000184) Publish configuration for event RESOLVED                   */
  __IOM uint32_t  PUBLISH_NOTRESOLVED;          /*!< (@ 0x00000188) Publish configuration for event NOTRESOLVED                */
  __IM  uint32_t  RESERVED5[93];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED6[61];
  __IM  uint32_t  STATUS;                       /*!< (@ 0x00000400) Resolution status                                          */
  __IM  uint32_t  RESERVED7[63];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable AAR                                                 */
  __IM  uint32_t  RESERVED8[11];
  __IOM uint32_t  INPTR;                        /*!< (@ 0x00000530) Pointer to the AAR data structure                          */
} NRF_AAR_Type;                                 /*!< Size = 1332 (0x534)                                                       */



/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AES CCM mode encryption (CCM)
  */

typedef struct {                                /*!< (@ 0x4100E000) CCM Structure                                              */
  __OM  uint32_t  TASKS_CONFIG;                 /*!< (@ 0x00000000) Fetches AES Key and CCM Nonce from CONFIGPTR
                                                                    job list into the KEY and NONCE registers.                 */
  __OM  uint32_t  TASKS_CRYPT;                  /*!< (@ 0x00000004) Start encryption/decryption. This operation will
                                                                    stop by itself when completed.                             */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000008) Stop encryption/decryption                                 */
  __OM  uint32_t  TASKS_RATEOVERRIDE;           /*!< (@ 0x0000000C) Override DATARATE setting in MODE register with
                                                                    the contents of the RATEOVERRIDE register
                                                                    for any ongoing encryption/decryption                      */
  __OM  uint32_t  TASKS_PROCESS;                /*!< (@ 0x00000010) Fetches and processes one byte from INPTR in
                                                                    manual data rate mode                                      */
  __IM  uint32_t  RESERVED[27];
  __IOM uint32_t  SUBSCRIBE_CONFIG;             /*!< (@ 0x00000080) Subscribe configuration for task CONFIG                    */
  __IOM uint32_t  SUBSCRIBE_CRYPT;              /*!< (@ 0x00000084) Subscribe configuration for task CRYPT                     */
  __IOM uint32_t  SUBSCRIBE_STOP;               /*!< (@ 0x00000088) Subscribe configuration for task STOP                      */
  __IOM uint32_t  SUBSCRIBE_RATEOVERRIDE;       /*!< (@ 0x0000008C) Subscribe configuration for task RATEOVERRIDE              */
  __IOM uint32_t  SUBSCRIBE_PROCESS;            /*!< (@ 0x00000090) Subscribe configuration for task PROCESS                   */
  __IM  uint32_t  RESERVED1[27];
  __IOM uint32_t  EVENTS_ENDCONFIG;             /*!< (@ 0x00000100) Configuration data has been loaded                         */
  __IOM uint32_t  EVENTS_ENDCRYPT;              /*!< (@ 0x00000104) Encrypt/decrypt complete                                   */
  __IOM uint32_t  EVENTS_ERROR;                 /*!< (@ 0x00000108) CCM error event                                            */
  __IM  uint32_t  RESERVED2[29];
  __IOM uint32_t  PUBLISH_ENDCONFIG;            /*!< (@ 0x00000180) Publish configuration for event ENDCONFIG                  */
  __IOM uint32_t  PUBLISH_ENDCRYPT;             /*!< (@ 0x00000184) Publish configuration for event ENDCRYPT                   */
  __IOM uint32_t  PUBLISH_ERROR;                /*!< (@ 0x00000188) Publish configuration for event ERROR                      */
  __IM  uint32_t  RESERVED3[29];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED4[64];
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED5[61];
  __IM  uint32_t  MACSTATUS;                    /*!< (@ 0x00000400) MAC check result                                           */
  __IM  uint32_t  ERRORSTATUS;                  /*!< (@ 0x00000404) Error status                                               */
  __IM  uint32_t  RESERVED6[62];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable                                                     */
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000504) Operation mode                                             */
  __IM  uint32_t  RESERVED7[2];
  __IOM CCM_KEY_Type KEY;                       /*!< (@ 0x00000510) Unspecified                                                */
  __IOM CCM_NONCE_Type NONCE;                   /*!< (@ 0x00000520) Unspecified                                                */
  __IOM uint32_t  INPTR;                        /*!< (@ 0x00000530) Input pointer Points to a job list containing
                                                                    unencrypted CCM data structure in Encryption
                                                                    mode Points to a job list containing encrypted
                                                                    CCM data structure in Decryption mode                      */
  __IM  uint32_t  INAMOUNT;                     /*!< (@ 0x00000534) Number of bytes read from the input data, not
                                                                    including the job list structure                           */
  __IOM uint32_t  OUTPTR;                       /*!< (@ 0x00000538) Output pointer Points to a job list containing
                                                                    encrypted CCM data structure in Encryption
                                                                    mode Points to a job list containing decrypted
                                                                    CCM data structure in Decryption mode                      */
  __IM  uint32_t  OUTAMOUNT;                    /*!< (@ 0x0000053C) Number of bytes available in the output data,
                                                                    not including the job list structure                       */
  __IOM uint32_t  RATEOVERRIDE;                 /*!< (@ 0x00000540) Data rate override setting.                                */
  __IOM uint32_t  ADATAMASK;                    /*!< (@ 0x00000544) CCM adata mask.                                            */
} NRF_CCM_Type;                                 /*!< Size = 1352 (0x548)                                                       */



/* =========================================================================================================================== */
/* ================                                           TEMP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Temperature Sensor (TEMP)
  */

typedef struct {                                /*!< (@ 0x41010000) TEMP Structure                                             */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start temperature measurement                              */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop temperature measurement                               */
  __IM  uint32_t  RESERVED[30];
  __IOM uint32_t  SUBSCRIBE_START;              /*!< (@ 0x00000080) Subscribe configuration for task START                     */
  __IOM uint32_t  SUBSCRIBE_STOP;               /*!< (@ 0x00000084) Subscribe configuration for task STOP                      */
  __IM  uint32_t  RESERVED1[30];
  __IOM uint32_t  EVENTS_DATARDY;               /*!< (@ 0x00000100) Temperature measurement complete, data ready               */
  __IM  uint32_t  RESERVED2[31];
  __IOM uint32_t  PUBLISH_DATARDY;              /*!< (@ 0x00000180) Publish configuration for event DATARDY                    */
  __IM  uint32_t  RESERVED3[95];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED4[125];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable temperature sensor bias current                     */
  __IOM int32_t   COUNTER;                      /*!< (@ 0x00000504) Prototype register containing counter values
                                                                    for timing                                                 */
  __IM  int32_t   TEMP;                         /*!< (@ 0x00000508) Temperature in degC (0.25deg steps)                        */
  __IM  int32_t   TEMPRAW;                      /*!< (@ 0x0000050C) Counted oscillator pulses which is equivalent
                                                                    to temperature without calibration and linearization       */
  __IM  uint32_t  DATA;                         /*!< (@ 0x00000510) Data after dec and calib                                   */
  __IOM uint32_t  CALIB;                        /*!< (@ 0x00000514) Calibration value.                                         */
  __IOM int32_t   TEMPSENSE_ANA_CONF;           /*!< (@ 0x00000518) Analog test bus control                                    */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  A0;                           /*!< (@ 0x00000520) Slope of 1st piece wise linear function                    */
  __IOM uint32_t  A1;                           /*!< (@ 0x00000524) Slope of 2nd piece wise linear function                    */
  __IOM uint32_t  A2;                           /*!< (@ 0x00000528) Slope of 3rd piece wise linear function                    */
  __IOM uint32_t  A3;                           /*!< (@ 0x0000052C) Slope of 4th piece wise linear function                    */
  __IOM uint32_t  A4;                           /*!< (@ 0x00000530) Slope of 5th piece wise linear function                    */
  __IOM uint32_t  A5;                           /*!< (@ 0x00000534) Slope of 6th piece wise linear function                    */
  __IOM uint32_t  A6;                           /*!< (@ 0x00000538) Slope of 7th piece wise linear function                    */
  __IM  uint32_t  RESERVED6;
  __IOM uint32_t  B0;                           /*!< (@ 0x00000540) y-intercept of 1st piece wise linear function              */
  __IOM uint32_t  B1;                           /*!< (@ 0x00000544) y-intercept of 2nd piece wise linear function              */
  __IOM uint32_t  B2;                           /*!< (@ 0x00000548) y-intercept of 3rd piece wise linear function              */
  __IOM uint32_t  B3;                           /*!< (@ 0x0000054C) y-intercept of 4th piece wise linear function              */
  __IOM uint32_t  B4;                           /*!< (@ 0x00000550) y-intercept of 5th piece wise linear function              */
  __IOM uint32_t  B5;                           /*!< (@ 0x00000554) y-intercept of 6th piece wise linear function              */
  __IOM uint32_t  B6;                           /*!< (@ 0x00000558) y-intercept of 7th piece wise linear function              */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  T0;                           /*!< (@ 0x00000560) End point of 1st piece wise linear function                */
  __IOM uint32_t  T1;                           /*!< (@ 0x00000564) End point of 2nd piece wise linear function                */
  __IOM uint32_t  T2;                           /*!< (@ 0x00000568) End point of 3rd piece wise linear function                */
  __IOM uint32_t  T3;                           /*!< (@ 0x0000056C) End point of 4th piece wise linear function                */
  __IOM uint32_t  T4;                           /*!< (@ 0x00000570) End point of 5th piece wise linear function                */
  __IOM uint32_t  T5;                           /*!< (@ 0x00000574) End point of 6th piece wise linear function                */
} NRF_TEMP_Type;                                /*!< Size = 1400 (0x578)                                                       */



/* =========================================================================================================================== */
/* ================                                           COMP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Comparator (COMP)
  */

typedef struct {                                /*!< (@ 0x4101A000) COMP Structure                                             */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start comparator                                           */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000004) Stop comparator                                            */
  __OM  uint32_t  TASKS_SAMPLE;                 /*!< (@ 0x00000008) Sample comparator value                                    */
  __IM  uint32_t  RESERVED[29];
  __IOM uint32_t  SUBSCRIBE_START;              /*!< (@ 0x00000080) Subscribe configuration for task START                     */
  __IOM uint32_t  SUBSCRIBE_STOP;               /*!< (@ 0x00000084) Subscribe configuration for task STOP                      */
  __IOM uint32_t  SUBSCRIBE_SAMPLE;             /*!< (@ 0x00000088) Subscribe configuration for task SAMPLE                    */
  __IM  uint32_t  RESERVED1[29];
  __IOM uint32_t  EVENTS_READY;                 /*!< (@ 0x00000100) COMP is ready and output is valid                          */
  __IOM uint32_t  EVENTS_DOWN;                  /*!< (@ 0x00000104) Downward crossing                                          */
  __IOM uint32_t  EVENTS_UP;                    /*!< (@ 0x00000108) Upward crossing                                            */
  __IOM uint32_t  EVENTS_CROSS;                 /*!< (@ 0x0000010C) Downward or upward crossing                                */
  __IM  uint32_t  RESERVED2[28];
  __IOM uint32_t  PUBLISH_READY;                /*!< (@ 0x00000180) Publish configuration for event READY                      */
  __IOM uint32_t  PUBLISH_DOWN;                 /*!< (@ 0x00000184) Publish configuration for event DOWN                       */
  __IOM uint32_t  PUBLISH_UP;                   /*!< (@ 0x00000188) Publish configuration for event UP                         */
  __IOM uint32_t  PUBLISH_CROSS;                /*!< (@ 0x0000018C) Publish configuration for event CROSS                      */
  __IM  uint32_t  RESERVED3[28];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED4[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED5[61];
  __IM  uint32_t  RESULT;                       /*!< (@ 0x00000400) Compare result                                             */
  __IM  uint32_t  BGREADY;                      /*!< (@ 0x00000404) COMP module is ready                                       */
  __IM  uint32_t  RESERVED6[62];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) COMP enable                                                */
  __IOM uint32_t  PSEL;                         /*!< (@ 0x00000504) Pin select                                                 */
  __IOM uint32_t  REFSEL;                       /*!< (@ 0x00000508) Reference source select for single-ended mode              */
  __IOM uint32_t  EXTREFSEL;                    /*!< (@ 0x0000050C) External reference select                                  */
  __IOM uint32_t  REFTEMPC;                     /*!< (@ 0x00000510) Trim for temperature coefficient                           */
  __IOM uint32_t  BUFFER;                       /*!< (@ 0x00000514) Enable unity gain buffer                                   */
  __IOM uint32_t  CTRL;                         /*!< (@ 0x00000518) Spare signals                                              */
  __IOM uint32_t  MUTESEL;                      /*!< (@ 0x0000051C) Disconnect PSEL/EXTREFSEL                                  */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  RETAIN;                       /*!< (@ 0x00000524) Retain signal                                              */
  __IM  uint32_t  RESERVED8[2];
  __IOM uint32_t  TH;                           /*!< (@ 0x00000530) Threshold configuration for hysteresis unit                */
  __IOM uint32_t  MODE;                         /*!< (@ 0x00000534) Mode configuration                                         */
  __IOM uint32_t  HYST;                         /*!< (@ 0x00000538) Comparator hysteresis enable                               */
  __IOM uint32_t  ISOURCE;                      /*!< (@ 0x0000053C) Current source select on analog input                      */
  __IOM uint32_t  REFTRIM;                      /*!< (@ 0x00000540) Trim internal band gap reference                           */
  __IOM uint32_t  ATECOMP;                      /*!< (@ 0x00000544) Analog test bus control for comparator                     */
} NRF_COMP_Type;                                /*!< Size = 1352 (0x548)                                                       */



/* =========================================================================================================================== */
/* ================                                           SAADC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to Digital Converter (SAADC)
  */

typedef struct {                                /*!< (@ 0x4101C000) SAADC Structure                                            */
  __OM  uint32_t  TASKS_START;                  /*!< (@ 0x00000000) Start the ADC and prepare the result buffer in
                                                                    RAM                                                        */
  __OM  uint32_t  TASKS_SAMPLE;                 /*!< (@ 0x00000004) Take one ADC sample, if scan is enabled all channels
                                                                    are sampled                                                */
  __OM  uint32_t  TASKS_STOP;                   /*!< (@ 0x00000008) Stop the ADC and terminate any on-going conversion         */
  __OM  uint32_t  TASKS_CALIBRATEOFFSET;        /*!< (@ 0x0000000C) Starts offset auto-calibration                             */
  __OM  uint32_t  TASKS_CALIBRATEGAIN;          /*!< (@ 0x00000010) Starts gain auto-calibration                               */
  __IM  uint32_t  RESERVED[27];
  __IOM uint32_t  SUBSCRIBE_START;              /*!< (@ 0x00000080) Subscribe configuration for task START                     */
  __IOM uint32_t  SUBSCRIBE_SAMPLE;             /*!< (@ 0x00000084) Subscribe configuration for task SAMPLE                    */
  __IOM uint32_t  SUBSCRIBE_STOP;               /*!< (@ 0x00000088) Subscribe configuration for task STOP                      */
  __IOM uint32_t  SUBSCRIBE_CALIBRATEOFFSET;    /*!< (@ 0x0000008C) Subscribe configuration for task CALIBRATEOFFSET           */
  __IOM uint32_t  SUBSCRIBE_CALIBRATEGAIN;      /*!< (@ 0x00000090) Subscribe configuration for task CALIBRATEGAIN             */
  __IM  uint32_t  RESERVED1[27];
  __IOM uint32_t  EVENTS_STARTED;               /*!< (@ 0x00000100) The ADC has started                                        */
  __IOM uint32_t  EVENTS_END;                   /*!< (@ 0x00000104) The ADC has filled up the Result buffer                    */
  __IOM uint32_t  EVENTS_DONE;                  /*!< (@ 0x00000108) A conversion task has been completed. Depending
                                                                    on the mode, multiple conversions might
                                                                    be needed for a result to be transferred
                                                                    to RAM.                                                    */
  __IOM uint32_t  EVENTS_RESULTDONE;            /*!< (@ 0x0000010C) A result is ready to get transferred to RAM.
                                                                    Result is available in REGRESULT register                  */
  __IOM uint32_t  EVENTS_CALIBRATEDONE;         /*!< (@ 0x00000110) Calibration is complete                                    */
  __IOM uint32_t  EVENTS_STOPPED;               /*!< (@ 0x00000114) The ADC has stopped                                        */
  __IOM SAADC_EVENTS_CH_Type EVENTS_CH[8];      /*!< (@ 0x00000118) Peripheral events.                                         */
  __IOM uint32_t  EVENTS_AHBERROR;              /*!< (@ 0x00000158) EasyDMA encountered AHB error.                             */
  __IM  uint32_t  RESERVED2[9];
  __IOM uint32_t  PUBLISH_STARTED;              /*!< (@ 0x00000180) Publish configuration for event STARTED                    */
  __IOM uint32_t  PUBLISH_END;                  /*!< (@ 0x00000184) Publish configuration for event END                        */
  __IOM uint32_t  PUBLISH_DONE;                 /*!< (@ 0x00000188) Publish configuration for event DONE                       */
  __IOM uint32_t  PUBLISH_RESULTDONE;           /*!< (@ 0x0000018C) Publish configuration for event RESULTDONE                 */
  __IOM uint32_t  PUBLISH_CALIBRATEDONE;        /*!< (@ 0x00000190) Publish configuration for event CALIBRATEDONE              */
  __IOM uint32_t  PUBLISH_STOPPED;              /*!< (@ 0x00000194) Publish configuration for event STOPPED                    */
  __IOM SAADC_PUBLISH_CH_Type PUBLISH_CH[8];    /*!< (@ 0x00000198) Publish configuration for events                           */
  __IOM uint32_t  PUBLISH_AHBERROR;             /*!< (@ 0x000001D8) Publish configuration for event AHBERROR                   */
  __IM  uint32_t  RESERVED3[9];
  __IOM uint32_t  SHORTS;                       /*!< (@ 0x00000200) Shortcuts between local events and tasks                   */
  __IM  uint32_t  RESERVED4[63];
  __IOM uint32_t  INTEN;                        /*!< (@ 0x00000300) Enable or disable interrupt                                */
  __IOM uint32_t  INTENSET;                     /*!< (@ 0x00000304) Enable interrupt                                           */
  __IOM uint32_t  INTENCLR;                     /*!< (@ 0x00000308) Disable interrupt                                          */
  __IM  uint32_t  RESERVED5[61];
  __IM  uint32_t  STATUS;                       /*!< (@ 0x00000400) Status                                                     */
  __IM  uint32_t  RESERVED6[63];
  __IOM uint32_t  ENABLE;                       /*!< (@ 0x00000500) Enable or disable ADC                                      */
  __IM  uint32_t  RESERVED7[3];
  __IOM SAADC_CH_Type CH[8];                    /*!< (@ 0x00000510) Unspecified                                                */
  __IM  uint32_t  RESERVED8[23];
  __IM  uint32_t  REGRESULT;                    /*!< (@ 0x000005EC) Last conversion result                                     */
  __IOM uint32_t  RESOLUTION;                   /*!< (@ 0x000005F0) Resolution configuration                                   */
  __IOM uint32_t  OVERSAMPLE;                   /*!< (@ 0x000005F4) Oversampling configuration. OVERSAMPLE should
                                                                    not be combined with SCAN. The RESOLUTION
                                                                    is applied before averaging, thus for high
                                                                    OVERSAMPLE a higher RESOLUTION should be
                                                                    used.                                                      */
  __IOM uint32_t  SAMPLERATE;                   /*!< (@ 0x000005F8) Controls normal or continuous sample rate                  */
  __IM  uint32_t  RESERVED9[12];
  __IOM SAADC_RESULT_Type RESULT;               /*!< (@ 0x0000062C) RESULT EasyDMA channel                                     */
  __IM  uint32_t  RESERVED10;
  __IOM uint32_t  TESTCTRL;                     /*!< (@ 0x0000063C) Control signals used during test of ADC                    */
  __IOM uint32_t  CALOFFSET;                    /*!< (@ 0x00000640) Calibration control for offset error                       */
  __IOM uint32_t  CALGAIN;                      /*!< (@ 0x00000644) Calibration control for gain error                         */
  __IOM uint32_t  CALVREF;                      /*!< (@ 0x00000648) Calibration control for reference voltage                  */
  __IOM uint32_t  CALIREF;                      /*!< (@ 0x0000064C) Calibration control for reference current                  */
  __IOM uint32_t  CALVREFTC;                    /*!< (@ 0x00000650) Calibration code for reference temperature coefficient     */
  __IOM uint32_t  NOISESHAPE;                   /*!< (@ 0x00000654) Enable noise shaping                                       */
  __IOM uint32_t  EASYDMAMODE;                  /*!< (@ 0x00000658) Configure EasyDMA mode.                                    */
  __IM  uint32_t  RESERVED11;
  __IOM uint32_t  TERMINATEONAHBERROR;          /*!< (@ 0x00000660) Enable EasyDMA termination on AHB error                    */
  __IOM uint32_t  AHBERRORADDRESS;              /*!< (@ 0x00000664) Address of the last AHB error transaction                  */
} NRF_SAADC_Type;                               /*!< Size = 1640 (0x668)                                                       */



/* =========================================================================================================================== */
/* ================                                       GPIOINTERNAL                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Static (GPIOINTERNAL)
  */

typedef struct {                                /*!< (@ 0x418C0500) GPIOINTERNAL Structure                                     */
  __IM  uint32_t  RESERVED[896];
  __IOM uint32_t  LATCHCLRWAITCNT;              /*!< (@ 0x00000E00) Select the number of wait cycles inserted on
                                                                    the bus when a LATCH register is cleared.
                                                                    Note: this register is only accessible from
                                                                    secure code.                                               */
  __IOM uint32_t  FORCELDETECTLOWCNT;           /*!< (@ 0x00000E04) Select the number of cycles that LDETECT is forced
                                                                    low after clearing a LATCH register. Note:
                                                                    this register is only accessible from secure
                                                                    code.                                                      */
  __IOM uint32_t  RESET;                        /*!< (@ 0x00000E08) Reset all GPIO registers. Note: this register
                                                                    is only accessible from secure code.                       */
  __IOM uint32_t  SENSECONFIGCHANGECNT;         /*!< (@ 0x00000E0C) Selects the number of cycles before the SENSE
                                                                    configuration takes effect when it is changed.
                                                                    Setting this register lower than the reset
                                                                    value can lead to unwanted LATCH set when
                                                                    SENSE and INPUT fields (PIN_CNF) are changed
                                                                    simultaneously. Note: this register is only
                                                                    accessible from secure code.                               */
} NRF_GPIOSTATIC_Type;                          /*!< Size = 3600 (0xe10)                                                       */



/* =========================================================================================================================== */
/* ================                                            P0                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Port (P0)
  */

typedef struct {                                /*!< (@ 0x418C0500) P0 Structure                                               */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  OUT;                          /*!< (@ 0x00000004) Write GPIO port                                            */
  __IOM uint32_t  OUTSET;                       /*!< (@ 0x00000008) Set individual bits in GPIO port                           */
  __IOM uint32_t  OUTCLR;                       /*!< (@ 0x0000000C) Clear individual bits in GPIO port                         */
  __IM  uint32_t  IN;                           /*!< (@ 0x00000010) Read GPIO port                                             */
  __IOM uint32_t  DIR;                          /*!< (@ 0x00000014) Direction of GPIO pins                                     */
  __IOM uint32_t  DIRSET;                       /*!< (@ 0x00000018) DIR set register                                           */
  __IOM uint32_t  DIRCLR;                       /*!< (@ 0x0000001C) DIR clear register                                         */
  __IOM uint32_t  LATCH;                        /*!< (@ 0x00000020) Latch register indicating what GPIO pins that
                                                                    have met the criteria set in the PIN_CNF[n].SENSE
                                                                    registers                                                  */
  __IOM uint32_t  DETECTMODE;                   /*!< (@ 0x00000024) Select between default DETECT signal behavior
                                                                    and LDETECT mode (For non-secure pin only)                 */
  __IOM uint32_t  DETECTMODE_SEC;               /*!< (@ 0x00000028) Select between default DETECT signal behavior
                                                                    and LDETECT mode (For secure pin only)                     */
  __IM  uint32_t  RESERVED1[53];
  __IOM GPIO_PIN_Type PIN[32];                  /*!< (@ 0x00000100) Pin n direct access                                        */
  __IOM uint32_t  PIN_CNF[32];                  /*!< (@ 0x00000200) Description collection: Configuration of GPIO
                                                                    pins                                                       */
} NRF_GPIO_Type;                                /*!< Size = 640 (0x280)                                                        */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define NRF_RADIO_BASE              0x41008000UL
#define NRF_ECB_BASE                0x4100D000UL
#define NRF_AAR_BASE                0x4100E000UL
#define NRF_CCM_BASE                0x4100E000UL
#define NRF_TEMP_BASE               0x41010000UL
#define NRF_COMP_BASE               0x4101A000UL
#define NRF_SAADC_BASE              0x4101C000UL
#define NRF_GPIOINTERNAL_BASE       0x418C0500UL
#define NRF_P0_BASE                 0x418C0500UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define NRF_RADIO                   ((NRF_RADIO_Type*)         NRF_RADIO_BASE)
#define NRF_ECB                     ((NRF_ECB_Type*)           NRF_ECB_BASE)
#define NRF_AAR                     ((NRF_AAR_Type*)           NRF_AAR_BASE)
#define NRF_CCM                     ((NRF_CCM_Type*)           NRF_CCM_BASE)
#define NRF_TEMP                    ((NRF_TEMP_Type*)          NRF_TEMP_BASE)
#define NRF_COMP                    ((NRF_COMP_Type*)          NRF_COMP_BASE)
#define NRF_SAADC                   ((NRF_SAADC_Type*)         NRF_SAADC_BASE)
#define NRF_GPIOINTERNAL            ((NRF_GPIOSTATIC_Type*)    NRF_GPIOINTERNAL_BASE)
#define NRF_P0                      ((NRF_GPIO_Type*)          NRF_P0_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


#ifdef __cplusplus
}
#endif

#endif /* NRF54LILIUM_NETWORK_H */


/** @} */ /* End of group nrf54lilium_network */

/** @} */ /* End of group Nordic Semiconductor */
